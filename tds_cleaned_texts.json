[
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Data Analysis with SQL",
    "filename": "Data_Analysis_with_SQL.md",
    "text": "Data Analysis with SQL\n----------------------------------------------------------------------------\n\n[](https://youtu.be/Xn3QkYrThbI)\n\nYou’ll learn how to perform data analysis using SQL (via Python), covering:\n\n Database Connection: How to connect to a MySQL database using SQLAlchemy and Pandas.\n SQL Queries: Execute SQL queries directly from a Python environment to retrieve and analyze data.\n Counting Rows: Use SQL to count the number of rows in a table.\n User Activity Analysis: Query and identify top users by post count.\n Post Concentration: Determine if a small percentage of users contribute the majority of posts using SQL aggregation.\n Correlation Calculation: Calculate the Pearson correlation coefficient between user attributes such as age and reputation.\n Regression Analysis: Compute the regression slope to understand the relationship between views and reputation.\n Handling Large Data: Perform calculations on large datasets by fetching aggregated values from the database rather than entire datasets.\n Statistical Analysis in SQL: Use SQL as a tool for statistical analysis, demonstrating its power beyond simple data retrieval.\n Leveraging AI: Use ChatGPT to generate SQL queries and Python code, enhancing productivity and accuracy.\n\nHere are the links used in the video:\n\n Data analysis with databases - Notebook\n SQLZoo has simple interactive tutorials to learn SQL\n Stats database that has an anonymized dump of stats.stackexchange.com\n Pandas readsql\n SQLAlchemy docs\n\nPrevious\n\nData Analysis with Python\n\nNext\n\nData Analysis with Datasette"
  },
  {
    "title": "Scraping IMDb with JavaScript",
    "filename": "Scraping_IMDb_with_JavaScript.md",
    "text": "Scraping IMDb with JavaScript\n-------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/YVIKZqZIcCo)\n\nYou’ll learn how to scrape the IMDb Top 250 movies directly in the browser using JavaScript on the Chrome DevTools, covering:\n\n Access Developer Tools: Use F12 or right-click > Inspect to open developer tools in Chrome or Edge.\n Inspect Elements: Identify and inspect HTML elements using the Elements tab.\n Query Selectors: Use document.querySelectorAll and document.querySelector to find elements by CSS class.\n Extract Text Content: Retrieve text content from elements using JavaScript.\n Functional Programming: Apply map\n  and arrow functions\n  for concise data processing.\n Data Structuring: Collect and format data into an array of arrays.\n Copying Data: Use the copy function to transfer data to the clipboard.\n Convert to Spreadsheet: Use online tools to convert JSON data to CSV or Excel format.\n Text Manipulation: Perform text splitting and cleaning in Excel for final data formatting.\n\nHere are links and references:\n\n IMDB Top 250 movies\n Learn about Chrome Devtools\n\nPrevious\n\nBBC Weather API with Python\n\nNext\n\nNominatim API with Python"
  },
  {
    "title": "Editor: VS Code",
    "filename": "Editor__VS_Code.md",
    "text": "Editor: VS Code\n---------------------------------------------\n\nYour editor is the most important tool in your arsenal. That’s where you’ll spend most of your time. Make sure you’re comfortable with it.\n\nVisual Studio Code is, by far, the most popular code editor today. According to the 2024 StackOverflow Survey almost 75% of developers use it. We recommend you learn it well. Even if you use another editor, you’ll be working with others who use it, and it’s a good idea to have some exposure.\n\nWatch these introductory videos (35 min) from the Visual Studio Docs to get started:\n\n Getting Started: Set up and learn the basics of Visual Studio Code. (7 min)\n Code Editing: Learn how to edit and run code in VS Code. (3 min)\n Productivity Tips: Become a VS Code power user with these productivity tips. (4 min)\n Personalize: Personalize VS Code to make it yours with themes. (2 min)\n Extensions: Add features, themes, and more to VS Code with extensions! (4 min)\n Debugging: Get started with debugging in VS Code. (6 min)\n Version Control: Learn how to use Git version control in VS Code. (3 min)\n Customize: Learn how to customize your settings and keyboard shortcuts in VS Code. (6 min)\n\nPrevious\n\n1. Development Tools\n\nNext\n\nAI Code Editors: GitHub Copilot"
  },
  {
    "title": "Visualizing Animated Data with Flourish",
    "filename": "Visualizing_Animated_Data_with_Flourish.md",
    "text": "Visualizing Animated Data with Flourish\n-------------------------------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/JrnIu5Bm8i4)\n\nPrevious\n\nVisualizing Animated Data with PowerPoint\n\nNext\n\nVisualizing Network Data with Kumu"
  },
  {
    "title": "Embeddings",
    "filename": "Embeddings.md",
    "text": "Embeddings: OpenAI and Local Models\n-----------------------------------------------------------------------------------------\n\nEmbedding models convert text into a list of numbers. These are like a map of text in numerical form. Each number represents a feature, and similar texts will have numbers close to each other. So, if the numbers are similar, the text they represent mean something similar.\n\nThis is useful because text similarity is important in many common problems:\n\n1. Search. Find similar documents to a query.\n2. Classification. Classify text into categories.\n3. Clustering. Group similar items into clusters.\n4. Anomaly Detection. Find an unusual piece of text.\n\nYou can run embedding models locally or using an API. Local models are better for privacy and cost. APIs are better for scale and quality.\n\n| Feature | Local Models | API |\n| --- | --- | --- |\n| Privacy | High | Dependent on provider |\n| Cost | High setup, low after that | Pay-as-you-go |\n| Scale | Limited by local resources | Easily scales with demand |\n| Quality | Varies by model | Typically high |\n\nThe Massive Text Embedding Benchmark (MTEB) provides comprehensive comparisons of embedding models. These models are compared on several parameters, but here are some key ones to look at:\n\n1. Rank. Higher ranked models have higher quality.\n2. Memory Usage. Lower is better (for similar ranks). It costs less and is faster to run.\n3. Embedding Dimensions. Lower is better. This is the number of numbers in the array. Smaller dimensions are cheaper to store.\n4. Max Tokens. Higher is better. This is the number of input tokens (words) the model can take in a single input.\n5. Look for higher scores in the columns for Classification, Clustering, Summarization, etc. based on your needs.\n\nLocal Embeddings\n\n[](https://youtu.be/OATCgQtNX2o)\n\nHere’s a minimal example using a local embedding model:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"sentence-transformers\",\n\"httpx\",\n\"numpy\",\n]\n///\n\nfrom sentencetransformers import SentenceTransformer\nimport numpy as np\n\nmodel = SentenceTransformer('BAAI/bge-base-en-v1.5')   A small, high quality model\n\nasync def embed(text: str) -> list[float]:\n    \"\"\"Get embedding vector for text using local model.\"\"\"\n    return model.encode(text).tolist()\n\nasync def getsimilarity(text1: str, text2: str) -> float:\n    \"\"\"Calculate cosine similarity between two texts.\"\"\"\n    emb1 = np.array(await embed(text1))\n    emb2 = np.array(await embed(text2))\n    return float(np.dot(emb1, emb2) / (np.linalg.norm(emb1)  np.linalg.norm(emb2)))\n\nasync def main():\n    print(await getsimilarity(\"Apple\", \"Orange\"))\n    print(await getsimilarity(\"Apple\", \"Lightning\"))\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nNote the getsimilarity function. It uses a Cosine Similarity to calculate the similarity between two embeddings.\n\nOpenAI Embeddings\n\nFor comparison, here’s how to use OpenAI’s API with direct HTTP calls. Replace the embed function in the earlier script:\n\nimport os\nimport httpx\n\nasync def embed(text: str) -> list[float]:\n    \"\"\"Get embedding vector for text using OpenAI's API.\"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            \"https://api.openai.com/v1/embeddings\",\n            headers={\"Authorization\": f\"Bearer {os.environ['OPENAIAPIKEY']}\"},\n            json={\"model\": \"text-embedding-3-small\", \"input\": text}\n        )\n        return response.json()[\"data\"][0][\"embedding\"]Copy to clipboardErrorCopied\n\nNOTE: You need to set the OPENAIAPIKEY environment variable for this to work.\n\nPrevious\n\nVision Models\n\nNext\n\nMultimodal Embeddings"
  },
  {
    "title": "Extracting Audio and Transcripts",
    "filename": "Extracting_Audio_and_Transcripts.md",
    "text": "Extracting Audio and Transcripts\n----------------------------------------------------------------------------------------------------------\n\nMedia Processing: FFmpeg\n-----------------------------------------------------------------------------------------\n\nFFmpeg is the standard command-line tool for processing video and audio files. It’s essential for data scientists working with media files for:\n\n Extracting audio/video for machine learning\n Converting formats for web deployment\n Creating visualizations and presentations\n Processing large media datasets\n\nBasic Operations:\n\nBasic conversion\nffmpeg -i input.mp4 output.avi\n\nExtract audio\nffmpeg -i input.mp4 -vn output.mp3\n\nConvert format without re-encoding\nffmpeg -i input.mkv -c copy output.mp4\n\nHigh quality encoding (crf: 0-51, lower is better)\nffmpeg -i input.mp4 -preset slower -crf 18 output.mp4Copy to clipboardErrorCopied\n\nCommon Data Science Tasks:\n\nExtract frames for computer vision\nffmpeg -i input.mp4 -vf \"fps=1\" frames%04d.png     1 frame per second\nffmpeg -i input.mp4 -vf \"select='eq(n,0)'\" -vframes 1 firstframe.jpg\n\nCreate video from image sequence\nffmpeg -r 1/5 -i img%03d.png -c:v libx264 -vf fps=25 output.mp4\n\nExtract audio for speech recognition\nffmpeg -i input.mp4 -ar 16000 -ac 1 audio.wav       16kHz mono\n\nTrim video/audio for training data\nffmpeg -ss 00:01:00 -i input.mp4 -t 00:00:30 -c copy clip.mp4Copy to clipboardErrorCopied\n\nProcessing Multiple Files:\n\nConcatenate videos (first create files.txt with list of files)\necho \"file 'input1.mp4'\nfile 'input2.mp4'\" > files.txt\nffmpeg -f concat -i files.txt -c copy output.mp4\n\nBatch process with shell loop\nfor f in .mp4; do\n    ffmpeg -i \"$f\" -vn \"audio/${f%.mp4}.wav\"\ndoneCopy to clipboardErrorCopied\n\nData Analysis Features:\n\nGet media file information\nffprobe -v quiet -printformat json -showformat -showstreams input.mp4\n\nDisplay frame metadata\nffprobe -v quiet -printformat json -showframes input.mp4\n\nGenerate video thumbnails\nffmpeg -i input.mp4 -vf \"thumbnail\" -frames:v 1 thumb.jpgCopy to clipboardErrorCopied\n\nWatch this introduction to FFmpeg (12 min):\n\n[](https://youtu.be/MPV7JXTWPWI)\n\nTools:\n\n ffmpeg.lav.io: Interactive command builder\n FFmpeg Explorer: Visual FFmpeg command generator\n FFmpeg Buddy: Simple command generator\n\nTips:\n\n1. Use -c copy when possible to avoid re-encoding\n2. Monitor progress with -progress pipe:1\n3. Use -hidebanner to reduce output verbosity\n4. Test commands with small clips first\n5. Use hardware acceleration when available (-hwaccel auto)\n\nError Handling:\n\nValidate file before processing\nffprobe input.mp4 2>&1 | grep \"Invalid\"\n\nContinue on errors in batch processing\nffmpeg -i input.mp4 output.mp4 -xerror\n\nGet detailed error information\nffmpeg -v error -i input.mp4 2>&1 | grep -A2 \"Error\"Copy to clipboardErrorCopied\n\nMedia tools: yt-dlp\n-------------------------------------------------------------------------------\n\nyt-dlp is a feature-rich command-line tool for downloading audio/video from thousands of sites. It’s particularly useful for extracting audio and transcripts from videos.\n\nInstall using your package manager:\n\nmacOS\nbrew install yt-dlp\n\nLinux\ncurl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /.local/bin/yt-dlp\nchmod a+rx /.local/bin/yt-dlp\n\nWindows\nwinget install yt-dlpCopy to clipboardErrorCopied\n\nCommon operations for extracting audio and transcripts:\n\nDownload audio only at lowest quality suitable for speech\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       \"https://www.youtube.com/watch?v=VIDEOID\"\n\nDownload auto-generated subtitles\nyt-dlp --write-auto-sub \\\n       --skip-download \\\n       --sub-format \"srt\" \\\n       \"https://www.youtube.com/watch?v=VIDEOID\"\n\nDownload both audio and subtitles with custom output template\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       --write-auto-sub \\\n       --sub-format \"srt\" \\\n       -o \"%(title)s.%(ext)s\" \\\n       \"https://www.youtube.com/watch?v=VIDEOID\"\n\nDownload entire playlist's audio\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       -o \"%(playlistindex)s-%(title)s.%(ext)s\" \\\n       \"https://www.youtube.com/playlist?list=PLAYLISTID\"Copy to clipboardErrorCopied\n\nFor Python integration:\n\n/// script\nrequires-python = \">=3.9\"\ndependencies = [\"yt-dlp\"]\n///\n\nimport ytdlp\n\ndef downloadaudio(url: str) -> None:\n    \"\"\"Download audio at speech-optimized quality.\"\"\"\n    ydlopts = {\n        'format': 'ba[abr<50]/worstaudio',\n        'postprocessors': [{\n            'key': 'FFmpegExtractAudio',\n            'preferredcodec': 'mp3',\n            'preferredquality': '32'\n        }]\n    }\n\n    with ytdlp.YoutubeDL(ydlopts) as ydl:\n        ydl.download([url])\n\nExample usage\ndownloadaudio('https://www.youtube.com/watch?v=VIDEOID')Copy to clipboardErrorCopied\n\nTools:\n\n ffmpeg: Required for audio extraction and conversion\n whisper: Can be used with yt-dlp for speech-to-text\n gallery-dl: Alternative for image-focused sites\n\nNote: Always respect copyright and terms of service when downloading content.\n\nWhisper transcription\n------------------------------------------------------------------------------------\n\nFaster Whisper is a highly optimized implementation of OpenAI’s Whisper model, offering up to 4x faster transcription while using less memory.\n\nYou can install it via:\n\n pip install faster-whisper\n Download Windows Standalone\n\nHere’s a basic usage example:\n\nfaster-whisper-xxl \"video.mp4\" --model medium --language enCopy to clipboardErrorCopied\n\nHere’s my recommendation for transcribing videos. This saves the output in JSON as well as SRT format in the source directory.\n\nfaster-whisper-xxl --printprogress --outputdir source --batchrecursive \\\n                   --checkfiles --standard --outputformat json srt \\\n                   --model medium --language en $FILECopy to clipboardErrorCopied\n\n --model: The OpenAI Whisper model to use. You can choose from:\n  + tiny: Fastest but least accurate\n  + base: Good for simple audio\n  + small: Balanced speed/accuracy\n  + medium: Recommended default\n  + large-v3: Most accurate but slowest\n --outputformat: The output format to use. You can pick multiple formats from:\n  + json: Has the most detailed information including timing, text, quality, etc.\n  + srt: A popular subtitle format. You can use this in YouTube, for example.\n  + vtt: A modern subtitle format.\n  + txt: Just the text transcript\n --outputdir: The directory to save the output files. source indicates the source directory, i.e. where the input $FILE is\n --language: The language of the input file. If you don’t specify it, it analyzes the first 30 seconds to auto-detect. You can speed it up by specifying it.\n\nRun faster-whisper-xxl --help for more options.\n\nGemini transcription\n----------------------------------------------------------------------------------\n\nThe Gemini models from Google are notable in two ways:\n\n1. They have a huge input context window. Gemini 2.0 Flash can accept 1M tokens, for example.\n2. They can handle audio input.\n\nThis allows us to use Gemini to transcribe audio files.\n\nLLMs are not good at transcribing audio faithfully. They tend to correct errors and meander from what was said. But they are intelligent. That enables a few powerful workflows. Here are some examples:\n\n1. Transcribe into other languages. Gemini will handle the transcription and translation in a single step.\n2. Summarize audio transcripts. For example, convert a podcast into a tutorial, or a meeting recording into actions.\n3. Legal Proceeding Analysis. Extract case citations, dates, and other details from a legal debate.\n4. Medical Consultation Summary. Extract treatments, medications, details of next visit, etc. from a medical consultation.\n\nHere’s how to use Gemini to transcribe audio files.\n\n1. Get a Gemini API key from Google AI Studio.\n2. Set the GEMINIAPIKEY environment variable to the API key.\n3. Set the MP3FILE environment variable to the path of the MP3 file you want to transcribe.\n4. Run this code:\n\n   \n   curl -X POST https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-002:streamGenerateContent?alt=sse \\\n     -H \"X-Goog-API-Key: $GEMINIAPIKEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d \"$(cat << EOF\n   {\n     \"contents\": [\n       {\n         \"role\": \"user\",\n         \"parts\": [\n           {\n             \"inlinedata\": {\n               \"mimetype\": \"audio/mp3\",\n               \"data\": \"$(base64 --wrap=0 $MP3FILE)\"\n             }\n           },\n           {\"text\": \"Transcribe this\"}\n         ]\n       }\n     ]\n   }\n   EOF\n   )\"Copy to clipboardErrorCopied\n   \n\nPrevious\n\nTransforming Images\n\nNext\n\n6. Data Analysis"
  },
  {
    "title": "JavaScript tools: npx",
    "filename": "JavaScript_tools__npx.md",
    "text": "JavaScript tools: npx\n------------------------------------------------------\n\nnpx is a command-line tool that comes with npm (Node Package Manager) and allows you to execute npm package binaries and run one-off commands without installing them globally. It’s essential for modern JavaScript development and data science workflows.\n\nFor data scientists, npx is useful when:\n\n Running JavaScript-based data visualization tools\n Converting notebooks and documents\n Testing and formatting code\n Running development servers\n\nHere are common npx commands:\n\nRun a package without installing\nnpx http-server .                 Start a local web server\nnpx prettier --write .            Format code or docs\nnpx eslint .                      Lint JavaScript\nnpx typescript-node script.ts     Run TypeScript directly\nnpx esbuild app.js                Bundle JavaScript\nnpx jsdoc .                       Generate JavaScript docs\n\nRun specific versions\nnpx prettier@3.2 --write .         Use prettier 3.2\n\nExecute remote scripts (use with caution!)\nnpx github:user/repo             Run from GitHubCopy to clipboardErrorCopied\n\nWatch this introduction to npx (6 min):\n\n[](https://youtu.be/55WaAoZVtQ)\n\nPrevious\n\nPython tools: uv\n\nNext\n\nUnicode"
  },
  {
    "title": "Scraping with Excel",
    "filename": "Scraping_with_Excel.md",
    "text": "Scraping with Excel\n-------------------------------------------------------------------\n\n[](https://youtu.be/OCl6UdpmzRQ)\n\nYou’ll learn how to import tables on the web using Excel, covering:\n\n Data Import from Web: Use the query feature in Excel to scrape data from websites.\n Establishing Web Connections: Connect Excel to a web page using a URL.\n Using Query Editor: Navigate the query editor to view and manage web data tables.\n Loading Data: Load data from the web into Excel for further manipulation.\n Data Transformation: Remove unnecessary columns and transform data as needed.\n Applying Transformations: Track applied steps in the sequence for reproducibility.\n Refreshing Data: Refresh the imported data to get the latest updates from the web.\n\nHere are links used in the video:\n\n Chennai Weather Forecast\n Excel Scraping Workbook\n\nIf you use Excel on Mac, the process is a bit different. See Importing External Data Into Excel on Mac.\n\nPrevious\n\n4. Data Sourcing\n\nNext\n\nScraping with Google Sheets"
  },
  {
    "title": "Containers: Docker, Podman",
    "filename": "Containers__Docker,_Podman.md",
    "text": "Containers: Docker, Podman\n------------------------------------------------------------------\n\nDocker and Podman are containerization tools that package your application and its dependencies into a standardized unit for software development and deployment.\n\nDocker is the industry standard. Podman is compatible with Docker and has better security (and a slightly more open license). In this course, we recommend Podman but Docker works in the same way.\n\nInitialize the container engine:\n\npodman machine init\npodman machine startCopy to clipboardErrorCopied\n\nCommon Operations. (You can use docker instead of podman in the same way.)\n\nPull an image\npodman pull python:3.11-slim\n\nRun a container\npodman run -it python:3.11-slim\n\nList containers\npodman ps -a\n\nStop container\npodman stop containerid\n\nScan image for vulnerabilities\npodman scan myapp:latest\n\nRemove container\npodman rm containerid\n\nRemove all stopped containers\npodman container pruneCopy to clipboardErrorCopied\n\nYou can create a Dockerfile to build a container image. Here’s a sample Dockerfile that converts a Python script into a container image.\n\nFROM python:3.11-slim\nSet working directory\nWORKDIR /app\nTypically, you would use COPY . . to copy files from the host machine,\nbut here we're just using a simple script.\nRUN echo 'print(\"Hello, world!\")' > app.py\nRun the script\nCMD [\"python\", \"app.py\"]Copy to clipboardErrorCopied\n\nTo build, run, and deploy the container, run these commands:\n\nCreate an account on https://hub.docker.com/ and then login\npodman login docker.io\n\nBuild and run the container\npodman build -t py-hello .\npodman run -it py-hello\n\nPush the container to Docker Hub. Replace $DOCKERHUBUSERNAME with your Docker Hub username.\npodman push py-hello:latest docker.io/$DOCKERHUBUSERNAME/py-hello\n\nPush adding a specific tag, e.g. dev\nTAG=dev podman push py-hello docker.io/$DOCKERHUBUSERNAME/py-hello:$TAGCopy to clipboardErrorCopied\n\nTools:\n\n Dive: Explore image layers\n Skopeo: Work with container images\n Trivy: Security scanner\n\n[](https://youtu.be/YXfA5O5Mr18)\n\n[](https://youtu.be/gAkwW2tuIqE)\n\n Optional: For Windows, see WSL 2 with Docker getting started\n\nPrevious\n\nCI/CD: GitHub Actions\n\nNext\n\nDevContainers: GitHub Codespaces"
  },
  {
    "title": "Version Control: Git, GitHub",
    "filename": "Version_Control__Git,_GitHub.md",
    "text": "Version Control: Git, GitHub\n-------------------------------------------------------------------\n\nGit is the de facto standard for version control of software (and sometimes, data as well). It’s a system that keeps track of changes you make to files and folders. It allows you to revert to a previous state, compare changes, etc. It’s a central tool in any developer’s workflow.\n\nGitHub is the most popular hosting service for Git repositories. It’s a website that shows your code, allows you to collaborate with others, and provides many useful tools for developers.\n\nWatch these introductory videos to learn the basics of Git and GitHub (98 min):\n\n[](https://youtu.be/HVsySz-h9r4)\n\n[](https://youtu.be/RGOj5yH7evk)\n\nEssential Git Commands:\n\nRepository Setup\ngit init                    Create new repo\ngit clone url               Clone existing repo\ngit remote add origin url   Connect to remote\n\nBasic Workflow\ngit status                  Check status\ngit add .                   Stage all changes\ngit commit -m \"message\"     Commit changes\ngit push origin main        Push to remote\n\nBranching\ngit branch                  List branches\ngit checkout -b feature     Create/switch branch\ngit merge feature           Merge branch\ngit rebase main             Rebase on main\n\nHistory\ngit log --oneline           View history\ngit diff commit1 commit2    Compare commits\ngit blame file              Show who changed whatCopy to clipboardErrorCopied\n\nBest Practices:\n\n1. Commit Messages\n\n   \n    Good commit message format\n   type(scope): summary\n\n   Detailed description of changes.\n\n    Examples\n   feat(api): add user authentication\n   fix(db): handle null values in queryCopy to clipboardErrorCopied\n   \n2. Branching Strategy\n\n    main: Production code\n    develop: Integration branch\n    feature/\\: New features\n    hotfix/\\: Emergency fixes\n3. Code Review\n\n    Keep PRs small (<400 lines)\n    Use draft PRs for WIP\n    Review your own code first\n    Respond to all comments\n\nEssential Tools\n\n GitHub Desktop: GUI client\n GitLens: VS Code extension\n gh: GitHub CLI\n pre-commit: Git hooks\n\nPrevious\n\nDatabase: SQLite\n\nNext\n\n2. Deployment Tools"
  },
  {
    "title": "Local LLMs: Ollama",
    "filename": "Local_LLMs__Ollama.md",
    "text": "Local LLM Runner: Ollama\n---------------------------------------------------------------\n\nollama is a command-line tool for running open-source large language models entirely on your own machine—no API keys, no vendor lock-in, full control over models and performance.\n\n[](https://youtu.be/Lb5D892-2HY)\n\nBasic Usage\n\nDownload Ollama for macOS, Linux, or Windows and add the binary to your PATH. See the full Docs ↗ for installation details and troubleshooting.\n\nList installed and available models\nollama list\n\nDownload/pin a specific model version\nollama pull gemma3:1b-it-qat\n\nRun a one-off prompt\nollama run gemma3:1b-it-qat 'Write a haiku about data visualization'\n\nLaunch a persistent HTTP API on port 11434\nollama serve\n\nInteract programmatically over HTTP\ncurl -X POST http://localhost:11434/api/chat \\\n     -H 'Content-Type: application/json' \\\n     -d '{\"model\":\"gemma3:1b-it-qat\",\"prompt\":\"Hello, world!\"}'Copy to clipboardErrorCopied\n\nKey Features\n\n Model management: list/pull — Install and switch among Llama 3.3, DeepSeek-R1, Gemma 3, Mistral, Phi-4, and more.\n Local inference: run — Execute prompts entirely on-device for privacy and zero latency beyond hardware limits.\n Persistent server: serve — Expose a local REST API for multi-session chats and integration into scripts or apps.\n Version pinning: pull model:tag — Pin exact model versions for reproducible demos and experiments.\n Resource control: --threads / --context — Tune CPU/GPU usage and maximum context window for performance and memory management.\n\nReal-World Use Cases\n\n Quick prototyping. Brainstorm slide decks or blog outlines offline, without worrying about API quotas: ollama run gemma-3 'Outline a slide deck on Agile best practices'\n Data privacy. Summarize sensitive documents on-device, retaining full control of your data: cat financialreport.pdf | ollama run phi-4 'Summarize the key findings'\n CI/CD integration. Validate PR descriptions or test YAML configurations in your pipeline without incurring API costs: git diff origin/main | ollama run llama2 'Check for style and clarity issues'\n Local app embedding. Power a desktop or web app via the local REST API for instant LLM features: curl -X POST http://localhost:11434/api/chat -d '{\"model\":\"mistral\",\"prompt\":\"Translate to German\"}'\n\nRead the full Ollama docs ↗ for advanced topics like custom model hosting, GPU tuning, and integrating with your development workflows.\n\nPrevious\n\nAuthentication: Google Auth\n\nNext\n\n3. Large Language Models"
  },
  {
    "title": "AI Code Editors: GitHub Copilot",
    "filename": "AI_Code_Editors__GitHub_Copilot.md",
    "text": "AI Editor: GitHub Copilot\n-------------------------------------------------------------------------\n\nAI Code Editors like GitHub Copilot, Cursor, Windsurf, Roo Code, Cline, Continue.dev, etc. use LLMs to help you write code faster.\n\nMost are built on top of VS Code. These are now a standard tool in every developer’s toolkit.\n\nGitHub Copilot is free (as of May 2025) for 2,000 completions and 50 chats.\n\n[](https://youtu.be/n0NlxUyA7FI)\n\nYou should learn about:\n\n Code Suggestions, which is a basic feature.\n Using Chat, which lets you code in natural language.\n Changing the chat model. The free version includes Claude 3.5 Sonnet, a good coding model.\n Prompts to understand how people use AI code editors.\n\nPrevious\n\nEditor: VS Code\n\nNext\n\nPython tools: uv"
  },
  {
    "title": "Geospatial Analysis with Excel",
    "filename": "Geospatial_Analysis_with_Excel.md",
    "text": "Geospatial Analysis with Excel\n----------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/49LjxNvxyVs)\n\nYou’ll learn how to create a data-driven story about coffee shop coverage in Manhattan, covering:\n\n Data Collection: Collect and scrape data for coffee shop locations and census population from various sources.\n Data Processing: Use Python libraries like geopandas for merging population data with geographic maps.\n Map Creation: Generate coverage maps using tools like QGIS and Excel to visualize coffee shop distribution and population impact.\n Visualization: Create physical, Power BI, and video visualizations to present the data effectively.\n Storytelling: Craft a narrative around coffee shop competition, including strategic insights and potential market changes.\n\nHere are links that explain how the video was made:\n\n The Making of the Manhattan Coffee Kings\n Shaping and merging maps\n Visualizing data on 3D maps\n Physical and digital 3D maps\n\nPrevious\n\nData Analysis with ChatGPT\n\nNext\n\nGeospatial Analysis with Python"
  },
  {
    "title": "Transforming Images",
    "filename": "Transforming_Images.md",
    "text": "Transforming Images\n-------------------------------------------------------------------\n\nImage Processing with PIL (Pillow)\n\n[](https://youtu.be/6Qs3wObeWwc)\n\nPillow is Python’s leading library for image processing, offering powerful tools for editing, analyzing, and generating images. It handles various formats (PNG, JPEG, GIF, etc.) and provides operations from basic resizing to complex filters.\n\nHere’s a minimal example showing common operations:\n\n/// script\nrequires-python = \">=3.11\"\ndependencies = [\"Pillow\"]\n///\n\nfrom PIL import Image, ImageEnhance, ImageFilter\n\nasync def processimage(path: str) -> Image.Image:\n    \"\"\"Process an image with basic enhancements.\"\"\"\n    with Image.open(path) as img:\n         Convert to RGB to ensure compatibility\n        img = img.convert('RGB')\n\n         Resize maintaining aspect ratio\n        img.thumbnail((800, 800))\n\n         Apply enhancements\n        img = (ImageEnhance.Contrast(img)\n               .enhance(1.2))\n\n        return img.filter(ImageFilter.SHARPEN)\n\nif name == \"main\":\n    import asyncio\n    img = asyncio.run(processimage(\"input.jpg\"))\n    img.save(\"output.jpg\", quality=85)Copy to clipboardErrorCopied\n\nKey features and techniques you’ll learn:\n\n Image Loading and Saving: Handle various formats with automatic conversion\n Basic Operations: Resize, rotate, crop, and flip images\n Color Manipulation: Adjust brightness, contrast, and color balance\n Filters and Effects: Apply blur, sharpen, and other visual effects\n Drawing: Add text, shapes, and overlays to images\n Batch Processing: Handle multiple images efficiently\n Memory Management: Process large images without memory issues\n\nBasic Image Operations\n\nCommon operations for resizing, cropping, and rotating images:\n\nfrom PIL import Image\n\nasync def transformimage(\n    path: str,\n    size: tuple[int, int],\n    rotation: float = 0\n) -> Image.Image:\n    \"\"\"Transform image with basic operations.\"\"\"\n    with Image.open(path) as img:\n         Resize with anti-aliasing\n        img = img.resize(size, Image.LANCZOS)\n\n         Rotate around center\n        if rotation:\n            img = img.rotate(rotation, expand=True)\n\n         Auto-crop empty edges\n        img = img.crop(img.getbbox())\n\n        return imgCopy to clipboardErrorCopied\n\nColor and Enhancement\n\nAdjust image appearance with built-in enhancement tools:\n\nfrom PIL import ImageEnhance, ImageOps\n\nasync def enhanceimage(\n    img: Image.Image,\n    brightness: float = 1.0,\n    contrast: float = 1.0,\n    saturation: float = 1.0\n) -> Image.Image:\n    \"\"\"Apply color enhancements to image.\"\"\"\n    enhancers = [\n        (ImageEnhance.Brightness, brightness),\n        (ImageEnhance.Contrast, contrast),\n        (ImageEnhance.Color, saturation)\n    ]\n\n    for Enhancer, factor in enhancers:\n        if factor != 1.0:\n            img = Enhancer(img).enhance(factor)\n\n    return imgCopy to clipboardErrorCopied\n\nFilters and Effects\n\nApply visual effects and filters to images:\n\nfrom PIL import ImageFilter\n\ndef applyeffects(img: Image.Image) -> Image.Image:\n    \"\"\"Apply various filters and effects.\"\"\"\n    effects = {\n        'blur': ImageFilter.GaussianBlur(radius=2),\n        'sharpen': ImageFilter.SHARPEN,\n        'edge': ImageFilter.FINDEDGES,\n        'emboss': ImageFilter.EMBOSS\n    }\n\n    return {name: img.filter(effect)\n            for name, effect in effects.items()}Copy to clipboardErrorCopied\n\nDrawing and Text\n\nAdd text, shapes, and overlays to images:\n\nfrom PIL import Image, ImageDraw, ImageFont\n\nasync def addwatermark(\n    img: Image.Image,\n    text: str,\n    fontsize: int = 30\n) -> Image.Image:\n    \"\"\"Add text watermark to image.\"\"\"\n    draw = ImageDraw.Draw(img)\n    font = ImageFont.truetype(\"arial.ttf\", fontsize)\n\n     Calculate text size and position\n    textbbox = draw.textbbox((0, 0), text, font=font)\n    textwidth = textbbox[2] - textbbox[0]\n    textheight = textbbox[3] - textbbox[1]\n\n     Position text at bottom-right\n    x = img.width - textwidth - 10\n    y = img.height - textheight - 10\n\n     Add text with shadow\n    draw.text((x+2, y+2), text, font=font, fill='black')\n    draw.text((x, y), text, font=font, fill='white')\n\n    return imgCopy to clipboardErrorCopied\n\nMemory-Efficient Processing\n\nHandle large images without loading them entirely into memory:\n\nfrom PIL import Image\nimport os\n\nasync def processlargeimages(\n    inputdir: str,\n    outputdir: str,\n    maxsize: tuple[int, int]\n) -> None:\n    \"\"\"Process multiple large images efficiently.\"\"\"\n    os.makedirs(outputdir, existok=True)\n\n    for filename in os.listdir(inputdir):\n        if not filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n            continue\n\n        inputpath = os.path.join(inputdir, filename)\n        outputpath = os.path.join(outputdir, filename)\n\n        with Image.open(inputpath) as img:\n             Process in chunks using thumbnail\n            img.thumbnail(maxsize)\n            img.save(outputpath, optimize=True)Copy to clipboardErrorCopied\n\nPractice with these resources:\n\n Pillow Documentation: Complete API reference\n Python Image Processing Tutorial: In-depth guide\n Sample Images Dataset: Test images for practice\n\nWatch these tutorials for hands-on demonstrations:\n\n[](https://youtu.be/dkp4wUhCwR4)\n\nImage Processing with ImageMagick\n\nImageMagick is a powerful command-line tool for image manipulation, offering features beyond what’s possible with Python libraries. It’s particularly useful for:\n\n Batch processing large image collections\n Complex image transformations\n High-quality format conversion\n Creating image thumbnails\n Adding text and watermarks\n\nBasic Operations:\n\nFormat conversion\nconvert input.png output.jpg\n\nResize image (maintains aspect ratio)\nconvert input.jpg -resize 800x600 output.jpg\n\nCompress image quality\nconvert input.jpg -quality 85 output.jpg\n\nRotate image\nconvert input.jpg -rotate 90 output.jpgCopy to clipboardErrorCopied\n\nCommon Data Science Tasks:\n\nCreate thumbnails for dataset preview\nconvert input.jpg -thumbnail 200x200^ -gravity center -extent 200x200 thumb.jpg\n\nNormalize image for ML training\nconvert input.jpg -normalize -strip output.jpg\n\nExtract dominant colors\nconvert input.jpg -colors 5 -unique-colors txt:\n\nGenerate image statistics\nidentify -verbose input.jpg | grep -E \"Mean|Standard|Kurtosis\"Copy to clipboardErrorCopied\n\nBatch Processing:\n\nConvert all images in a directory\nmogrify -format jpg .png\n\nResize multiple images\nmogrify -resize 800x600 -path output/ .jpg\n\nAdd watermark to images\nfor f in .jpg; do\n    convert \"$f\" -gravity southeast -draw \"text 10,10 'Copyright'\" \"watermarked/$f\"\ndoneCopy to clipboardErrorCopied\n\nAdvanced Features:\n\nApply image effects\nconvert input.jpg -blur 0x3 blurred.jpg\nconvert input.jpg -sharpen 0x3 sharp.jpg\nconvert input.jpg -edge 1 edges.jpg\n\nCreate image montage\nmontage .jpg -geometry 200x200+2+2 montage.jpg\n\nExtract image channels\nconvert input.jpg -separate channels%d.jpg\n\nComposite images\ncomposite overlay.png -gravity center base.jpg output.jpgCopy to clipboardErrorCopied\n\nWatch this ImageMagick tutorial (16 min):\n\n[](https://youtu.be/wjcBOoReYc0)\n\nTools:\n\n Fred’s ImageMagick Scripts: Useful script collection\n ImageMagick Online Studio: Visual command builder\n\nTips:\n\n1. Use -strip to remove metadata and reduce file size\n2. Monitor memory usage with -limit memory 1GB\n3. Use -define for format-specific options\n4. Process in parallel with -parallel\n5. Use -monitor to track progress\n\nError Handling:\n\nCheck image validity\nidentify -regard-warnings input.jpg\n\nGet detailed error information\nconvert input.jpg output.jpg 2>&1 | grep -i \"error\"\n\nSet resource limits\nconvert -limit memory 1GB -limit map 2GB input.jpg output.jpgCopy to clipboardErrorCopied\n\nFor Python integration:\n\n/// script\nrequires-python = \">=3.9\"\ndependencies = [\"Wand\"]\n///\n\nfrom wand.image import Image\n\nasync def processimage(path: str) -> None:\n    \"\"\"Process image with ImageMagick via Wand.\"\"\"\n    with Image(filename=path) as img:\n         Basic operations\n        img.resize(800, 600)\n        img.normalize()\n\n         Apply effects\n        img.sharpen(radius=0, sigma=3)\n\n         Save with compression\n        img.save(filename='output.jpg')Copy to clipboardErrorCopied\n\nNote: Always install ImageMagick before using the Wand Python binding.\n\nPrevious\n\nData Transformation with dbt\n\nNext\n\nExtracting Audio and Transcripts"
  },
  {
    "title": "Correlation with Excel",
    "filename": "Correlation_with_Excel.md",
    "text": "Correlation with Excel\n----------------------------------------------------------------------------\n\n[](https://youtu.be/lXHCyhO7DmY)\n\nYou’ll learn to calculate and interpret correlations using Excel, covering:\n\n Enabling the Data Analysis Tool Pack: Steps to enable the Excel data analysis tool pack.\n Correlation Analysis: Understanding statistical association between variables.\n Creating a Correlation Matrix: Steps to generate and interpret a correlation matrix.\n Scatterplots and Trendlines: Plotting data and adding trend lines to visualize correlations.\n Analyzing Results: Comparing correlation coefficients and understanding their implications.\n Insights and Further Analysis: Interpreting scatterplots and planning further analysis for deeper insights.\n\nHere are the links used in the video:\n\n Understand correlation\n COVID-19 vaccinations data explorer - Website\n COVID-19 vaccinations - Correlations Excel file\n\nPrevious\n\n6. Data Analysis\n\nNext\n\nRegression with Excel"
  },
  {
    "title": "Static hosting: GitHub Pages",
    "filename": "Static_hosting__GitHub_Pages.md",
    "text": "Static hosting: GitHub Pages\n-----------------------------------------------------------------------------\n\nGitHub Pages is a free hosting service that turns your GitHub repository directly into a static website whenever you push it. This is useful for sharing analysis results, data science portfolios, project documentation, and more.\n\nCommon Operations:\n\nCreate a new GitHub repo\nmkdir my-site\ncd my-site\ngit init\n\nAdd your static content\necho \"<h1>My Site</h1>\" > index.html\n\nPush to GitHub\ngit add .\ngit commit -m \"feat(pages): initial commit\"\ngit push origin main\n\nEnable GitHub Pages from the main branch on the repo settings pageCopy to clipboardErrorCopied\n\nBest Practices:\n\n1. Keep it small\n    Optimize images. Prefer SVG over WEBP over 8-bit PNG.\n    Preload critical assets like stylesheets\n    Avoid committing large files like datasets, videos, etc. directly. Explore Git LFS instead.\n\nTools:\n\n GitHub Desktop: GUI for Git operations\n GitHub CLI: Command line interface\n GitHub Actions: Automation\n\n[](https://youtube.com/shorts/WqOXxoGSpbs)\n\n[](https://youtu.be/sTzXIX3ZA0)\n\nPrevious\n\nImages: Compression\n\nNext\n\nNotebooks: Google Colab"
  },
  {
    "title": "Notebooks: Google Colab",
    "filename": "Notebooks__Google_Colab.md",
    "text": "Notebooks: Google Colab\n------------------------------------------------------------\n\nGoogle Colab is a free, cloud-based Jupyter notebook environment that’s become indispensable for data scientists and ML practitioners. It’s particularly valuable because it provides free access to GPUs and TPUs, and for easy sharing of code and execution results.\n\nWhile Colab is excellent for prototyping and learning, its free tier has limitations - notebooks time out after 12 hours, and GPU access can be inconsistent.\n\nLearn how to mount Google Drive for persistent storage, manage dependencies with !pip install commands, as these are common pain points when getting started.\n\n[](https://youtu.be/inN8seMm7UI)\n\n Google Colab features you may have missed\n How to mount Google Drive to Google Colab\n How to take advantage of GPUs and TPUs for your ML project\n\nPrevious\n\nStatic hosting: GitHub Pages\n\nNext\n\nServerless hosting: Vercel"
  },
  {
    "title": "CI/CD: GitHub Actions",
    "filename": "CI_CD__GitHub_Actions.md",
    "text": "CI/CD: GitHub Actions\n----------------------------------------------------------------\n\nGitHub Actions is a powerful automation platform built into GitHub. It helps automate your development workflow - running tests, deploying applications, updating datasets, retraining models, etc.\n\n Understand the basics of YAML configuration files\n Explore the pre-built actions from the marketplace\n How to handle secrets securely\n Triggering a workflow\n Staying within the free tier limits\n Caching dependencies to speed up workflows\n\nHere is a sample .github/workflows/iss-location.yml that runs daily, appends the International Space Station location data into iss-location.json, and commits it to the repository.\n\nname: Log ISS Location Data Daily\n\non:\n  schedule:\n     Runs at 12:00 UTC (noon) every day\n    - cron: \"0 12   \"\n  workflowdispatch:  Allows manual triggering\n\njobs:\n  collect-iss-data:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Install uv\n        uses: astral-sh/setup-uv@v5\n\n      - name: Fetch ISS location data\n        run: |  python\n          uv run --with requests python << 'EOF'\n          import requests\n\n          data = requests.get('http://api.open-notify.org/iss-now.json').text\n          with open('iss-location.jsonl', 'a') as f:\n              f.write(data + '\\n')\n          'EOF'\n\n      - name: Commit and push changes\n        run: |  shell\n          git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add iss-location.jsonl\n          git commit -m \"Update ISS position data [skip ci]\" || exit 0\n          git pushCopy to clipboardErrorCopied\n\nTools:\n\n GitHub CLI: Manage workflows from terminal\n Super-Linter: Validate code style\n Release Drafter: Automate releases\n act: Run actions locally\n\n[](https://youtu.be/mFFXuXjVgkU)\n\n How to handle secrets in GitHub Actions\n\nPrevious\n\nServerless hosting: Vercel\n\nNext\n\nContainers: Docker, Podman"
  },
  {
    "title": "Multimodal Embeddings",
    "filename": "Multimodal_Embeddings.md",
    "text": "Multimodal Embeddings\n-------------------------------------------------------------------------\n\nMultimodal embeddings map text and images into the same vector space, enabling direct comparison between, say, a caption — “A cute cat” — and an image of that cat. This unified representation powers real-world applications like:\n\n Cross-modal search (e.g. “find images of a sunset” via text queries)\n Content recommendation (suggesting visually similar products to text descriptions)\n Clustering & retrieval (grouping documents and their associated graphics)\n Anomaly detection (spotting unusual image–text pairings)\n\nBy reducing different data types to a common numeric form, you unlock richer search, enhanced recommendations, and tighter integration of visual and textual data.\n\nGet API keys\n-------------------------------------------------------\n\nBelow are the steps to grab a free API key for each provider.\n\nNomic Atlas\n\n1. Sign up at the Nomic Atlas homepage:\n   👉 <https://atlas.nomic.ai/> (Atlas | Nomic Atlas Documentation)\n2. Once logged in, open the Dashboard and navigate to Settings → API Keys.\n3. Click Create API Key, name it, and copy the generated key.\n\nSet in your shell:\n\nexport NOMICAPIKEY=\"your-nomic-api-key\"Copy to clipboardErrorCopied\n\nJina AI\n\n1. Visit the Jina AI Embeddings page:\n   👉 <https://jina.ai/embeddings/> (Jina AI)\n2. Click Get Started (no credit card needed) and register for a free account. Every new key comes with 1 million free tokens.\n3. In the dashboard, go to API Key & Billing and copy your key.\n\nSet in your shell:\n\nexport JINAAPIKEY=\"your-jina-api-key\"Copy to clipboardErrorCopied\n\nGoogle Vertex AI\n\n1. Sign up for Google Cloud’s free tier (90 days, $300 credit):\n   👉 <https://cloud.google.com/free> (Google Cloud)\n2. In the Cloud Console, open APIs & Services → Credentials:\n   👉 <https://console.cloud.google.com/apis/credentials> (Google Cloud)\n3. Click Create credentials → API key, then copy the key.\n\nSet in your shell:\n\nexport GOOGLEAPIKEY=\"your-google-api-key\"\nexport PROJECTID=\"your-gcp-project-id\"Copy to clipboardErrorCopied\n\nExample Requests\n---------------------------------------------------------------\n\nBelow are fully-workable snippets that:\n\n Embed two texts (“A cute cat”, “A cardboard box”)\n Embed two images (cat.jpg, box.png)\n Send them to the respective API\n\nReplace variables ($NOMICAPIKEY, $JINAAPIKEY, $GOOGLEAPIKEY, $PROJECTID) before running.\n\n1. Nomic Atlas\n\nText Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/text\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"model\": \"nomic-embed-text-v1.5\",\n        \"tasktype\": \"searchdocument\",\n        \"texts\": [\"A cute cat\", \"A cardboard box\"]\n      }'Copy to clipboardErrorCopied\n\nImage Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/image\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -F \"model=nomic-embed-vision-v1.5\" \\\n  -F \"images=@cat.jpg\" \\\n  -F \"images=@box.png\"Copy to clipboardErrorCopied\n\n2. Jina AI\n\nJina’s unified /v1/embeddings endpoint accepts text strings and base64-encoded image bytes in one batch. (Jina AI)\n\ncurl -X POST \"https://api.jina.ai/v1/embeddings\" \\\n  -H \"Authorization: Bearer $JINAAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\n        \\\"model\\\": \\\"jina-clip-v2\\\",\n        \\\"input\\\": [\n          {\\\"text\\\":\\\"A cute cat\\\"},\n          {\\\"text\\\":\\\"A cardboard box\\\"},,\n          {\\\"image\\\":\\\"$(base64 -w 0 cat.jpg)\\\"},\n          {\\\"image\\\":\\\"$(base64 -w 0 box.png)\\\"}\n        ]\n      }\"Copy to clipboardErrorCopied\n\n3. Google Vertex AI Multimodal Embeddings\n\nVertex AI’s multimodal model (multimodalembedding@001) takes JSON instances combining text and base64 image data. (Google Cloud)\n\ncurl -X POST \\\n  -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://us-central1-aiplatform.googleapis.com/v1/projects/$PROJECTID/locations/us-central1/publishers/google/models/multimodalembedding@001:predict?key=$GOOGLEAPIKEY\" \\\n  -d \"{\n        \\\"instances\\\": [\n          {\n            \\\"text\\\": \\\"A cute cat\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 cat.jpg)\\\"}\n          },\n          {\n            \\\"text\\\": \\\"A cardboard box\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 box.png)\\\"}\n          }\n        ]\n      }\"Copy to clipboardErrorCopied\n\nWith these steps, you’re all set to explore and experiment with multimodal embeddings across text + image data—unifying your applications’ visual and linguistic understanding.\n\nPrevious\n\nEmbeddings\n\nNext\n\nTopic modeling"
  },
  {
    "title": "Multimodal Embeddings",
    "filename": "Multimodal_Embeddings.md",
    "text": "Multimodal Embeddings\n-------------------------------------------------------------------------\n\nMultimodal embeddings map text and images into the same vector space, enabling direct comparison between, say, a caption — “A cute cat” — and an image of that cat. This unified representation powers real-world applications like:\n\n Cross-modal search (e.g. “find images of a sunset” via text queries)\n Content recommendation (suggesting visually similar products to text descriptions)\n Clustering & retrieval (grouping documents and their associated graphics)\n Anomaly detection (spotting unusual image–text pairings)\n\nBy reducing different data types to a common numeric form, you unlock richer search, enhanced recommendations, and tighter integration of visual and textual data.\n\nGet API keys\n-------------------------------------------------------\n\nBelow are the steps to grab a free API key for each provider.\n\nNomic Atlas\n\n1. Sign up at the Nomic Atlas homepage:\n   👉 <https://atlas.nomic.ai/> (Atlas | Nomic Atlas Documentation)\n2. Once logged in, open the Dashboard and navigate to Settings → API Keys.\n3. Click Create API Key, name it, and copy the generated key.\n\nSet in your shell:\n\nexport NOMICAPIKEY=\"your-nomic-api-key\"Copy to clipboardErrorCopied\n\nJina AI\n\n1. Visit the Jina AI Embeddings page:\n   👉 <https://jina.ai/embeddings/> (Jina AI)\n2. Click Get Started (no credit card needed) and register for a free account. Every new key comes with 1 million free tokens.\n3. In the dashboard, go to API Key & Billing and copy your key.\n\nSet in your shell:\n\nexport JINAAPIKEY=\"your-jina-api-key\"Copy to clipboardErrorCopied\n\nGoogle Vertex AI\n\n1. Sign up for Google Cloud’s free tier (90 days, $300 credit):\n   👉 <https://cloud.google.com/free> (Google Cloud)\n2. In the Cloud Console, open APIs & Services → Credentials:\n   👉 <https://console.cloud.google.com/apis/credentials> (Google Cloud)\n3. Click Create credentials → API key, then copy the key.\n\nSet in your shell:\n\nexport GOOGLEAPIKEY=\"your-google-api-key\"\nexport PROJECTID=\"your-gcp-project-id\"Copy to clipboardErrorCopied\n\nExample Requests\n---------------------------------------------------------------\n\nBelow are fully-workable snippets that:\n\n Embed two texts (“A cute cat”, “A cardboard box”)\n Embed two images (cat.jpg, box.png)\n Send them to the respective API\n\nReplace variables ($NOMICAPIKEY, $JINAAPIKEY, $GOOGLEAPIKEY, $PROJECTID) before running.\n\n1. Nomic Atlas\n\nText Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/text\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"model\": \"nomic-embed-text-v1.5\",\n        \"tasktype\": \"searchdocument\",\n        \"texts\": [\"A cute cat\", \"A cardboard box\"]\n      }'Copy to clipboardErrorCopied\n\nImage Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/image\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -F \"model=nomic-embed-vision-v1.5\" \\\n  -F \"images=@cat.jpg\" \\\n  -F \"images=@box.png\"Copy to clipboardErrorCopied\n\n2. Jina AI\n\nJina’s unified /v1/embeddings endpoint accepts text strings and base64-encoded image bytes in one batch. (Jina AI)\n\ncurl -X POST \"https://api.jina.ai/v1/embeddings\" \\\n  -H \"Authorization: Bearer $JINAAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\n        \\\"model\\\": \\\"jina-clip-v2\\\",\n        \\\"input\\\": [\n          {\\\"text\\\":\\\"A cute cat\\\"},\n          {\\\"text\\\":\\\"A cardboard box\\\"},,\n          {\\\"image\\\":\\\"$(base64 -w 0 cat.jpg)\\\"},\n          {\\\"image\\\":\\\"$(base64 -w 0 box.png)\\\"}\n        ]\n      }\"Copy to clipboardErrorCopied\n\n3. Google Vertex AI Multimodal Embeddings\n\nVertex AI’s multimodal model (multimodalembedding@001) takes JSON instances combining text and base64 image data. (Google Cloud)\n\ncurl -X POST \\\n  -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://us-central1-aiplatform.googleapis.com/v1/projects/$PROJECTID/locations/us-central1/publishers/google/models/multimodalembedding@001:predict?key=$GOOGLEAPIKEY\" \\\n  -d \"{\n        \\\"instances\\\": [\n          {\n            \\\"text\\\": \\\"A cute cat\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 cat.jpg)\\\"}\n          },\n          {\n            \\\"text\\\": \\\"A cardboard box\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 box.png)\\\"}\n          }\n        ]\n      }\"Copy to clipboardErrorCopied\n\nWith these steps, you’re all set to explore and experiment with multimodal embeddings across text + image data—unifying your applications’ visual and linguistic understanding.\n\nPrevious\n\nEmbeddings\n\nNext\n\nTopic modeling"
  },
  {
    "title": "Multimodal Embeddings",
    "filename": "Multimodal_Embeddings.md",
    "text": "Multimodal Embeddings\n-------------------------------------------------------------------------\n\nMultimodal embeddings map text and images into the same vector space, enabling direct comparison between, say, a caption — “A cute cat” — and an image of that cat. This unified representation powers real-world applications like:\n\n Cross-modal search (e.g. “find images of a sunset” via text queries)\n Content recommendation (suggesting visually similar products to text descriptions)\n Clustering & retrieval (grouping documents and their associated graphics)\n Anomaly detection (spotting unusual image–text pairings)\n\nBy reducing different data types to a common numeric form, you unlock richer search, enhanced recommendations, and tighter integration of visual and textual data.\n\nGet API keys\n-------------------------------------------------------\n\nBelow are the steps to grab a free API key for each provider.\n\nNomic Atlas\n\n1. Sign up at the Nomic Atlas homepage:\n   👉 <https://atlas.nomic.ai/> (Atlas | Nomic Atlas Documentation)\n2. Once logged in, open the Dashboard and navigate to Settings → API Keys.\n3. Click Create API Key, name it, and copy the generated key.\n\nSet in your shell:\n\nexport NOMICAPIKEY=\"your-nomic-api-key\"Copy to clipboardErrorCopied\n\nJina AI\n\n1. Visit the Jina AI Embeddings page:\n   👉 <https://jina.ai/embeddings/> (Jina AI)\n2. Click Get Started (no credit card needed) and register for a free account. Every new key comes with 1 million free tokens.\n3. In the dashboard, go to API Key & Billing and copy your key.\n\nSet in your shell:\n\nexport JINAAPIKEY=\"your-jina-api-key\"Copy to clipboardErrorCopied\n\nGoogle Vertex AI\n\n1. Sign up for Google Cloud’s free tier (90 days, $300 credit):\n   👉 <https://cloud.google.com/free> (Google Cloud)\n2. In the Cloud Console, open APIs & Services → Credentials:\n   👉 <https://console.cloud.google.com/apis/credentials> (Google Cloud)\n3. Click Create credentials → API key, then copy the key.\n\nSet in your shell:\n\nexport GOOGLEAPIKEY=\"your-google-api-key\"\nexport PROJECTID=\"your-gcp-project-id\"Copy to clipboardErrorCopied\n\nExample Requests\n---------------------------------------------------------------\n\nBelow are fully-workable snippets that:\n\n Embed two texts (“A cute cat”, “A cardboard box”)\n Embed two images (cat.jpg, box.png)\n Send them to the respective API\n\nReplace variables ($NOMICAPIKEY, $JINAAPIKEY, $GOOGLEAPIKEY, $PROJECTID) before running.\n\n1. Nomic Atlas\n\nText Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/text\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"model\": \"nomic-embed-text-v1.5\",\n        \"tasktype\": \"searchdocument\",\n        \"texts\": [\"A cute cat\", \"A cardboard box\"]\n      }'Copy to clipboardErrorCopied\n\nImage Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/image\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -F \"model=nomic-embed-vision-v1.5\" \\\n  -F \"images=@cat.jpg\" \\\n  -F \"images=@box.png\"Copy to clipboardErrorCopied\n\n2. Jina AI\n\nJina’s unified /v1/embeddings endpoint accepts text strings and base64-encoded image bytes in one batch. (Jina AI)\n\ncurl -X POST \"https://api.jina.ai/v1/embeddings\" \\\n  -H \"Authorization: Bearer $JINAAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\n        \\\"model\\\": \\\"jina-clip-v2\\\",\n        \\\"input\\\": [\n          {\\\"text\\\":\\\"A cute cat\\\"},\n          {\\\"text\\\":\\\"A cardboard box\\\"},,\n          {\\\"image\\\":\\\"$(base64 -w 0 cat.jpg)\\\"},\n          {\\\"image\\\":\\\"$(base64 -w 0 box.png)\\\"}\n        ]\n      }\"Copy to clipboardErrorCopied\n\n3. Google Vertex AI Multimodal Embeddings\n\nVertex AI’s multimodal model (multimodalembedding@001) takes JSON instances combining text and base64 image data. (Google Cloud)\n\ncurl -X POST \\\n  -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://us-central1-aiplatform.googleapis.com/v1/projects/$PROJECTID/locations/us-central1/publishers/google/models/multimodalembedding@001:predict?key=$GOOGLEAPIKEY\" \\\n  -d \"{\n        \\\"instances\\\": [\n          {\n            \\\"text\\\": \\\"A cute cat\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 cat.jpg)\\\"}\n          },\n          {\n            \\\"text\\\": \\\"A cardboard box\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 box.png)\\\"}\n          }\n        ]\n      }\"Copy to clipboardErrorCopied\n\nWith these steps, you’re all set to explore and experiment with multimodal embeddings across text + image data—unifying your applications’ visual and linguistic understanding.\n\nPrevious\n\nEmbeddings\n\nNext\n\nTopic modeling"
  },
  {
    "title": "6. Data Analysis",
    "filename": "6._Data_Analysis.md",
    "text": "Data analysis\n=================================================\n\nData Analysis: Introduction Podcast by NotebookLM\n\nOnce you’ve prepared the data, your next task is to analyze it to get insights that are not immediately obvious.\n\nIn this module, you’ll learn:\n\n Statistical analysis: Calculate correlations, regressions, forecasts, and outliers using spreadsheets\n Data summarization: Aggregate and pivot data using Python and databases.\n Geo-data Collection & Processing: Gather and process geospatial data using tools like Python (GeoPandas) and QGIS.\n Geo-visualization: Create and visualize geospatial data on maps using Excel, QGIS, and Python libraries such as Folium.\n Network & Proximity Analysis: Analyze geospatial relationships and perform network analysis to understand data distribution and clustering.\n Storytelling & Decision Making: Develop narratives and make informed decisions based on geospatial data insights.\n\n[](https://youtu.be/CRSljunxjnk)\n\nPrevious\n\nExtracting Audio and Transcripts\n\nNext\n\nCorrelation with Excel"
  },
  {
    "title": "Crawling with the CLI",
    "filename": "Crawling_with_the_CLI.md",
    "text": "Crawling with the CLI\n----------------------------------------------------------------\n\nSince websites are a common source of data, we often download entire websites (crawling) and then process them offline.\n\nWeb crawling is essential in many data-driven scenarios:\n\n Data mining and analysis: Gathering structured data from multiple pages for market research, competitive analysis, or academic research\n Content archiving: Creating offline copies of websites for preservation or backup purposes\n SEO analysis: Analyzing site structure, metadata, and content to improve search rankings\n Legal compliance: Capturing website content for regulatory or compliance documentation\n Website migration: Creating a complete copy before moving to a new platform or design\n Offline access: Downloading educational resources, documentation, or reference materials for use without internet connection\n\nThe most commonly used tool for fetching websites is wget. It is pre-installed in many UNIX distributions and easy to install.\n\n[](https://youtu.be/pLfH5TZBGXo)\n\nTo crawl the IIT Madras Data Science Program website for example, you could run:\n\nwget \\\n  --recursive \\\n  --level=3 \\\n  --no-parent \\\n  --convert-links \\\n  --adjust-extension \\\n  --compression=auto \\\n  --accept html,htm \\\n  --directory-prefix=./ds \\\n  https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\nHere’s what each option does:\n\n --recursive: Enables recursive downloading (following links)\n --level=3: Limits recursion depth to 3 levels from the initial URL\n --no-parent: Restricts crawling to only URLs below the initial directory\n --convert-links: Converts all links in downloaded documents to work locally\n --adjust-extension: Adds proper extensions to files (.html, .jpg, etc.) based on MIME types\n --compression=auto: Automatically handles compressed content (gzip, deflate)\n --accept html,htm: Only downloads files with these extensions\n --directory-prefix=./ds: Saves all downloaded files to the specified directory\n\nwget2 is a better version of wget and supports HTTP2, parallel connections, and only updates modified sites. The syntax is (mostly) the same.\n\nwget2 \\\n  --recursive \\\n  --level=3 \\\n  --no-parent \\\n  --convert-links \\\n  --adjust-extension \\\n  --compression=auto \\\n  --accept html,htm \\\n  --directory-prefix=./ds \\\n  https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\nThere are popular free and open-source alternatives to Wget:\n\nWpull\n\nWpull is a wget‐compatible Python crawler that supports on-disk resumption, WARC output, and PhantomJS integration.\n\nuvx wpull \\\n  --recursive \\\n  --level=3 \\\n  --no-parent \\\n  --convert-links \\\n  --adjust-extension \\\n  --compression=auto \\\n  --accept html,htm \\\n  --directory-prefix=./ds \\\n  https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\nHTTrack\n\nHTTrack is dedicated website‐mirroring tool with rich filtering and link‐conversion options.\n\nhttrack \"https://study.iitm.ac.in/ds/\" \\\n  -O \"./ds\" \\\n  \"+.study.iitm.ac.in/ds/\" \\\n  -r3Copy to clipboardErrorCopied\n\nRobots.txt\n\nrobots.txt is a standard file found in a website’s root directory that specifies which parts of the site should not be accessed by web crawlers. It’s part of the Robots Exclusion Protocol, an ethical standard for web crawling.\n\nWhy it’s important:\n\n Server load protection: Prevents excessive traffic that could overload servers\n Privacy protection: Keeps sensitive or private content from being indexed\n Legal compliance: Respects website owners’ rights to control access to their content\n Ethical web citizenship: Shows respect for website administrators’ wishes\n\nHow to override robots.txt restrictions:\n\n wget, wget2: Use -e robots=off\n httrack: Use -s0\n wpull: Use --no-robots\n\nWhen to override robots.txt (use with discretion):\n\nOnly bypass robots.txt when:\n\n You have explicit permission from the website owner\n You’re crawling your own website\n The content is publicly accessible and your crawling won’t cause server issues\n You’re conducting authorized security testing\n\nRemember that bypassing robots.txt without legitimate reason may:\n\n Violate terms of service\n Lead to IP banning\n Result in legal consequences in some jurisdictions\n Cause reputation damage to your organization\n\nAlways use the minimum necessary crawling speed and scope, and consider contacting website administrators for permission when in doubt.\n\nPrevious\n\nScraping with Google Sheets\n\nNext\n\nBBC Weather API with Python"
  },
  {
    "title": "Crawling with the CLI",
    "filename": "Crawling_with_the_CLI.md",
    "text": "Crawling with the CLI\n----------------------------------------------------------------\n\nSince websites are a common source of data, we often download entire websites (crawling) and then process them offline.\n\nWeb crawling is essential in many data-driven scenarios:\n\n Data mining and analysis: Gathering structured data from multiple pages for market research, competitive analysis, or academic research\n Content archiving: Creating offline copies of websites for preservation or backup purposes\n SEO analysis: Analyzing site structure, metadata, and content to improve search rankings\n Legal compliance: Capturing website content for regulatory or compliance documentation\n Website migration: Creating a complete copy before moving to a new platform or design\n Offline access: Downloading educational resources, documentation, or reference materials for use without internet connection\n\nThe most commonly used tool for fetching websites is wget. It is pre-installed in many UNIX distributions and easy to install.\n\n[](https://youtu.be/pLfH5TZBGXo)\n\nTo crawl the IIT Madras Data Science Program website for example, you could run:\n\nwget \\\n  --recursive \\\n  --level=3 \\\n  --no-parent \\\n  --convert-links \\\n  --adjust-extension \\\n  --compression=auto \\\n  --accept html,htm \\\n  --directory-prefix=./ds \\\n  https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\nHere’s what each option does:\n\n --recursive: Enables recursive downloading (following links)\n --level=3: Limits recursion depth to 3 levels from the initial URL\n --no-parent: Restricts crawling to only URLs below the initial directory\n --convert-links: Converts all links in downloaded documents to work locally\n --adjust-extension: Adds proper extensions to files (.html, .jpg, etc.) based on MIME types\n --compression=auto: Automatically handles compressed content (gzip, deflate)\n --accept html,htm: Only downloads files with these extensions\n --directory-prefix=./ds: Saves all downloaded files to the specified directory\n\nwget2 is a better version of wget and supports HTTP2, parallel connections, and only updates modified sites. The syntax is (mostly) the same.\n\nwget2 \\\n  --recursive \\\n  --level=3 \\\n  --no-parent \\\n  --convert-links \\\n  --adjust-extension \\\n  --compression=auto \\\n  --accept html,htm \\\n  --directory-prefix=./ds \\\n  https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\nThere are popular free and open-source alternatives to Wget:\n\nWpull\n\nWpull is a wget‐compatible Python crawler that supports on-disk resumption, WARC output, and PhantomJS integration.\n\nuvx wpull \\\n  --recursive \\\n  --level=3 \\\n  --no-parent \\\n  --convert-links \\\n  --adjust-extension \\\n  --compression=auto \\\n  --accept html,htm \\\n  --directory-prefix=./ds \\\n  https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\nHTTrack\n\nHTTrack is dedicated website‐mirroring tool with rich filtering and link‐conversion options.\n\nhttrack \"https://study.iitm.ac.in/ds/\" \\\n  -O \"./ds\" \\\n  \"+.study.iitm.ac.in/ds/\" \\\n  -r3Copy to clipboardErrorCopied\n\nRobots.txt\n\nrobots.txt is a standard file found in a website’s root directory that specifies which parts of the site should not be accessed by web crawlers. It’s part of the Robots Exclusion Protocol, an ethical standard for web crawling.\n\nWhy it’s important:\n\n Server load protection: Prevents excessive traffic that could overload servers\n Privacy protection: Keeps sensitive or private content from being indexed\n Legal compliance: Respects website owners’ rights to control access to their content\n Ethical web citizenship: Shows respect for website administrators’ wishes\n\nHow to override robots.txt restrictions:\n\n wget, wget2: Use -e robots=off\n httrack: Use -s0\n wpull: Use --no-robots\n\nWhen to override robots.txt (use with discretion):\n\nOnly bypass robots.txt when:\n\n You have explicit permission from the website owner\n You’re crawling your own website\n The content is publicly accessible and your crawling won’t cause server issues\n You’re conducting authorized security testing\n\nRemember that bypassing robots.txt without legitimate reason may:\n\n Violate terms of service\n Lead to IP banning\n Result in legal consequences in some jurisdictions\n Cause reputation damage to your organization\n\nAlways use the minimum necessary crawling speed and scope, and consider contacting website administrators for permission when in doubt.\n\nPrevious\n\nScraping with Google Sheets\n\nNext\n\nBBC Weather API with Python"
  },
  {
    "title": "Crawling with the CLI",
    "filename": "Crawling_with_the_CLI.md",
    "text": "Crawling with the CLI\n----------------------------------------------------------------\n\nSince websites are a common source of data, we often download entire websites (crawling) and then process them offline.\n\nWeb crawling is essential in many data-driven scenarios:\n\n Data mining and analysis: Gathering structured data from multiple pages for market research, competitive analysis, or academic research\n Content archiving: Creating offline copies of websites for preservation or backup purposes\n SEO analysis: Analyzing site structure, metadata, and content to improve search rankings\n Legal compliance: Capturing website content for regulatory or compliance documentation\n Website migration: Creating a complete copy before moving to a new platform or design\n Offline access: Downloading educational resources, documentation, or reference materials for use without internet connection\n\nThe most commonly used tool for fetching websites is wget. It is pre-installed in many UNIX distributions and easy to install.\n\n[](https://youtu.be/pLfH5TZBGXo)\n\nTo crawl the IIT Madras Data Science Program website for example, you could run:\n\nwget \\\n  --recursive \\\n  --level=3 \\\n  --no-parent \\\n  --convert-links \\\n  --adjust-extension \\\n  --compression=auto \\\n  --accept html,htm \\\n  --directory-prefix=./ds \\\n  https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\nHere’s what each option does:\n\n --recursive: Enables recursive downloading (following links)\n --level=3: Limits recursion depth to 3 levels from the initial URL\n --no-parent: Restricts crawling to only URLs below the initial directory\n --convert-links: Converts all links in downloaded documents to work locally\n --adjust-extension: Adds proper extensions to files (.html, .jpg, etc.) based on MIME types\n --compression=auto: Automatically handles compressed content (gzip, deflate)\n --accept html,htm: Only downloads files with these extensions\n --directory-prefix=./ds: Saves all downloaded files to the specified directory\n\nwget2 is a better version of wget and supports HTTP2, parallel connections, and only updates modified sites. The syntax is (mostly) the same.\n\nwget2 \\\n  --recursive \\\n  --level=3 \\\n  --no-parent \\\n  --convert-links \\\n  --adjust-extension \\\n  --compression=auto \\\n  --accept html,htm \\\n  --directory-prefix=./ds \\\n  https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\nThere are popular free and open-source alternatives to Wget:\n\nWpull\n\nWpull is a wget‐compatible Python crawler that supports on-disk resumption, WARC output, and PhantomJS integration.\n\nuvx wpull \\\n  --recursive \\\n  --level=3 \\\n  --no-parent \\\n  --convert-links \\\n  --adjust-extension \\\n  --compression=auto \\\n  --accept html,htm \\\n  --directory-prefix=./ds \\\n  https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\nHTTrack\n\nHTTrack is dedicated website‐mirroring tool with rich filtering and link‐conversion options.\n\nhttrack \"https://study.iitm.ac.in/ds/\" \\\n  -O \"./ds\" \\\n  \"+.study.iitm.ac.in/ds/\" \\\n  -r3Copy to clipboardErrorCopied\n\nRobots.txt\n\nrobots.txt is a standard file found in a website’s root directory that specifies which parts of the site should not be accessed by web crawlers. It’s part of the Robots Exclusion Protocol, an ethical standard for web crawling.\n\nWhy it’s important:\n\n Server load protection: Prevents excessive traffic that could overload servers\n Privacy protection: Keeps sensitive or private content from being indexed\n Legal compliance: Respects website owners’ rights to control access to their content\n Ethical web citizenship: Shows respect for website administrators’ wishes\n\nHow to override robots.txt restrictions:\n\n wget, wget2: Use -e robots=off\n httrack: Use -s0\n wpull: Use --no-robots\n\nWhen to override robots.txt (use with discretion):\n\nOnly bypass robots.txt when:\n\n You have explicit permission from the website owner\n You’re crawling your own website\n The content is publicly accessible and your crawling won’t cause server issues\n You’re conducting authorized security testing\n\nRemember that bypassing robots.txt without legitimate reason may:\n\n Violate terms of service\n Lead to IP banning\n Result in legal consequences in some jurisdictions\n Cause reputation damage to your organization\n\nAlways use the minimum necessary crawling speed and scope, and consider contacting website administrators for permission when in doubt.\n\nPrevious\n\nScraping with Google Sheets\n\nNext\n\nBBC Weather API with Python"
  },
  {
    "title": "Crawling with the CLI",
    "filename": "Crawling_with_the_CLI.md",
    "text": "Crawling with the CLI\n----------------------------------------------------------------\n\nSince websites are a common source of data, we often download entire websites (crawling) and then process them offline.\n\nWeb crawling is essential in many data-driven scenarios:\n\n Data mining and analysis: Gathering structured data from multiple pages for market research, competitive analysis, or academic research\n Content archiving: Creating offline copies of websites for preservation or backup purposes\n SEO analysis: Analyzing site structure, metadata, and content to improve search rankings\n Legal compliance: Capturing website content for regulatory or compliance documentation\n Website migration: Creating a complete copy before moving to a new platform or design\n Offline access: Downloading educational resources, documentation, or reference materials for use without internet connection\n\nThe most commonly used tool for fetching websites is wget. It is pre-installed in many UNIX distributions and easy to install.\n\n[](https://youtu.be/pLfH5TZBGXo)\n\nTo crawl the IIT Madras Data Science Program website for example, you could run:\n\nwget \\\n  --recursive \\\n  --level=3 \\\n  --no-parent \\\n  --convert-links \\\n  --adjust-extension \\\n  --compression=auto \\\n  --accept html,htm \\\n  --directory-prefix=./ds \\\n  https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\nHere’s what each option does:\n\n --recursive: Enables recursive downloading (following links)\n --level=3: Limits recursion depth to 3 levels from the initial URL\n --no-parent: Restricts crawling to only URLs below the initial directory\n --convert-links: Converts all links in downloaded documents to work locally\n --adjust-extension: Adds proper extensions to files (.html, .jpg, etc.) based on MIME types\n --compression=auto: Automatically handles compressed content (gzip, deflate)\n --accept html,htm: Only downloads files with these extensions\n --directory-prefix=./ds: Saves all downloaded files to the specified directory\n\nwget2 is a better version of wget and supports HTTP2, parallel connections, and only updates modified sites. The syntax is (mostly) the same.\n\nwget2 \\\n  --recursive \\\n  --level=3 \\\n  --no-parent \\\n  --convert-links \\\n  --adjust-extension \\\n  --compression=auto \\\n  --accept html,htm \\\n  --directory-prefix=./ds \\\n  https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\nThere are popular free and open-source alternatives to Wget:\n\nWpull\n\nWpull is a wget‐compatible Python crawler that supports on-disk resumption, WARC output, and PhantomJS integration.\n\nuvx wpull \\\n  --recursive \\\n  --level=3 \\\n  --no-parent \\\n  --convert-links \\\n  --adjust-extension \\\n  --compression=auto \\\n  --accept html,htm \\\n  --directory-prefix=./ds \\\n  https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\nHTTrack\n\nHTTrack is dedicated website‐mirroring tool with rich filtering and link‐conversion options.\n\nhttrack \"https://study.iitm.ac.in/ds/\" \\\n  -O \"./ds\" \\\n  \"+.study.iitm.ac.in/ds/\" \\\n  -r3Copy to clipboardErrorCopied\n\nRobots.txt\n\nrobots.txt is a standard file found in a website’s root directory that specifies which parts of the site should not be accessed by web crawlers. It’s part of the Robots Exclusion Protocol, an ethical standard for web crawling.\n\nWhy it’s important:\n\n Server load protection: Prevents excessive traffic that could overload servers\n Privacy protection: Keeps sensitive or private content from being indexed\n Legal compliance: Respects website owners’ rights to control access to their content\n Ethical web citizenship: Shows respect for website administrators’ wishes\n\nHow to override robots.txt restrictions:\n\n wget, wget2: Use -e robots=off\n httrack: Use -s0\n wpull: Use --no-robots\n\nWhen to override robots.txt (use with discretion):\n\nOnly bypass robots.txt when:\n\n You have explicit permission from the website owner\n You’re crawling your own website\n The content is publicly accessible and your crawling won’t cause server issues\n You’re conducting authorized security testing\n\nRemember that bypassing robots.txt without legitimate reason may:\n\n Violate terms of service\n Lead to IP banning\n Result in legal consequences in some jurisdictions\n Cause reputation damage to your organization\n\nAlways use the minimum necessary crawling speed and scope, and consider contacting website administrators for permission when in doubt.\n\nPrevious\n\nScraping with Google Sheets\n\nNext\n\nBBC Weather API with Python"
  },
  {
    "title": "LLM Sentiment Analysis",
    "filename": "LLM_Sentiment_Analysis.md",
    "text": "LLM Sentiment Analysis\n----------------------------------------------------------------------------\n\nOpenAI’s API provides access to language models like GPT 4o, GPT 4o mini, etc.\n\nFor more details, read OpenAI’s guide for:\n\n Text Generation\n Vision\n Structured Outputs\n\nStart with this quick tutorial:\n\n[](https://youtu.be/Xz4ORA0cOwQ)\n\nHere’s a minimal example using curl to generate text:\n\ncurl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-4o-mini\",\n    \"messages\": [{ \"role\": \"user\", \"content\": \"Write a haiku about programming.\" }]\n  }'Copy to clipboardErrorCopied\n\nLet’s break down the request:\n\n curl https://api.openai.com/v1/chat/completions: The API endpoint for text generation.\n -H \"Content-Type: application/json\": The content type of the request.\n -H \"Authorization: Bearer $OPENAIAPIKEY\": The API key for authentication.\n -d: The request body.\n  + \"model\": \"gpt-4o-mini\": The model to use for text generation.\n  + \"messages\":: The messages to send to the model.\n    - \"role\": \"user\": The role of the message.\n    - \"content\": \"Write a haiku about programming.\": The content of the message.\n\n[](https://youtu.be/D46QrX-2iU)\n\nThis video explains how to use large language models (LLMs) for sentiment analysis and classification, covering:\n\n Sentiment Analysis: Use OpenAI API to identify the sentiment of movie reviews as positive or negative.\n Prompt Engineering: Learn how to craft effective prompts to get desired results from LLMs.\n LLM Training: Understand how to train LLMs by providing examples and feedback.\n OpenAI API Integration: Integrate OpenAI API into Python code to perform sentiment analysis.\n Tokenization: Learn about tokenization and its impact on LLM input and cost.\n Zero-Shot, One-Shot, and Multi-Shot Learning: Understand different approaches to using LLMs for learning.\n\nHere are the links used in the video:\n\n Jupyter Notebook\n Movie reviews dataset\n OpenAI Playground\n OpenAI Pricing\n OpenAI Tokenizer\n OpenAI API Reference\n OpenAI Docs\n\nPrevious\n\nTDS GPT Reviewer\n\nNext\n\nLLM Text Extraction"
  },
  {
    "title": "Data Aggregation in Excel",
    "filename": "Data_Aggregation_in_Excel.md",
    "text": "Data Aggregation in Excel\n-------------------------------------------------------------------------------------\n\n[](https://youtu.be/NkpT0dDU8Y4)\n\nYou’ll learn data aggregation and visualization techniques in Excel, covering:\n\n Data Cleanup: Remove empty columns and rows with missing values.\n Creating Excel Tables: Convert raw data into tables for easier manipulation and formula application.\n Date Manipulation: Extract week, month, and year from date columns using Excel functions (WEEKNUM, TEXT).\n Color Scales: Apply color scales to visualize clusters and trends in data over time.\n Pivot Tables: Create pivot tables to aggregate data by location and date, summarizing values weekly and monthly.\n Sparklines: Use sparklines to visualize trends within pivot tables, making data patterns more apparent.\n Data Bars: Implement data bars for graphical illustrations of numerical columns, showing trends and waves.\n\nHere are links used in the video:\n\n COVID-19 data Excel file - raw data\n\nPrevious\n\nSplitting Text in Excel\n\nNext\n\nData Preparation in the Shell"
  },
  {
    "title": "Narratives with LLMs",
    "filename": "Narratives_with_LLMs.md",
    "text": "Narratives with LLMs\n----------------------------------------------------------------------\n\nTODO\n\nPrevious\n\nData Storytelling\n\nNext\n\nInteractive Notebooks: Marimo"
  },
  {
    "title": "Authentication: Google Auth",
    "filename": "Authentication__Google_Auth.md",
    "text": "Google Authentication with FastAPI\n-----------------------------------------------------------------------------------------\n\nSecure your API endpoints using Google ID tokens to restrict access to specific email addresses.\n\n[](https://youtu.be/4ExQYRCwbzw)\n\nGoogle Auth is the most commonly implemented single sign-on mechanism because:\n\n It’s popular and user-friendly. Users can log in with their existing Google accounts.\n It’s secure: Google supports OAuth2 and OpenID Connect to handle authentication.\n\nHere’s how you build a FastAPI app that identifies the user.\n\n1. Go to the Google Cloud Console – Credentials and click Create Credentials > OAuth client ID.\n2. Choose Web application, set your authorized redirect URIs (e.g., http://localhost:8000/).\n3. Copy the Client ID and Client Secret into a .env file:\n\n   \n   GOOGLECLIENTID=your-client-id.apps.googleusercontent.com\n   GOOGLECLIENTSECRET=your-client-secretCopy to clipboardErrorCopied\n   \n4. Create your FastAPI app.py:\n\n/// script\ndependencies = [\"python-dotenv\", \"fastapi\", \"uvicorn\", \"itsdangerous\", \"httpx\", \"authlib\"]\n///\n\nimport os\nfrom dotenv import loaddotenv\nfrom fastapi import FastAPI, Request\nfrom fastapi.responses import RedirectResponse\nfrom starlette.middleware.sessions import SessionMiddleware\nfrom authlib.integrations.starletteclient import OAuth\n\nloaddotenv()\napp = FastAPI()\napp.addmiddleware(SessionMiddleware, secretkey=\"create-a-random-secret-key\")\n\noauth = OAuth()\noauth.register(\n    name=\"google\",\n    clientid=os.getenv(\"GOOGLECLIENTID\"),\n    clientsecret=os.getenv(\"GOOGLECLIENTSECRET\"),\n    servermetadataurl=\"https://accounts.google.com/.well-known/openid-configuration\",\n    clientkwargs={\"scope\": \"openid email profile\"},\n)\n\n@app.get(\"/\")\nasync def application(request: Request):\n    user = request.session.get(\"user\")\n     3. For authenticated users: say hello\n    if user:\n        return f\"Hello {user['email']}\"\n     2. For users who have just logged in, save their details in the session\n    if \"code\" in request.queryparams:\n        token = await oauth.google.authorizeaccesstoken(request)\n        request.session[\"user\"] = token[\"userinfo\"]\n        return RedirectResponse(\"/\")\n     1. For users who are logging in for the first time, redirect to Google login\n    return await oauth.google.authorizeredirect(request, request.url)\n\nif name == \"main\":\n    import uvicorn\n    uvicorn.run(app, port=8000)Copy to clipboardErrorCopied\n\nNow, run uv run app.py.\n\n1. When you visit <http://localhost:8000/> you’ll be redirected to a Google login page.\n2. When you log in, you’ll be redirected back to <http://localhost:8000/>\n3. Now you’ll see the email ID you logged in with.\n\nInstead of displaying the email, you can show different content based on the user. For example:\n\n Allow access to specfic users and not others\n Fetch the user’s personalized information\n Display different content based on the user\n\nPrevious\n\nWeb Framework: FastAPI\n\nNext\n\nLocal LLMs: Ollama"
  },
  {
    "title": "Authentication: Google Auth",
    "filename": "Authentication__Google_Auth.md",
    "text": "Google Authentication with FastAPI\n-----------------------------------------------------------------------------------------\n\nSecure your API endpoints using Google ID tokens to restrict access to specific email addresses.\n\n[](https://youtu.be/4ExQYRCwbzw)\n\nGoogle Auth is the most commonly implemented single sign-on mechanism because:\n\n It’s popular and user-friendly. Users can log in with their existing Google accounts.\n It’s secure: Google supports OAuth2 and OpenID Connect to handle authentication.\n\nHere’s how you build a FastAPI app that identifies the user.\n\n1. Go to the Google Cloud Console – Credentials and click Create Credentials > OAuth client ID.\n2. Choose Web application, set your authorized redirect URIs (e.g., http://localhost:8000/).\n3. Copy the Client ID and Client Secret into a .env file:\n\n   \n   GOOGLECLIENTID=your-client-id.apps.googleusercontent.com\n   GOOGLECLIENTSECRET=your-client-secretCopy to clipboardErrorCopied\n   \n4. Create your FastAPI app.py:\n\n/// script\ndependencies = [\"python-dotenv\", \"fastapi\", \"uvicorn\", \"itsdangerous\", \"httpx\", \"authlib\"]\n///\n\nimport os\nfrom dotenv import loaddotenv\nfrom fastapi import FastAPI, Request\nfrom fastapi.responses import RedirectResponse\nfrom starlette.middleware.sessions import SessionMiddleware\nfrom authlib.integrations.starletteclient import OAuth\n\nloaddotenv()\napp = FastAPI()\napp.addmiddleware(SessionMiddleware, secretkey=\"create-a-random-secret-key\")\n\noauth = OAuth()\noauth.register(\n    name=\"google\",\n    clientid=os.getenv(\"GOOGLECLIENTID\"),\n    clientsecret=os.getenv(\"GOOGLECLIENTSECRET\"),\n    servermetadataurl=\"https://accounts.google.com/.well-known/openid-configuration\",\n    clientkwargs={\"scope\": \"openid email profile\"},\n)\n\n@app.get(\"/\")\nasync def application(request: Request):\n    user = request.session.get(\"user\")\n     3. For authenticated users: say hello\n    if user:\n        return f\"Hello {user['email']}\"\n     2. For users who have just logged in, save their details in the session\n    if \"code\" in request.queryparams:\n        token = await oauth.google.authorizeaccesstoken(request)\n        request.session[\"user\"] = token[\"userinfo\"]\n        return RedirectResponse(\"/\")\n     1. For users who are logging in for the first time, redirect to Google login\n    return await oauth.google.authorizeredirect(request, request.url)\n\nif name == \"main\":\n    import uvicorn\n    uvicorn.run(app, port=8000)Copy to clipboardErrorCopied\n\nNow, run uv run app.py.\n\n1. When you visit <http://localhost:8000/> you’ll be redirected to a Google login page.\n2. When you log in, you’ll be redirected back to <http://localhost:8000/>\n3. Now you’ll see the email ID you logged in with.\n\nInstead of displaying the email, you can show different content based on the user. For example:\n\n Allow access to specfic users and not others\n Fetch the user’s personalized information\n Display different content based on the user\n\nPrevious\n\nWeb Framework: FastAPI\n\nNext\n\nLocal LLMs: Ollama"
  },
  {
    "title": "TDS GPT Reviewer",
    "filename": "TDS_GPT_Reviewer.md",
    "text": "TDS GPT Reviewer\n==========================================================\n\nAfter the later parts of this course’s contents were written, we ran it through a Technical Content Reviewer GPT.\n\nTake a look at the GPT’s instructions. These were generated by the OpenAI Prompt Generation tool.\n\nAs a Content Reviewer for a high school–level course on Tools in Data Science, your job is to evaluate provided content (such as text, code snippets, or references) with a focus on correctness, clarity, and conciseness, and offer actionable feedback for improvement.\n\n1. Check for Correctness and Consistency\n   - Verify technical and factual accuracy.\n   - Ensure internal consistency without contradictions.\n2. Check for Clarity and Approachability\n   - Ensure content is understandable for a high school student with limited prior knowledge.\n   - Identify and simplify jargon or advanced concepts.\n3. Check for Conciseness\n   - Assess if content is direct and free of unnecessary verbosity.\n   - Identify areas for streamlining to enhance readability.\n4. Provide Feedback for Improvement\n   - Offer actionable suggestions for fixing, clarifying, or reorganizing content.\n   - Propose alternative phrasing if text is vague, complex, or verbose.\n\nSteps\n\n1. Carefully read the entire content before forming conclusions.\n2. List factual inconsistencies or missing details causing confusion.\n3. Suggest simpler terms or analogies for complex language.\n4. Point out unnecessary repetition or filler text.\n5. Provide direct examples of how to improve the highlighted issues.\n\nOutput Format\n\nRespond using Markdown with the following structure:\n\n1. Summary of Findings\n   - A concise paragraph outlining overall strengths and weaknesses.\n2. Detailed Review\n   - Correctness and Consistency: Note factual errors or inconsistencies, suggesting corrections.\n   - Clarity and Approachability: Identify overly advanced or unclear sections, offering simpler alternatives.\n   - Conciseness: Highlight long or repetitive sections with suggestions for tightening the text.\n3. Actionable Improvement Suggestions\n   - Provide specific sentences, bullet points, or rewritten examples to illustrate improvements.\n\nNotes\n\n- Maintain a constructive review tone, not content generation.\n- Even if content is perfect, confirm with suggestions for minor improvements (e.g., adding an example or clarifying a subtle point).Copy to clipboardErrorCopied\n\nContent creation prompts\n--------------------------------------------------------------------------\n\nIn addition, here are a few prompts used to create the content:\n\n1. Video summaries. Transcribe the video via YouTube Transcript or Whisper. Then: Summarize this video transcript crisply for a high school student.\n\nPrevious\n\nTDS TA Instructions\n\nNext\n\nLLM Sentiment Analysis"
  },
  {
    "title": "Data Transformation in Excel",
    "filename": "Data_Transformation_in_Excel.md",
    "text": "Data Transformation in Excel\n----------------------------------------------------------------------------------------------\n\n[](https://youtu.be/gR2IY5Naja0)\n\nYou’ll learn data transformation techniques in Excel, covering:\n\n Calculating Ratios: Compute metro area to city area and metro population to city population ratios.\n Using Pivot Tables: Create pivot tables to aggregate data and identify outliers.\n Filtering Data: Apply filters in pivot tables to analyze specific subsets of data.\n Counting Data Occurrences: Use pivot tables to count the frequency of specific entries.\n Creating Charts: Generate charts from pivot table data to visualize distributions and outliers.\n\nHere are links used in the video:\n\n List of Largest Cities Excel file\n\nPrevious\n\nData Cleansing in Excel\n\nNext\n\nSplitting Text in Excel"
  },
  {
    "title": "Unicode",
    "filename": "Unicode.md",
    "text": "Unicode\n-------------------------------\n\nEver noticed when you copy-paste some text and get garbage symbols? Or see garbage when you load a CSV file? This video explains why. It covers how computers store text (called character encoding) and why it sometimes goes wonky.\n\nLearn about ASCII (the original 7-bit encoding system that could only handle 128 characters), why that wasn’t enough for global languages, and how modern solutions like Unicode save the day by letting us use any character from any language.\n\nSome programs try to guess encodings (sometimes badly!). A signature called BOM (Byte Order Mark)helps computers know exactly how to read text files correctly.\n\nLearn how Unicode, UTF-8 and character encoding works. This is a common gotcha when building apps that handle international text - something bootcamps often skip but developers and data scientists regularly face in the real world.\n\nUnicode is fundamental for data scientists working with international data. Here are key concepts you need to understand:\n\n Character Encodings: Different ways to represent text in computers\n  + ASCII (7-bit): Limited to 128 characters, English-only\n  + UTF-8: Variable-width encoding, backwards compatible with ASCII\n  + UTF-16: Fixed-width encoding, used in Windows and Java\n  + UTF-32: Fixed-width encoding, memory inefficient but simple\n\nCommon encoding issues you’ll encounter:\n\nReading files with explicit encoding\nwith open('file.txt', encoding='utf-8') as f:\n    text = f.read()\n\nHandling encoding errors\nimport pandas as pd\ndf = pd.readcsv('data.csv', encoding='utf-8', errors='replace')\n\nDetecting file encoding\nimport chardet\nwith open('unknown.txt', 'rb') as f:\n    result = chardet.detect(f.read())\nprint(result['encoding'])Copy to clipboardErrorCopied\n\n[](https://youtu.be/jeIBNn5Y5fI)\n\nPrevious\n\nJavaScript tools: npx\n\nNext\n\nBrowser: DevTools"
  },
  {
    "title": "Prompt engineering",
    "filename": "Prompt_engineering.md",
    "text": "Prompt Engineering\n----------------------------------------------------------------\n\nPrompt engineering is the process of crafting effective prompts for large language models (LLMs).\n\nOne of the best ways to approach prompt engineering is to think of LLMs as a smart colleague (with amnesia) who needs explicit instructions.\n\nThe most authoritative guides are from the LLM providers themselves:\n\n Anthropic\n Google\n OpenAI\n\nHere are some best practices:\n\nUse prompt optimizers\n\nThey rewrite your prompt to improve it. Explore:\n\n Anthropic Prompt Optimizer\n OpenAI Prompt Generation\n Google AI-powered prompt writing tools\n\nBe clear, direct, and detailed\n\nBe explicit and thorough. Include all necessary context, goals, and details so the model understands the full picture.\n\n BAD: Explain gravitation lensing. (Reason: Vague and lacks context or detail.)\n GOOD: Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy. (Reason: Specifies the audience, scope, and focus.)\n\n> When you ask a question, don’t be vague. Spell it out. Give every detail the listener needs.\n> The clearer you are, the better the answer you’ll get.\n> For example, don’t just say, Explain Gravitation Lensing.\n> Say, Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy.\n\nAnthropic\n| OpenAI\n| Google\n\nGive examples\n\nProvide 2-3 relevant examples to guide the model on the style, structure, or format you expect. This helps the model produce outputs consistent with your desired style.\n\n BAD: Explain how to tie a bow tie. (Reason: No examples or reference points given.)\n GOOD:\n  Explain how to tie a bow tie. For example:\n\n  1. To tie a shoelace, you cross the laces and pull them tight…\n  2. To tie a necktie, you place it around the collar and loop it through…\n\n  Now, apply a similar step-by-step style to describe how to tie a bow tie. (Reason: Provides clear examples and a pattern to follow.)\n\n> Give examples to the model. If you want someone to build a house, show them a sketch. Don’t just say ‘build something.’\n> Giving examples is like showing a pattern. It makes everything easier to follow.\n\nAnthropic\n| OpenAI\n| Google\n\nThink step by step\n\nInstruct the model to reason through the problem step by step. This leads to more logical, well-structured answers.\n\n BAD: Given this transcript, is the customer satisfied? (Reason: No prompt for structured reasoning.)\n GOOD: Given this transcript, is the customer satisfied? Think step by step. (Reason: Directly instructs the model to break down reasoning into steps.)\n\n> Ask the model to think step by step. Don’t ask the model to just give the final answer right away.\n> That’s like asking someone to answer with the first thing that pops into their head.\n> Instead, ask them to break down their thought process into simple moves — like showing each rung of a ladder as they climb.\n> For example, when thinking step by step, the model could, A, list each customer question, B, find out if it was addressed, and C, decide that the agent answered only 2 out of the 3 questions.\n\nAnthropic\n| OpenAI\n| Google\n\nAssign a role\n\nSpecify a role or persona for the model. This provides context and helps tailor the response style.\n\n BAD: Explain how to fix a software bug. (Reason: No role or perspective given.)\n GOOD: You are a seasoned software engineer. Explain how to fix a software bug in legacy code, including the debugging and testing process. (Reason: Assigns a clear, knowledgeable persona, guiding the style and depth.)\n\n> Tell the model who they are. Maybe they’re a seasoned software engineer fixing a legacy bug, or an experienced copy editor revising a publication.\n> By clearly telling the model who they are, you help them speak with just the right expertise and style.\n> Suddenly, your explanation sounds like it’s coming from a true specialist, not a random voice.\n\nAnthropic\n| OpenAI\n| Google\n\nUse XML to structure your prompt\n\nUse XML tags to separate different parts of the prompt clearly. This helps the model understand structure and requirements.\n\n BAD: Here’s what I want: Provide a summary and then an example. (Reason: Unstructured, no clear separation of tasks.)\n GOOD:\n\n  \n  <instructions>\n    Provide a summary of the concept of machine learning.\n  </instructions>\n  <example>\n    Then provide a simple, concrete example of a machine learning application (e.g., an email spam filter).\n  </example>Copy to clipboardErrorCopied\n  \n\n  (Reason: Uses XML tags to clearly distinguish instructions from examples.)\n\n> Think of your request like a box. XML tags are neat little labels on that box.\n> They help keep parts sorted, so nothing gets lost in the shuffle.\n\nAnthropic\n| OpenAI\n| Google\n\nUse Markdown to format your output\n\nEncourage the model to use Markdown for headings, lists, code blocks, and other formatting features to produce structured, easily readable answers.\n\n BAD: Give me the steps in plain text. (Reason: No specific formatting instructions, less readable.)\n GOOD: Provide the steps in a markdown-formatted list with  headings for each section and numbered bullet points. (Reason: Directly instructs to use Markdown formatting, making output more structured and clear.)\n BAD: Correct the spelling and show the corrections. (Reason: No specific formatting instructions)\n GOOD: Correct the spelling, showing <ins>additions</ins> and <del>deletions</del>. (Reason: Directly instructs to use HTML formatting, making output more structured and clear.)\n\n> Markdown is a simple formatting language that all models understand.\n> You can have them add neat headings, sections, bold highlights, and bullet points.\n> These make complex documents more scannable and easy on the eyes.\n\nUse JSON for machine-readable output\n\nWhen you need structured data, ask for a JSON-formatted response. This ensures the output is machine-readable and organized.\n\n BAD: Just list the items. (Reason: Unstructured plain text makes parsing harder.)\n GOOD:\n\n  \n  Organize as an array of objects in a JSON format, like this:\n\n  json\n  [\n    { \"name\": \"Item 1\", \"description\": \"Description of Item 1\" },\n    { \"name\": \"Item 2\", \"description\": \"Description of Item 2\" },\n    { \"name\": \"Item 3\", \"description\": \"Description of Item 3\" }\n  ]\n  Copy to clipboardErrorCopied\n  \n\n  (Reason: Instructing JSON format ensures structured, machine-readable output.)\n\nNote: Always use JSON schema if possible. JSON schema is a way to describe the structure of JSON data. An easy way to get the JSON schema is to give ChatGPT sample output and ask it to generate the schema.\n\n> Imagine you’re organizing data for a big project. Plain text is like dumping everything into one messy pile — it’s hard to find what you need later.\n> JSON, on the other hand, is like packing your data into neat, labeled boxes within boxes.\n> Everything has its place: fields like ‘name,’ ‘description,’ and ‘value’ make the data easy to read, especially for machines.\n> For example, instead of just listing items, you can structure them as a JSON array, with each item as an object.\n> That way, when you hand it to a program, it’s all clear and ready to use.\n\nPrefer Yes/No answers\n\nConvert rating or percentage questions into Yes/No queries. LLMs handle binary choices better than numeric scales.\n\n BAD: On a scale of 1-10, how confident are you that this method works? (Reason: Asks for a numeric rating, which can be imprecise.)\n GOOD: Is this method likely to work as intended? Please give a reasoning and then answer Yes or No. (Reason: A binary question simplifies the response and clarifies what’s being asked.)\n\n> Don’t ask ‘On a scale of one to five…’. Models are not good with numbers.\n> They don’t know how to grade something 7 versus 8 on a 10 point scale. ‘Yes or no?’ is simple. It’s clear. It’s quick.\n> So, break your question into simple parts that they can answer with just a yes or a no.\n\nAsk for reason first, then the answer\n\nInstruct the model to provide its reasoning steps before stating the final answer. This makes it less likely to justify itself and more likely to think deeper, leading to more accurate results.\n\n BAD: What is the best route to take? (Reason: Direct question without prompting reasoning steps first.)\n GOOD: First, explain your reasoning step by step for how you determine the best route. Then, after you’ve reasoned it out, state your final recommendation for the best route. (Reason: Forces the model to show its reasoning process before giving the final answer.)\n\n> BEFORE making its final choice, have the model talk through their thinking. Reasoning first, answer second.\n> That way, the model won’t be tempted to justify an answer that they gave impulsively. It is also more likely to think deeper.\n\nUse proper spelling and grammar\n\nA well-written, grammatically correct prompt clarifies expectations. Poorly structured prompts can confuse the model.\n\n BAD: xplin wht the weirless netork do? make shur to giv me a anser?? (Reason: Poor spelling and unclear instructions.)\n GOOD: Explain what a wireless network does. Please provide a detailed, step-by-step explanation. (Reason: Proper spelling and clarity lead to a more coherent response.)\n\n> If your question sounds like gibberish, expect a messy answer. Speak cleanly.\n> When you do, the response will be much clearer.\n\nVideo Tutorials\n----------------------------------------------------------\n\nWatch Prompt Engineering Tutorial – Master ChatGPT and LLM Responses (41 min). It covers:\n\n1. Basics of AI and large language models.\n2. How to write clear and detailed prompts to improve answers.\n3. Tips for creating interactive and personalized AI responses.\n4. Advanced topics like AI mistakes (hallucinations) and text embeddings (how AI understands words).\n5. Fun examples, like making AI write poems or correct grammar.\n\n[](https://youtu.be/ZvnD73m40o)\n\nPrevious\n\n3. Large Language Models\n\nNext\n\nTDS TA Instructions"
  },
  {
    "title": "Prompt engineering",
    "filename": "Prompt_engineering.md",
    "text": "Prompt Engineering\n----------------------------------------------------------------\n\nPrompt engineering is the process of crafting effective prompts for large language models (LLMs).\n\nOne of the best ways to approach prompt engineering is to think of LLMs as a smart colleague (with amnesia) who needs explicit instructions.\n\nThe most authoritative guides are from the LLM providers themselves:\n\n Anthropic\n Google\n OpenAI\n\nHere are some best practices:\n\nUse prompt optimizers\n\nThey rewrite your prompt to improve it. Explore:\n\n Anthropic Prompt Optimizer\n OpenAI Prompt Generation\n Google AI-powered prompt writing tools\n\nBe clear, direct, and detailed\n\nBe explicit and thorough. Include all necessary context, goals, and details so the model understands the full picture.\n\n BAD: Explain gravitation lensing. (Reason: Vague and lacks context or detail.)\n GOOD: Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy. (Reason: Specifies the audience, scope, and focus.)\n\n> When you ask a question, don’t be vague. Spell it out. Give every detail the listener needs.\n> The clearer you are, the better the answer you’ll get.\n> For example, don’t just say, Explain Gravitation Lensing.\n> Say, Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy.\n\nAnthropic\n| OpenAI\n| Google\n\nGive examples\n\nProvide 2-3 relevant examples to guide the model on the style, structure, or format you expect. This helps the model produce outputs consistent with your desired style.\n\n BAD: Explain how to tie a bow tie. (Reason: No examples or reference points given.)\n GOOD:\n  Explain how to tie a bow tie. For example:\n\n  1. To tie a shoelace, you cross the laces and pull them tight…\n  2. To tie a necktie, you place it around the collar and loop it through…\n\n  Now, apply a similar step-by-step style to describe how to tie a bow tie. (Reason: Provides clear examples and a pattern to follow.)\n\n> Give examples to the model. If you want someone to build a house, show them a sketch. Don’t just say ‘build something.’\n> Giving examples is like showing a pattern. It makes everything easier to follow.\n\nAnthropic\n| OpenAI\n| Google\n\nThink step by step\n\nInstruct the model to reason through the problem step by step. This leads to more logical, well-structured answers.\n\n BAD: Given this transcript, is the customer satisfied? (Reason: No prompt for structured reasoning.)\n GOOD: Given this transcript, is the customer satisfied? Think step by step. (Reason: Directly instructs the model to break down reasoning into steps.)\n\n> Ask the model to think step by step. Don’t ask the model to just give the final answer right away.\n> That’s like asking someone to answer with the first thing that pops into their head.\n> Instead, ask them to break down their thought process into simple moves — like showing each rung of a ladder as they climb.\n> For example, when thinking step by step, the model could, A, list each customer question, B, find out if it was addressed, and C, decide that the agent answered only 2 out of the 3 questions.\n\nAnthropic\n| OpenAI\n| Google\n\nAssign a role\n\nSpecify a role or persona for the model. This provides context and helps tailor the response style.\n\n BAD: Explain how to fix a software bug. (Reason: No role or perspective given.)\n GOOD: You are a seasoned software engineer. Explain how to fix a software bug in legacy code, including the debugging and testing process. (Reason: Assigns a clear, knowledgeable persona, guiding the style and depth.)\n\n> Tell the model who they are. Maybe they’re a seasoned software engineer fixing a legacy bug, or an experienced copy editor revising a publication.\n> By clearly telling the model who they are, you help them speak with just the right expertise and style.\n> Suddenly, your explanation sounds like it’s coming from a true specialist, not a random voice.\n\nAnthropic\n| OpenAI\n| Google\n\nUse XML to structure your prompt\n\nUse XML tags to separate different parts of the prompt clearly. This helps the model understand structure and requirements.\n\n BAD: Here’s what I want: Provide a summary and then an example. (Reason: Unstructured, no clear separation of tasks.)\n GOOD:\n\n  \n  <instructions>\n    Provide a summary of the concept of machine learning.\n  </instructions>\n  <example>\n    Then provide a simple, concrete example of a machine learning application (e.g., an email spam filter).\n  </example>Copy to clipboardErrorCopied\n  \n\n  (Reason: Uses XML tags to clearly distinguish instructions from examples.)\n\n> Think of your request like a box. XML tags are neat little labels on that box.\n> They help keep parts sorted, so nothing gets lost in the shuffle.\n\nAnthropic\n| OpenAI\n| Google\n\nUse Markdown to format your output\n\nEncourage the model to use Markdown for headings, lists, code blocks, and other formatting features to produce structured, easily readable answers.\n\n BAD: Give me the steps in plain text. (Reason: No specific formatting instructions, less readable.)\n GOOD: Provide the steps in a markdown-formatted list with  headings for each section and numbered bullet points. (Reason: Directly instructs to use Markdown formatting, making output more structured and clear.)\n BAD: Correct the spelling and show the corrections. (Reason: No specific formatting instructions)\n GOOD: Correct the spelling, showing <ins>additions</ins> and <del>deletions</del>. (Reason: Directly instructs to use HTML formatting, making output more structured and clear.)\n\n> Markdown is a simple formatting language that all models understand.\n> You can have them add neat headings, sections, bold highlights, and bullet points.\n> These make complex documents more scannable and easy on the eyes.\n\nUse JSON for machine-readable output\n\nWhen you need structured data, ask for a JSON-formatted response. This ensures the output is machine-readable and organized.\n\n BAD: Just list the items. (Reason: Unstructured plain text makes parsing harder.)\n GOOD:\n\n  \n  Organize as an array of objects in a JSON format, like this:\n\n  json\n  [\n    { \"name\": \"Item 1\", \"description\": \"Description of Item 1\" },\n    { \"name\": \"Item 2\", \"description\": \"Description of Item 2\" },\n    { \"name\": \"Item 3\", \"description\": \"Description of Item 3\" }\n  ]\n  Copy to clipboardErrorCopied\n  \n\n  (Reason: Instructing JSON format ensures structured, machine-readable output.)\n\nNote: Always use JSON schema if possible. JSON schema is a way to describe the structure of JSON data. An easy way to get the JSON schema is to give ChatGPT sample output and ask it to generate the schema.\n\n> Imagine you’re organizing data for a big project. Plain text is like dumping everything into one messy pile — it’s hard to find what you need later.\n> JSON, on the other hand, is like packing your data into neat, labeled boxes within boxes.\n> Everything has its place: fields like ‘name,’ ‘description,’ and ‘value’ make the data easy to read, especially for machines.\n> For example, instead of just listing items, you can structure them as a JSON array, with each item as an object.\n> That way, when you hand it to a program, it’s all clear and ready to use.\n\nPrefer Yes/No answers\n\nConvert rating or percentage questions into Yes/No queries. LLMs handle binary choices better than numeric scales.\n\n BAD: On a scale of 1-10, how confident are you that this method works? (Reason: Asks for a numeric rating, which can be imprecise.)\n GOOD: Is this method likely to work as intended? Please give a reasoning and then answer Yes or No. (Reason: A binary question simplifies the response and clarifies what’s being asked.)\n\n> Don’t ask ‘On a scale of one to five…’. Models are not good with numbers.\n> They don’t know how to grade something 7 versus 8 on a 10 point scale. ‘Yes or no?’ is simple. It’s clear. It’s quick.\n> So, break your question into simple parts that they can answer with just a yes or a no.\n\nAsk for reason first, then the answer\n\nInstruct the model to provide its reasoning steps before stating the final answer. This makes it less likely to justify itself and more likely to think deeper, leading to more accurate results.\n\n BAD: What is the best route to take? (Reason: Direct question without prompting reasoning steps first.)\n GOOD: First, explain your reasoning step by step for how you determine the best route. Then, after you’ve reasoned it out, state your final recommendation for the best route. (Reason: Forces the model to show its reasoning process before giving the final answer.)\n\n> BEFORE making its final choice, have the model talk through their thinking. Reasoning first, answer second.\n> That way, the model won’t be tempted to justify an answer that they gave impulsively. It is also more likely to think deeper.\n\nUse proper spelling and grammar\n\nA well-written, grammatically correct prompt clarifies expectations. Poorly structured prompts can confuse the model.\n\n BAD: xplin wht the weirless netork do? make shur to giv me a anser?? (Reason: Poor spelling and unclear instructions.)\n GOOD: Explain what a wireless network does. Please provide a detailed, step-by-step explanation. (Reason: Proper spelling and clarity lead to a more coherent response.)\n\n> If your question sounds like gibberish, expect a messy answer. Speak cleanly.\n> When you do, the response will be much clearer.\n\nVideo Tutorials\n----------------------------------------------------------\n\nWatch Prompt Engineering Tutorial – Master ChatGPT and LLM Responses (41 min). It covers:\n\n1. Basics of AI and large language models.\n2. How to write clear and detailed prompts to improve answers.\n3. Tips for creating interactive and personalized AI responses.\n4. Advanced topics like AI mistakes (hallucinations) and text embeddings (how AI understands words).\n5. Fun examples, like making AI write poems or correct grammar.\n\n[](https://youtu.be/ZvnD73m40o)\n\nPrevious\n\n3. Large Language Models\n\nNext\n\nTDS TA Instructions"
  },
  {
    "title": "LLM Website Scraping",
    "filename": "LLM_Website_Scraping.md",
    "text": "LLM Website Scraping\n----------------------------------------------------------------------\n\nPrevious\n\nConvert HTML to Markdown\n\nNext\n\nLLM Video Screen-Scraping"
  },
  {
    "title": "AI Terminal Tools: llm",
    "filename": "AI_Terminal_Tools__llm.md",
    "text": "LLM CLI: llm\n------------------------------------\n\nllm is a command-line utility for interacting with large language models—simplifying prompts, managing models and plugins, logging every conversation, and extracting structured data for pipelines.\n\n[](https://youtu.be/QUXQNi6jQ30?t=100)\n\nBasic Usage\n\nInstall llm. Then set up your OPENAIAPIKEY environment variable. See Getting started.\n\nTDS Students: See Large Language Models for instructions on how to get and use OPENAIAPIKEY.\n\nRun a simple prompt\nllm 'five great names for a pet pelican'\n\nContinue a conversation\nllm -c 'now do walruses'\n\nStart a memory-aware chat session\nllm chat\n\nSpecify a model\nllm -m gpt-4.1-nano 'Summarize tomorrow’s meeting agenda'\n\nExtract JSON output\nllm 'List the top 5 Python viz libraries with descriptions' \\\n  --schema-multi 'name,description'Copy to clipboardErrorCopied\n\nOr use llm without installation using uvx:\n\nRun llm via uvx without any prior installation\nuvx llm 'Translate \"Hello, world\" into Japanese'\n\nSpecify a model\nuvx llm -m gpt-4.1-nano 'Draft a 200-word blog post on data ethics'\n\nUse structured JSON output\nuvx llm 'List the top 5 programming languages in 2025 with their release years' \\\n  --schema-multi 'rank,language,releaseyear'Copy to clipboardErrorCopied\n\nKey Features\n\n Interactive prompts: llm '…' — Fast shell access to any LLM.\n Conversational flow: -c '…' — Continue context across prompts.\n Model switching: -m MODEL — Use OpenAI, Anthropic, local models, and more.\n Structured output: llm json — Produce JSON for automation.\n Logging & history: llm logs path — Persist every prompt/response in SQLite.\n Web UI: datasette \"$(llm logs path)\" — Browse your entire history with Datasette.\n Persistent chat: llm chat — Keep the model in memory across multiple interactions.\n Plugin ecosystem: llm install PLUGIN — Add support for new models, data sources, or workflows. (Language models on the command-line - Simon Willison’s Weblog)\n\nPractical Uses\n\n Automated coding. Generate code scaffolding, review helpers, or utilities on demand. For example, after runningllm install llm-cmd, run llm cmd 'Undo the last git commit'. Inspired by Simon’s post on using LLMs for rapid tool building.\n Transcript processing. Summarize YouTube or podcast transcripts using Gemini. See Putting Gemini 2.5 Pro through its paces.\n Commit messages. Turn diffs into descriptive commit messages, e.g. git diff | llm 'Write a concise git commit message explaining these changes'. \\\n Data extraction. Convert free-text into structured JSON for automation. Structured data extraction from unstructured content using LLM schemas.\n\nPrevious\n\nTerminal: Bash\n\nNext\n\nSpreadsheet: Excel, Google Sheets"
  },
  {
    "title": "AI Terminal Tools: llm",
    "filename": "AI_Terminal_Tools__llm.md",
    "text": "LLM CLI: llm\n------------------------------------\n\nllm is a command-line utility for interacting with large language models—simplifying prompts, managing models and plugins, logging every conversation, and extracting structured data for pipelines.\n\n[](https://youtu.be/QUXQNi6jQ30?t=100)\n\nBasic Usage\n\nInstall llm. Then set up your OPENAIAPIKEY environment variable. See Getting started.\n\nTDS Students: See Large Language Models for instructions on how to get and use OPENAIAPIKEY.\n\nRun a simple prompt\nllm 'five great names for a pet pelican'\n\nContinue a conversation\nllm -c 'now do walruses'\n\nStart a memory-aware chat session\nllm chat\n\nSpecify a model\nllm -m gpt-4.1-nano 'Summarize tomorrow’s meeting agenda'\n\nExtract JSON output\nllm 'List the top 5 Python viz libraries with descriptions' \\\n  --schema-multi 'name,description'Copy to clipboardErrorCopied\n\nOr use llm without installation using uvx:\n\nRun llm via uvx without any prior installation\nuvx llm 'Translate \"Hello, world\" into Japanese'\n\nSpecify a model\nuvx llm -m gpt-4.1-nano 'Draft a 200-word blog post on data ethics'\n\nUse structured JSON output\nuvx llm 'List the top 5 programming languages in 2025 with their release years' \\\n  --schema-multi 'rank,language,releaseyear'Copy to clipboardErrorCopied\n\nKey Features\n\n Interactive prompts: llm '…' — Fast shell access to any LLM.\n Conversational flow: -c '…' — Continue context across prompts.\n Model switching: -m MODEL — Use OpenAI, Anthropic, local models, and more.\n Structured output: llm json — Produce JSON for automation.\n Logging & history: llm logs path — Persist every prompt/response in SQLite.\n Web UI: datasette \"$(llm logs path)\" — Browse your entire history with Datasette.\n Persistent chat: llm chat — Keep the model in memory across multiple interactions.\n Plugin ecosystem: llm install PLUGIN — Add support for new models, data sources, or workflows. (Language models on the command-line - Simon Willison’s Weblog)\n\nPractical Uses\n\n Automated coding. Generate code scaffolding, review helpers, or utilities on demand. For example, after runningllm install llm-cmd, run llm cmd 'Undo the last git commit'. Inspired by Simon’s post on using LLMs for rapid tool building.\n Transcript processing. Summarize YouTube or podcast transcripts using Gemini. See Putting Gemini 2.5 Pro through its paces.\n Commit messages. Turn diffs into descriptive commit messages, e.g. git diff | llm 'Write a concise git commit message explaining these changes'. \\\n Data extraction. Convert free-text into structured JSON for automation. Structured data extraction from unstructured content using LLM schemas.\n\nPrevious\n\nTerminal: Bash\n\nNext\n\nSpreadsheet: Excel, Google Sheets"
  },
  {
    "title": "Geospatial Analysis with QGIS",
    "filename": "Geospatial_Analysis_with_QGIS.md",
    "text": "Geospatial Analysis with QGIS\n-------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/tJhehs0o-ik)\n\nYou’ll learn how to use QGIS for geographic data processing, covering:\n\n Shapefiles and KML Files: Create and manage shapefiles and KML files for storing and analyzing geographic information.\n Downloading QGIS: Install QGIS on different operating systems and familiarize yourself with its interface.\n Geospatial Data: Access and utilize shapefiles from sources like Diva-GIS and integrate them into QGIS projects.\n Creating Custom Shapefiles: Learn how to create custom shapefiles when existing ones are unavailable, including creating a shapefile for South Sudan.\n Editing and Visualization: Use QGIS tools to edit shapefiles, add attributes, and visualize geographic data with various styling and labeling options.\n Exporting Data: Export shapefiles or KML files for use in other applications, such as Google Earth.\n\nHere are links used in the video:\n\n QGIS Project\n Shapefile Data\n\nPrevious\n\nGeospatial Analysis with Python\n\nNext\n\nNetwork Analysis in Python"
  },
  {
    "title": "Scraping: Live Sessions",
    "filename": "Scraping__Live_Sessions.md",
    "text": "Scraping: Live Sessions\n-----------------------------------------------------------------------------\n\n[](https://youtu.be/cAriusuJsmw)\n\nFundamentals of web scraping with urllib and BeautifulSoup\n\n[](https://youtu.be/I3auyTYORTs)\n\nIntermediate web scraping use of cookies\n\n[](https://youtu.be/DryMIxMf3VU)\n\nXML intro and scraping\n\n[](https://youtu.be/8SjvsjtaYg)\n\nPrevious\n\nScraping emarketer.com\n\nNext\n\n5. Data Preparation"
  },
  {
    "title": "3. Large Language Models",
    "filename": "3._Large_Language_Models.md",
    "text": "Large Language Models\n=========================================================================\n\nThis module covers the practical usage of large language models (LLMs).\n\nLLMs incur a cost. For the May 2025 batch, use aipipe.org as a proxy.\nEmails with @ds.study.iitm.ac.in get a $1 per calendar month allowance. (Don’t exceed that.)\n\nRead the AI Pipe documentation to learn how to use it. But in short:\n\n1. Replace OPENAIBASEURL, i.e. https://api.openai.com/v1 with https://aipipe.org/openrouter/v1... or https://aipipe.org/openai/v1...\n2. Replace OPENAIAPIKEY with the AIPIPETOKEN\n3. Replace model names, e.g. gpt-4.1-nano, with openai/gpt-4.1-nano\n\nFor example, let’s use Gemini 2.0 Flash Lite via OpenRouter for chat completions and Text Embedding 3 Small via OpenAI for embeddings:\n\ncurl https://aipipe.org/openrouter/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $AIPIPETOKEN\" \\\n  -d '{\n    \"model\": \"google/gemini-2.0-flash-lite-001\",\n    \"messages\": [{ \"role\": \"user\", \"content\": \"What is 2 + 2?\"} }]\n  }'\n\ncurl https://aipipe.org/openai/v1/embeddings \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $AIPIPETOKEN\" \\\n  -d '{ \"model\": \"text-embedding-3-small\", \"input\": \"What is 2 + 2?\" }'Copy to clipboardErrorCopied\n\nOr using llm:\n\nllm keys set openai --value $AIPIPETOKEN\n\nexport OPENAIBASEURL=https://aipipe.org/openrouter/v1\nllm 'What is 2 + 2?' -m openrouter/google/gemini-2.0-flash-lite-001\n\nexport OPENAIBASEURL=https://aipipe.org/openai/v1\nllm embed -c 'What is 2 + 2' -m 3-smallCopy to clipboardErrorCopied\n\nFor a 50% discount (but slower speed), use Flex processing by adding servicetier: \"flex\" to your JSON request.\n\nAI Proxy - Jan 2025\n-------------------------------------------------------------------\n\nFor the Jan 2025 batch, we had created API keys for everyone with an iitm.ac.in email to use gpt-4o-mini and text-embedding-3-small. Your usage is limited to $1 per calendar month for this course. Don’t exceed that.\n\nUse AI Proxy instead of OpenAI. Specifically:\n\n1. Replace your API to https://api.openai.com/... with https://aiproxy.sanand.workers.dev/openai/...\n2. Replace the OPENAIAPIKEY with the AIPROXYTOKEN that someone will give you.\n\nPrevious\n\nLocal LLMs: Ollama\n\nNext\n\nPrompt engineering"
  },
  {
    "title": "Visualizing Animated Data with PowerPoint",
    "filename": "Visualizing_Animated_Data_with_PowerPoint.md",
    "text": "Visualizing Animated Data with PowerPoint\n-------------------------------------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/umHlPDFVWr0)\n\n How to make a bar chart race in PowerPoint\n\nPrevious\n\nVisualizing Forecasts with Excel\n\nNext\n\nVisualizing Animated Data with Flourish"
  },
  {
    "title": "Scraping PDFs with Tabula",
    "filename": "Scraping_PDFs_with_Tabula.md",
    "text": "Scraping PDFs with Tabula\n-------------------------------------------------------------------------------------\n\n[](https://youtu.be/yDoKlKyxClQ)\n\nYou’ll learn how to scrape tables from PDFs using the tabula Python library, covering:\n\n Import Libraries: Use Beautiful Soup for URL parsing and Tabula for extracting tables from PDFs.\n Specify Save Location: Mount Google Drive to save scraped PDFs.\n Identify PDF URLs: Parse the given URL to identify and select all PDF links.\n Download PDFs: Loop through identified links, saving each PDF to the specified location.\n Extract Tables: Use Tabula to read tabular content from the downloaded PDFs.\n Control Extraction Area: Specify page and area coordinates to accurately extract tables, avoiding extraneous text.\n Save Extracted Data: Convert the extracted table data into structured formats like CSV for further analysis.\n\nHere are links and references:\n\n PDF Scraping - Notebook\n Learn about the tabula package\n Learn about the pandas package. Video\n\nPrevious\n\nWikipedia Data with Python\n\nNext\n\nConvert PDFs to Markdown"
  },
  {
    "title": "Spreadsheet: Excel, Google Sheets",
    "filename": "Spreadsheet__Excel,_Google_Sheets.md",
    "text": "Spreadsheet: Excel, Google Sheets\n--------------------------------------------------------------------------------------\n\nYou’ll use spreadsheets for data cleaning and exploration. The most popular spreadsheet program is Microsoft Excel followed by Google Sheets.\n\nYou may be already familiar with these. If not, make sure to learn the basics of both.\n\nGo through the Microsoft Excel video training and make sure you cover:\n\n Intro to Excel\n Rows & columns\n Cells\n Formatting\n Formulas & Functions\n Tables\n PivotTables\n\nWatch this video for an introduction to Google Sheets (49 min):\n\n[](https://youtu.be/TENAbUa-R-w)\n\nPrevious\n\nAI Terminal Tools: llm\n\nNext\n\nDatabase: SQLite"
  },
  {
    "title": "Database: SQLite",
    "filename": "Database__SQLite.md",
    "text": "Database: SQLite\n-----------------------------------------------\n\nRelational databases are used to store data in a structured way. You’ll often access databases created by others for analysis.\n\nPostgreSQL, MySQL, MS SQL, Oracle, etc. are popular databases. But the most installed database is SQLite. It’s embedded into many devices and apps (e.g. your phone, browser, etc.). It’s lightweight but very scalable and powerful.\n\nWatch these introductory videos to understand SQLite and how it’s used in Python (34 min):\n\n[](https://youtu.be/8Xyn8R9eKB8)\n\n[](https://youtu.be/Ohj-CqALrwk)\n\nThere are many non-relational databases (NoSQL) like ElasticSearch, MongoDB, Redis, etc. that you should know about and we may cover later.\n\nCore Concepts:\n\n-- Create a table\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT UNIQUE,\n    createdat DATETIME DEFAULT CURRENTTIMESTAMP\n);\n\n-- Insert data\nINSERT INTO users (name, email) VALUES\n    ('Alice', 'alice@example.com'),\n    ('Bob', 'bob@example.com');\n\n-- Query data\nSELECT name, COUNT() as count\nFROM users\nGROUP BY name\nHAVING count > 1;\n\n-- Join tables\nSELECT u.name, o.product\nFROM users u\nLEFT JOIN orders o ON u.id = o.userid\nWHERE o.status = 'pending';Copy to clipboardErrorCopied\n\nPython Integration:\n\nimport sqlite3\nfrom pathlib import Path\nimport pandas as pd\n\nasync def querydatabase(dbpath: Path, query: str) -> pd.DataFrame:\n    \"\"\"Execute SQL query and return results as DataFrame.\n\n    Args:\n        dbpath: Path to SQLite database\n        query: SQL query to execute\n\n    Returns:\n        DataFrame with query results\n    \"\"\"\n    try:\n        conn = sqlite3.connect(dbpath)\n        return pd.readsqlquery(query, conn)\n    finally:\n        conn.close()\n\nExample usage\ndb = Path('data.db')\ndf = await querydatabase(db, '''\n    SELECT date, COUNT() as count\n    FROM events\n    GROUP BY date\n''')Copy to clipboardErrorCopied\n\nCommon Operations:\n\n1. Database Management\n\n   \n   -- Backup database\n   .backup 'backup.db'\n\n   -- Import CSV\n   .mode csv\n   .import data.csv tablename\n\n   -- Export results\n   .headers on\n   .mode csv\n   .output results.csv\n   SELECT  FROM table;Copy to clipboardErrorCopied\n   \n2. Performance Optimization\n\n   \n   -- Create index\n   CREATE INDEX idxuseremail ON users(email);\n\n   -- Analyze query\n   EXPLAIN QUERY PLAN\n   SELECT  FROM users WHERE email LIKE '%@example.com';\n\n   -- Show indexes\n   SELECT  FROM sqlitemaster WHERE type='index';Copy to clipboardErrorCopied\n   \n3. Data Analysis\n\n   \n   -- Time series aggregation\n   SELECT\n       date(timestamp),\n       COUNT() as events,\n       AVG(duration) as avgduration\n   FROM events\n   GROUP BY date(timestamp);\n\n   -- Window functions\n   SELECT ,\n       AVG(amount) OVER (\n           PARTITION BY userid\n           ORDER BY date\n           ROWS BETWEEN 3 PRECEDING AND CURRENT ROW\n       ) as movingavg\n   FROM transactions;Copy to clipboardErrorCopied\n   \n\nTools to work with SQLite:\n\n SQLiteStudio: Lightweight GUI\n DBeaver: Full-featured GUI\n sqlite-utils: CLI tool\n Datasette: Web interface\n\nPrevious\n\nSpreadsheet: Excel, Google Sheets\n\nNext\n\nVersion Control: Git, GitHub"
  },
  {
    "title": "Database: SQLite",
    "filename": "Database__SQLite.md",
    "text": "Database: SQLite\n-----------------------------------------------\n\nRelational databases are used to store data in a structured way. You’ll often access databases created by others for analysis.\n\nPostgreSQL, MySQL, MS SQL, Oracle, etc. are popular databases. But the most installed database is SQLite. It’s embedded into many devices and apps (e.g. your phone, browser, etc.). It’s lightweight but very scalable and powerful.\n\nWatch these introductory videos to understand SQLite and how it’s used in Python (34 min):\n\n[](https://youtu.be/8Xyn8R9eKB8)\n\n[](https://youtu.be/Ohj-CqALrwk)\n\nThere are many non-relational databases (NoSQL) like ElasticSearch, MongoDB, Redis, etc. that you should know about and we may cover later.\n\nCore Concepts:\n\n-- Create a table\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT UNIQUE,\n    createdat DATETIME DEFAULT CURRENTTIMESTAMP\n);\n\n-- Insert data\nINSERT INTO users (name, email) VALUES\n    ('Alice', 'alice@example.com'),\n    ('Bob', 'bob@example.com');\n\n-- Query data\nSELECT name, COUNT() as count\nFROM users\nGROUP BY name\nHAVING count > 1;\n\n-- Join tables\nSELECT u.name, o.product\nFROM users u\nLEFT JOIN orders o ON u.id = o.userid\nWHERE o.status = 'pending';Copy to clipboardErrorCopied\n\nPython Integration:\n\nimport sqlite3\nfrom pathlib import Path\nimport pandas as pd\n\nasync def querydatabase(dbpath: Path, query: str) -> pd.DataFrame:\n    \"\"\"Execute SQL query and return results as DataFrame.\n\n    Args:\n        dbpath: Path to SQLite database\n        query: SQL query to execute\n\n    Returns:\n        DataFrame with query results\n    \"\"\"\n    try:\n        conn = sqlite3.connect(dbpath)\n        return pd.readsqlquery(query, conn)\n    finally:\n        conn.close()\n\nExample usage\ndb = Path('data.db')\ndf = await querydatabase(db, '''\n    SELECT date, COUNT() as count\n    FROM events\n    GROUP BY date\n''')Copy to clipboardErrorCopied\n\nCommon Operations:\n\n1. Database Management\n\n   \n   -- Backup database\n   .backup 'backup.db'\n\n   -- Import CSV\n   .mode csv\n   .import data.csv tablename\n\n   -- Export results\n   .headers on\n   .mode csv\n   .output results.csv\n   SELECT  FROM table;Copy to clipboardErrorCopied\n   \n2. Performance Optimization\n\n   \n   -- Create index\n   CREATE INDEX idxuseremail ON users(email);\n\n   -- Analyze query\n   EXPLAIN QUERY PLAN\n   SELECT  FROM users WHERE email LIKE '%@example.com';\n\n   -- Show indexes\n   SELECT  FROM sqlitemaster WHERE type='index';Copy to clipboardErrorCopied\n   \n3. Data Analysis\n\n   \n   -- Time series aggregation\n   SELECT\n       date(timestamp),\n       COUNT() as events,\n       AVG(duration) as avgduration\n   FROM events\n   GROUP BY date(timestamp);\n\n   -- Window functions\n   SELECT ,\n       AVG(amount) OVER (\n           PARTITION BY userid\n           ORDER BY date\n           ROWS BETWEEN 3 PRECEDING AND CURRENT ROW\n       ) as movingavg\n   FROM transactions;Copy to clipboardErrorCopied\n   \n\nTools to work with SQLite:\n\n SQLiteStudio: Lightweight GUI\n DBeaver: Full-featured GUI\n sqlite-utils: CLI tool\n Datasette: Web interface\n\nPrevious\n\nSpreadsheet: Excel, Google Sheets\n\nNext\n\nVersion Control: Git, GitHub"
  },
  {
    "title": "Visualizing Charts with Excel",
    "filename": "Visualizing_Charts_with_Excel.md",
    "text": "Visualizing Charts with Excel\n-------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/sORnCj52COw?t=1813s)\n\nPrevious\n\nVisualizing Network Data with Kumu\n\nNext\n\nData Visualization with Seaborn"
  },
  {
    "title": "Visualizing Charts with Excel",
    "filename": "Visualizing_Charts_with_Excel.md",
    "text": "Visualizing Charts with Excel\n-------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/sORnCj52COw?t=1813s)\n\nPrevious\n\nVisualizing Network Data with Kumu\n\nNext\n\nData Visualization with Seaborn"
  },
  {
    "title": "Serverless hosting: Vercel",
    "filename": "Serverless_hosting__Vercel.md",
    "text": "Serverless hosting: Vercel\n-------------------------------------------------------------------\n\nServerless platforms let you rent a single function instead of an entire machine. They’re perfect for small web tools that don’t need to run all the time. Here are some common real-life uses:\n\n A contact form that emails you when someone wants to hire you (runs for 2-3 seconds, a few times per day)\n A tool that converts uploaded photos to black and white (runs for 5-10 seconds when someone uploads a photo)\n A chatbot that answers basic questions about your business hours (runs for 1-2 seconds per question)\n A newsletter sign-up that adds emails to your mailing list (runs for 1 second per sign-up)\n A webhook that posts your Etsy sales to Discord (runs for 1 second whenever you make a sale)\n\nYou only pay when someone uses your tool, and the platform automatically handles busy periods. For example, if 100 people fill out your contact form at once, the platform creates 100 temporary copies of your code to handle them all. When they’re done, these copies disappear. It’s cheaper than running a full-time server because you’re not paying for the time when no one is using your tool - most tools are idle 95% of the time!\n\nRather than writing a full program, serverless platforms let you write functions. These functions are called via HTTP requests. They run in a cloud environment and are scaled up and down automatically. But this means you write programs in a different style. For example:\n\n You can’t pip install packages - you have to use requirements.txt\n You can’t read or write files from the file system - you can only use APIs.\n You can’t run commands (e.g. subprocess.run())\n\nVercel is a cloud platform optimized for frontend frameworks and serverless functions. Vercel is tightly integrated with GitHub. Pushing to your repository automatically triggers new deployments.\n\nHere’s a quickstart. Sign-up with Vercel. Create an empty git repo with this api/index.py file.\n\nTo deploy a FastAPI app, add a requirements.txt file with fastapi as a dependency.\n\nfastapiCopy to clipboardErrorCopied\n\nAdd your FastAPI code to a file, e.g. main.py.\n\nmain.py\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef readroot():\n    return {\"message\": \"Hello, World!\"}Copy to clipboardErrorCopied\n\nAdd a vercel.json file to the root of your repository.\n\n{\n  \"builds\": [{ \"src\": \"main.py\", \"use\": \"@vercel/python\" }],\n  \"routes\": [{ \"src\": \"/(.)\", \"dest\": \"main.py\" }]\n}Copy to clipboardErrorCopied\n\nOn the command line, run:\n\n npx vercel to deploy a test version\n npx vercel --prod to deploy to production\n\nEnvironment Variables. Use npx vercel env add to add environment variables. In your code, use os.environ.get('SECRETKEY') to access them.\n\nVideos\n\n[](https://youtu.be/sPmat30SE4k)\n\n[](https://youtu.be/8R-cetfsZ4)\n\nPrevious\n\nNotebooks: Google Colab\n\nNext\n\nCI/CD: GitHub Actions"
  },
  {
    "title": "Serverless hosting: Vercel",
    "filename": "Serverless_hosting__Vercel.md",
    "text": "Serverless hosting: Vercel\n-------------------------------------------------------------------\n\nServerless platforms let you rent a single function instead of an entire machine. They’re perfect for small web tools that don’t need to run all the time. Here are some common real-life uses:\n\n A contact form that emails you when someone wants to hire you (runs for 2-3 seconds, a few times per day)\n A tool that converts uploaded photos to black and white (runs for 5-10 seconds when someone uploads a photo)\n A chatbot that answers basic questions about your business hours (runs for 1-2 seconds per question)\n A newsletter sign-up that adds emails to your mailing list (runs for 1 second per sign-up)\n A webhook that posts your Etsy sales to Discord (runs for 1 second whenever you make a sale)\n\nYou only pay when someone uses your tool, and the platform automatically handles busy periods. For example, if 100 people fill out your contact form at once, the platform creates 100 temporary copies of your code to handle them all. When they’re done, these copies disappear. It’s cheaper than running a full-time server because you’re not paying for the time when no one is using your tool - most tools are idle 95% of the time!\n\nRather than writing a full program, serverless platforms let you write functions. These functions are called via HTTP requests. They run in a cloud environment and are scaled up and down automatically. But this means you write programs in a different style. For example:\n\n You can’t pip install packages - you have to use requirements.txt\n You can’t read or write files from the file system - you can only use APIs.\n You can’t run commands (e.g. subprocess.run())\n\nVercel is a cloud platform optimized for frontend frameworks and serverless functions. Vercel is tightly integrated with GitHub. Pushing to your repository automatically triggers new deployments.\n\nHere’s a quickstart. Sign-up with Vercel. Create an empty git repo with this api/index.py file.\n\nTo deploy a FastAPI app, add a requirements.txt file with fastapi as a dependency.\n\nfastapiCopy to clipboardErrorCopied\n\nAdd your FastAPI code to a file, e.g. main.py.\n\nmain.py\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef readroot():\n    return {\"message\": \"Hello, World!\"}Copy to clipboardErrorCopied\n\nAdd a vercel.json file to the root of your repository.\n\n{\n  \"builds\": [{ \"src\": \"main.py\", \"use\": \"@vercel/python\" }],\n  \"routes\": [{ \"src\": \"/(.)\", \"dest\": \"main.py\" }]\n}Copy to clipboardErrorCopied\n\nOn the command line, run:\n\n npx vercel to deploy a test version\n npx vercel --prod to deploy to production\n\nEnvironment Variables. Use npx vercel env add to add environment variables. In your code, use os.environ.get('SECRETKEY') to access them.\n\nVideos\n\n[](https://youtu.be/sPmat30SE4k)\n\n[](https://youtu.be/8R-cetfsZ4)\n\nPrevious\n\nNotebooks: Google Colab\n\nNext\n\nCI/CD: GitHub Actions"
  },
  {
    "title": "DevContainers: GitHub Codespaces",
    "filename": "DevContainers__GitHub_Codespaces.md",
    "text": "IDE: GitHub Codespaces\n----------------------------------------------------------------------\n\nGitHub Codespaces is a cloud-hosted development environment built right into GitHub that gets you coding faster with pre-configured containers, adjustable compute power, and seamless integration with workflows like Actions and Copilot.\n\nWhy Codespaces helps\n\n Reproducible onboarding: Say goodbye to “works on my machine” woes—everyone uses the same setup for assignments or demos.\n Anywhere access: Jump back into your project from a laptop, tablet, or phone without having to reinstall anything.\n Rapid experimentation & debugging: Spin up short-lived environments on any branch, commit, or PR to isolate bugs or test features, or keep longer-lived codespaces for big projects.\n\n[](https://www.youtube.com/watch?v=-tQ2nxjqP6o)\n\nQuick Setup\n\n1. From the GitHub UI\n\n    Go to your repo and click Code → Codespaces → New codespace.\n    Pick the branch and machine specs (2–32 cores, 8–64 GB RAM), then click Create codespace.\n2. In Visual Studio Code\n\n    Press Ctrl+Shift+P (or Cmd+Shift+P on Mac), choose Codespaces: Create New Codespace, and follow the prompts.\n3. Via GitHub CLI\n\n   \n   gh auth login\n   gh codespace create --repo OWNER/REPO\n   gh codespace list     List all codespaces\n   gh codespace code     opens in your local VS Code\n   gh codespace ssh      SSH into the codepsaceCopy to clipboardErrorCopied\n   \n\nFeatures To Explore\n\n Dev Containers: Set up your environment the same way every time using a devcontainer.json or your own Dockerfile. Introduction to dev containers\n Prebuilds: Build bigger or more complex repos in advance so codespaces start up in a flash. About prebuilds\n Port Forwarding: Let Codespaces spot and forward the ports your web apps use automatically. Forward ports in Codespaces\n Secrets & Variables: Keep your environment variables safe in the Codespaces settings for your repo. Manage Codespaces secrets\n Dotfiles Integration: Bring in your dotfiles repo to customize shell settings, aliases, and tools in every codespace. Personalizing your codespaces\n Machine Types & Cost Control: Pick from VMs with 2 to 32 cores and track your usage in the billing dashboard. Managing Codespaces costs\n VS Code & CLI Integration: Flip between browser VS Code and your desktop editor, and script everything with the CLI. VS Code Remote: Codespaces\n GitHub Actions: Power up prebuilds and your CI/CD right inside codespaces using Actions workflows. Prebuilding your codespaces\n Copilot in Codespaces: Let Copilot help you write code with in-editor AI suggestions. Copilot in Codespaces\n\nPrevious\n\nContainers: Docker, Podman\n\nNext\n\nTunneling: ngrok"
  },
  {
    "title": "Vision Models",
    "filename": "Vision_Models.md",
    "text": "Vision Models\n-------------------------------------------------\n\n[](https://youtu.be/FgTMkbakQ)\n\nYou’ll learn how to use LLMs to interpret images and extract useful information, covering:\n\n Setting Up Vision Models: Integrate vision capabilities with LLMs using APIs like OpenAI’s Chat Completion.\n Sending Image URLs for Analysis: Pass URLs or base64-encoded images to LLMs for processing.\n Reading Image Responses: Get detailed textual descriptions of images, from scenic landscapes to specific objects like cricketers or bank statements.\n Extracting Data from Images: Convert extracted image data to various formats like Markdown tables or JSON arrays.\n Handling Model Hallucinations: Address inaccuracies in extraction results, understanding how different prompts can affect output quality.\n Cost Management for Vision Models: Adjust detail settings (e.g., “detail: low”) to balance cost and output precision.\n\nHere are the links used in the video:\n\n Jupyter Notebook\n OpenAI Chat API Reference\n OpenAI Vision Guide\n Sample images used\n\nHere is an example of how to analyze an image using the OpenAI API.\n\ncurl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-4o-mini\",\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": [\n          {\"type\": \"text\", \"text\": \"What is in this image?\"},\n          {\n            \"type\": \"imageurl\",\n            \"detail\": \"low\",\n            \"imageurl\": {\"url\": \"https://upload.wikimedia.org/wikipedia/commons/3/34/Correlationcoefficient.png\"}\n          }\n        ]\n      }\n    ]\n  }'Copy to clipboardErrorCopied\n\nLet’s break down the request:\n\n curl https://api.openai.com/v1/chat/completions: The API endpoint for text generation.\n -H \"Content-Type: application/json\": The content type of the request.\n -H \"Authorization: Bearer $OPENAIAPIKEY\": The API key for authentication.\n -d: The request body.\n  + \"model\": \"gpt-4o-mini\": The model to use for text generation.\n  + \"messages\":: The messages to send to the model.\n    - \"role\": \"user\": The role of the message.\n    - \"content\":: The content of the message.\n       {\"type\": \"text\", \"text\": \"What is in this image?\"}: The text message.\n       {\"type\": \"imageurl\"}: The image message.\n        + \"detail\": \"low\": The detail level of the image. low uses fewer tokens at lower detail. high uses more tokens for higher detail.\n        + \"imageurl\": {\"url\": \"https://upload.wikimedia.org/wikipedia/commons/3/34/Correlationcoefficient.png\"}: The URL of the image.\n\nYou can send images in a base64 encoded format, too. For example:\n\nDownload image and convert to base64 in one step\nIMAGEBASE64=$(curl -s \"https://upload.wikimedia.org/wikipedia/commons/3/34/Correlationcoefficient.png\" | base64 -w 0)\n\nSend to OpenAI API\ncurl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d @- << EOF\n{\n  \"model\": \"gpt-4o-mini\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\"type\": \"text\", \"text\": \"What is in this image?\"},\n        {\n          \"type\": \"imageurl\",\n          \"imageurl\": { \"url\": \"data:image/png;base64,$IMAGEBASE64\" }\n        }\n      ]\n    }\n  ]\n}\nEOFCopy to clipboardErrorCopied\n\nPrevious\n\nBase 64 Encoding\n\nNext\n\nEmbeddings"
  },
  {
    "title": "Vision Models",
    "filename": "Vision_Models.md",
    "text": "Vision Models\n-------------------------------------------------\n\n[](https://youtu.be/FgTMkbakQ)\n\nYou’ll learn how to use LLMs to interpret images and extract useful information, covering:\n\n Setting Up Vision Models: Integrate vision capabilities with LLMs using APIs like OpenAI’s Chat Completion.\n Sending Image URLs for Analysis: Pass URLs or base64-encoded images to LLMs for processing.\n Reading Image Responses: Get detailed textual descriptions of images, from scenic landscapes to specific objects like cricketers or bank statements.\n Extracting Data from Images: Convert extracted image data to various formats like Markdown tables or JSON arrays.\n Handling Model Hallucinations: Address inaccuracies in extraction results, understanding how different prompts can affect output quality.\n Cost Management for Vision Models: Adjust detail settings (e.g., “detail: low”) to balance cost and output precision.\n\nHere are the links used in the video:\n\n Jupyter Notebook\n OpenAI Chat API Reference\n OpenAI Vision Guide\n Sample images used\n\nHere is an example of how to analyze an image using the OpenAI API.\n\ncurl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-4o-mini\",\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": [\n          {\"type\": \"text\", \"text\": \"What is in this image?\"},\n          {\n            \"type\": \"imageurl\",\n            \"detail\": \"low\",\n            \"imageurl\": {\"url\": \"https://upload.wikimedia.org/wikipedia/commons/3/34/Correlationcoefficient.png\"}\n          }\n        ]\n      }\n    ]\n  }'Copy to clipboardErrorCopied\n\nLet’s break down the request:\n\n curl https://api.openai.com/v1/chat/completions: The API endpoint for text generation.\n -H \"Content-Type: application/json\": The content type of the request.\n -H \"Authorization: Bearer $OPENAIAPIKEY\": The API key for authentication.\n -d: The request body.\n  + \"model\": \"gpt-4o-mini\": The model to use for text generation.\n  + \"messages\":: The messages to send to the model.\n    - \"role\": \"user\": The role of the message.\n    - \"content\":: The content of the message.\n       {\"type\": \"text\", \"text\": \"What is in this image?\"}: The text message.\n       {\"type\": \"imageurl\"}: The image message.\n        + \"detail\": \"low\": The detail level of the image. low uses fewer tokens at lower detail. high uses more tokens for higher detail.\n        + \"imageurl\": {\"url\": \"https://upload.wikimedia.org/wikipedia/commons/3/34/Correlationcoefficient.png\"}: The URL of the image.\n\nYou can send images in a base64 encoded format, too. For example:\n\nDownload image and convert to base64 in one step\nIMAGEBASE64=$(curl -s \"https://upload.wikimedia.org/wikipedia/commons/3/34/Correlationcoefficient.png\" | base64 -w 0)\n\nSend to OpenAI API\ncurl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d @- << EOF\n{\n  \"model\": \"gpt-4o-mini\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\"type\": \"text\", \"text\": \"What is in this image?\"},\n        {\n          \"type\": \"imageurl\",\n          \"imageurl\": { \"url\": \"data:image/png;base64,$IMAGEBASE64\" }\n        }\n      ]\n    }\n  ]\n}\nEOFCopy to clipboardErrorCopied\n\nPrevious\n\nBase 64 Encoding\n\nNext\n\nEmbeddings"
  },
  {
    "title": "TDS TA Instructions",
    "filename": "TDS_TA_Instructions.md",
    "text": "TDS TA Instructions\n===================================================================\n\nThe TDS TA is a virtual assistant that helps you with your doubts.\n\nIt has been trained on course content created as follows:\n\nClone the course repository\ngit clone https://github.com/sanand0/tools-in-data-science-public.git\ncd tools-in-data-science-public\n\nCreate a prompt file for the TA\nPYTHONUTF8=1 uvx files-to-prompt --cxml .md -o tds-content.xml\nReplace the source with the URL of the course\nsed -i \"s/<source>/<source>https:\\/\\/tds.s-anand.net\\/\\//g\" tds-content.xmlCopy to clipboardErrorCopied\n\nAdditionally, we visit each of the evaluation links on <https://exam.sanand.workers.dev/>, copy it as Markdown, and add it to the content, called ga1.md, ga2.md, etc.\n\nThese files are uploaded to the IITM TDS Teaching Assistant.\n\nTake a look at the GPT’s instructions. These were generated by the OpenAI Prompt Generation tool.\n\nAs a Teaching Assistant (TA) for the Tools in Data Science course at IIT Madras, guide students through course-related questions.\n\n1. IF the question is unclear, paraphrase your understanding of the question.\n2. Cite all relevant sections from tds-content.xml or ga.md. Begin with: \"According to this reference, ...\". Cite ONLY from the relevant <source>. ALWAYS cite verbatim. Mention ALL material relevant to the question.\n3. Search online for additional answers. Share results WITH CITATION LINKS.\n4. Think step-by-step. Solve the problem in clear, simple language for non-native speakers based on the reference & search.\n5. Follow-up: Ask thoughtful questions to help students explore and learn.Copy to clipboardErrorCopied\n\nPrevious\n\nPrompt engineering\n\nNext\n\nTDS GPT Reviewer"
  },
  {
    "title": "Data Analysis with DuckDB",
    "filename": "Data_Analysis_with_DuckDB.md",
    "text": "Data Analysis with DuckDB\n-------------------------------------------------------------------------------------\n\n[](https://youtu.be/4U0GqYrET5s)\n\nYou’ll learn how to perform data analysis using DuckDB and Pandas, covering:\n\n Parquet for Data Storage: Understand why Parquet is a faster, more compact, and better-typed storage format compared to CSV, JSON, and SQLite.\n DuckDB Setup: Learn how to install and set up DuckDB, along with integrating it into a Jupyter notebook environment.\n File Format Comparisons: Compare file formats by speed and size, observing the performance difference between saving and loading data in CSV, JSON, SQLite, and Parquet.\n Faster Queries with DuckDB: Learn how DuckDB uses parallel processing, columnar storage, and on-disk operations to outperform Pandas in speed and memory efficiency.\n SQL Query Execution in DuckDB: Run SQL queries directly on Parquet files and Pandas DataFrames to compute metrics such as the number of unique flight routes delayed by certain time intervals.\n Memory Efficiency: Understand how DuckDB performs analytics without loading entire datasets into memory, making it highly efficient for large-scale data analysis.\n Mixing DuckDB and Pandas: Learn to interleave DuckDB and Pandas operations, leveraging the strengths of both tools to perform complex queries like correlations and aggregations.\n Ranking and Filtering Data: Use SQL and Pandas to rank arrival delays by distance and extract key insights, such as the earliest flight arrival for each route.\n Joining Data: Create a cost analysis by joining datasets and calculating total costs of flight delays, demonstrating DuckDB’s speed in joining and aggregating large datasets.\n\nHere are the links used in the video:\n\n Data analysis with DuckDB - Notebook\n Parquet file format - a fast columnar storage format that’s becoming a de facto standard for big data\n DuckDB - a fast in-memory database that’s very good with large-scale analysis\n Plotly Datasets - a collection of sample datasets for analysis. This includes the Kaggle Flights Dataset that the notebook downloads as 2015\\flights.parquet\n\nPrevious\n\nData Analysis with Datasette\n\nNext\n\nData Analysis with ChatGPT"
  },
  {
    "title": "LLM Text Extraction",
    "filename": "LLM_Text_Extraction.md",
    "text": "LLM Text Extraction\n-------------------------------------------------------------------\n\nJSON is one of the most widely used formats in the world for applications to exchange data.\n\n[](https://youtu.be/72514uGffPE)\n\nThis video explains how to use LLMs to extract structure from unstructured data, covering:\n\n LLM for Data Extraction: Use OpenAI’s API to extract structured information from unstructured data like addresses.\n JSON Schema: Define a JSON schema to ensure consistent and structured output from the LLM.\n Prompt Engineering: Craft effective prompts to guide the LLM’s response and improve accuracy.\n Data Cleaning: Use string functions and OpenAI’s API to clean and standardize data.\n Data Analysis: Analyze extracted data using Pandas to gain insights.\n LLM Limitations: Understand the limitations of LLMs, including potential errors and inconsistencies in output.\n Production Use Cases: Explore real-world applications of LLMs for data extraction, such as customer service email analysis.\n\nHere are the links used in the video:\n\n Jupyter Notebook\n JSON Schema\n Function calling\n\nStructured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied\nJSON Schema, so you don’t need to worry about the model omitting a required key,\nor hallucinating an invalid enum value.\n\ncurl https://api.openai.com/v1/chat/completions \\\n-H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"messages\": [\n    { \"role\": \"system\", \"content\": \"You are a helpful math tutor. Guide the user through the solution step by step.\" },\n    { \"role\": \"user\", \"content\": \"how can I solve 8x + 7 = -23\" }\n  ],\n  \"responseformat\": {\n    \"type\": \"jsonschema\",\n    \"jsonschema\": {\n      \"name\": \"mathresponse\",\n      \"strict\": true\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"steps\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": { \"explanation\": { \"type\": \"string\" }, \"output\": { \"type\": \"string\" } },\n              \"required\": [\"explanation\", \"output\"],\n              \"additionalProperties\": false\n            }\n          },\n          \"finalanswer\": { \"type\": \"string\" }\n        },\n        \"required\": [\"steps\", \"finalanswer\"],\n        \"additionalProperties\": false\n      }\n    }\n  }\n}'Copy to clipboardErrorCopied\n\nHere’s what the responseformat tells OpenAI. The items marked ⚠️ are OpenAI specific requirements for the JSON schema.\n\n \"type\": \"jsonschema\": We want you to generate a JSON response that follows this schema.\n \"jsonschema\":: We’re going to give you a schema.\n  + \"name\": \"mathresponse\": The schema is called mathresponse. (We can call it anything.)\n  + \"strict\": true: Follow the schema exactly.\n  + \"schema\":: Now, here’s the actual JSON schema.\n    - \"type\": \"object\": Return an object. ⚠️ The root object must be an object.\n    - \"properties\":: The object has these properties:\n       \"steps\":: There’s a steps property.\n        + \"type\": \"array\": It’s an array.\n        + \"items\":: Each item in the array…\n          - \"type\": \"object\": … is an object.\n          - \"properties\":: The object has these properties:\n             \"explanation\":: There’s an explanation property.\n              + \"type\": \"string\": … which is a string.\n             \"output\":: There’s an output property.\n              + \"type\": \"string\": … which is a string, too.\n          - \"required\": [\"explanation\", \"output\"]: ⚠️ You must add \"required\": [...] and include all fields int he object.\n          - \"additionalProperties\": false: ⚠️ OpenAI requires every object to have \"additionalProperties\": false.\n       \"finalanswer\":: There’s a finalanswer property.\n        + \"type\": \"string\": … which is a string.\n    - \"required\": [\"steps\", \"finalanswer\"]: ⚠️ You must add \"required\": [...] and include all fields in the object.\n    - \"additionalProperties\": false: ⚠️ OpenAI requires every object to have \"additionalProperties\": false.\n\nPrevious\n\nLLM Sentiment Analysis\n\nNext\n\nBase 64 Encoding"
  },
  {
    "title": "Visualizing Network Data with Kumu",
    "filename": "Visualizing_Network_Data_with_Kumu.md",
    "text": "Visualizing Network Data with Kumu\n----------------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/OndB17bigkc)\n\n Kumu\n IMDB data\n Jupyter Notebook\n\n[](https://youtu.be/oi4fDzqsCes)\n\nPrevious\n\nVisualizing Animated Data with Flourish\n\nNext\n\nVisualizing Charts with Excel"
  },
  {
    "title": "CSS Selectors",
    "filename": "CSS_Selectors.md",
    "text": "CSS Selectors\n-------------------------------------------------\n\nCSS selectors are patterns used to select and style HTML elements on a web page. They are fundamental to web development and data scraping, allowing you to precisely target elements for styling or extraction.\n\nFor data scientists, understanding CSS selectors is crucial when:\n\n Web scraping with tools like Beautiful Soup or Scrapy\n Selecting elements for browser automation with Selenium\n Styling data visualizations and web applications\n Debugging website issues using browser DevTools\n\nWatch this comprehensive introduction to CSS selectors (20 min):\n\n[](https://youtu.be/l1mER1bV0N0)\n\nThe Mozilla Developer Network (MDN) provides detailed documentation on the three main types of selectors:\n\n Basic CSS selectors: Learn about element (div), class (.container), ID (header), and universal () selectors\n Attribute selectors: Target elements based on their attributes or attribute values ([type=\"text\"])\n Combinators: Use relationships between elements (div > p, div + p, div  p)\n\nPractice your CSS selector skills with this interactive tool:\n\n CSS Diner: A fun game that teaches CSS selectors through increasingly challenging levels\n\nPrevious\n\nBrowser: DevTools\n\nNext\n\nJSON"
  },
  {
    "title": "CSS Selectors",
    "filename": "CSS_Selectors.md",
    "text": "CSS Selectors\n-------------------------------------------------\n\nCSS selectors are patterns used to select and style HTML elements on a web page. They are fundamental to web development and data scraping, allowing you to precisely target elements for styling or extraction.\n\nFor data scientists, understanding CSS selectors is crucial when:\n\n Web scraping with tools like Beautiful Soup or Scrapy\n Selecting elements for browser automation with Selenium\n Styling data visualizations and web applications\n Debugging website issues using browser DevTools\n\nWatch this comprehensive introduction to CSS selectors (20 min):\n\n[](https://youtu.be/l1mER1bV0N0)\n\nThe Mozilla Developer Network (MDN) provides detailed documentation on the three main types of selectors:\n\n Basic CSS selectors: Learn about element (div), class (.container), ID (header), and universal () selectors\n Attribute selectors: Target elements based on their attributes or attribute values ([type=\"text\"])\n Combinators: Use relationships between elements (div > p, div + p, div  p)\n\nPractice your CSS selector skills with this interactive tool:\n\n CSS Diner: A fun game that teaches CSS selectors through increasingly challenging levels\n\nPrevious\n\nBrowser: DevTools\n\nNext\n\nJSON"
  },
  {
    "title": "Data Preparation in the Shell",
    "filename": "Data_Preparation_in_the_Shell.md",
    "text": "Data Preparation in the Shell\n-------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/XEdy4WK70vU)\n\nYou’ll learn how to use UNIX tools to process and clean data, covering:\n\n curl (or wget) to fetch data from websites.\n gzip (or xz) to compress and decompress files.\n wc to count lines, words, and characters in text.\n head and tail to get the start and end of files.\n cut to extract specific columns from text.\n uniq to de-duplicate lines.\n sort to sort lines.\n grep to filter lines containing specific text.\n sed to search and replace text.\n awk for more complex text processing.\n\nHere are the links used in the video:\n\n Data preparation in the shell - Notebook\n Data Science at the Command Line\n\nPrevious\n\nData Aggregation in Excel\n\nNext\n\nData Preparation in the Editor"
  },
  {
    "title": "Images: Compression",
    "filename": "Images__Compression.md",
    "text": "Images: Compression\n----------------------------------------------------------------\n\nImage compression is essential when deploying apps. Often, pages have dozens of images. Image analysis runs over thousands of images. The cost of storage and bandwidth can grow over time.\n\nHere are things you should know when you’re compressing images:\n\n Image dimensions are the width and height of the image in pixels. This impacts image size a lot\n Lossless compression (PNG, WebP) preserves exact data\n Lossy compression (JPEG, WebP) removes some data for smaller files\n Vector formats (SVG) scale without quality loss\n WebP is the modern standard, supporting both lossy and lossless\n\nHere’s a rule of thumb you can use as of 2025.\n\n Use SVG if you can (i.e. if it’s vector graphics or you can convert it to one)\n Else, reduce the image to as small as you can, and save as (lossy or lossless) WebP\n\nCommon operations with Python:\n\nfrom pathlib import Path\nfrom PIL import Image\nimport io\n\nasync def compressimage(inputpath: Path, outputpath: Path, quality: int = 85) -> None:\n    \"\"\"Compress an image while maintaining reasonable quality.\"\"\"\n    with Image.open(inputpath) as img:\n         Convert RGBA to RGB if needed\n        if img.mode == 'RGBA':\n            img = img.convert('RGB')\n         Optimize for web\n        img.save(outputpath, 'WEBP', quality=quality, optimize=True)\n\nBatch process images\npaths = Path('images').glob('.jpg')\nfor p in paths:\n    await compressimage(p, p.withsuffix('.webp'))Copy to clipboardErrorCopied\n\nCommand line tools include cwebp, pngquant, jpegoptim, and ImageMagick.\n\nConvert to WebP\ncwebp -q 85 input.png -o output.webp\n\nOptimize PNG\npngquant --quality=65-80 image.png\n\nOptimize JPEG\njpegoptim --strip-all --all-progressive --max=85 image.jpg\n\nConvert and resize\nconvert input.jpg -resize 800x600 output.jpg\n\nBatch convert\nmogrify -format webp -quality 85 .jpgCopy to clipboardErrorCopied\n\nWatch this video on modern image formats and optimization (15 min):\n\n[](https://youtu.be/F1kYBnY6mwg)\n\nTools for image optimization:\n\n squoosh.app: Browser-based compression\n ImageOptim: GUI tool for Mac\n sharp: Node.js image processing\n Pillow: Python imaging library\n\nPrevious\n\nMarkdown\n\nNext\n\nStatic hosting: GitHub Pages"
  },
  {
    "title": "Images: Compression",
    "filename": "Images__Compression.md",
    "text": "Images: Compression\n----------------------------------------------------------------\n\nImage compression is essential when deploying apps. Often, pages have dozens of images. Image analysis runs over thousands of images. The cost of storage and bandwidth can grow over time.\n\nHere are things you should know when you’re compressing images:\n\n Image dimensions are the width and height of the image in pixels. This impacts image size a lot\n Lossless compression (PNG, WebP) preserves exact data\n Lossy compression (JPEG, WebP) removes some data for smaller files\n Vector formats (SVG) scale without quality loss\n WebP is the modern standard, supporting both lossy and lossless\n\nHere’s a rule of thumb you can use as of 2025.\n\n Use SVG if you can (i.e. if it’s vector graphics or you can convert it to one)\n Else, reduce the image to as small as you can, and save as (lossy or lossless) WebP\n\nCommon operations with Python:\n\nfrom pathlib import Path\nfrom PIL import Image\nimport io\n\nasync def compressimage(inputpath: Path, outputpath: Path, quality: int = 85) -> None:\n    \"\"\"Compress an image while maintaining reasonable quality.\"\"\"\n    with Image.open(inputpath) as img:\n         Convert RGBA to RGB if needed\n        if img.mode == 'RGBA':\n            img = img.convert('RGB')\n         Optimize for web\n        img.save(outputpath, 'WEBP', quality=quality, optimize=True)\n\nBatch process images\npaths = Path('images').glob('.jpg')\nfor p in paths:\n    await compressimage(p, p.withsuffix('.webp'))Copy to clipboardErrorCopied\n\nCommand line tools include cwebp, pngquant, jpegoptim, and ImageMagick.\n\nConvert to WebP\ncwebp -q 85 input.png -o output.webp\n\nOptimize PNG\npngquant --quality=65-80 image.png\n\nOptimize JPEG\njpegoptim --strip-all --all-progressive --max=85 image.jpg\n\nConvert and resize\nconvert input.jpg -resize 800x600 output.jpg\n\nBatch convert\nmogrify -format webp -quality 85 .jpgCopy to clipboardErrorCopied\n\nWatch this video on modern image formats and optimization (15 min):\n\n[](https://youtu.be/F1kYBnY6mwg)\n\nTools for image optimization:\n\n squoosh.app: Browser-based compression\n ImageOptim: GUI tool for Mac\n sharp: Node.js image processing\n Pillow: Python imaging library\n\nPrevious\n\nMarkdown\n\nNext\n\nStatic hosting: GitHub Pages"
  },
  {
    "title": "Cleaning Data with OpenRefine",
    "filename": "Cleaning_Data_with_OpenRefine.md",
    "text": "Cleaning Data with OpenRefine\n-------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/zxEtfHseE84)\n\nThis session covers the use of OpenRefine for data cleaning, focusing on resolving entity discrepancies:\n\n Data Upload and Project Creation: Import data into OpenRefine and create a new project for analysis.\n Faceting Data: Use text facets to group similar entries and identify frequency of address crumbs.\n Clustering Methodology: Apply clustering algorithms to merge similar entries with minor differences, such as punctuation.\n Manual and Automated Clustering: Learn to merge clusters manually or in one go, trusting the system’s clustering accuracy.\n Entity Resolution: Clean and save the data by resolving multiple versions of the same entity using Open Refine.\n\nHere are links used in the video:\n\n OpenRefine software\n Dataset for OpenRefine\n\nPrevious\n\nData Preparation in the Editor\n\nNext\n\nProfiling Data with Python"
  },
  {
    "title": "Wikipedia Data with Python",
    "filename": "Wikipedia_Data_with_Python.md",
    "text": "Wikipedia Data with Python\n----------------------------------------------------------------------------------------\n\n[](https://youtu.be/b6puvm-QEY0)\n\nYou’ll learn how to scrape data from Wikipedia using the wikipedia Python library, covering:\n\n Installing and Importing: Use pip install to get the Wikipedia library and import it with import wikipedia as wk.\n Keyword Search: Use the search function to find Wikipedia pages containing a specific keyword, limiting results with the results argument.\n Fetching Summaries: Use the summary function to get a concise summary of a Wikipedia page, limiting sentences with the sentences argument.\n Retrieving Full Pages: Use the page function to obtain the full content of a Wikipedia page, including sections and references.\n Accessing URLs: Retrieve the URL of a Wikipedia page using the url attribute of the page object.\n Extracting References: Use the references attribute to get all reference links from a Wikipedia page.\n Fetching Images: Access all images on a Wikipedia page via the images attribute, which returns a list of image URLs.\n Extracting Tables: Use the pandas.read\\html function to extract tables from the HTML content of a Wikipedia page, being mindful of table indices.\n\nHere are links and references:\n\n Wikipedia Library - Notebook\n Learn about the wikipedia package\n\nNOTE: Wikipedia is constantly edited. The page may be different now from when the video was recorded. Handle accordingly.\n\nPrevious\n\nNominatim API with Python\n\nNext\n\nScraping PDFs with Tabula"
  },
  {
    "title": "Terminal: Bash",
    "filename": "Terminal__Bash.md",
    "text": "Terminal: Bash\n-----------------------------------------\n\nUNIX shells are the de facto standard in the data science world and Bash is the most popular.\nThis is available by default on Mac and Linux.\n\nOn Windows, install Git Bash or WSL to get a UNIX shell.\n\nWatch this video to install WSL (12 min).\n\n[](https://youtu.be/X-DHaQLrBi8)\n\nWatch this video to understand the basics of Bash and UNIX shell commands (75 min).\n\n[](https://youtu.be/oxuRxtrO2Ag)\n\nEssential Commands:\n\nFile Operations\nls -la                List all files with details\ncd path/to/dir        Change directory\npwd                   Print working directory\ncp source dest        Copy files\nmv source dest        Move/rename files\nrm -rf dir            Remove directory recursively\n\nText Processing\ngrep \"pattern\" file   Search for pattern\nsed 's/old/new/' f    Replace text\nawk '{print $1}' f    Process text by columns\ncat file | wc -l      Count lines\n\nProcess Management\nps aux                List processes\nkill -9 PID           Force kill process\ntop                   Monitor processes\nhtop                  Interactive process viewer\n\nNetwork\ncurl url              HTTP requests\nwget url              Download files\nnc -zv host port      Test connectivity\nssh user@host         Remote login\n\nCount unique values in CSV column\ncut -d',' -f1 data.csv | sort | uniq -c\n\nQuick data analysis\nawk -F',' '{sum+=$2} END {print sum/NR}' data.csv   Average\nsort -t',' -k2 -n data.csv | head                   Top 10\n\nMonitor log in real-time\ntail -f log.txt | grep --color 'ERROR'Copy to clipboardErrorCopied\n\nBash Scripting Essentials:\n\n!/bin/bash\n\nVariables\nNAME=\"value\"\necho $NAME\n\nLoops\nfor i in {1..5}; do\n    echo $i\ndone\n\nConditionals\nif [ -f \"file.txt\" ]; then\n    echo \"File exists\"\nfi\n\nFunctions\nprocessdata() {\n    local input=$1\n    echo \"Processing $input\"\n}Copy to clipboardErrorCopied\n\nProductivity Tips:\n\n1. Command History\n\n   \n   history          Show command history\n   Ctrl+R          Search history\n   !!              Repeat last command\n   !$              Last argumentCopy to clipboardErrorCopied\n   \n2. Directory Navigation\n\n   \n   pushd dir       Push directory to stack\n   popd            Pop directory from stack\n   cd -            Go to previous directoryCopy to clipboardErrorCopied\n   \n3. Job Control\n\n   \n   command &       Run in background\n   Ctrl+Z          Suspend process\n   bg              Resume in background\n   fg              Resume in foregroundCopy to clipboardErrorCopied\n   \n4. Useful Aliases - typically added to /.bashrc\n\n   \n   alias ll='ls -la'\n   alias gs='git status'\n   alias jupyter='jupyter notebook'\n   alias activate='source venv/bin/activate'Copy to clipboardErrorCopied\n   \n\nPrevious\n\nJSON\n\nNext\n\nAI Terminal Tools: llm"
  },
  {
    "title": "Topic modeling",
    "filename": "Topic_modeling.md",
    "text": "Topic Modeling\n----------------------------------------------------\n\n[](https://youtu.be/eQUNhq91DlI)\n\nYou’ll learn to use text embeddings to find text similarity and use that to create topics automatically from text, covering:\n\n Embeddings: How large language models convert text into numerical representations.\n Similarity Measurement: Understanding how similar embeddings indicate similar meanings.\n Embedding Visualization: Using tools like Tensorflow Projector to visualize embedding spaces.\n Embedding Applications: Using embeddings for tasks like classification and clustering.\n OpenAI Embeddings: Using OpenAI’s API to generate embeddings for text.\n Model Comparison: Exploring different embedding models and their strengths and weaknesses.\n Cosine Similarity: Calculating cosine similarity between embeddings for more reliable similarity measures.\n Embedding Cost: Understanding the cost of generating embeddings using OpenAI’s API.\n Embedding Range: Understanding the range of values in embeddings and their significance.\n\nHere are the links used in the video:\n\n Jupyter Notebook\n Tensorflow projector\n Embeddings guide\n Embeddings reference\n Clustering on scikit-learn\n Massive text embedding leaderboard (MTEB)\n gte-large-en-v1.5 embedding model\n Embeddings similarity threshold\n\nPrevious\n\nMultimodal Embeddings\n\nNext\n\nVector databases"
  },
  {
    "title": "Scraping emarketer.com",
    "filename": "Scraping_emarketer.com.md",
    "text": "Scraping emarketer\n----------------------------------------------------------------\n\nIn this live scraping session, we explore a real-life scenario where Straive had to scrape data from emarketer.com for a demo. This is a fairly realistic and representative way of how one might go about scraping a website.\n\n[](https://youtu.be/ZzUsDE1XjhE)\n\nYou’ll learn:\n\n Scraping: How to extract data from web pages, including constructing URLs, fetching page content, and parsing HTML using packages like lxml and httpx.\n Caching: Implementing a caching strategy to avoid redundant data fetching for efficiency and reliability.\n Error Handling and Debugging: Practical tips for troubleshooting, such as using liberal print statements, breakpoints for in-depth debugging, and the concept of “rubber duck debugging” to clarify problems.\n LLMs: Benefits of Gemini / ChatGPT for code suggestions and troubleshooting.\n Real-World Application: How quick proofs of concept to showcase capabilities to clients, emphasizing practice over theory.\n\nPrevious\n\nScheduled Scraping with GitHub Actions\n\nNext\n\nScraping: Live Sessions"
  },
  {
    "title": "Visualizing Forecasts with Excel",
    "filename": "Visualizing_Forecasts_with_Excel.md",
    "text": "Visualizing Forecasts with Excel\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/judFpVgfsV4)\n\n Excel File\n\nPrevious\n\n7. Data Visualization\n\nNext\n\nVisualizing Animated Data with PowerPoint"
  },
  {
    "title": "Nominatim API with Python",
    "filename": "Nominatim_API_with_Python.md",
    "text": "Nominatim API with Python\n-------------------------------------------------------------------------------------\n\n[](https://youtu.be/f0PZ-pphAXE)\n\nYou’ll learn how to get the latitude and longitude of any city from the Nominatim API.\n\n Introduction to Nominatim: Understand how Nominatim, from OpenStreetMap, works similarly to Google Maps for geocoding.\n Installation and Import: Learn to install and import geopy and nominatim.\n Using the Locator: Create a locator object using Nominatim and set up a user agent.\n Geocoding an Address: Use locator.geocode to input an address (e.g., Eiffel Tower) and fetch geocoded data.\n Extracting Data: Access detailed information like latitude, longitude, bounding box, and accurate address from the JSON response.\n Classifying Locations: Identify the type of place (e.g., tourism, university) using the response data.\n Practical Example: Geocode “IIT Madras” and retrieve its full address, type (university), and other relevant information.\n\nHere are links and references:\n\n Geocoding using Nominatim - Notebook\n Learn about the geocoders module in the geopy package\n Learn about the nominatim package\n If you get a HTTP Error 403 from Nominatim, use your email ID or your name instead of “myGeocoder” in Nominatim(useragent=\"myGeocoder\")\n\nPrevious\n\nScraping IMDb with JavaScript\n\nNext\n\nWikipedia Data with Python"
  },
  {
    "title": "Data Transformation with dbt",
    "filename": "Data_Transformation_with_dbt.md",
    "text": "Data Transformation with dbt\n---------------------------------------------------------------------\n\n[](https://youtu.be/5rNquRnNb4E)\n\nYou’ll learn how to transform data using dbt (data build tool), covering:\n\n dbt Fundamentals: Understand what dbt is and how it brings software engineering practices to data transformation\n Project Setup: Learn how to initialize a dbt project, configure your warehouse connection, and structure your models\n Models and Materialization: Create your first dbt models and understand different materialization strategies (view, table, incremental)\n Testing and Documentation: Implement data quality tests and auto-generate documentation for your data models\n Jinja Templating: Use Jinja for dynamic SQL generation, making your transformations more maintainable and reusable\n References and Dependencies: Learn how to reference other models and manage model dependencies\n Sources and Seeds: Configure source data connections and manage static reference data\n Macros and Packages: Create reusable macros and leverage community packages to extend functionality\n Incremental Models: Optimize performance by only processing new or changed data\n Deployment and Orchestration: Set up dbt Cloud or integrate with Airflow for production deployment\n\nHere’s a minimal dbt model example, models/staging/stgcustomers.sql:\n\nwith source as (\n    select  from {{ source('raw', 'customers') }}\n),\n\nrenamed as (\n    select\n        id as customerid,\n        firstname,\n        lastname,\n        email,\n        createdat\n    from source\n)\n\nselect  from renamedCopy to clipboardErrorCopied\n\nTools and Resources:\n\n dbt Core - The open-source transformation tool\n dbt Cloud - Hosted platform for running dbt\n dbt Packages - Reusable modules from the community\n dbt Documentation - Comprehensive guides and references\n Jaffle Shop - Example dbt project for learning\n dbt Slack Community - Active community for support and discussions\n\nWatch this dbt Fundamentals Course (90 min):\n\n[](https://youtu.be/5rNquRnNb4E)\n\nPrevious\n\nParsing JSON\n\nNext\n\nTransforming Images"
  },
  {
    "title": "BBC Weather API with Python",
    "filename": "BBC_Weather_API_with_Python.md",
    "text": "BBC Weather location ID with Python\n-----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/IafLrvnamAw)\n\nYou’ll learn how to get the location ID of any city from the BBC Weather API – as a precursor to scraping weather data – covering:\n\n Understanding API Calls: Learn how backend API calls work when searching for a city on the BBC weather website.\n Inspecting Web Interactions: Use the browser’s inspect element feature to track API calls and understand the network activity.\n Extracting Location IDs: Identify and extract the location ID from the API response using Python.\n Using Python Libraries: Import and use requests, json, and urlencode libraries to make API calls and process responses.\n Constructing API URLs: Create structured API URLs dynamically with constant prefixes and query parameters using urlencode.\n Building Functions: Develop a Python function that accepts a city name, constructs the API call, and returns the location ID.\n\nTo open the browser Developer Tools on Chrome, Edge, or Firefox, you can:\n\n Right-click on the page and select “Inspect” to open the developer tools\n OR: Press F12\n OR: Press Ctrl+Shift+I on Windows\n OR: Press Cmd+Opt+I on Mac\n\nHere are links and references:\n\n BBC Location ID scraping - Notebook\n BBC Weather - Palo Alto (location ID: 5380748)\n BBC Locator Service - Los Angeles\n Learn about the requests package. Watch Python Requests Tutorial: Request Web Pages, Download Images, POST Data, Read JSON, and More\n\nBBC Weather data with Python\n---------------------------------------------------------------------------------------------\n\n[](https://youtu.be/Uc4DgQJDRoI)\n\nYou’ll learn how to scrape the live weather data of a city from the BBC Weather API, covering:\n\n Introduction to Web Scraping: Understand the basics of web scraping and its legality.\n Libraries Overview: Learn the importance of requests and BeautifulSoup.\n Fetching HTML: Use requests to fetch HTML content from a web page.\n Parsing HTML: Utilize BeautifulSoup to parse and navigate the HTML content.\n Identifying Data: Inspect HTML elements to locate specific data (e.g., high and low temperatures).\n Extracting Data: Extract relevant data using BeautifulSoup‘s findall() function.\n Data Cleanup: Clean extracted data to remove unwanted elements.\n Post-Processing: Use regular expressions to split large strings into meaningful parts.\n Data Structuring: Combine extracted data into a structured pandas DataFrame.\n Handling Special Characters: Replace unwanted characters for better data manipulation.\n Saving Data: Save the cleaned data into CSV and Excel formats.\n\nHere are links and references:\n\n BBC Weather scraping - Notebook\n BBC Locator Service - Mumbai\n BBC Weather - Mumbai (location ID: 1275339)\n BBC Weather API - Mumbai (location ID: 1275339)\n Learn about the json package. Watch Python Tutorial: Working with JSON Data using the json Module\n Learn about the BeautifulSoup package. Watch Python Tutorial: Web Scraping with BeautifulSoup and Requests\n Learn about the pandas package. Watch\n  + Python Pandas Tutorial (Part 1): Getting Started with Data Analysis - Installation and Loading Data\n  + Python Pandas Tutorial (Part 2): DataFrame and Series Basics - Selecting Rows and Columns\n Learn about the re package. Watch Python Tutorial: re Module - How to Write and Match Regular Expressions (Regex)\n Learn about the datetime package. Watch Python Tutorial: Datetime Module - How to work with Dates, Times, Timedeltas, and Timezones\n\nPrevious\n\nCrawling with the CLI\n\nNext\n\nScraping IMDb with JavaScript"
  },
  {
    "title": "BBC Weather API with Python",
    "filename": "BBC_Weather_API_with_Python.md",
    "text": "BBC Weather location ID with Python\n-----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/IafLrvnamAw)\n\nYou’ll learn how to get the location ID of any city from the BBC Weather API – as a precursor to scraping weather data – covering:\n\n Understanding API Calls: Learn how backend API calls work when searching for a city on the BBC weather website.\n Inspecting Web Interactions: Use the browser’s inspect element feature to track API calls and understand the network activity.\n Extracting Location IDs: Identify and extract the location ID from the API response using Python.\n Using Python Libraries: Import and use requests, json, and urlencode libraries to make API calls and process responses.\n Constructing API URLs: Create structured API URLs dynamically with constant prefixes and query parameters using urlencode.\n Building Functions: Develop a Python function that accepts a city name, constructs the API call, and returns the location ID.\n\nTo open the browser Developer Tools on Chrome, Edge, or Firefox, you can:\n\n Right-click on the page and select “Inspect” to open the developer tools\n OR: Press F12\n OR: Press Ctrl+Shift+I on Windows\n OR: Press Cmd+Opt+I on Mac\n\nHere are links and references:\n\n BBC Location ID scraping - Notebook\n BBC Weather - Palo Alto (location ID: 5380748)\n BBC Locator Service - Los Angeles\n Learn about the requests package. Watch Python Requests Tutorial: Request Web Pages, Download Images, POST Data, Read JSON, and More\n\nBBC Weather data with Python\n---------------------------------------------------------------------------------------------\n\n[](https://youtu.be/Uc4DgQJDRoI)\n\nYou’ll learn how to scrape the live weather data of a city from the BBC Weather API, covering:\n\n Introduction to Web Scraping: Understand the basics of web scraping and its legality.\n Libraries Overview: Learn the importance of requests and BeautifulSoup.\n Fetching HTML: Use requests to fetch HTML content from a web page.\n Parsing HTML: Utilize BeautifulSoup to parse and navigate the HTML content.\n Identifying Data: Inspect HTML elements to locate specific data (e.g., high and low temperatures).\n Extracting Data: Extract relevant data using BeautifulSoup‘s findall() function.\n Data Cleanup: Clean extracted data to remove unwanted elements.\n Post-Processing: Use regular expressions to split large strings into meaningful parts.\n Data Structuring: Combine extracted data into a structured pandas DataFrame.\n Handling Special Characters: Replace unwanted characters for better data manipulation.\n Saving Data: Save the cleaned data into CSV and Excel formats.\n\nHere are links and references:\n\n BBC Weather scraping - Notebook\n BBC Locator Service - Mumbai\n BBC Weather - Mumbai (location ID: 1275339)\n BBC Weather API - Mumbai (location ID: 1275339)\n Learn about the json package. Watch Python Tutorial: Working with JSON Data using the json Module\n Learn about the BeautifulSoup package. Watch Python Tutorial: Web Scraping with BeautifulSoup and Requests\n Learn about the pandas package. Watch\n  + Python Pandas Tutorial (Part 1): Getting Started with Data Analysis - Installation and Loading Data\n  + Python Pandas Tutorial (Part 2): DataFrame and Series Basics - Selecting Rows and Columns\n Learn about the re package. Watch Python Tutorial: re Module - How to Write and Match Regular Expressions (Regex)\n Learn about the datetime package. Watch Python Tutorial: Datetime Module - How to work with Dates, Times, Timedeltas, and Timezones\n\nPrevious\n\nCrawling with the CLI\n\nNext\n\nScraping IMDb with JavaScript"
  },
  {
    "title": "Data Storytelling",
    "filename": "Data_Storytelling.md",
    "text": "Data Storytelling\n=============================================================\n\n[](https://youtu.be/aF93i6zVVQg)\n\nPrevious\n\nRAWgraphs\n\nNext\n\nNarratives with LLMs"
  },
  {
    "title": "Data Storytelling",
    "filename": "Data_Storytelling.md",
    "text": "Data Storytelling\n=============================================================\n\n[](https://youtu.be/aF93i6zVVQg)\n\nPrevious\n\nRAWgraphs\n\nNext\n\nNarratives with LLMs"
  },
  {
    "title": "Splitting Text in Excel",
    "filename": "Splitting_Text_in_Excel.md",
    "text": "Splitting Text in Excel\n-------------------------------------------------------------------------------\n\n[](https://youtu.be/fQeADnqiOAg)\n\nYou’ll learn how to transform a single-column data set into multiple, organized columns based on specific delimiters using the “Text to Columns” feature.\n\nHere are links used in the video:\n\n US Senate Legislation - Votes\n\nPrevious\n\nData Transformation in Excel\n\nNext\n\nData Aggregation in Excel"
  },
  {
    "title": "Splitting Text in Excel",
    "filename": "Splitting_Text_in_Excel.md",
    "text": "Splitting Text in Excel\n-------------------------------------------------------------------------------\n\n[](https://youtu.be/fQeADnqiOAg)\n\nYou’ll learn how to transform a single-column data set into multiple, organized columns based on specific delimiters using the “Text to Columns” feature.\n\nHere are links used in the video:\n\n US Senate Legislation - Votes\n\nPrevious\n\nData Transformation in Excel\n\nNext\n\nData Aggregation in Excel"
  },
  {
    "title": "Convert HTML to Markdown",
    "filename": "Convert_HTML_to_Markdown.md",
    "text": "Converting HTML to Markdown\n----------------------------------------------------------------------------------------\n\nWhen working with web content, converting HTML files to plain text or Markdown is a common requirement for content extraction, analysis, and preservation. For example:\n\n Content analysis: Extract clean text from HTML for natural language processing\n Data mining: Strip formatting to focus on the actual content\n Offline reading: Convert web pages to readable formats for e-readers or offline consumption\n Content migration: Move content between different CMS platforms\n SEO analysis: Extract headings, content structure, and text for optimization\n Archive creation: Store web content in more compact, preservation-friendly formats\n Accessibility: Convert content to formats that work better with screen readers\n\nThis tutorial covers both converting existing HTML files and combining web crawling with HTML-to-text conversion in a single workflow – all using the command line.\n\ndefuddle-cli\n\ndefuddle-cli specializes in HTML - Markdown conversion. It’s a bit slow and not very customizable but produces clean Markdown that preserves structure, links, and basic formatting. Best for content where preserving the document structure is important.\n\nfind . -name '.html' -exec npx --package defuddle-cli -y defuddle parse {} --md -o {}.md \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n npx --package defuddle-cli -y: Installs and runs defuddle-cli without prompting\n defuddle parse {} --md: Parses the HTML file (represented by {}) and converts to markdown\n -o {}.md: Outputs to a file with the original name plus .md extension\n\nPandoc\n\nPandoc is a bit slow and highly customizable, preserving almost all formatting elements, leading to verbose markdown. Best for academic or documentation conversion where precision matters.\n\nPandoc can convert from many other formats (such as Word, PDF, LaTeX, etc.) to Markdown and vice versa, making it one of most popular and versatele document convertors.\n\n[](https://youtu.be/HPSK7q13-40)\n\nfind . -name '.html' -exec pandoc -f html -t markdownstrict -o {}.md {} \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n pandoc: The Swiss Army knife of document conversion\n -f html -t markdownstrict: Convert from HTML format to strict markdown\n -o {}.md {}: Output to a markdown file, with the input file as the last argument\n\nLynx\n\nLynx is fast and generates text (not Markdown) with minimal formatting. Lynx renders the HTML as it would appear in a text browser, preserving basic structure but losing complex formatting. Best for quick content extraction or when processing large numbers of files.\n\nfind . -type f -name '.html' -exec sh -c 'for f; do lynx -dump -nolist \"$f\" > \"${f%.html}.txt\"; done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n lynx -dump -nolist \"$f\": Uses the lynx text browser to render HTML as plain text\n  + -dump: Output the rendered page to stdout\n  + -nolist: Don’t include the list of links at the end\n > \"${f%.html}.txt\": Save output to a .txt file with the same base name\n\nw3m\n\nw3m is very slow processing with minimal formatting. w3m tends to be more thorough in its rendering than lynx but takes considerably longer. It supports basic JavaScript processing, making it better at handling modern websites with dynamic content. Best for cases where you need slightly better rendering than lynx, particularly for complex layouts and tables, and when some JavaScript processing is beneficial.\n\nfind . -type f -name '.html' \\\n  -exec sh -c 'for f; do \\\n      w3m -dump -T text/html -cols 80 -no-graph \"$f\" > \"${f%.html}.md\"; \\\n    done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n w3m -dump -T text/html -cols 80 -no-graph \"$f\": Uses the w3m text browser to render HTML\n  + -dump: Output the rendered page to stdout\n  + -T text/html: Specify input format as HTML\n  + -cols 80: Set output width to 80 columns\n  + -no-graph: Don’t show graphic characters for tables and frames\n > \"${f%.html}.md\": Save output to a .md file with the same base name\n\nComparison\n\n| Approach | Speed | Format Quality | Preservation | Best For |\n| --- | --- | --- | --- | --- |\n| defuddle-cli | Slow | High | Good structure and links | Content migration, publishing |\n| pandoc | Slow | Very High | Almost everything | Academic papers, documentation |\n| lynx | Fast | Low | Basic structure only | Quick extraction, large batches |\n| w3m | Very Slow | Medium-Low | Basic structure with better tables | Improved readability over lynx |\n\nOptimize Batch Processing\n\n1. Process in parallel: Use GNU Parallel for multi-core processing:\n\n   \n   find . -name \".html\" | parallel \"pandoc -f html -t markdownstrict -o {}.md {}\"Copy to clipboardErrorCopied\n   \n2. Filter files before processing:\n\n   \n   find . -name \".html\" -type f -size -1M -exec pandoc -f html -t markdown {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n3. Customize output format with additional parameters:\n\n   \n    For pandoc, preserve line breaks but simplify other formatting\n   find . -name \".html\" -exec pandoc -f html -t markdown --wrap=preserve --atx-headers {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n4. Handle errors gracefully:\n\n   \n   find . -name \".html\" -exec sh -c 'for f; do pandoc -f html -t markdown \"$f\" -o \"${f%.html}.md\" 2>/dev/null || echo \"Failed: $f\" >> conversionerrors.log; done'  {} +Copy to clipboardErrorCopied\n   \n\nChoosing the Right Tool\n\n Need speed with minimal formatting? Use the lynx approach\n Need precise, complete conversion? Use pandoc\n Need a balance of structure and cleanliness? Try defuddle-cli\n Working with complex tables? w3m might render them better\n\nRemember that the best approach depends on your specific use case, volume of files, and how you intend to use the converted text.\n\nCombined Crawling and Conversion\n\nSometimes you need to both crawl a website and convert its content to markdown or text in a single workflow, like Crawl4AI or markdown-crawler.\n\n1. For research/data collection: Use a specialized crawler (like Crawl4AI) with post-processing conversion\n2. For simple website archiving: Markdown-crawler provides a convenient all-in-one solution\n3. For high-quality conversion: Use wget/wget2 for crawling followed by pandoc for conversion\n4. For maximum speed: Combine wget with lynx in a pipeline\n\nCrawl4AI\n\nCrawl4AI is designed for single-page extraction with high-quality content processing. Crawl4AI is optimized for AI training data extraction, focusing on clean, structured content rather than complete site preservation. It excels at removing boilerplate content and preserving the main article text.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install crawl4ai\ncrawl4ai-setupCopy to clipboardErrorCopied\n\n uv venv: Creates a Python virtual environment using uv (a faster alternative to virtualenv)\n source .venv/bin/activate.fish: Activates the virtual environment (fish shell syntax)\n uv pip install crawl4ai: Installs the crawl4ai package\n crawl4ai-setup: Initializes crawl4ai’s required dependencies\n\nmarkdown-crawler\n\nmarkdown-crawler combines web crawling with markdown conversion in one tool. It’s efficient for bulk processing but tends to produce lower-quality markdown conversion compared to specialized converters like pandoc or defuddle. Best for projects where quantity and integration are more important than perfect formatting.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install markdown-crawler\nmarkdown-crawler -t 5 -d 3 -b ./markdown https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\n uv venv and activation: Same as above\n uv pip install markdown-crawler: Installs the markdown-crawler package\n markdown-crawler: Runs the crawler with these options:\n  + -t 5: Sets 5 threads for parallel crawling\n  + -d 3: Limits crawl depth to 3 levels\n  + -b ./markdown: Sets the base output directory\n  + Final argument is the starting URL\n\nPrevious\n\nConvert PDFs to Markdown\n\nNext\n\nLLM Website Scraping"
  },
  {
    "title": "Convert HTML to Markdown",
    "filename": "Convert_HTML_to_Markdown.md",
    "text": "Converting HTML to Markdown\n----------------------------------------------------------------------------------------\n\nWhen working with web content, converting HTML files to plain text or Markdown is a common requirement for content extraction, analysis, and preservation. For example:\n\n Content analysis: Extract clean text from HTML for natural language processing\n Data mining: Strip formatting to focus on the actual content\n Offline reading: Convert web pages to readable formats for e-readers or offline consumption\n Content migration: Move content between different CMS platforms\n SEO analysis: Extract headings, content structure, and text for optimization\n Archive creation: Store web content in more compact, preservation-friendly formats\n Accessibility: Convert content to formats that work better with screen readers\n\nThis tutorial covers both converting existing HTML files and combining web crawling with HTML-to-text conversion in a single workflow – all using the command line.\n\ndefuddle-cli\n\ndefuddle-cli specializes in HTML - Markdown conversion. It’s a bit slow and not very customizable but produces clean Markdown that preserves structure, links, and basic formatting. Best for content where preserving the document structure is important.\n\nfind . -name '.html' -exec npx --package defuddle-cli -y defuddle parse {} --md -o {}.md \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n npx --package defuddle-cli -y: Installs and runs defuddle-cli without prompting\n defuddle parse {} --md: Parses the HTML file (represented by {}) and converts to markdown\n -o {}.md: Outputs to a file with the original name plus .md extension\n\nPandoc\n\nPandoc is a bit slow and highly customizable, preserving almost all formatting elements, leading to verbose markdown. Best for academic or documentation conversion where precision matters.\n\nPandoc can convert from many other formats (such as Word, PDF, LaTeX, etc.) to Markdown and vice versa, making it one of most popular and versatele document convertors.\n\n[](https://youtu.be/HPSK7q13-40)\n\nfind . -name '.html' -exec pandoc -f html -t markdownstrict -o {}.md {} \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n pandoc: The Swiss Army knife of document conversion\n -f html -t markdownstrict: Convert from HTML format to strict markdown\n -o {}.md {}: Output to a markdown file, with the input file as the last argument\n\nLynx\n\nLynx is fast and generates text (not Markdown) with minimal formatting. Lynx renders the HTML as it would appear in a text browser, preserving basic structure but losing complex formatting. Best for quick content extraction or when processing large numbers of files.\n\nfind . -type f -name '.html' -exec sh -c 'for f; do lynx -dump -nolist \"$f\" > \"${f%.html}.txt\"; done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n lynx -dump -nolist \"$f\": Uses the lynx text browser to render HTML as plain text\n  + -dump: Output the rendered page to stdout\n  + -nolist: Don’t include the list of links at the end\n > \"${f%.html}.txt\": Save output to a .txt file with the same base name\n\nw3m\n\nw3m is very slow processing with minimal formatting. w3m tends to be more thorough in its rendering than lynx but takes considerably longer. It supports basic JavaScript processing, making it better at handling modern websites with dynamic content. Best for cases where you need slightly better rendering than lynx, particularly for complex layouts and tables, and when some JavaScript processing is beneficial.\n\nfind . -type f -name '.html' \\\n  -exec sh -c 'for f; do \\\n      w3m -dump -T text/html -cols 80 -no-graph \"$f\" > \"${f%.html}.md\"; \\\n    done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n w3m -dump -T text/html -cols 80 -no-graph \"$f\": Uses the w3m text browser to render HTML\n  + -dump: Output the rendered page to stdout\n  + -T text/html: Specify input format as HTML\n  + -cols 80: Set output width to 80 columns\n  + -no-graph: Don’t show graphic characters for tables and frames\n > \"${f%.html}.md\": Save output to a .md file with the same base name\n\nComparison\n\n| Approach | Speed | Format Quality | Preservation | Best For |\n| --- | --- | --- | --- | --- |\n| defuddle-cli | Slow | High | Good structure and links | Content migration, publishing |\n| pandoc | Slow | Very High | Almost everything | Academic papers, documentation |\n| lynx | Fast | Low | Basic structure only | Quick extraction, large batches |\n| w3m | Very Slow | Medium-Low | Basic structure with better tables | Improved readability over lynx |\n\nOptimize Batch Processing\n\n1. Process in parallel: Use GNU Parallel for multi-core processing:\n\n   \n   find . -name \".html\" | parallel \"pandoc -f html -t markdownstrict -o {}.md {}\"Copy to clipboardErrorCopied\n   \n2. Filter files before processing:\n\n   \n   find . -name \".html\" -type f -size -1M -exec pandoc -f html -t markdown {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n3. Customize output format with additional parameters:\n\n   \n    For pandoc, preserve line breaks but simplify other formatting\n   find . -name \".html\" -exec pandoc -f html -t markdown --wrap=preserve --atx-headers {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n4. Handle errors gracefully:\n\n   \n   find . -name \".html\" -exec sh -c 'for f; do pandoc -f html -t markdown \"$f\" -o \"${f%.html}.md\" 2>/dev/null || echo \"Failed: $f\" >> conversionerrors.log; done'  {} +Copy to clipboardErrorCopied\n   \n\nChoosing the Right Tool\n\n Need speed with minimal formatting? Use the lynx approach\n Need precise, complete conversion? Use pandoc\n Need a balance of structure and cleanliness? Try defuddle-cli\n Working with complex tables? w3m might render them better\n\nRemember that the best approach depends on your specific use case, volume of files, and how you intend to use the converted text.\n\nCombined Crawling and Conversion\n\nSometimes you need to both crawl a website and convert its content to markdown or text in a single workflow, like Crawl4AI or markdown-crawler.\n\n1. For research/data collection: Use a specialized crawler (like Crawl4AI) with post-processing conversion\n2. For simple website archiving: Markdown-crawler provides a convenient all-in-one solution\n3. For high-quality conversion: Use wget/wget2 for crawling followed by pandoc for conversion\n4. For maximum speed: Combine wget with lynx in a pipeline\n\nCrawl4AI\n\nCrawl4AI is designed for single-page extraction with high-quality content processing. Crawl4AI is optimized for AI training data extraction, focusing on clean, structured content rather than complete site preservation. It excels at removing boilerplate content and preserving the main article text.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install crawl4ai\ncrawl4ai-setupCopy to clipboardErrorCopied\n\n uv venv: Creates a Python virtual environment using uv (a faster alternative to virtualenv)\n source .venv/bin/activate.fish: Activates the virtual environment (fish shell syntax)\n uv pip install crawl4ai: Installs the crawl4ai package\n crawl4ai-setup: Initializes crawl4ai’s required dependencies\n\nmarkdown-crawler\n\nmarkdown-crawler combines web crawling with markdown conversion in one tool. It’s efficient for bulk processing but tends to produce lower-quality markdown conversion compared to specialized converters like pandoc or defuddle. Best for projects where quantity and integration are more important than perfect formatting.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install markdown-crawler\nmarkdown-crawler -t 5 -d 3 -b ./markdown https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\n uv venv and activation: Same as above\n uv pip install markdown-crawler: Installs the markdown-crawler package\n markdown-crawler: Runs the crawler with these options:\n  + -t 5: Sets 5 threads for parallel crawling\n  + -d 3: Limits crawl depth to 3 levels\n  + -b ./markdown: Sets the base output directory\n  + Final argument is the starting URL\n\nPrevious\n\nConvert PDFs to Markdown\n\nNext\n\nLLM Website Scraping"
  },
  {
    "title": "Convert HTML to Markdown",
    "filename": "Convert_HTML_to_Markdown.md",
    "text": "Converting HTML to Markdown\n----------------------------------------------------------------------------------------\n\nWhen working with web content, converting HTML files to plain text or Markdown is a common requirement for content extraction, analysis, and preservation. For example:\n\n Content analysis: Extract clean text from HTML for natural language processing\n Data mining: Strip formatting to focus on the actual content\n Offline reading: Convert web pages to readable formats for e-readers or offline consumption\n Content migration: Move content between different CMS platforms\n SEO analysis: Extract headings, content structure, and text for optimization\n Archive creation: Store web content in more compact, preservation-friendly formats\n Accessibility: Convert content to formats that work better with screen readers\n\nThis tutorial covers both converting existing HTML files and combining web crawling with HTML-to-text conversion in a single workflow – all using the command line.\n\ndefuddle-cli\n\ndefuddle-cli specializes in HTML - Markdown conversion. It’s a bit slow and not very customizable but produces clean Markdown that preserves structure, links, and basic formatting. Best for content where preserving the document structure is important.\n\nfind . -name '.html' -exec npx --package defuddle-cli -y defuddle parse {} --md -o {}.md \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n npx --package defuddle-cli -y: Installs and runs defuddle-cli without prompting\n defuddle parse {} --md: Parses the HTML file (represented by {}) and converts to markdown\n -o {}.md: Outputs to a file with the original name plus .md extension\n\nPandoc\n\nPandoc is a bit slow and highly customizable, preserving almost all formatting elements, leading to verbose markdown. Best for academic or documentation conversion where precision matters.\n\nPandoc can convert from many other formats (such as Word, PDF, LaTeX, etc.) to Markdown and vice versa, making it one of most popular and versatele document convertors.\n\n[](https://youtu.be/HPSK7q13-40)\n\nfind . -name '.html' -exec pandoc -f html -t markdownstrict -o {}.md {} \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n pandoc: The Swiss Army knife of document conversion\n -f html -t markdownstrict: Convert from HTML format to strict markdown\n -o {}.md {}: Output to a markdown file, with the input file as the last argument\n\nLynx\n\nLynx is fast and generates text (not Markdown) with minimal formatting. Lynx renders the HTML as it would appear in a text browser, preserving basic structure but losing complex formatting. Best for quick content extraction or when processing large numbers of files.\n\nfind . -type f -name '.html' -exec sh -c 'for f; do lynx -dump -nolist \"$f\" > \"${f%.html}.txt\"; done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n lynx -dump -nolist \"$f\": Uses the lynx text browser to render HTML as plain text\n  + -dump: Output the rendered page to stdout\n  + -nolist: Don’t include the list of links at the end\n > \"${f%.html}.txt\": Save output to a .txt file with the same base name\n\nw3m\n\nw3m is very slow processing with minimal formatting. w3m tends to be more thorough in its rendering than lynx but takes considerably longer. It supports basic JavaScript processing, making it better at handling modern websites with dynamic content. Best for cases where you need slightly better rendering than lynx, particularly for complex layouts and tables, and when some JavaScript processing is beneficial.\n\nfind . -type f -name '.html' \\\n  -exec sh -c 'for f; do \\\n      w3m -dump -T text/html -cols 80 -no-graph \"$f\" > \"${f%.html}.md\"; \\\n    done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n w3m -dump -T text/html -cols 80 -no-graph \"$f\": Uses the w3m text browser to render HTML\n  + -dump: Output the rendered page to stdout\n  + -T text/html: Specify input format as HTML\n  + -cols 80: Set output width to 80 columns\n  + -no-graph: Don’t show graphic characters for tables and frames\n > \"${f%.html}.md\": Save output to a .md file with the same base name\n\nComparison\n\n| Approach | Speed | Format Quality | Preservation | Best For |\n| --- | --- | --- | --- | --- |\n| defuddle-cli | Slow | High | Good structure and links | Content migration, publishing |\n| pandoc | Slow | Very High | Almost everything | Academic papers, documentation |\n| lynx | Fast | Low | Basic structure only | Quick extraction, large batches |\n| w3m | Very Slow | Medium-Low | Basic structure with better tables | Improved readability over lynx |\n\nOptimize Batch Processing\n\n1. Process in parallel: Use GNU Parallel for multi-core processing:\n\n   \n   find . -name \".html\" | parallel \"pandoc -f html -t markdownstrict -o {}.md {}\"Copy to clipboardErrorCopied\n   \n2. Filter files before processing:\n\n   \n   find . -name \".html\" -type f -size -1M -exec pandoc -f html -t markdown {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n3. Customize output format with additional parameters:\n\n   \n    For pandoc, preserve line breaks but simplify other formatting\n   find . -name \".html\" -exec pandoc -f html -t markdown --wrap=preserve --atx-headers {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n4. Handle errors gracefully:\n\n   \n   find . -name \".html\" -exec sh -c 'for f; do pandoc -f html -t markdown \"$f\" -o \"${f%.html}.md\" 2>/dev/null || echo \"Failed: $f\" >> conversionerrors.log; done'  {} +Copy to clipboardErrorCopied\n   \n\nChoosing the Right Tool\n\n Need speed with minimal formatting? Use the lynx approach\n Need precise, complete conversion? Use pandoc\n Need a balance of structure and cleanliness? Try defuddle-cli\n Working with complex tables? w3m might render them better\n\nRemember that the best approach depends on your specific use case, volume of files, and how you intend to use the converted text.\n\nCombined Crawling and Conversion\n\nSometimes you need to both crawl a website and convert its content to markdown or text in a single workflow, like Crawl4AI or markdown-crawler.\n\n1. For research/data collection: Use a specialized crawler (like Crawl4AI) with post-processing conversion\n2. For simple website archiving: Markdown-crawler provides a convenient all-in-one solution\n3. For high-quality conversion: Use wget/wget2 for crawling followed by pandoc for conversion\n4. For maximum speed: Combine wget with lynx in a pipeline\n\nCrawl4AI\n\nCrawl4AI is designed for single-page extraction with high-quality content processing. Crawl4AI is optimized for AI training data extraction, focusing on clean, structured content rather than complete site preservation. It excels at removing boilerplate content and preserving the main article text.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install crawl4ai\ncrawl4ai-setupCopy to clipboardErrorCopied\n\n uv venv: Creates a Python virtual environment using uv (a faster alternative to virtualenv)\n source .venv/bin/activate.fish: Activates the virtual environment (fish shell syntax)\n uv pip install crawl4ai: Installs the crawl4ai package\n crawl4ai-setup: Initializes crawl4ai’s required dependencies\n\nmarkdown-crawler\n\nmarkdown-crawler combines web crawling with markdown conversion in one tool. It’s efficient for bulk processing but tends to produce lower-quality markdown conversion compared to specialized converters like pandoc or defuddle. Best for projects where quantity and integration are more important than perfect formatting.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install markdown-crawler\nmarkdown-crawler -t 5 -d 3 -b ./markdown https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\n uv venv and activation: Same as above\n uv pip install markdown-crawler: Installs the markdown-crawler package\n markdown-crawler: Runs the crawler with these options:\n  + -t 5: Sets 5 threads for parallel crawling\n  + -d 3: Limits crawl depth to 3 levels\n  + -b ./markdown: Sets the base output directory\n  + Final argument is the starting URL\n\nPrevious\n\nConvert PDFs to Markdown\n\nNext\n\nLLM Website Scraping"
  },
  {
    "title": "Convert HTML to Markdown",
    "filename": "Convert_HTML_to_Markdown.md",
    "text": "Converting HTML to Markdown\n----------------------------------------------------------------------------------------\n\nWhen working with web content, converting HTML files to plain text or Markdown is a common requirement for content extraction, analysis, and preservation. For example:\n\n Content analysis: Extract clean text from HTML for natural language processing\n Data mining: Strip formatting to focus on the actual content\n Offline reading: Convert web pages to readable formats for e-readers or offline consumption\n Content migration: Move content between different CMS platforms\n SEO analysis: Extract headings, content structure, and text for optimization\n Archive creation: Store web content in more compact, preservation-friendly formats\n Accessibility: Convert content to formats that work better with screen readers\n\nThis tutorial covers both converting existing HTML files and combining web crawling with HTML-to-text conversion in a single workflow – all using the command line.\n\ndefuddle-cli\n\ndefuddle-cli specializes in HTML - Markdown conversion. It’s a bit slow and not very customizable but produces clean Markdown that preserves structure, links, and basic formatting. Best for content where preserving the document structure is important.\n\nfind . -name '.html' -exec npx --package defuddle-cli -y defuddle parse {} --md -o {}.md \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n npx --package defuddle-cli -y: Installs and runs defuddle-cli without prompting\n defuddle parse {} --md: Parses the HTML file (represented by {}) and converts to markdown\n -o {}.md: Outputs to a file with the original name plus .md extension\n\nPandoc\n\nPandoc is a bit slow and highly customizable, preserving almost all formatting elements, leading to verbose markdown. Best for academic or documentation conversion where precision matters.\n\nPandoc can convert from many other formats (such as Word, PDF, LaTeX, etc.) to Markdown and vice versa, making it one of most popular and versatele document convertors.\n\n[](https://youtu.be/HPSK7q13-40)\n\nfind . -name '.html' -exec pandoc -f html -t markdownstrict -o {}.md {} \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n pandoc: The Swiss Army knife of document conversion\n -f html -t markdownstrict: Convert from HTML format to strict markdown\n -o {}.md {}: Output to a markdown file, with the input file as the last argument\n\nLynx\n\nLynx is fast and generates text (not Markdown) with minimal formatting. Lynx renders the HTML as it would appear in a text browser, preserving basic structure but losing complex formatting. Best for quick content extraction or when processing large numbers of files.\n\nfind . -type f -name '.html' -exec sh -c 'for f; do lynx -dump -nolist \"$f\" > \"${f%.html}.txt\"; done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n lynx -dump -nolist \"$f\": Uses the lynx text browser to render HTML as plain text\n  + -dump: Output the rendered page to stdout\n  + -nolist: Don’t include the list of links at the end\n > \"${f%.html}.txt\": Save output to a .txt file with the same base name\n\nw3m\n\nw3m is very slow processing with minimal formatting. w3m tends to be more thorough in its rendering than lynx but takes considerably longer. It supports basic JavaScript processing, making it better at handling modern websites with dynamic content. Best for cases where you need slightly better rendering than lynx, particularly for complex layouts and tables, and when some JavaScript processing is beneficial.\n\nfind . -type f -name '.html' \\\n  -exec sh -c 'for f; do \\\n      w3m -dump -T text/html -cols 80 -no-graph \"$f\" > \"${f%.html}.md\"; \\\n    done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n w3m -dump -T text/html -cols 80 -no-graph \"$f\": Uses the w3m text browser to render HTML\n  + -dump: Output the rendered page to stdout\n  + -T text/html: Specify input format as HTML\n  + -cols 80: Set output width to 80 columns\n  + -no-graph: Don’t show graphic characters for tables and frames\n > \"${f%.html}.md\": Save output to a .md file with the same base name\n\nComparison\n\n| Approach | Speed | Format Quality | Preservation | Best For |\n| --- | --- | --- | --- | --- |\n| defuddle-cli | Slow | High | Good structure and links | Content migration, publishing |\n| pandoc | Slow | Very High | Almost everything | Academic papers, documentation |\n| lynx | Fast | Low | Basic structure only | Quick extraction, large batches |\n| w3m | Very Slow | Medium-Low | Basic structure with better tables | Improved readability over lynx |\n\nOptimize Batch Processing\n\n1. Process in parallel: Use GNU Parallel for multi-core processing:\n\n   \n   find . -name \".html\" | parallel \"pandoc -f html -t markdownstrict -o {}.md {}\"Copy to clipboardErrorCopied\n   \n2. Filter files before processing:\n\n   \n   find . -name \".html\" -type f -size -1M -exec pandoc -f html -t markdown {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n3. Customize output format with additional parameters:\n\n   \n    For pandoc, preserve line breaks but simplify other formatting\n   find . -name \".html\" -exec pandoc -f html -t markdown --wrap=preserve --atx-headers {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n4. Handle errors gracefully:\n\n   \n   find . -name \".html\" -exec sh -c 'for f; do pandoc -f html -t markdown \"$f\" -o \"${f%.html}.md\" 2>/dev/null || echo \"Failed: $f\" >> conversionerrors.log; done'  {} +Copy to clipboardErrorCopied\n   \n\nChoosing the Right Tool\n\n Need speed with minimal formatting? Use the lynx approach\n Need precise, complete conversion? Use pandoc\n Need a balance of structure and cleanliness? Try defuddle-cli\n Working with complex tables? w3m might render them better\n\nRemember that the best approach depends on your specific use case, volume of files, and how you intend to use the converted text.\n\nCombined Crawling and Conversion\n\nSometimes you need to both crawl a website and convert its content to markdown or text in a single workflow, like Crawl4AI or markdown-crawler.\n\n1. For research/data collection: Use a specialized crawler (like Crawl4AI) with post-processing conversion\n2. For simple website archiving: Markdown-crawler provides a convenient all-in-one solution\n3. For high-quality conversion: Use wget/wget2 for crawling followed by pandoc for conversion\n4. For maximum speed: Combine wget with lynx in a pipeline\n\nCrawl4AI\n\nCrawl4AI is designed for single-page extraction with high-quality content processing. Crawl4AI is optimized for AI training data extraction, focusing on clean, structured content rather than complete site preservation. It excels at removing boilerplate content and preserving the main article text.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install crawl4ai\ncrawl4ai-setupCopy to clipboardErrorCopied\n\n uv venv: Creates a Python virtual environment using uv (a faster alternative to virtualenv)\n source .venv/bin/activate.fish: Activates the virtual environment (fish shell syntax)\n uv pip install crawl4ai: Installs the crawl4ai package\n crawl4ai-setup: Initializes crawl4ai’s required dependencies\n\nmarkdown-crawler\n\nmarkdown-crawler combines web crawling with markdown conversion in one tool. It’s efficient for bulk processing but tends to produce lower-quality markdown conversion compared to specialized converters like pandoc or defuddle. Best for projects where quantity and integration are more important than perfect formatting.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install markdown-crawler\nmarkdown-crawler -t 5 -d 3 -b ./markdown https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\n uv venv and activation: Same as above\n uv pip install markdown-crawler: Installs the markdown-crawler package\n markdown-crawler: Runs the crawler with these options:\n  + -t 5: Sets 5 threads for parallel crawling\n  + -d 3: Limits crawl depth to 3 levels\n  + -b ./markdown: Sets the base output directory\n  + Final argument is the starting URL\n\nPrevious\n\nConvert PDFs to Markdown\n\nNext\n\nLLM Website Scraping"
  },
  {
    "title": "Convert HTML to Markdown",
    "filename": "Convert_HTML_to_Markdown.md",
    "text": "Converting HTML to Markdown\n----------------------------------------------------------------------------------------\n\nWhen working with web content, converting HTML files to plain text or Markdown is a common requirement for content extraction, analysis, and preservation. For example:\n\n Content analysis: Extract clean text from HTML for natural language processing\n Data mining: Strip formatting to focus on the actual content\n Offline reading: Convert web pages to readable formats for e-readers or offline consumption\n Content migration: Move content between different CMS platforms\n SEO analysis: Extract headings, content structure, and text for optimization\n Archive creation: Store web content in more compact, preservation-friendly formats\n Accessibility: Convert content to formats that work better with screen readers\n\nThis tutorial covers both converting existing HTML files and combining web crawling with HTML-to-text conversion in a single workflow – all using the command line.\n\ndefuddle-cli\n\ndefuddle-cli specializes in HTML - Markdown conversion. It’s a bit slow and not very customizable but produces clean Markdown that preserves structure, links, and basic formatting. Best for content where preserving the document structure is important.\n\nfind . -name '.html' -exec npx --package defuddle-cli -y defuddle parse {} --md -o {}.md \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n npx --package defuddle-cli -y: Installs and runs defuddle-cli without prompting\n defuddle parse {} --md: Parses the HTML file (represented by {}) and converts to markdown\n -o {}.md: Outputs to a file with the original name plus .md extension\n\nPandoc\n\nPandoc is a bit slow and highly customizable, preserving almost all formatting elements, leading to verbose markdown. Best for academic or documentation conversion where precision matters.\n\nPandoc can convert from many other formats (such as Word, PDF, LaTeX, etc.) to Markdown and vice versa, making it one of most popular and versatele document convertors.\n\n[](https://youtu.be/HPSK7q13-40)\n\nfind . -name '.html' -exec pandoc -f html -t markdownstrict -o {}.md {} \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n pandoc: The Swiss Army knife of document conversion\n -f html -t markdownstrict: Convert from HTML format to strict markdown\n -o {}.md {}: Output to a markdown file, with the input file as the last argument\n\nLynx\n\nLynx is fast and generates text (not Markdown) with minimal formatting. Lynx renders the HTML as it would appear in a text browser, preserving basic structure but losing complex formatting. Best for quick content extraction or when processing large numbers of files.\n\nfind . -type f -name '.html' -exec sh -c 'for f; do lynx -dump -nolist \"$f\" > \"${f%.html}.txt\"; done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n lynx -dump -nolist \"$f\": Uses the lynx text browser to render HTML as plain text\n  + -dump: Output the rendered page to stdout\n  + -nolist: Don’t include the list of links at the end\n > \"${f%.html}.txt\": Save output to a .txt file with the same base name\n\nw3m\n\nw3m is very slow processing with minimal formatting. w3m tends to be more thorough in its rendering than lynx but takes considerably longer. It supports basic JavaScript processing, making it better at handling modern websites with dynamic content. Best for cases where you need slightly better rendering than lynx, particularly for complex layouts and tables, and when some JavaScript processing is beneficial.\n\nfind . -type f -name '.html' \\\n  -exec sh -c 'for f; do \\\n      w3m -dump -T text/html -cols 80 -no-graph \"$f\" > \"${f%.html}.md\"; \\\n    done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n w3m -dump -T text/html -cols 80 -no-graph \"$f\": Uses the w3m text browser to render HTML\n  + -dump: Output the rendered page to stdout\n  + -T text/html: Specify input format as HTML\n  + -cols 80: Set output width to 80 columns\n  + -no-graph: Don’t show graphic characters for tables and frames\n > \"${f%.html}.md\": Save output to a .md file with the same base name\n\nComparison\n\n| Approach | Speed | Format Quality | Preservation | Best For |\n| --- | --- | --- | --- | --- |\n| defuddle-cli | Slow | High | Good structure and links | Content migration, publishing |\n| pandoc | Slow | Very High | Almost everything | Academic papers, documentation |\n| lynx | Fast | Low | Basic structure only | Quick extraction, large batches |\n| w3m | Very Slow | Medium-Low | Basic structure with better tables | Improved readability over lynx |\n\nOptimize Batch Processing\n\n1. Process in parallel: Use GNU Parallel for multi-core processing:\n\n   \n   find . -name \".html\" | parallel \"pandoc -f html -t markdownstrict -o {}.md {}\"Copy to clipboardErrorCopied\n   \n2. Filter files before processing:\n\n   \n   find . -name \".html\" -type f -size -1M -exec pandoc -f html -t markdown {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n3. Customize output format with additional parameters:\n\n   \n    For pandoc, preserve line breaks but simplify other formatting\n   find . -name \".html\" -exec pandoc -f html -t markdown --wrap=preserve --atx-headers {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n4. Handle errors gracefully:\n\n   \n   find . -name \".html\" -exec sh -c 'for f; do pandoc -f html -t markdown \"$f\" -o \"${f%.html}.md\" 2>/dev/null || echo \"Failed: $f\" >> conversionerrors.log; done'  {} +Copy to clipboardErrorCopied\n   \n\nChoosing the Right Tool\n\n Need speed with minimal formatting? Use the lynx approach\n Need precise, complete conversion? Use pandoc\n Need a balance of structure and cleanliness? Try defuddle-cli\n Working with complex tables? w3m might render them better\n\nRemember that the best approach depends on your specific use case, volume of files, and how you intend to use the converted text.\n\nCombined Crawling and Conversion\n\nSometimes you need to both crawl a website and convert its content to markdown or text in a single workflow, like Crawl4AI or markdown-crawler.\n\n1. For research/data collection: Use a specialized crawler (like Crawl4AI) with post-processing conversion\n2. For simple website archiving: Markdown-crawler provides a convenient all-in-one solution\n3. For high-quality conversion: Use wget/wget2 for crawling followed by pandoc for conversion\n4. For maximum speed: Combine wget with lynx in a pipeline\n\nCrawl4AI\n\nCrawl4AI is designed for single-page extraction with high-quality content processing. Crawl4AI is optimized for AI training data extraction, focusing on clean, structured content rather than complete site preservation. It excels at removing boilerplate content and preserving the main article text.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install crawl4ai\ncrawl4ai-setupCopy to clipboardErrorCopied\n\n uv venv: Creates a Python virtual environment using uv (a faster alternative to virtualenv)\n source .venv/bin/activate.fish: Activates the virtual environment (fish shell syntax)\n uv pip install crawl4ai: Installs the crawl4ai package\n crawl4ai-setup: Initializes crawl4ai’s required dependencies\n\nmarkdown-crawler\n\nmarkdown-crawler combines web crawling with markdown conversion in one tool. It’s efficient for bulk processing but tends to produce lower-quality markdown conversion compared to specialized converters like pandoc or defuddle. Best for projects where quantity and integration are more important than perfect formatting.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install markdown-crawler\nmarkdown-crawler -t 5 -d 3 -b ./markdown https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\n uv venv and activation: Same as above\n uv pip install markdown-crawler: Installs the markdown-crawler package\n markdown-crawler: Runs the crawler with these options:\n  + -t 5: Sets 5 threads for parallel crawling\n  + -d 3: Limits crawl depth to 3 levels\n  + -b ./markdown: Sets the base output directory\n  + Final argument is the starting URL\n\nPrevious\n\nConvert PDFs to Markdown\n\nNext\n\nLLM Website Scraping"
  },
  {
    "title": "Convert HTML to Markdown",
    "filename": "Convert_HTML_to_Markdown.md",
    "text": "Converting HTML to Markdown\n----------------------------------------------------------------------------------------\n\nWhen working with web content, converting HTML files to plain text or Markdown is a common requirement for content extraction, analysis, and preservation. For example:\n\n Content analysis: Extract clean text from HTML for natural language processing\n Data mining: Strip formatting to focus on the actual content\n Offline reading: Convert web pages to readable formats for e-readers or offline consumption\n Content migration: Move content between different CMS platforms\n SEO analysis: Extract headings, content structure, and text for optimization\n Archive creation: Store web content in more compact, preservation-friendly formats\n Accessibility: Convert content to formats that work better with screen readers\n\nThis tutorial covers both converting existing HTML files and combining web crawling with HTML-to-text conversion in a single workflow – all using the command line.\n\ndefuddle-cli\n\ndefuddle-cli specializes in HTML - Markdown conversion. It’s a bit slow and not very customizable but produces clean Markdown that preserves structure, links, and basic formatting. Best for content where preserving the document structure is important.\n\nfind . -name '.html' -exec npx --package defuddle-cli -y defuddle parse {} --md -o {}.md \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n npx --package defuddle-cli -y: Installs and runs defuddle-cli without prompting\n defuddle parse {} --md: Parses the HTML file (represented by {}) and converts to markdown\n -o {}.md: Outputs to a file with the original name plus .md extension\n\nPandoc\n\nPandoc is a bit slow and highly customizable, preserving almost all formatting elements, leading to verbose markdown. Best for academic or documentation conversion where precision matters.\n\nPandoc can convert from many other formats (such as Word, PDF, LaTeX, etc.) to Markdown and vice versa, making it one of most popular and versatele document convertors.\n\n[](https://youtu.be/HPSK7q13-40)\n\nfind . -name '.html' -exec pandoc -f html -t markdownstrict -o {}.md {} \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n pandoc: The Swiss Army knife of document conversion\n -f html -t markdownstrict: Convert from HTML format to strict markdown\n -o {}.md {}: Output to a markdown file, with the input file as the last argument\n\nLynx\n\nLynx is fast and generates text (not Markdown) with minimal formatting. Lynx renders the HTML as it would appear in a text browser, preserving basic structure but losing complex formatting. Best for quick content extraction or when processing large numbers of files.\n\nfind . -type f -name '.html' -exec sh -c 'for f; do lynx -dump -nolist \"$f\" > \"${f%.html}.txt\"; done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n lynx -dump -nolist \"$f\": Uses the lynx text browser to render HTML as plain text\n  + -dump: Output the rendered page to stdout\n  + -nolist: Don’t include the list of links at the end\n > \"${f%.html}.txt\": Save output to a .txt file with the same base name\n\nw3m\n\nw3m is very slow processing with minimal formatting. w3m tends to be more thorough in its rendering than lynx but takes considerably longer. It supports basic JavaScript processing, making it better at handling modern websites with dynamic content. Best for cases where you need slightly better rendering than lynx, particularly for complex layouts and tables, and when some JavaScript processing is beneficial.\n\nfind . -type f -name '.html' \\\n  -exec sh -c 'for f; do \\\n      w3m -dump -T text/html -cols 80 -no-graph \"$f\" > \"${f%.html}.md\"; \\\n    done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n w3m -dump -T text/html -cols 80 -no-graph \"$f\": Uses the w3m text browser to render HTML\n  + -dump: Output the rendered page to stdout\n  + -T text/html: Specify input format as HTML\n  + -cols 80: Set output width to 80 columns\n  + -no-graph: Don’t show graphic characters for tables and frames\n > \"${f%.html}.md\": Save output to a .md file with the same base name\n\nComparison\n\n| Approach | Speed | Format Quality | Preservation | Best For |\n| --- | --- | --- | --- | --- |\n| defuddle-cli | Slow | High | Good structure and links | Content migration, publishing |\n| pandoc | Slow | Very High | Almost everything | Academic papers, documentation |\n| lynx | Fast | Low | Basic structure only | Quick extraction, large batches |\n| w3m | Very Slow | Medium-Low | Basic structure with better tables | Improved readability over lynx |\n\nOptimize Batch Processing\n\n1. Process in parallel: Use GNU Parallel for multi-core processing:\n\n   \n   find . -name \".html\" | parallel \"pandoc -f html -t markdownstrict -o {}.md {}\"Copy to clipboardErrorCopied\n   \n2. Filter files before processing:\n\n   \n   find . -name \".html\" -type f -size -1M -exec pandoc -f html -t markdown {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n3. Customize output format with additional parameters:\n\n   \n    For pandoc, preserve line breaks but simplify other formatting\n   find . -name \".html\" -exec pandoc -f html -t markdown --wrap=preserve --atx-headers {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n4. Handle errors gracefully:\n\n   \n   find . -name \".html\" -exec sh -c 'for f; do pandoc -f html -t markdown \"$f\" -o \"${f%.html}.md\" 2>/dev/null || echo \"Failed: $f\" >> conversionerrors.log; done'  {} +Copy to clipboardErrorCopied\n   \n\nChoosing the Right Tool\n\n Need speed with minimal formatting? Use the lynx approach\n Need precise, complete conversion? Use pandoc\n Need a balance of structure and cleanliness? Try defuddle-cli\n Working with complex tables? w3m might render them better\n\nRemember that the best approach depends on your specific use case, volume of files, and how you intend to use the converted text.\n\nCombined Crawling and Conversion\n\nSometimes you need to both crawl a website and convert its content to markdown or text in a single workflow, like Crawl4AI or markdown-crawler.\n\n1. For research/data collection: Use a specialized crawler (like Crawl4AI) with post-processing conversion\n2. For simple website archiving: Markdown-crawler provides a convenient all-in-one solution\n3. For high-quality conversion: Use wget/wget2 for crawling followed by pandoc for conversion\n4. For maximum speed: Combine wget with lynx in a pipeline\n\nCrawl4AI\n\nCrawl4AI is designed for single-page extraction with high-quality content processing. Crawl4AI is optimized for AI training data extraction, focusing on clean, structured content rather than complete site preservation. It excels at removing boilerplate content and preserving the main article text.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install crawl4ai\ncrawl4ai-setupCopy to clipboardErrorCopied\n\n uv venv: Creates a Python virtual environment using uv (a faster alternative to virtualenv)\n source .venv/bin/activate.fish: Activates the virtual environment (fish shell syntax)\n uv pip install crawl4ai: Installs the crawl4ai package\n crawl4ai-setup: Initializes crawl4ai’s required dependencies\n\nmarkdown-crawler\n\nmarkdown-crawler combines web crawling with markdown conversion in one tool. It’s efficient for bulk processing but tends to produce lower-quality markdown conversion compared to specialized converters like pandoc or defuddle. Best for projects where quantity and integration are more important than perfect formatting.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install markdown-crawler\nmarkdown-crawler -t 5 -d 3 -b ./markdown https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\n uv venv and activation: Same as above\n uv pip install markdown-crawler: Installs the markdown-crawler package\n markdown-crawler: Runs the crawler with these options:\n  + -t 5: Sets 5 threads for parallel crawling\n  + -d 3: Limits crawl depth to 3 levels\n  + -b ./markdown: Sets the base output directory\n  + Final argument is the starting URL\n\nPrevious\n\nConvert PDFs to Markdown\n\nNext\n\nLLM Website Scraping"
  },
  {
    "title": "Convert HTML to Markdown",
    "filename": "Convert_HTML_to_Markdown.md",
    "text": "Converting HTML to Markdown\n----------------------------------------------------------------------------------------\n\nWhen working with web content, converting HTML files to plain text or Markdown is a common requirement for content extraction, analysis, and preservation. For example:\n\n Content analysis: Extract clean text from HTML for natural language processing\n Data mining: Strip formatting to focus on the actual content\n Offline reading: Convert web pages to readable formats for e-readers or offline consumption\n Content migration: Move content between different CMS platforms\n SEO analysis: Extract headings, content structure, and text for optimization\n Archive creation: Store web content in more compact, preservation-friendly formats\n Accessibility: Convert content to formats that work better with screen readers\n\nThis tutorial covers both converting existing HTML files and combining web crawling with HTML-to-text conversion in a single workflow – all using the command line.\n\ndefuddle-cli\n\ndefuddle-cli specializes in HTML - Markdown conversion. It’s a bit slow and not very customizable but produces clean Markdown that preserves structure, links, and basic formatting. Best for content where preserving the document structure is important.\n\nfind . -name '.html' -exec npx --package defuddle-cli -y defuddle parse {} --md -o {}.md \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n npx --package defuddle-cli -y: Installs and runs defuddle-cli without prompting\n defuddle parse {} --md: Parses the HTML file (represented by {}) and converts to markdown\n -o {}.md: Outputs to a file with the original name plus .md extension\n\nPandoc\n\nPandoc is a bit slow and highly customizable, preserving almost all formatting elements, leading to verbose markdown. Best for academic or documentation conversion where precision matters.\n\nPandoc can convert from many other formats (such as Word, PDF, LaTeX, etc.) to Markdown and vice versa, making it one of most popular and versatele document convertors.\n\n[](https://youtu.be/HPSK7q13-40)\n\nfind . -name '.html' -exec pandoc -f html -t markdownstrict -o {}.md {} \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n pandoc: The Swiss Army knife of document conversion\n -f html -t markdownstrict: Convert from HTML format to strict markdown\n -o {}.md {}: Output to a markdown file, with the input file as the last argument\n\nLynx\n\nLynx is fast and generates text (not Markdown) with minimal formatting. Lynx renders the HTML as it would appear in a text browser, preserving basic structure but losing complex formatting. Best for quick content extraction or when processing large numbers of files.\n\nfind . -type f -name '.html' -exec sh -c 'for f; do lynx -dump -nolist \"$f\" > \"${f%.html}.txt\"; done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n lynx -dump -nolist \"$f\": Uses the lynx text browser to render HTML as plain text\n  + -dump: Output the rendered page to stdout\n  + -nolist: Don’t include the list of links at the end\n > \"${f%.html}.txt\": Save output to a .txt file with the same base name\n\nw3m\n\nw3m is very slow processing with minimal formatting. w3m tends to be more thorough in its rendering than lynx but takes considerably longer. It supports basic JavaScript processing, making it better at handling modern websites with dynamic content. Best for cases where you need slightly better rendering than lynx, particularly for complex layouts and tables, and when some JavaScript processing is beneficial.\n\nfind . -type f -name '.html' \\\n  -exec sh -c 'for f; do \\\n      w3m -dump -T text/html -cols 80 -no-graph \"$f\" > \"${f%.html}.md\"; \\\n    done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n w3m -dump -T text/html -cols 80 -no-graph \"$f\": Uses the w3m text browser to render HTML\n  + -dump: Output the rendered page to stdout\n  + -T text/html: Specify input format as HTML\n  + -cols 80: Set output width to 80 columns\n  + -no-graph: Don’t show graphic characters for tables and frames\n > \"${f%.html}.md\": Save output to a .md file with the same base name\n\nComparison\n\n| Approach | Speed | Format Quality | Preservation | Best For |\n| --- | --- | --- | --- | --- |\n| defuddle-cli | Slow | High | Good structure and links | Content migration, publishing |\n| pandoc | Slow | Very High | Almost everything | Academic papers, documentation |\n| lynx | Fast | Low | Basic structure only | Quick extraction, large batches |\n| w3m | Very Slow | Medium-Low | Basic structure with better tables | Improved readability over lynx |\n\nOptimize Batch Processing\n\n1. Process in parallel: Use GNU Parallel for multi-core processing:\n\n   \n   find . -name \".html\" | parallel \"pandoc -f html -t markdownstrict -o {}.md {}\"Copy to clipboardErrorCopied\n   \n2. Filter files before processing:\n\n   \n   find . -name \".html\" -type f -size -1M -exec pandoc -f html -t markdown {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n3. Customize output format with additional parameters:\n\n   \n    For pandoc, preserve line breaks but simplify other formatting\n   find . -name \".html\" -exec pandoc -f html -t markdown --wrap=preserve --atx-headers {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n4. Handle errors gracefully:\n\n   \n   find . -name \".html\" -exec sh -c 'for f; do pandoc -f html -t markdown \"$f\" -o \"${f%.html}.md\" 2>/dev/null || echo \"Failed: $f\" >> conversionerrors.log; done'  {} +Copy to clipboardErrorCopied\n   \n\nChoosing the Right Tool\n\n Need speed with minimal formatting? Use the lynx approach\n Need precise, complete conversion? Use pandoc\n Need a balance of structure and cleanliness? Try defuddle-cli\n Working with complex tables? w3m might render them better\n\nRemember that the best approach depends on your specific use case, volume of files, and how you intend to use the converted text.\n\nCombined Crawling and Conversion\n\nSometimes you need to both crawl a website and convert its content to markdown or text in a single workflow, like Crawl4AI or markdown-crawler.\n\n1. For research/data collection: Use a specialized crawler (like Crawl4AI) with post-processing conversion\n2. For simple website archiving: Markdown-crawler provides a convenient all-in-one solution\n3. For high-quality conversion: Use wget/wget2 for crawling followed by pandoc for conversion\n4. For maximum speed: Combine wget with lynx in a pipeline\n\nCrawl4AI\n\nCrawl4AI is designed for single-page extraction with high-quality content processing. Crawl4AI is optimized for AI training data extraction, focusing on clean, structured content rather than complete site preservation. It excels at removing boilerplate content and preserving the main article text.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install crawl4ai\ncrawl4ai-setupCopy to clipboardErrorCopied\n\n uv venv: Creates a Python virtual environment using uv (a faster alternative to virtualenv)\n source .venv/bin/activate.fish: Activates the virtual environment (fish shell syntax)\n uv pip install crawl4ai: Installs the crawl4ai package\n crawl4ai-setup: Initializes crawl4ai’s required dependencies\n\nmarkdown-crawler\n\nmarkdown-crawler combines web crawling with markdown conversion in one tool. It’s efficient for bulk processing but tends to produce lower-quality markdown conversion compared to specialized converters like pandoc or defuddle. Best for projects where quantity and integration are more important than perfect formatting.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install markdown-crawler\nmarkdown-crawler -t 5 -d 3 -b ./markdown https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\n uv venv and activation: Same as above\n uv pip install markdown-crawler: Installs the markdown-crawler package\n markdown-crawler: Runs the crawler with these options:\n  + -t 5: Sets 5 threads for parallel crawling\n  + -d 3: Limits crawl depth to 3 levels\n  + -b ./markdown: Sets the base output directory\n  + Final argument is the starting URL\n\nPrevious\n\nConvert PDFs to Markdown\n\nNext\n\nLLM Website Scraping"
  },
  {
    "title": "Data Preparation in the Editor",
    "filename": "Data_Preparation_in_the_Editor.md",
    "text": "Data Preparation in the Editor\n----------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/99lYu43L9uM)\n\nYou’ll learn how to use a text editor Visual Studio Code to process and clean data, covering:\n\n Format JSON files\n Find all and multiple cursors to extract specific fields\n Sort lines\n Delete duplicate lines\n Replace text with multiple cursors\n\nHere are the links used in the video:\n\n City-wise product sales JSON\n\nPrevious\n\nData Preparation in the Shell\n\nNext\n\nCleaning Data with OpenRefine"
  },
  {
    "title": "CORS",
    "filename": "CORS.md",
    "text": "CORS: Cross-Origin Resource Sharing\n-----------------------------------------------------------------------------------\n\nCORS (Cross-Origin Resource Sharing) is a security mechanism that controls how web browsers handle requests between different origins (domains, protocols, or ports). Data scientists need CORS for APIs serving data or analysis to a browser on a different domain.\n\nWatch this practical explanation of CORS (3 min):\n\n[](https://youtu.be/4KHiSt0oLJ0)\n\nKey CORS concepts:\n\n Same-Origin Policy: Browsers block requests between different origins by default\n CORS Headers: Server responses must include specific headers to allow cross-origin requests\n Preflight Requests: Browsers send OPTIONS requests to check if the actual request is allowed\n Credentials: Special handling required for requests with cookies or authentication\n\nIf you’re exposing your API with a GET request publicly, the only thing you need to do is set the HTTP header Access-Control-Allow-Origin: .\n\nHere are other common CORS headers:\n\nAccess-Control-Allow-Origin: https://example.com\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE\nAccess-Control-Allow-Headers: Content-Type, Authorization\nAccess-Control-Allow-Credentials: trueCopy to clipboardErrorCopied\n\nTo implement CORS in FastAPI, use the CORSMiddleware middleware:\n\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\napp.addmiddleware(CORSMiddleware, alloworigins=[\"\"])  Allow GET requests from all origins\nOr, provide more granular control:\napp.addmiddleware(\n    CORSMiddleware,\n    alloworigins=[\"https://example.com\"],   Allow a specific domain\n    allowcredentials=True,   Allow cookies\n    allowmethods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"],   Allow specific methods\n    allowheaders=[\"\"],   Allow all headers\n)Copy to clipboardErrorCopied\n\nTesting CORS with JavaScript:\n\n// Simple request\nconst response = await fetch(\"https://api.example.com/data\", {\n  method: \"GET\",\n  headers: { \"Content-Type\": \"application/json\" },\n});\n\n// Request with credentials\nconst response = await fetch(\"https://api.example.com/data\", {\n  credentials: \"include\",\n  headers: { \"Content-Type\": \"application/json\" },\n});Copy to clipboardErrorCopied\n\nUseful CORS debugging tools:\n\n CORS Checker: Test CORS configurations\n Browser DevTools Network tab: Inspect CORS headers and preflight requests\n cors-anywhere: CORS proxy for development\n\nCommon CORS errors and solutions:\n\n No 'Access-Control-Allow-Origin' header: Configure server to send proper CORS headers\n Request header field not allowed: Add required headers to Access-Control-Allow-Headers\n Credentials flag: Set both credentials: 'include' and Access-Control-Allow-Credentials: true\n Wild card error: Cannot use  with credentials; specify exact origins\n\nPrevious\n\nTunneling: ngrok\n\nNext\n\nREST APIs"
  },
  {
    "title": "Actor Network Visualization",
    "filename": "Actor_Network_Visualization.md",
    "text": "Actor Network Visualization\n-------------------------------------------------------------------------------------------\n\nFind the shortest path between Govinda & Angelina Jolie using IMDb data using Python: networkx or scikit-network.\n\n[](https://youtu.be/lcwMsPxPIjc)\n\n Notebook: How this video was created\n The data used to visualize the network\n The shortest path between actors\n IMDB data\n Codebase\n\nPrevious\n\nData Visualization with ChatGPT\n\nNext\n\nRAWgraphs"
  },
  {
    "title": "Actor Network Visualization",
    "filename": "Actor_Network_Visualization.md",
    "text": "Actor Network Visualization\n-------------------------------------------------------------------------------------------\n\nFind the shortest path between Govinda & Angelina Jolie using IMDb data using Python: networkx or scikit-network.\n\n[](https://youtu.be/lcwMsPxPIjc)\n\n Notebook: How this video was created\n The data used to visualize the network\n The shortest path between actors\n IMDB data\n Codebase\n\nPrevious\n\nData Visualization with ChatGPT\n\nNext\n\nRAWgraphs"
  },
  {
    "title": "REST APIs",
    "filename": "REST_APIs.md",
    "text": "REST APIs\n-------------------------------------\n\nREST (Representational State Transfer) APIs are the standard way to build web services that allow different systems to communicate over HTTP. They use standard HTTP methods and JSON for data exchange.\n\nWatch this comprehensive introduction to REST APIs (52 min):\n\n[](https://youtu.be/qbLc5a9jdXo)\n\nKey Concepts:\n\n1. HTTP Methods\n    GET: Retrieve data\n    POST: Create new data\n    PUT/PATCH: Update existing data\n    DELETE: Remove data\n2. Status Codes\n    2xx: Success (200 OK, 201 Created)\n    4xx: Client errors (400 Bad Request, 404 Not Found)\n    5xx: Server errors (500 Internal Server Error)\n\nHere’s a minimal REST API using FastAPI. Run this server.py script via uv run server.py:\n\n/// script\nrequires-python = \">=3.13\"\ndependencies = [\n\"fastapi\",\n\"uvicorn\",\n]\n///\nfrom fastapi import FastAPI, HTTPException\nfrom typing import Dict, List\n\napp = FastAPI()\n\nCreate a list of items that will act like a database\nitems: List[Dict[str, float | int | str]] = []\n\nCreate a GET endpoint that returns all items\n@app.get(\"/items\")\nasync def getitems() -> List[Dict[str, float | int | str]]:\n    return items\n\nCreate a GET endpoint that returns a specific item by ID\n@app.get(\"/items/{itemid}\")\nasync def getitem(itemid: int) -> Dict[str, float | int | str]:\n    if item := next((i for i in items if i[\"id\"] == itemid), None):\n        return item\n    raise HTTPException(statuscode=404, detail=\"Item not found\")\n\nCreate a POST endpoint that creates a new item\n@app.post(\"/items\")\nasync def createitem(item: Dict[str, float | str]) -> Dict[str, float | int | str]:\n    newitem = {\"id\": len(items) + 1, \"name\": item[\"name\"], \"price\": float(item[\"price\"])}\n    items.append(newitem)\n    return newitem\n\nif name == \"main\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)Copy to clipboardErrorCopied\n\nTest the API with curl:\n\nGet all items\ncurl http://localhost:8000/items\n\nCreate an item\ncurl -X POST http://localhost:8000/items \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"Book\", \"price\": 29.99}'\n\nGet specific item\ncurl http://localhost:8000/items/1Copy to clipboardErrorCopied\n\nBest Practices:\n\n1. Use Nouns for Resources\n    Good: /users, /posts\n    Bad: /getUsers, /createPost\n2. Version Your API\n\n   \n   /api/v1/users\n   /api/v2/usersCopy to clipboardErrorCopied\n   \n3. Handle Errors Consistently\n\n   \n   {\n     \"error\": \"Not Found\",\n     \"message\": \"User 123 not found\",\n     \"statuscode\": 404\n   }Copy to clipboardErrorCopied\n   \n4. Use Query Parameters for Filtering\n\n   \n   /api/posts?status=published&category=techCopy to clipboardErrorCopied\n   \n5. Implement Pagination\n\n   \n   /api/posts?page=2&limit=10Copy to clipboardErrorCopied\n   \n\nTools:\n\n Postman: API testing and documentation\n Swagger/OpenAPI: API documentation\n HTTPie: Modern command-line HTTP client\n JSON Schema: API request/response validation\n\nLearn more about REST APIs:\n\n REST API Design Best Practices\n Microsoft REST API Guidelines\n Google API Design Guide\n\nPrevious\n\nCORS\n\nNext\n\nWeb Framework: FastAPI"
  },
  {
    "title": "REST APIs",
    "filename": "REST_APIs.md",
    "text": "REST APIs\n-------------------------------------\n\nREST (Representational State Transfer) APIs are the standard way to build web services that allow different systems to communicate over HTTP. They use standard HTTP methods and JSON for data exchange.\n\nWatch this comprehensive introduction to REST APIs (52 min):\n\n[](https://youtu.be/qbLc5a9jdXo)\n\nKey Concepts:\n\n1. HTTP Methods\n    GET: Retrieve data\n    POST: Create new data\n    PUT/PATCH: Update existing data\n    DELETE: Remove data\n2. Status Codes\n    2xx: Success (200 OK, 201 Created)\n    4xx: Client errors (400 Bad Request, 404 Not Found)\n    5xx: Server errors (500 Internal Server Error)\n\nHere’s a minimal REST API using FastAPI. Run this server.py script via uv run server.py:\n\n/// script\nrequires-python = \">=3.13\"\ndependencies = [\n\"fastapi\",\n\"uvicorn\",\n]\n///\nfrom fastapi import FastAPI, HTTPException\nfrom typing import Dict, List\n\napp = FastAPI()\n\nCreate a list of items that will act like a database\nitems: List[Dict[str, float | int | str]] = []\n\nCreate a GET endpoint that returns all items\n@app.get(\"/items\")\nasync def getitems() -> List[Dict[str, float | int | str]]:\n    return items\n\nCreate a GET endpoint that returns a specific item by ID\n@app.get(\"/items/{itemid}\")\nasync def getitem(itemid: int) -> Dict[str, float | int | str]:\n    if item := next((i for i in items if i[\"id\"] == itemid), None):\n        return item\n    raise HTTPException(statuscode=404, detail=\"Item not found\")\n\nCreate a POST endpoint that creates a new item\n@app.post(\"/items\")\nasync def createitem(item: Dict[str, float | str]) -> Dict[str, float | int | str]:\n    newitem = {\"id\": len(items) + 1, \"name\": item[\"name\"], \"price\": float(item[\"price\"])}\n    items.append(newitem)\n    return newitem\n\nif name == \"main\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)Copy to clipboardErrorCopied\n\nTest the API with curl:\n\nGet all items\ncurl http://localhost:8000/items\n\nCreate an item\ncurl -X POST http://localhost:8000/items \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"Book\", \"price\": 29.99}'\n\nGet specific item\ncurl http://localhost:8000/items/1Copy to clipboardErrorCopied\n\nBest Practices:\n\n1. Use Nouns for Resources\n    Good: /users, /posts\n    Bad: /getUsers, /createPost\n2. Version Your API\n\n   \n   /api/v1/users\n   /api/v2/usersCopy to clipboardErrorCopied\n   \n3. Handle Errors Consistently\n\n   \n   {\n     \"error\": \"Not Found\",\n     \"message\": \"User 123 not found\",\n     \"statuscode\": 404\n   }Copy to clipboardErrorCopied\n   \n4. Use Query Parameters for Filtering\n\n   \n   /api/posts?status=published&category=techCopy to clipboardErrorCopied\n   \n5. Implement Pagination\n\n   \n   /api/posts?page=2&limit=10Copy to clipboardErrorCopied\n   \n\nTools:\n\n Postman: API testing and documentation\n Swagger/OpenAPI: API documentation\n HTTPie: Modern command-line HTTP client\n JSON Schema: API request/response validation\n\nLearn more about REST APIs:\n\n REST API Design Best Practices\n Microsoft REST API Guidelines\n Google API Design Guide\n\nPrevious\n\nCORS\n\nNext\n\nWeb Framework: FastAPI"
  },
  {
    "title": "Web Framework: FastAPI",
    "filename": "Web_Framework__FastAPI.md",
    "text": "Web Framework: FastAPI\n------------------------------------------------------------\n\nFastAPI is a modern Python web framework for building APIs with automatic interactive documentation. It’s fast, easy to use, and designed for building production-ready REST APIs.\n\nHere’s a minimal FastAPI app, app.py:\n\n/// script\nrequires-python = \">=3.11\"\ndependencies = [\n\"fastapi\",\n\"uvicorn\",\n]\n///\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello!\"}\n\nif name == \"main\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)Copy to clipboardErrorCopied\n\nRun this with uv run app.py.\n\n1. Handle errors by raising HTTPException\n\n   \n   from fastapi import HTTPException\n\n   async def getitem(itemid: int):\n       if not validitem(itemid):\n           raise HTTPException(\n               statuscode=404,\n               detail=f\"Item {itemid} not found\"\n           )Copy to clipboardErrorCopied\n   \n2. Use middleware for logging\n\n   \n   from fastapi import Request\n   import time\n\n   @app.middleware(\"http\")\n   async def addtiming(request: Request, callnext):\n       start = time.time()\n       response = await callnext(request)\n       response.headers[\"X-Process-Time\"] = str(time.time() - start)\n       return responseCopy to clipboardErrorCopied\n   \n\nTools:\n\n FastAPI CLI: Project scaffolding\n Pydantic: Data validation\n SQLModel: SQL databases\n FastAPI Users: Authentication\n\nWatch this FastAPI Course for Beginners (64 min):\n\n[](https://youtu.be/tLKKmouUams)\n\nPrevious\n\nREST APIs\n\nNext\n\nAuthentication: Google Auth"
  },
  {
    "title": "RAG with the CLI)",
    "filename": "RAG_with_the_CLI).md",
    "text": "Retrieval Augmented Generation (RAG) with the CLI\n-----------------------------------------------------------------------------------------------------------------\n\nRetrieval Augmented Generation (RAG) combines retrieval (searching a knowledge base) with generation (using an LLM) to produce answers grounded in your own documents. Instead of relying solely on a general-purpose LLM, RAG lets you feed it the most relevant chunks from your corpus at query time, improving accuracy, reducing hallucinations, and allowing you to answer domain‑specific questions without fine‑tuning.\n\nIn particular, you can answer questions that are hard to answer with a keyword search. For example:\n\nQ=\"What does the author affectionately call the => syntax?\"\nAnswer: fat arrow\n\nQ=\"What lets you walk every child node of a ts.Node?\"\nAnswer: node.getChildren()\n\nQ=\"What are code pieces like comments and whitespace that aren’t in the AST called?\"\nAnswer: trivia\n\nQ=\"Which operator converts any value into an explicit boolean?\"\nAnswer: !!Copy to clipboardErrorCopied\n\nYou can implement RAG entirely from your terminal, without writing a single line of application code. Below is a step‑by‑step example using the TypeScript book as a data source.\n\n1. Clone the repository\n\ngit clone --depth 1 https://github.com/basarat/typescript-book\ncd typescript-bookCopy to clipboardErrorCopied\n\n --depth 1 fetches only the latest commit to minimize download size.\n cd typescript-book moves into the project folder.\n\nYou’ll now be in a new folder typescript-book containing the repo.\n\n2. Split Markdown files into chunks\n\n(\n  shopt -s globstar\n  for f in /.md; do\n    uvx --from splitmarkdown4gpt mdsplit4gpt \"$f\" --model gpt-4o --limit 4096 --separator \"===SPLIT===\" \\\n    | sed '1s/^/===SPLIT===\\n/' \\\n    | jq -R -s -c --arg file \"$f\" '\n      split(\"===SPLIT===\")[1:]\n      | toentries\n      | map({\n          id: ($file + \"\" + (.key | tostring)),\n          content: .value\n        })[]\n    '\n  done\n) | tee chunks.jsonCopy to clipboardErrorCopied\n\n shopt -s globstar: lets /.md match Markdown files in all subdirectories. bash shopt manual\n uvx --from splitmarkdown4gpt mdsplit4gpt: a tool that splits Markdown into LLM‑sized chunks:\n  + --model gpt-4o: uses GPT‑4o token limits\n  + --limit 4096: max tokens per chunk\n  + --separator \"===SPLIT===\": custom split marker\n sed '1s/^/===SPLIT===\\n/': ensures the very first chunk starts with the separator (GNU sed manual)\n jq -R -s -c --arg file \"$f\": uses jq to convert chunks to JSON\n  + -R: read raw input\n  + -s: slurp entire input into a single string\n  + -c: compact JSON output\n  + builds an array of objects {id, content}, where id is filenamechunkIndex\n tee chunks.json: writes the resulting JSON array to chunks.json while printing it to stdout.\n\nYou’ll now have a chunks.json that has one {id, content} JSON object per line.\n\n3. Generate embeddings\n\nllm embed-multi typescript-book --model 3-small --store --format nl chunks.jsonCopy to clipboardErrorCopied\n\n embed-multi: computes embeddings for each entry in chunks.json.\n typescript-book: a namespace or collection name for storage.\n --model 3-small: selects the embedding model.\n --store: save embeddings in the default backend.\n --format nl: input is newline‑delimited JSON. llm CLI embed-multi\n\nThis stores the embeddings in a collection called typescript-book.\n\nllm collections path   shows where the collections are stored\nllm collections delete typescript-book   deletes the typescript-book collectionCopy to clipboardErrorCopied\n\n4. Find similar topics\n\nllm similar typescript-book -n 3 -c \"What does the author affectionately call the => syntax?\"Copy to clipboardErrorCopied\n\nThis returns the 3 chunksmost similar to the question posed.\n\n similar: retrieves the top n most similar chunks from the embeddings store.\n -n 3: return three results.\n -c: the user’s query string.\n\n5. Answer a question using retrieved context\n\nQ=\"What does the author affectionately call the => syntax?\"\nllm similar typescript-book -n 3 -c \"$Q\" \\\n  | jq '.content' \\\n  | llm -s \"$Q - Answer ONLY from these notes. Cite verbatim from notes.\" \\\n  | uvx streamdownCopy to clipboardErrorCopied\n\nThis answers the question in natural language following these steps:\n\n1. Store the query in Q.\n2. Retrieve the top 3 matching chunks.\n3. jq '.content' extracts just the text snippets.\n4. Pipe into llm -s, instructing the model:\n    -s: stream a prompt directly to the LLM.\n    \"$Q - Answer ONLY from these notes. Cite verbatim from notes.\": ensures the response is grounded.\n5. uvx streamdown formats the streamed LLM output for easy reading.\n\nPrevious\n\nVector databases\n\nNext\n\nHybrid RAG with TypeSense"
  },
  {
    "title": "RAG with the CLI)",
    "filename": "RAG_with_the_CLI).md",
    "text": "Retrieval Augmented Generation (RAG) with the CLI\n-----------------------------------------------------------------------------------------------------------------\n\nRetrieval Augmented Generation (RAG) combines retrieval (searching a knowledge base) with generation (using an LLM) to produce answers grounded in your own documents. Instead of relying solely on a general-purpose LLM, RAG lets you feed it the most relevant chunks from your corpus at query time, improving accuracy, reducing hallucinations, and allowing you to answer domain‑specific questions without fine‑tuning.\n\nIn particular, you can answer questions that are hard to answer with a keyword search. For example:\n\nQ=\"What does the author affectionately call the => syntax?\"\nAnswer: fat arrow\n\nQ=\"What lets you walk every child node of a ts.Node?\"\nAnswer: node.getChildren()\n\nQ=\"What are code pieces like comments and whitespace that aren’t in the AST called?\"\nAnswer: trivia\n\nQ=\"Which operator converts any value into an explicit boolean?\"\nAnswer: !!Copy to clipboardErrorCopied\n\nYou can implement RAG entirely from your terminal, without writing a single line of application code. Below is a step‑by‑step example using the TypeScript book as a data source.\n\n1. Clone the repository\n\ngit clone --depth 1 https://github.com/basarat/typescript-book\ncd typescript-bookCopy to clipboardErrorCopied\n\n --depth 1 fetches only the latest commit to minimize download size.\n cd typescript-book moves into the project folder.\n\nYou’ll now be in a new folder typescript-book containing the repo.\n\n2. Split Markdown files into chunks\n\n(\n  shopt -s globstar\n  for f in /.md; do\n    uvx --from splitmarkdown4gpt mdsplit4gpt \"$f\" --model gpt-4o --limit 4096 --separator \"===SPLIT===\" \\\n    | sed '1s/^/===SPLIT===\\n/' \\\n    | jq -R -s -c --arg file \"$f\" '\n      split(\"===SPLIT===\")[1:]\n      | toentries\n      | map({\n          id: ($file + \"\" + (.key | tostring)),\n          content: .value\n        })[]\n    '\n  done\n) | tee chunks.jsonCopy to clipboardErrorCopied\n\n shopt -s globstar: lets /.md match Markdown files in all subdirectories. bash shopt manual\n uvx --from splitmarkdown4gpt mdsplit4gpt: a tool that splits Markdown into LLM‑sized chunks:\n  + --model gpt-4o: uses GPT‑4o token limits\n  + --limit 4096: max tokens per chunk\n  + --separator \"===SPLIT===\": custom split marker\n sed '1s/^/===SPLIT===\\n/': ensures the very first chunk starts with the separator (GNU sed manual)\n jq -R -s -c --arg file \"$f\": uses jq to convert chunks to JSON\n  + -R: read raw input\n  + -s: slurp entire input into a single string\n  + -c: compact JSON output\n  + builds an array of objects {id, content}, where id is filenamechunkIndex\n tee chunks.json: writes the resulting JSON array to chunks.json while printing it to stdout.\n\nYou’ll now have a chunks.json that has one {id, content} JSON object per line.\n\n3. Generate embeddings\n\nllm embed-multi typescript-book --model 3-small --store --format nl chunks.jsonCopy to clipboardErrorCopied\n\n embed-multi: computes embeddings for each entry in chunks.json.\n typescript-book: a namespace or collection name for storage.\n --model 3-small: selects the embedding model.\n --store: save embeddings in the default backend.\n --format nl: input is newline‑delimited JSON. llm CLI embed-multi\n\nThis stores the embeddings in a collection called typescript-book.\n\nllm collections path   shows where the collections are stored\nllm collections delete typescript-book   deletes the typescript-book collectionCopy to clipboardErrorCopied\n\n4. Find similar topics\n\nllm similar typescript-book -n 3 -c \"What does the author affectionately call the => syntax?\"Copy to clipboardErrorCopied\n\nThis returns the 3 chunksmost similar to the question posed.\n\n similar: retrieves the top n most similar chunks from the embeddings store.\n -n 3: return three results.\n -c: the user’s query string.\n\n5. Answer a question using retrieved context\n\nQ=\"What does the author affectionately call the => syntax?\"\nllm similar typescript-book -n 3 -c \"$Q\" \\\n  | jq '.content' \\\n  | llm -s \"$Q - Answer ONLY from these notes. Cite verbatim from notes.\" \\\n  | uvx streamdownCopy to clipboardErrorCopied\n\nThis answers the question in natural language following these steps:\n\n1. Store the query in Q.\n2. Retrieve the top 3 matching chunks.\n3. jq '.content' extracts just the text snippets.\n4. Pipe into llm -s, instructing the model:\n    -s: stream a prompt directly to the LLM.\n    \"$Q - Answer ONLY from these notes. Cite verbatim from notes.\": ensures the response is grounded.\n5. uvx streamdown formats the streamed LLM output for easy reading.\n\nPrevious\n\nVector databases\n\nNext\n\nHybrid RAG with TypeSense"
  },
  {
    "title": "RAG with the CLI)",
    "filename": "RAG_with_the_CLI).md",
    "text": "Retrieval Augmented Generation (RAG) with the CLI\n-----------------------------------------------------------------------------------------------------------------\n\nRetrieval Augmented Generation (RAG) combines retrieval (searching a knowledge base) with generation (using an LLM) to produce answers grounded in your own documents. Instead of relying solely on a general-purpose LLM, RAG lets you feed it the most relevant chunks from your corpus at query time, improving accuracy, reducing hallucinations, and allowing you to answer domain‑specific questions without fine‑tuning.\n\nIn particular, you can answer questions that are hard to answer with a keyword search. For example:\n\nQ=\"What does the author affectionately call the => syntax?\"\nAnswer: fat arrow\n\nQ=\"What lets you walk every child node of a ts.Node?\"\nAnswer: node.getChildren()\n\nQ=\"What are code pieces like comments and whitespace that aren’t in the AST called?\"\nAnswer: trivia\n\nQ=\"Which operator converts any value into an explicit boolean?\"\nAnswer: !!Copy to clipboardErrorCopied\n\nYou can implement RAG entirely from your terminal, without writing a single line of application code. Below is a step‑by‑step example using the TypeScript book as a data source.\n\n1. Clone the repository\n\ngit clone --depth 1 https://github.com/basarat/typescript-book\ncd typescript-bookCopy to clipboardErrorCopied\n\n --depth 1 fetches only the latest commit to minimize download size.\n cd typescript-book moves into the project folder.\n\nYou’ll now be in a new folder typescript-book containing the repo.\n\n2. Split Markdown files into chunks\n\n(\n  shopt -s globstar\n  for f in /.md; do\n    uvx --from splitmarkdown4gpt mdsplit4gpt \"$f\" --model gpt-4o --limit 4096 --separator \"===SPLIT===\" \\\n    | sed '1s/^/===SPLIT===\\n/' \\\n    | jq -R -s -c --arg file \"$f\" '\n      split(\"===SPLIT===\")[1:]\n      | toentries\n      | map({\n          id: ($file + \"\" + (.key | tostring)),\n          content: .value\n        })[]\n    '\n  done\n) | tee chunks.jsonCopy to clipboardErrorCopied\n\n shopt -s globstar: lets /.md match Markdown files in all subdirectories. bash shopt manual\n uvx --from splitmarkdown4gpt mdsplit4gpt: a tool that splits Markdown into LLM‑sized chunks:\n  + --model gpt-4o: uses GPT‑4o token limits\n  + --limit 4096: max tokens per chunk\n  + --separator \"===SPLIT===\": custom split marker\n sed '1s/^/===SPLIT===\\n/': ensures the very first chunk starts with the separator (GNU sed manual)\n jq -R -s -c --arg file \"$f\": uses jq to convert chunks to JSON\n  + -R: read raw input\n  + -s: slurp entire input into a single string\n  + -c: compact JSON output\n  + builds an array of objects {id, content}, where id is filenamechunkIndex\n tee chunks.json: writes the resulting JSON array to chunks.json while printing it to stdout.\n\nYou’ll now have a chunks.json that has one {id, content} JSON object per line.\n\n3. Generate embeddings\n\nllm embed-multi typescript-book --model 3-small --store --format nl chunks.jsonCopy to clipboardErrorCopied\n\n embed-multi: computes embeddings for each entry in chunks.json.\n typescript-book: a namespace or collection name for storage.\n --model 3-small: selects the embedding model.\n --store: save embeddings in the default backend.\n --format nl: input is newline‑delimited JSON. llm CLI embed-multi\n\nThis stores the embeddings in a collection called typescript-book.\n\nllm collections path   shows where the collections are stored\nllm collections delete typescript-book   deletes the typescript-book collectionCopy to clipboardErrorCopied\n\n4. Find similar topics\n\nllm similar typescript-book -n 3 -c \"What does the author affectionately call the => syntax?\"Copy to clipboardErrorCopied\n\nThis returns the 3 chunksmost similar to the question posed.\n\n similar: retrieves the top n most similar chunks from the embeddings store.\n -n 3: return three results.\n -c: the user’s query string.\n\n5. Answer a question using retrieved context\n\nQ=\"What does the author affectionately call the => syntax?\"\nllm similar typescript-book -n 3 -c \"$Q\" \\\n  | jq '.content' \\\n  | llm -s \"$Q - Answer ONLY from these notes. Cite verbatim from notes.\" \\\n  | uvx streamdownCopy to clipboardErrorCopied\n\nThis answers the question in natural language following these steps:\n\n1. Store the query in Q.\n2. Retrieve the top 3 matching chunks.\n3. jq '.content' extracts just the text snippets.\n4. Pipe into llm -s, instructing the model:\n    -s: stream a prompt directly to the LLM.\n    \"$Q - Answer ONLY from these notes. Cite verbatim from notes.\": ensures the response is grounded.\n5. uvx streamdown formats the streamed LLM output for easy reading.\n\nPrevious\n\nVector databases\n\nNext\n\nHybrid RAG with TypeSense"
  },
  {
    "title": "RAG with the CLI)",
    "filename": "RAG_with_the_CLI).md",
    "text": "Retrieval Augmented Generation (RAG) with the CLI\n-----------------------------------------------------------------------------------------------------------------\n\nRetrieval Augmented Generation (RAG) combines retrieval (searching a knowledge base) with generation (using an LLM) to produce answers grounded in your own documents. Instead of relying solely on a general-purpose LLM, RAG lets you feed it the most relevant chunks from your corpus at query time, improving accuracy, reducing hallucinations, and allowing you to answer domain‑specific questions without fine‑tuning.\n\nIn particular, you can answer questions that are hard to answer with a keyword search. For example:\n\nQ=\"What does the author affectionately call the => syntax?\"\nAnswer: fat arrow\n\nQ=\"What lets you walk every child node of a ts.Node?\"\nAnswer: node.getChildren()\n\nQ=\"What are code pieces like comments and whitespace that aren’t in the AST called?\"\nAnswer: trivia\n\nQ=\"Which operator converts any value into an explicit boolean?\"\nAnswer: !!Copy to clipboardErrorCopied\n\nYou can implement RAG entirely from your terminal, without writing a single line of application code. Below is a step‑by‑step example using the TypeScript book as a data source.\n\n1. Clone the repository\n\ngit clone --depth 1 https://github.com/basarat/typescript-book\ncd typescript-bookCopy to clipboardErrorCopied\n\n --depth 1 fetches only the latest commit to minimize download size.\n cd typescript-book moves into the project folder.\n\nYou’ll now be in a new folder typescript-book containing the repo.\n\n2. Split Markdown files into chunks\n\n(\n  shopt -s globstar\n  for f in /.md; do\n    uvx --from splitmarkdown4gpt mdsplit4gpt \"$f\" --model gpt-4o --limit 4096 --separator \"===SPLIT===\" \\\n    | sed '1s/^/===SPLIT===\\n/' \\\n    | jq -R -s -c --arg file \"$f\" '\n      split(\"===SPLIT===\")[1:]\n      | toentries\n      | map({\n          id: ($file + \"\" + (.key | tostring)),\n          content: .value\n        })[]\n    '\n  done\n) | tee chunks.jsonCopy to clipboardErrorCopied\n\n shopt -s globstar: lets /.md match Markdown files in all subdirectories. bash shopt manual\n uvx --from splitmarkdown4gpt mdsplit4gpt: a tool that splits Markdown into LLM‑sized chunks:\n  + --model gpt-4o: uses GPT‑4o token limits\n  + --limit 4096: max tokens per chunk\n  + --separator \"===SPLIT===\": custom split marker\n sed '1s/^/===SPLIT===\\n/': ensures the very first chunk starts with the separator (GNU sed manual)\n jq -R -s -c --arg file \"$f\": uses jq to convert chunks to JSON\n  + -R: read raw input\n  + -s: slurp entire input into a single string\n  + -c: compact JSON output\n  + builds an array of objects {id, content}, where id is filenamechunkIndex\n tee chunks.json: writes the resulting JSON array to chunks.json while printing it to stdout.\n\nYou’ll now have a chunks.json that has one {id, content} JSON object per line.\n\n3. Generate embeddings\n\nllm embed-multi typescript-book --model 3-small --store --format nl chunks.jsonCopy to clipboardErrorCopied\n\n embed-multi: computes embeddings for each entry in chunks.json.\n typescript-book: a namespace or collection name for storage.\n --model 3-small: selects the embedding model.\n --store: save embeddings in the default backend.\n --format nl: input is newline‑delimited JSON. llm CLI embed-multi\n\nThis stores the embeddings in a collection called typescript-book.\n\nllm collections path   shows where the collections are stored\nllm collections delete typescript-book   deletes the typescript-book collectionCopy to clipboardErrorCopied\n\n4. Find similar topics\n\nllm similar typescript-book -n 3 -c \"What does the author affectionately call the => syntax?\"Copy to clipboardErrorCopied\n\nThis returns the 3 chunksmost similar to the question posed.\n\n similar: retrieves the top n most similar chunks from the embeddings store.\n -n 3: return three results.\n -c: the user’s query string.\n\n5. Answer a question using retrieved context\n\nQ=\"What does the author affectionately call the => syntax?\"\nllm similar typescript-book -n 3 -c \"$Q\" \\\n  | jq '.content' \\\n  | llm -s \"$Q - Answer ONLY from these notes. Cite verbatim from notes.\" \\\n  | uvx streamdownCopy to clipboardErrorCopied\n\nThis answers the question in natural language following these steps:\n\n1. Store the query in Q.\n2. Retrieve the top 3 matching chunks.\n3. jq '.content' extracts just the text snippets.\n4. Pipe into llm -s, instructing the model:\n    -s: stream a prompt directly to the LLM.\n    \"$Q - Answer ONLY from these notes. Cite verbatim from notes.\": ensures the response is grounded.\n5. uvx streamdown formats the streamed LLM output for easy reading.\n\nPrevious\n\nVector databases\n\nNext\n\nHybrid RAG with TypeSense"
  },
  {
    "title": "RAG with the CLI)",
    "filename": "RAG_with_the_CLI).md",
    "text": "Retrieval Augmented Generation (RAG) with the CLI\n-----------------------------------------------------------------------------------------------------------------\n\nRetrieval Augmented Generation (RAG) combines retrieval (searching a knowledge base) with generation (using an LLM) to produce answers grounded in your own documents. Instead of relying solely on a general-purpose LLM, RAG lets you feed it the most relevant chunks from your corpus at query time, improving accuracy, reducing hallucinations, and allowing you to answer domain‑specific questions without fine‑tuning.\n\nIn particular, you can answer questions that are hard to answer with a keyword search. For example:\n\nQ=\"What does the author affectionately call the => syntax?\"\nAnswer: fat arrow\n\nQ=\"What lets you walk every child node of a ts.Node?\"\nAnswer: node.getChildren()\n\nQ=\"What are code pieces like comments and whitespace that aren’t in the AST called?\"\nAnswer: trivia\n\nQ=\"Which operator converts any value into an explicit boolean?\"\nAnswer: !!Copy to clipboardErrorCopied\n\nYou can implement RAG entirely from your terminal, without writing a single line of application code. Below is a step‑by‑step example using the TypeScript book as a data source.\n\n1. Clone the repository\n\ngit clone --depth 1 https://github.com/basarat/typescript-book\ncd typescript-bookCopy to clipboardErrorCopied\n\n --depth 1 fetches only the latest commit to minimize download size.\n cd typescript-book moves into the project folder.\n\nYou’ll now be in a new folder typescript-book containing the repo.\n\n2. Split Markdown files into chunks\n\n(\n  shopt -s globstar\n  for f in /.md; do\n    uvx --from splitmarkdown4gpt mdsplit4gpt \"$f\" --model gpt-4o --limit 4096 --separator \"===SPLIT===\" \\\n    | sed '1s/^/===SPLIT===\\n/' \\\n    | jq -R -s -c --arg file \"$f\" '\n      split(\"===SPLIT===\")[1:]\n      | toentries\n      | map({\n          id: ($file + \"\" + (.key | tostring)),\n          content: .value\n        })[]\n    '\n  done\n) | tee chunks.jsonCopy to clipboardErrorCopied\n\n shopt -s globstar: lets /.md match Markdown files in all subdirectories. bash shopt manual\n uvx --from splitmarkdown4gpt mdsplit4gpt: a tool that splits Markdown into LLM‑sized chunks:\n  + --model gpt-4o: uses GPT‑4o token limits\n  + --limit 4096: max tokens per chunk\n  + --separator \"===SPLIT===\": custom split marker\n sed '1s/^/===SPLIT===\\n/': ensures the very first chunk starts with the separator (GNU sed manual)\n jq -R -s -c --arg file \"$f\": uses jq to convert chunks to JSON\n  + -R: read raw input\n  + -s: slurp entire input into a single string\n  + -c: compact JSON output\n  + builds an array of objects {id, content}, where id is filenamechunkIndex\n tee chunks.json: writes the resulting JSON array to chunks.json while printing it to stdout.\n\nYou’ll now have a chunks.json that has one {id, content} JSON object per line.\n\n3. Generate embeddings\n\nllm embed-multi typescript-book --model 3-small --store --format nl chunks.jsonCopy to clipboardErrorCopied\n\n embed-multi: computes embeddings for each entry in chunks.json.\n typescript-book: a namespace or collection name for storage.\n --model 3-small: selects the embedding model.\n --store: save embeddings in the default backend.\n --format nl: input is newline‑delimited JSON. llm CLI embed-multi\n\nThis stores the embeddings in a collection called typescript-book.\n\nllm collections path   shows where the collections are stored\nllm collections delete typescript-book   deletes the typescript-book collectionCopy to clipboardErrorCopied\n\n4. Find similar topics\n\nllm similar typescript-book -n 3 -c \"What does the author affectionately call the => syntax?\"Copy to clipboardErrorCopied\n\nThis returns the 3 chunksmost similar to the question posed.\n\n similar: retrieves the top n most similar chunks from the embeddings store.\n -n 3: return three results.\n -c: the user’s query string.\n\n5. Answer a question using retrieved context\n\nQ=\"What does the author affectionately call the => syntax?\"\nllm similar typescript-book -n 3 -c \"$Q\" \\\n  | jq '.content' \\\n  | llm -s \"$Q - Answer ONLY from these notes. Cite verbatim from notes.\" \\\n  | uvx streamdownCopy to clipboardErrorCopied\n\nThis answers the question in natural language following these steps:\n\n1. Store the query in Q.\n2. Retrieve the top 3 matching chunks.\n3. jq '.content' extracts just the text snippets.\n4. Pipe into llm -s, instructing the model:\n    -s: stream a prompt directly to the LLM.\n    \"$Q - Answer ONLY from these notes. Cite verbatim from notes.\": ensures the response is grounded.\n5. uvx streamdown formats the streamed LLM output for easy reading.\n\nPrevious\n\nVector databases\n\nNext\n\nHybrid RAG with TypeSense"
  },
  {
    "title": "Hybrid RAG with TypeSense",
    "filename": "Hybrid_RAG_with_TypeSense.md",
    "text": "Hybrid Retrieval Augmented Generation (Hybrid RAG) with TypeSense\n--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nHybrid RAG combines semantic (vector) search with traditional keyword search to improve retrieval accuracy and relevance. By mixing exact text matches with embedding-based similarity, you get the best of both worlds: precision when keywords are present, and semantic recall when phrasing varies. TypeSense makes this easy with built-in hybrid search and automatic embedding generation.\n\nBelow is a fully self-contained Hybrid RAG tutorial using TypeSense, Python, and the command line.\n\nInstall and run TypeSense\n\nInstall TypeSense.\n\nmkdir typesense-data\n\ndocker run -p 8108:8108 \\\n  -v typesense-data:/data typesense/typesense:28.0 \\\n  --data-dir /data \\\n  --api-key=secret-key \\\n  --enable-corsCopy to clipboardErrorCopied\n\n docker run: spins up a containerized TypeSense server on port 8108\n  + -p 8108:8108 maps host port to container port.\n  + -v typesense-data:/data mounts a Docker volume for persistence.\n  + --data-dir /data points TypeSense at that volume.\n  + --api-key=secret-key secures your API.\n  + --enable-cors allows browser-based requests.\n\nExpected output:\n\n Docker logs showing TypeSense startup messages, such as Started Typesense API server.\n Listening on http://0.0.0.0:8108.\n\nEmbed and import documents into TypeSense\n\nFollow the steps in the RAG with the CLI tutorial to create a chunks.json that has one {id, content} JSON object per line.\n\nTypeSense supports automatic embedding of documents. We’ll use that capability.\n\nSave the following as addnotes.py and run it with uv run addnotes.py.\n\n/// script\nrequires-python = \">=3.13\"\ndependencies = [\"httpx\"]\n///\nimport json\nimport httpx\nimport os\n\nheaders = {\"X-TYPESENSE-API-KEY\": \"secret-key\"}\n\nschema = {\n    \"name\": \"notes\",\n    \"fields\": [\n        {\"name\": \"id\", \"type\": \"string\", \"facet\": False},\n        {\"name\": \"content\", \"type\": \"string\", \"facet\": False},\n        {\n            \"name\": \"embedding\",\n            \"type\": \"float[]\",\n            \"embed\": {\n                \"from\": [\"content\"],\n                \"modelconfig\": {\n                    \"modelname\": \"openai/text-embedding-3-small\",\n                    \"apikey\": os.getenv(\"OPENAIAPIKEY\"),\n                },\n            },\n        },\n    ],\n}\n\nwith open(\"chunks.json\", \"r\") as f:\n    chunks = [json.loads(line) for line in f.readlines()]\n\nwith httpx.Client() as client:\n     Create the collection\n    if client.get(f\"http://localhost:8108/collections/notes\", headers=headers).statuscode == 404:\n        r = client.post(\"http://localhost:8108/collections\", json=schema, headers=headers)\n\n     Embed the chunks\n    result = client.post(\n        \"http://localhost:8108/collections/notes/documents/import?action=emplace\",\n        headers={headers, \"Content-Type\": \"text/plain\"},\n        data=\"\\n\".join(json.dumps(chunk) for chunk in chunks),\n    )\n    print(result.text)Copy to clipboardErrorCopied\n\n httpx.Client: an HTTP client for Python.\n Collection schema: id and content fields plus an embedding field with auto-generated embeddings from OpenAI.\n Auto-embedding: the embed block instructs TypeSense to call the specified model for each document.\n GET /collections/notes: checks existence.\n POST /collections: creates the collection.\n POST /collections/notes/documents/import?action=emplace: bulk upsert documents, embedding them on the fly.\n\nExpected output:\n\n A JSON summary string like {\"success\": X, \"failed\": 0} indicating how many docs were imported.\n (On timeouts, re-run until all chunks are processed.)\n\n4. Run a hybrid search and answer a question\n\nNow, we can use a single curl against the Multi-Search endpoint to combine keyword and vector search as a hybrid search:\n\nQ=\"What does the author affectionately call the => syntax?\"\n\npayload=$(jq -n --arg coll \"notes\" --arg q \"$Q\" \\\n  '{\n     searches: [\n       {\n         collection: $coll,\n         q:           $q,\n         queryby:    \"content,embedding\",\n         sortby:     \"textmatch:desc\",\n         prefix:      false,\n         excludefields: \"embedding\"\n       }\n     ]\n   }'\n)\ncurl -s 'http://localhost:8108/multisearch' \\\n  -H \"X-TYPESENSE-API-KEY: secret-key\" \\\n  -d \"$payload\" \\\n  | jq -r '.results[].hits[].document.content' \\\n  | llm -s \"${Q} - \\$Answer ONLY from these notes. Cite verbatim from the notes.\" \\\n  | uvx streamdownCopy to clipboardErrorCopied\n\n queryby: \"content,embedding\": tells TypeSense to score by both keyword and vector similarity.\n sortby: \"textmatch:desc\": boosts exact text hits.\n excludefields: \"embedding\": keeps responses lightweight.\n curl -d: posts the search request.\n jq -r: extracts each hit’s content. See jq manual\n llm -s and uvx streamdown: generate and stream a grounded answer.\n\nExpected output:\n\n The raw matched snippets printed first.\n Then a concise, streamed LLM answer citing the note verbatim.\n\nPrevious\n\nRAG with the CLI)\n\nNext\n\nFunction Calling"
  },
  {
    "title": "Hybrid RAG with TypeSense",
    "filename": "Hybrid_RAG_with_TypeSense.md",
    "text": "Hybrid Retrieval Augmented Generation (Hybrid RAG) with TypeSense\n--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nHybrid RAG combines semantic (vector) search with traditional keyword search to improve retrieval accuracy and relevance. By mixing exact text matches with embedding-based similarity, you get the best of both worlds: precision when keywords are present, and semantic recall when phrasing varies. TypeSense makes this easy with built-in hybrid search and automatic embedding generation.\n\nBelow is a fully self-contained Hybrid RAG tutorial using TypeSense, Python, and the command line.\n\nInstall and run TypeSense\n\nInstall TypeSense.\n\nmkdir typesense-data\n\ndocker run -p 8108:8108 \\\n  -v typesense-data:/data typesense/typesense:28.0 \\\n  --data-dir /data \\\n  --api-key=secret-key \\\n  --enable-corsCopy to clipboardErrorCopied\n\n docker run: spins up a containerized TypeSense server on port 8108\n  + -p 8108:8108 maps host port to container port.\n  + -v typesense-data:/data mounts a Docker volume for persistence.\n  + --data-dir /data points TypeSense at that volume.\n  + --api-key=secret-key secures your API.\n  + --enable-cors allows browser-based requests.\n\nExpected output:\n\n Docker logs showing TypeSense startup messages, such as Started Typesense API server.\n Listening on http://0.0.0.0:8108.\n\nEmbed and import documents into TypeSense\n\nFollow the steps in the RAG with the CLI tutorial to create a chunks.json that has one {id, content} JSON object per line.\n\nTypeSense supports automatic embedding of documents. We’ll use that capability.\n\nSave the following as addnotes.py and run it with uv run addnotes.py.\n\n/// script\nrequires-python = \">=3.13\"\ndependencies = [\"httpx\"]\n///\nimport json\nimport httpx\nimport os\n\nheaders = {\"X-TYPESENSE-API-KEY\": \"secret-key\"}\n\nschema = {\n    \"name\": \"notes\",\n    \"fields\": [\n        {\"name\": \"id\", \"type\": \"string\", \"facet\": False},\n        {\"name\": \"content\", \"type\": \"string\", \"facet\": False},\n        {\n            \"name\": \"embedding\",\n            \"type\": \"float[]\",\n            \"embed\": {\n                \"from\": [\"content\"],\n                \"modelconfig\": {\n                    \"modelname\": \"openai/text-embedding-3-small\",\n                    \"apikey\": os.getenv(\"OPENAIAPIKEY\"),\n                },\n            },\n        },\n    ],\n}\n\nwith open(\"chunks.json\", \"r\") as f:\n    chunks = [json.loads(line) for line in f.readlines()]\n\nwith httpx.Client() as client:\n     Create the collection\n    if client.get(f\"http://localhost:8108/collections/notes\", headers=headers).statuscode == 404:\n        r = client.post(\"http://localhost:8108/collections\", json=schema, headers=headers)\n\n     Embed the chunks\n    result = client.post(\n        \"http://localhost:8108/collections/notes/documents/import?action=emplace\",\n        headers={headers, \"Content-Type\": \"text/plain\"},\n        data=\"\\n\".join(json.dumps(chunk) for chunk in chunks),\n    )\n    print(result.text)Copy to clipboardErrorCopied\n\n httpx.Client: an HTTP client for Python.\n Collection schema: id and content fields plus an embedding field with auto-generated embeddings from OpenAI.\n Auto-embedding: the embed block instructs TypeSense to call the specified model for each document.\n GET /collections/notes: checks existence.\n POST /collections: creates the collection.\n POST /collections/notes/documents/import?action=emplace: bulk upsert documents, embedding them on the fly.\n\nExpected output:\n\n A JSON summary string like {\"success\": X, \"failed\": 0} indicating how many docs were imported.\n (On timeouts, re-run until all chunks are processed.)\n\n4. Run a hybrid search and answer a question\n\nNow, we can use a single curl against the Multi-Search endpoint to combine keyword and vector search as a hybrid search:\n\nQ=\"What does the author affectionately call the => syntax?\"\n\npayload=$(jq -n --arg coll \"notes\" --arg q \"$Q\" \\\n  '{\n     searches: [\n       {\n         collection: $coll,\n         q:           $q,\n         queryby:    \"content,embedding\",\n         sortby:     \"textmatch:desc\",\n         prefix:      false,\n         excludefields: \"embedding\"\n       }\n     ]\n   }'\n)\ncurl -s 'http://localhost:8108/multisearch' \\\n  -H \"X-TYPESENSE-API-KEY: secret-key\" \\\n  -d \"$payload\" \\\n  | jq -r '.results[].hits[].document.content' \\\n  | llm -s \"${Q} - \\$Answer ONLY from these notes. Cite verbatim from the notes.\" \\\n  | uvx streamdownCopy to clipboardErrorCopied\n\n queryby: \"content,embedding\": tells TypeSense to score by both keyword and vector similarity.\n sortby: \"textmatch:desc\": boosts exact text hits.\n excludefields: \"embedding\": keeps responses lightweight.\n curl -d: posts the search request.\n jq -r: extracts each hit’s content. See jq manual\n llm -s and uvx streamdown: generate and stream a grounded answer.\n\nExpected output:\n\n The raw matched snippets printed first.\n Then a concise, streamed LLM answer citing the note verbatim.\n\nPrevious\n\nRAG with the CLI)\n\nNext\n\nFunction Calling"
  },
  {
    "title": "LLM Agents",
    "filename": "LLM_Agents.md",
    "text": "LLM Agents: Building AI Systems That Can Think and Act\n-------------------------------------------------------------------------------------------------------------------------------\n\nLLM Agents are AI systems that can define and execute their own workflows to accomplish tasks. Unlike simple prompt-response patterns, agents make multiple LLM calls, use tools, and adapt their approach based on intermediate results. They represent a significant step toward more autonomous AI systems.\n\n[](https://youtu.be/DWUdGhRrv2c)\n\nWhat Makes an Agent?\n\nAn LLM agent consists of three core components:\n\n1. LLM Brain: Makes decisions about what to do next\n2. Tools: External capabilities the agent can use (e.g., web search, code execution)\n3. Memory: Retains context across multiple steps\n\nAgents operate through a loop:\n\n Observe the environment\n Think about what to do\n Take action using tools\n Observe results\n Repeat until task completion\n\nCommand-Line Agent Example\n\nWe’ve created a minimal command-line agent called llm-cmd-agent.py that:\n\n1. Takes a task description from the command line\n2. Generates code to accomplish the task\n3. Automatically extracts and executes the code\n4. Passes the results back to the LLM\n5. Provides a final answer or tries again if the execution fails\n\nHere’s how it works:\n\nuv run llm-cmd-agent.py \"list all Python files under the current directory, recursively, by size\"\nuv run llm-cmd-agent.py \"convert the largest Markdown file to HTML\"Copy to clipboardErrorCopied\n\nThe agent will:\n\n1. Generate a shell script to list files with their sizes\n2. Execute the script in a subprocess\n3. Capture the output (stdout and stderr)\n4. Pass the output back to the LLM for interpretation\n5. Present a final answer to the user\n\nUnder the hood, the agent follows this workflow:\n\n1. Initial prompt to generate a shell script\n2. Code extraction from the LLM response\n3. Code execution in a subprocess\n4. Result interpretation by the LLM\n5. Error handling and retry logic if needed\n\nThis demonstrates the core agent loop of:\n\n Planning (generating code)\n Execution (running the code)\n Reflection (interpreting results)\n Adaptation (fixing errors if needed)\n\nAgent Architectures\n\nDifferent agent architectures exist for different use cases:\n\n1. ReAct (Reasoning + Acting): Interleaves reasoning steps with actions\n2. Reflexion: Adds self-reflection to improve reasoning\n3. MRKL (Modular Reasoning, Knowledge and Language): Combines neural and symbolic modules\n4. Plan-and-Execute: Creates a plan first, then executes steps\n\nReal-World Applications\n\nLLM agents can be applied to various domains:\n\n1. Research assistants that search, summarize, and synthesize information\n2. Coding assistants that write, debug, and explain code\n3. Data analysis agents that clean, visualize, and interpret data\n4. Customer service agents that handle queries and perform actions\n5. Personal assistants that manage schedules, emails, and tasks\n\nProject Ideas\n\nHere are some practical agent projects you could build:\n\n1. Study buddy agent: Helps create flashcards, generates practice questions, and explains concepts\n2. Job application assistant: Searches job listings, tailors resumes, and prepares interview responses\n3. Personal finance agent: Categorizes expenses, suggests budgets, and identifies savings opportunities\n4. Health and fitness coach: Creates workout plans, tracks nutrition, and provides motivation\n5. Course project helper: Breaks down assignments, suggests resources, and reviews work\n\nBest Practices\n\n1. Clear instructions: Define the agent’s capabilities and limitations\n2. Effective tool design: Create tools that are specific and reliable\n3. Robust error handling: Agents should recover gracefully from failures\n4. Memory management: Balance context retention with token efficiency\n5. User feedback: Allow users to correct or guide the agent\n\nLimitations and Challenges\n\nCurrent LLM agents face several challenges:\n\n1. Hallucination: Agents may generate false information or tool calls\n2. Planning limitations: Complex tasks require better planning capabilities\n3. Tool integration complexity: Each new tool adds implementation overhead\n4. Context window constraints: Limited memory for long-running tasks\n5. Security concerns: Tool access requires careful permission management\n\nPrevious\n\nFunction Calling\n\nNext\n\nLLM Image Generation"
  },
  {
    "title": "LLM Agents",
    "filename": "LLM_Agents.md",
    "text": "LLM Agents: Building AI Systems That Can Think and Act\n-------------------------------------------------------------------------------------------------------------------------------\n\nLLM Agents are AI systems that can define and execute their own workflows to accomplish tasks. Unlike simple prompt-response patterns, agents make multiple LLM calls, use tools, and adapt their approach based on intermediate results. They represent a significant step toward more autonomous AI systems.\n\n[](https://youtu.be/DWUdGhRrv2c)\n\nWhat Makes an Agent?\n\nAn LLM agent consists of three core components:\n\n1. LLM Brain: Makes decisions about what to do next\n2. Tools: External capabilities the agent can use (e.g., web search, code execution)\n3. Memory: Retains context across multiple steps\n\nAgents operate through a loop:\n\n Observe the environment\n Think about what to do\n Take action using tools\n Observe results\n Repeat until task completion\n\nCommand-Line Agent Example\n\nWe’ve created a minimal command-line agent called llm-cmd-agent.py that:\n\n1. Takes a task description from the command line\n2. Generates code to accomplish the task\n3. Automatically extracts and executes the code\n4. Passes the results back to the LLM\n5. Provides a final answer or tries again if the execution fails\n\nHere’s how it works:\n\nuv run llm-cmd-agent.py \"list all Python files under the current directory, recursively, by size\"\nuv run llm-cmd-agent.py \"convert the largest Markdown file to HTML\"Copy to clipboardErrorCopied\n\nThe agent will:\n\n1. Generate a shell script to list files with their sizes\n2. Execute the script in a subprocess\n3. Capture the output (stdout and stderr)\n4. Pass the output back to the LLM for interpretation\n5. Present a final answer to the user\n\nUnder the hood, the agent follows this workflow:\n\n1. Initial prompt to generate a shell script\n2. Code extraction from the LLM response\n3. Code execution in a subprocess\n4. Result interpretation by the LLM\n5. Error handling and retry logic if needed\n\nThis demonstrates the core agent loop of:\n\n Planning (generating code)\n Execution (running the code)\n Reflection (interpreting results)\n Adaptation (fixing errors if needed)\n\nAgent Architectures\n\nDifferent agent architectures exist for different use cases:\n\n1. ReAct (Reasoning + Acting): Interleaves reasoning steps with actions\n2. Reflexion: Adds self-reflection to improve reasoning\n3. MRKL (Modular Reasoning, Knowledge and Language): Combines neural and symbolic modules\n4. Plan-and-Execute: Creates a plan first, then executes steps\n\nReal-World Applications\n\nLLM agents can be applied to various domains:\n\n1. Research assistants that search, summarize, and synthesize information\n2. Coding assistants that write, debug, and explain code\n3. Data analysis agents that clean, visualize, and interpret data\n4. Customer service agents that handle queries and perform actions\n5. Personal assistants that manage schedules, emails, and tasks\n\nProject Ideas\n\nHere are some practical agent projects you could build:\n\n1. Study buddy agent: Helps create flashcards, generates practice questions, and explains concepts\n2. Job application assistant: Searches job listings, tailors resumes, and prepares interview responses\n3. Personal finance agent: Categorizes expenses, suggests budgets, and identifies savings opportunities\n4. Health and fitness coach: Creates workout plans, tracks nutrition, and provides motivation\n5. Course project helper: Breaks down assignments, suggests resources, and reviews work\n\nBest Practices\n\n1. Clear instructions: Define the agent’s capabilities and limitations\n2. Effective tool design: Create tools that are specific and reliable\n3. Robust error handling: Agents should recover gracefully from failures\n4. Memory management: Balance context retention with token efficiency\n5. User feedback: Allow users to correct or guide the agent\n\nLimitations and Challenges\n\nCurrent LLM agents face several challenges:\n\n1. Hallucination: Agents may generate false information or tool calls\n2. Planning limitations: Complex tasks require better planning capabilities\n3. Tool integration complexity: Each new tool adds implementation overhead\n4. Context window constraints: Limited memory for long-running tasks\n5. Security concerns: Tool access requires careful permission management\n\nPrevious\n\nFunction Calling\n\nNext\n\nLLM Image Generation"
  },
  {
    "title": "LLM Agents",
    "filename": "LLM_Agents.md",
    "text": "LLM Agents: Building AI Systems That Can Think and Act\n-------------------------------------------------------------------------------------------------------------------------------\n\nLLM Agents are AI systems that can define and execute their own workflows to accomplish tasks. Unlike simple prompt-response patterns, agents make multiple LLM calls, use tools, and adapt their approach based on intermediate results. They represent a significant step toward more autonomous AI systems.\n\n[](https://youtu.be/DWUdGhRrv2c)\n\nWhat Makes an Agent?\n\nAn LLM agent consists of three core components:\n\n1. LLM Brain: Makes decisions about what to do next\n2. Tools: External capabilities the agent can use (e.g., web search, code execution)\n3. Memory: Retains context across multiple steps\n\nAgents operate through a loop:\n\n Observe the environment\n Think about what to do\n Take action using tools\n Observe results\n Repeat until task completion\n\nCommand-Line Agent Example\n\nWe’ve created a minimal command-line agent called llm-cmd-agent.py that:\n\n1. Takes a task description from the command line\n2. Generates code to accomplish the task\n3. Automatically extracts and executes the code\n4. Passes the results back to the LLM\n5. Provides a final answer or tries again if the execution fails\n\nHere’s how it works:\n\nuv run llm-cmd-agent.py \"list all Python files under the current directory, recursively, by size\"\nuv run llm-cmd-agent.py \"convert the largest Markdown file to HTML\"Copy to clipboardErrorCopied\n\nThe agent will:\n\n1. Generate a shell script to list files with their sizes\n2. Execute the script in a subprocess\n3. Capture the output (stdout and stderr)\n4. Pass the output back to the LLM for interpretation\n5. Present a final answer to the user\n\nUnder the hood, the agent follows this workflow:\n\n1. Initial prompt to generate a shell script\n2. Code extraction from the LLM response\n3. Code execution in a subprocess\n4. Result interpretation by the LLM\n5. Error handling and retry logic if needed\n\nThis demonstrates the core agent loop of:\n\n Planning (generating code)\n Execution (running the code)\n Reflection (interpreting results)\n Adaptation (fixing errors if needed)\n\nAgent Architectures\n\nDifferent agent architectures exist for different use cases:\n\n1. ReAct (Reasoning + Acting): Interleaves reasoning steps with actions\n2. Reflexion: Adds self-reflection to improve reasoning\n3. MRKL (Modular Reasoning, Knowledge and Language): Combines neural and symbolic modules\n4. Plan-and-Execute: Creates a plan first, then executes steps\n\nReal-World Applications\n\nLLM agents can be applied to various domains:\n\n1. Research assistants that search, summarize, and synthesize information\n2. Coding assistants that write, debug, and explain code\n3. Data analysis agents that clean, visualize, and interpret data\n4. Customer service agents that handle queries and perform actions\n5. Personal assistants that manage schedules, emails, and tasks\n\nProject Ideas\n\nHere are some practical agent projects you could build:\n\n1. Study buddy agent: Helps create flashcards, generates practice questions, and explains concepts\n2. Job application assistant: Searches job listings, tailors resumes, and prepares interview responses\n3. Personal finance agent: Categorizes expenses, suggests budgets, and identifies savings opportunities\n4. Health and fitness coach: Creates workout plans, tracks nutrition, and provides motivation\n5. Course project helper: Breaks down assignments, suggests resources, and reviews work\n\nBest Practices\n\n1. Clear instructions: Define the agent’s capabilities and limitations\n2. Effective tool design: Create tools that are specific and reliable\n3. Robust error handling: Agents should recover gracefully from failures\n4. Memory management: Balance context retention with token efficiency\n5. User feedback: Allow users to correct or guide the agent\n\nLimitations and Challenges\n\nCurrent LLM agents face several challenges:\n\n1. Hallucination: Agents may generate false information or tool calls\n2. Planning limitations: Complex tasks require better planning capabilities\n3. Tool integration complexity: Each new tool adds implementation overhead\n4. Context window constraints: Limited memory for long-running tasks\n5. Security concerns: Tool access requires careful permission management\n\nPrevious\n\nFunction Calling\n\nNext\n\nLLM Image Generation"
  },
  {
    "title": "LLM Agents",
    "filename": "LLM_Agents.md",
    "text": "LLM Agents: Building AI Systems That Can Think and Act\n-------------------------------------------------------------------------------------------------------------------------------\n\nLLM Agents are AI systems that can define and execute their own workflows to accomplish tasks. Unlike simple prompt-response patterns, agents make multiple LLM calls, use tools, and adapt their approach based on intermediate results. They represent a significant step toward more autonomous AI systems.\n\n[](https://youtu.be/DWUdGhRrv2c)\n\nWhat Makes an Agent?\n\nAn LLM agent consists of three core components:\n\n1. LLM Brain: Makes decisions about what to do next\n2. Tools: External capabilities the agent can use (e.g., web search, code execution)\n3. Memory: Retains context across multiple steps\n\nAgents operate through a loop:\n\n Observe the environment\n Think about what to do\n Take action using tools\n Observe results\n Repeat until task completion\n\nCommand-Line Agent Example\n\nWe’ve created a minimal command-line agent called llm-cmd-agent.py that:\n\n1. Takes a task description from the command line\n2. Generates code to accomplish the task\n3. Automatically extracts and executes the code\n4. Passes the results back to the LLM\n5. Provides a final answer or tries again if the execution fails\n\nHere’s how it works:\n\nuv run llm-cmd-agent.py \"list all Python files under the current directory, recursively, by size\"\nuv run llm-cmd-agent.py \"convert the largest Markdown file to HTML\"Copy to clipboardErrorCopied\n\nThe agent will:\n\n1. Generate a shell script to list files with their sizes\n2. Execute the script in a subprocess\n3. Capture the output (stdout and stderr)\n4. Pass the output back to the LLM for interpretation\n5. Present a final answer to the user\n\nUnder the hood, the agent follows this workflow:\n\n1. Initial prompt to generate a shell script\n2. Code extraction from the LLM response\n3. Code execution in a subprocess\n4. Result interpretation by the LLM\n5. Error handling and retry logic if needed\n\nThis demonstrates the core agent loop of:\n\n Planning (generating code)\n Execution (running the code)\n Reflection (interpreting results)\n Adaptation (fixing errors if needed)\n\nAgent Architectures\n\nDifferent agent architectures exist for different use cases:\n\n1. ReAct (Reasoning + Acting): Interleaves reasoning steps with actions\n2. Reflexion: Adds self-reflection to improve reasoning\n3. MRKL (Modular Reasoning, Knowledge and Language): Combines neural and symbolic modules\n4. Plan-and-Execute: Creates a plan first, then executes steps\n\nReal-World Applications\n\nLLM agents can be applied to various domains:\n\n1. Research assistants that search, summarize, and synthesize information\n2. Coding assistants that write, debug, and explain code\n3. Data analysis agents that clean, visualize, and interpret data\n4. Customer service agents that handle queries and perform actions\n5. Personal assistants that manage schedules, emails, and tasks\n\nProject Ideas\n\nHere are some practical agent projects you could build:\n\n1. Study buddy agent: Helps create flashcards, generates practice questions, and explains concepts\n2. Job application assistant: Searches job listings, tailors resumes, and prepares interview responses\n3. Personal finance agent: Categorizes expenses, suggests budgets, and identifies savings opportunities\n4. Health and fitness coach: Creates workout plans, tracks nutrition, and provides motivation\n5. Course project helper: Breaks down assignments, suggests resources, and reviews work\n\nBest Practices\n\n1. Clear instructions: Define the agent’s capabilities and limitations\n2. Effective tool design: Create tools that are specific and reliable\n3. Robust error handling: Agents should recover gracefully from failures\n4. Memory management: Balance context retention with token efficiency\n5. User feedback: Allow users to correct or guide the agent\n\nLimitations and Challenges\n\nCurrent LLM agents face several challenges:\n\n1. Hallucination: Agents may generate false information or tool calls\n2. Planning limitations: Complex tasks require better planning capabilities\n3. Tool integration complexity: Each new tool adds implementation overhead\n4. Context window constraints: Limited memory for long-running tasks\n5. Security concerns: Tool access requires careful permission management\n\nPrevious\n\nFunction Calling\n\nNext\n\nLLM Image Generation"
  },
  {
    "title": "Tunneling: ngrok",
    "filename": "Tunneling__ngrok.md",
    "text": "Tunneling: ngrok\n----------------------------------------------\n\nNgrok is a tool that creates secure tunnels to your localhost, making your local development server accessible to the internet. It’s essential for testing webhooks, sharing work in progress, or debugging applications in production-like environments.\n\n[](https://youtu.be/dfMdLGZLXSg)\n\nRun the command uvx ngrok http 8000 to create a tunnel to your local server on port 8000. This generates a public URL that you can share with others.\n\nTo get started, log into ngrok.com and get an authtoken from the dashboard. Copy it. Then run:\n\nngrok config add-authtoken $YOURAUTHTOKENCopy to clipboardErrorCopied\n\nNow you can forward any local port to the internet. For example:\n\nStart a local server on port 8000\nuv run -m http.server 8000\n\nStart HTTP tunnel\nuvx ngrok http 8000Copy to clipboardErrorCopied\n\nHere are useful things you can do with ngrok http:\n\n ngrok http file://. to serve local files\n --response-header-add \"Access-Control-Allow-Origin: \" to enable CORS\n --oauth google --oauth-client-id $CLIENTID --oauth-client-secret $SECRET --oauth-allow-domain example.com --oauth-allow-email user@example.org to restrict users to @example.com and user@example.org using Google Auth\n --ua-filter-deny \".bot$\" to reject user agents ending with bot\n\nPrevious\n\nDevContainers: GitHub Codespaces\n\nNext\n\nCORS"
  },
  {
    "title": "Tunneling: ngrok",
    "filename": "Tunneling__ngrok.md",
    "text": "Tunneling: ngrok\n----------------------------------------------\n\nNgrok is a tool that creates secure tunnels to your localhost, making your local development server accessible to the internet. It’s essential for testing webhooks, sharing work in progress, or debugging applications in production-like environments.\n\n[](https://youtu.be/dfMdLGZLXSg)\n\nRun the command uvx ngrok http 8000 to create a tunnel to your local server on port 8000. This generates a public URL that you can share with others.\n\nTo get started, log into ngrok.com and get an authtoken from the dashboard. Copy it. Then run:\n\nngrok config add-authtoken $YOURAUTHTOKENCopy to clipboardErrorCopied\n\nNow you can forward any local port to the internet. For example:\n\nStart a local server on port 8000\nuv run -m http.server 8000\n\nStart HTTP tunnel\nuvx ngrok http 8000Copy to clipboardErrorCopied\n\nHere are useful things you can do with ngrok http:\n\n ngrok http file://. to serve local files\n --response-header-add \"Access-Control-Allow-Origin: \" to enable CORS\n --oauth google --oauth-client-id $CLIENTID --oauth-client-secret $SECRET --oauth-allow-domain example.com --oauth-allow-email user@example.org to restrict users to @example.com and user@example.org using Google Auth\n --ua-filter-deny \".bot$\" to reject user agents ending with bot\n\nPrevious\n\nDevContainers: GitHub Codespaces\n\nNext\n\nCORS"
  },
  {
    "title": "LLM Image Generation",
    "filename": "LLM_Image_Generation.md",
    "text": "Gemini Flash Experimental Image Generation and Editing APIs\n----------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn March 2025, Google introduced native image generation and editing capabilities in the Gemini 2.0 Flash Experimental model. You can now generate and iteratively edit images via a single REST endpoint (Experiment with Gemini 2.0 Flash native image generation, Generate images | Gemini API | Google AI for Developers).\n\n[](https://youtu.be/wgs4UYx6quY) (How to use Latest Gemini 2.0 Native Image Generation with API?)\n\nSimple image generation\n\nTo generate a basic image, send a POST request to the generateContent method:\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A serene landscape of rolling hills at sunrise, digital art\" }] }],\n    \"generationConfig\": { \"responseModalities\": [\"TEXT\", \"IMAGE\"] }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nReplace $GEMINIAPIKEY with your key. (Gemini API | Google AI for Developers)\n\nGeneration options\n\nYou can tweak the output with these generationConfig parameters:\n\n responseModalities: Modalities to return (TEXT, IMAGE).\n temperature (0.0–2.0): Controls randomness (default 1.0).\n topP (0.0–1.0): Nucleus sampling threshold.\n topK: Token selection cutoff.\n maxOutputTokens: Max tokens for text parts.\n stopSequences: Sequences to end generation.\n seed: For reproducibility.\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A futuristic city skyline at dusk, neon lights\" }] }],\n    \"generationConfig\": {\n      \"responseModalities\": [\"TEXT\", \"IMAGE\"],\n      \"temperature\": 0.7,\n      \"topP\": 0.9,\n      \"maxOutputTokens\": 1024\n    }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Generation Docs\n\nSimple image editing\n\nTo edit an existing image, include it in the contents as inlineData (base64-encoded):\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n      \"contents\": [{\n        \"parts\":[\n            {\"text\": \"Replace the background with a starry night sky\"},\n            {\"inlinedata\": {\"mimetype\":\"image/jpeg\", \"data\": \"'$(base64 -w 0 cat.jpg)'\"}}\n        ]\n      }],\n      \"generationConfig\": {\"responseModalities\": [\"TEXT\", \"IMAGE\"]}\n    }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Editing Docs\n\nEditing options\n\nEditing requests support:\n\n inlineData: Embed raw image bytes.\n fileData: Reference public URLs.\n All generationConfig options listed above.\n safetySettings: Per-request safety rules.\n Multi-turn edits by repeating contents in conversation history.\n\nCosts and optimization\n\nGemini 2.0 Flash Experimental uses token-based billing:\n\n Input (text/image/video): free tier, then $0.10 per 1M tokens.\n Output (text/image): free tier, then $0.40 per 1M tokens.\n Per-image flat cost for Pro models: $0.001315 /image (Gemini Developer API Pricing | Gemini API | Google AI for Developers, Solved: Re: Outdated Gemini Pro image pricing? By tile, or…).\n\nTo optimize:\n\n Use smaller image sizes by setting responseMimeType.\n Cache or reuse prompts with cachedContent.\n Lower candidateCount or temperature for fewer tokens.\n\nOpenAI gpt-image-1 Model for Image Generation and Editing\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nOpenAI’s GPT Image 1 (gpt-image-1) is a state-of-the-art multimodal model released on April 23, 2025, for high-fidelity image creation and editing.\n\n[](https://youtu.be/k-G71JZA75A)\n\nSimple image generation\n\nUse the Image Generations endpoint:\n\ncurl 'https://api.openai.com/v1/images/generations' \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"prompt\": \"A whimsical illustration of a cat playing chess\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }' > image.pngCopy to clipboardErrorCopied\n\n(Generate Image | OpenAI API - Postman)\n\nGeneration options\n\nAdjust these JSON parameters:\n\n model: gpt-image-1 (default).\n prompt: Text description.\n n: Number of images.\n size: 256x256, 512x512, or 1024x1024.\n responseformat: \"url\" (default) or \"b64json\".\n\n{\n  \"model\": \"gpt-image-1\",\n  \"prompt\": \"...\",\n  \"n\": 2,\n  \"size\": \"512x512\",\n  \"responseformat\": \"b64json\"\n}Copy to clipboardErrorCopied\n\nSimple image editing\n\nUse the Edits endpoint with an image and a mask:\n\ncurl https://api.openai.com/v1/images/edits \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"image\": \"data:image/png;base64,<BASE64IMAGE>\",\n    \"mask\": \"data:image/png;base64,<BASE64MASK>\",\n    \"prompt\": \"Add a rainbow in the sky above the mountains\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'Copy to clipboardErrorCopied\n\n(curl - What’s the correct URL to test OpenAI API? - Stack Overflow)\n\nEditing options\n\nEditing requests accept:\n\n image: Original image (base64 or URL).\n mask: PNG mask for inpainting.\n prompt: Instruction for the edit.\n n, size, responseformat as above.\n Optional user field for attribution.\n\nCosts and optimization\n\nGPT Image 1 pricing (per 1M tokens): text input $5, image input $10, image output $40. Rough per-image costs:\n\n Low quality: $0.02\n Medium quality: $0.07\n High quality: $0.19 (OpenAI’s GPT-Image-1 API — Create Stunning Images for Your Apps!, Usage of gpt-image-1 is priced per token, with … - Hacker News)\n\nTo optimize:\n\n Choose smaller sizes (256x256).\n Generate fewer images (n:1).\n Use responseformat:\"url\" to reduce payload.\n Cache frequent prompts or images.\n\nPrevious\n\nLLM Agents\n\nNext\n\nLLM Speech"
  },
  {
    "title": "LLM Image Generation",
    "filename": "LLM_Image_Generation.md",
    "text": "Gemini Flash Experimental Image Generation and Editing APIs\n----------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn March 2025, Google introduced native image generation and editing capabilities in the Gemini 2.0 Flash Experimental model. You can now generate and iteratively edit images via a single REST endpoint (Experiment with Gemini 2.0 Flash native image generation, Generate images | Gemini API | Google AI for Developers).\n\n[](https://youtu.be/wgs4UYx6quY) (How to use Latest Gemini 2.0 Native Image Generation with API?)\n\nSimple image generation\n\nTo generate a basic image, send a POST request to the generateContent method:\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A serene landscape of rolling hills at sunrise, digital art\" }] }],\n    \"generationConfig\": { \"responseModalities\": [\"TEXT\", \"IMAGE\"] }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nReplace $GEMINIAPIKEY with your key. (Gemini API | Google AI for Developers)\n\nGeneration options\n\nYou can tweak the output with these generationConfig parameters:\n\n responseModalities: Modalities to return (TEXT, IMAGE).\n temperature (0.0–2.0): Controls randomness (default 1.0).\n topP (0.0–1.0): Nucleus sampling threshold.\n topK: Token selection cutoff.\n maxOutputTokens: Max tokens for text parts.\n stopSequences: Sequences to end generation.\n seed: For reproducibility.\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A futuristic city skyline at dusk, neon lights\" }] }],\n    \"generationConfig\": {\n      \"responseModalities\": [\"TEXT\", \"IMAGE\"],\n      \"temperature\": 0.7,\n      \"topP\": 0.9,\n      \"maxOutputTokens\": 1024\n    }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Generation Docs\n\nSimple image editing\n\nTo edit an existing image, include it in the contents as inlineData (base64-encoded):\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n      \"contents\": [{\n        \"parts\":[\n            {\"text\": \"Replace the background with a starry night sky\"},\n            {\"inlinedata\": {\"mimetype\":\"image/jpeg\", \"data\": \"'$(base64 -w 0 cat.jpg)'\"}}\n        ]\n      }],\n      \"generationConfig\": {\"responseModalities\": [\"TEXT\", \"IMAGE\"]}\n    }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Editing Docs\n\nEditing options\n\nEditing requests support:\n\n inlineData: Embed raw image bytes.\n fileData: Reference public URLs.\n All generationConfig options listed above.\n safetySettings: Per-request safety rules.\n Multi-turn edits by repeating contents in conversation history.\n\nCosts and optimization\n\nGemini 2.0 Flash Experimental uses token-based billing:\n\n Input (text/image/video): free tier, then $0.10 per 1M tokens.\n Output (text/image): free tier, then $0.40 per 1M tokens.\n Per-image flat cost for Pro models: $0.001315 /image (Gemini Developer API Pricing | Gemini API | Google AI for Developers, Solved: Re: Outdated Gemini Pro image pricing? By tile, or…).\n\nTo optimize:\n\n Use smaller image sizes by setting responseMimeType.\n Cache or reuse prompts with cachedContent.\n Lower candidateCount or temperature for fewer tokens.\n\nOpenAI gpt-image-1 Model for Image Generation and Editing\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nOpenAI’s GPT Image 1 (gpt-image-1) is a state-of-the-art multimodal model released on April 23, 2025, for high-fidelity image creation and editing.\n\n[](https://youtu.be/k-G71JZA75A)\n\nSimple image generation\n\nUse the Image Generations endpoint:\n\ncurl 'https://api.openai.com/v1/images/generations' \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"prompt\": \"A whimsical illustration of a cat playing chess\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }' > image.pngCopy to clipboardErrorCopied\n\n(Generate Image | OpenAI API - Postman)\n\nGeneration options\n\nAdjust these JSON parameters:\n\n model: gpt-image-1 (default).\n prompt: Text description.\n n: Number of images.\n size: 256x256, 512x512, or 1024x1024.\n responseformat: \"url\" (default) or \"b64json\".\n\n{\n  \"model\": \"gpt-image-1\",\n  \"prompt\": \"...\",\n  \"n\": 2,\n  \"size\": \"512x512\",\n  \"responseformat\": \"b64json\"\n}Copy to clipboardErrorCopied\n\nSimple image editing\n\nUse the Edits endpoint with an image and a mask:\n\ncurl https://api.openai.com/v1/images/edits \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"image\": \"data:image/png;base64,<BASE64IMAGE>\",\n    \"mask\": \"data:image/png;base64,<BASE64MASK>\",\n    \"prompt\": \"Add a rainbow in the sky above the mountains\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'Copy to clipboardErrorCopied\n\n(curl - What’s the correct URL to test OpenAI API? - Stack Overflow)\n\nEditing options\n\nEditing requests accept:\n\n image: Original image (base64 or URL).\n mask: PNG mask for inpainting.\n prompt: Instruction for the edit.\n n, size, responseformat as above.\n Optional user field for attribution.\n\nCosts and optimization\n\nGPT Image 1 pricing (per 1M tokens): text input $5, image input $10, image output $40. Rough per-image costs:\n\n Low quality: $0.02\n Medium quality: $0.07\n High quality: $0.19 (OpenAI’s GPT-Image-1 API — Create Stunning Images for Your Apps!, Usage of gpt-image-1 is priced per token, with … - Hacker News)\n\nTo optimize:\n\n Choose smaller sizes (256x256).\n Generate fewer images (n:1).\n Use responseformat:\"url\" to reduce payload.\n Cache frequent prompts or images.\n\nPrevious\n\nLLM Agents\n\nNext\n\nLLM Speech"
  },
  {
    "title": "LLM Image Generation",
    "filename": "LLM_Image_Generation.md",
    "text": "Gemini Flash Experimental Image Generation and Editing APIs\n----------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn March 2025, Google introduced native image generation and editing capabilities in the Gemini 2.0 Flash Experimental model. You can now generate and iteratively edit images via a single REST endpoint (Experiment with Gemini 2.0 Flash native image generation, Generate images | Gemini API | Google AI for Developers).\n\n[](https://youtu.be/wgs4UYx6quY) (How to use Latest Gemini 2.0 Native Image Generation with API?)\n\nSimple image generation\n\nTo generate a basic image, send a POST request to the generateContent method:\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A serene landscape of rolling hills at sunrise, digital art\" }] }],\n    \"generationConfig\": { \"responseModalities\": [\"TEXT\", \"IMAGE\"] }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nReplace $GEMINIAPIKEY with your key. (Gemini API | Google AI for Developers)\n\nGeneration options\n\nYou can tweak the output with these generationConfig parameters:\n\n responseModalities: Modalities to return (TEXT, IMAGE).\n temperature (0.0–2.0): Controls randomness (default 1.0).\n topP (0.0–1.0): Nucleus sampling threshold.\n topK: Token selection cutoff.\n maxOutputTokens: Max tokens for text parts.\n stopSequences: Sequences to end generation.\n seed: For reproducibility.\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A futuristic city skyline at dusk, neon lights\" }] }],\n    \"generationConfig\": {\n      \"responseModalities\": [\"TEXT\", \"IMAGE\"],\n      \"temperature\": 0.7,\n      \"topP\": 0.9,\n      \"maxOutputTokens\": 1024\n    }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Generation Docs\n\nSimple image editing\n\nTo edit an existing image, include it in the contents as inlineData (base64-encoded):\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n      \"contents\": [{\n        \"parts\":[\n            {\"text\": \"Replace the background with a starry night sky\"},\n            {\"inlinedata\": {\"mimetype\":\"image/jpeg\", \"data\": \"'$(base64 -w 0 cat.jpg)'\"}}\n        ]\n      }],\n      \"generationConfig\": {\"responseModalities\": [\"TEXT\", \"IMAGE\"]}\n    }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Editing Docs\n\nEditing options\n\nEditing requests support:\n\n inlineData: Embed raw image bytes.\n fileData: Reference public URLs.\n All generationConfig options listed above.\n safetySettings: Per-request safety rules.\n Multi-turn edits by repeating contents in conversation history.\n\nCosts and optimization\n\nGemini 2.0 Flash Experimental uses token-based billing:\n\n Input (text/image/video): free tier, then $0.10 per 1M tokens.\n Output (text/image): free tier, then $0.40 per 1M tokens.\n Per-image flat cost for Pro models: $0.001315 /image (Gemini Developer API Pricing | Gemini API | Google AI for Developers, Solved: Re: Outdated Gemini Pro image pricing? By tile, or…).\n\nTo optimize:\n\n Use smaller image sizes by setting responseMimeType.\n Cache or reuse prompts with cachedContent.\n Lower candidateCount or temperature for fewer tokens.\n\nOpenAI gpt-image-1 Model for Image Generation and Editing\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nOpenAI’s GPT Image 1 (gpt-image-1) is a state-of-the-art multimodal model released on April 23, 2025, for high-fidelity image creation and editing.\n\n[](https://youtu.be/k-G71JZA75A)\n\nSimple image generation\n\nUse the Image Generations endpoint:\n\ncurl 'https://api.openai.com/v1/images/generations' \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"prompt\": \"A whimsical illustration of a cat playing chess\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }' > image.pngCopy to clipboardErrorCopied\n\n(Generate Image | OpenAI API - Postman)\n\nGeneration options\n\nAdjust these JSON parameters:\n\n model: gpt-image-1 (default).\n prompt: Text description.\n n: Number of images.\n size: 256x256, 512x512, or 1024x1024.\n responseformat: \"url\" (default) or \"b64json\".\n\n{\n  \"model\": \"gpt-image-1\",\n  \"prompt\": \"...\",\n  \"n\": 2,\n  \"size\": \"512x512\",\n  \"responseformat\": \"b64json\"\n}Copy to clipboardErrorCopied\n\nSimple image editing\n\nUse the Edits endpoint with an image and a mask:\n\ncurl https://api.openai.com/v1/images/edits \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"image\": \"data:image/png;base64,<BASE64IMAGE>\",\n    \"mask\": \"data:image/png;base64,<BASE64MASK>\",\n    \"prompt\": \"Add a rainbow in the sky above the mountains\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'Copy to clipboardErrorCopied\n\n(curl - What’s the correct URL to test OpenAI API? - Stack Overflow)\n\nEditing options\n\nEditing requests accept:\n\n image: Original image (base64 or URL).\n mask: PNG mask for inpainting.\n prompt: Instruction for the edit.\n n, size, responseformat as above.\n Optional user field for attribution.\n\nCosts and optimization\n\nGPT Image 1 pricing (per 1M tokens): text input $5, image input $10, image output $40. Rough per-image costs:\n\n Low quality: $0.02\n Medium quality: $0.07\n High quality: $0.19 (OpenAI’s GPT-Image-1 API — Create Stunning Images for Your Apps!, Usage of gpt-image-1 is priced per token, with … - Hacker News)\n\nTo optimize:\n\n Choose smaller sizes (256x256).\n Generate fewer images (n:1).\n Use responseformat:\"url\" to reduce payload.\n Cache frequent prompts or images.\n\nPrevious\n\nLLM Agents\n\nNext\n\nLLM Speech"
  },
  {
    "title": "LLM Image Generation",
    "filename": "LLM_Image_Generation.md",
    "text": "Gemini Flash Experimental Image Generation and Editing APIs\n----------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn March 2025, Google introduced native image generation and editing capabilities in the Gemini 2.0 Flash Experimental model. You can now generate and iteratively edit images via a single REST endpoint (Experiment with Gemini 2.0 Flash native image generation, Generate images | Gemini API | Google AI for Developers).\n\n[](https://youtu.be/wgs4UYx6quY) (How to use Latest Gemini 2.0 Native Image Generation with API?)\n\nSimple image generation\n\nTo generate a basic image, send a POST request to the generateContent method:\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A serene landscape of rolling hills at sunrise, digital art\" }] }],\n    \"generationConfig\": { \"responseModalities\": [\"TEXT\", \"IMAGE\"] }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nReplace $GEMINIAPIKEY with your key. (Gemini API | Google AI for Developers)\n\nGeneration options\n\nYou can tweak the output with these generationConfig parameters:\n\n responseModalities: Modalities to return (TEXT, IMAGE).\n temperature (0.0–2.0): Controls randomness (default 1.0).\n topP (0.0–1.0): Nucleus sampling threshold.\n topK: Token selection cutoff.\n maxOutputTokens: Max tokens for text parts.\n stopSequences: Sequences to end generation.\n seed: For reproducibility.\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A futuristic city skyline at dusk, neon lights\" }] }],\n    \"generationConfig\": {\n      \"responseModalities\": [\"TEXT\", \"IMAGE\"],\n      \"temperature\": 0.7,\n      \"topP\": 0.9,\n      \"maxOutputTokens\": 1024\n    }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Generation Docs\n\nSimple image editing\n\nTo edit an existing image, include it in the contents as inlineData (base64-encoded):\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n      \"contents\": [{\n        \"parts\":[\n            {\"text\": \"Replace the background with a starry night sky\"},\n            {\"inlinedata\": {\"mimetype\":\"image/jpeg\", \"data\": \"'$(base64 -w 0 cat.jpg)'\"}}\n        ]\n      }],\n      \"generationConfig\": {\"responseModalities\": [\"TEXT\", \"IMAGE\"]}\n    }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Editing Docs\n\nEditing options\n\nEditing requests support:\n\n inlineData: Embed raw image bytes.\n fileData: Reference public URLs.\n All generationConfig options listed above.\n safetySettings: Per-request safety rules.\n Multi-turn edits by repeating contents in conversation history.\n\nCosts and optimization\n\nGemini 2.0 Flash Experimental uses token-based billing:\n\n Input (text/image/video): free tier, then $0.10 per 1M tokens.\n Output (text/image): free tier, then $0.40 per 1M tokens.\n Per-image flat cost for Pro models: $0.001315 /image (Gemini Developer API Pricing | Gemini API | Google AI for Developers, Solved: Re: Outdated Gemini Pro image pricing? By tile, or…).\n\nTo optimize:\n\n Use smaller image sizes by setting responseMimeType.\n Cache or reuse prompts with cachedContent.\n Lower candidateCount or temperature for fewer tokens.\n\nOpenAI gpt-image-1 Model for Image Generation and Editing\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nOpenAI’s GPT Image 1 (gpt-image-1) is a state-of-the-art multimodal model released on April 23, 2025, for high-fidelity image creation and editing.\n\n[](https://youtu.be/k-G71JZA75A)\n\nSimple image generation\n\nUse the Image Generations endpoint:\n\ncurl 'https://api.openai.com/v1/images/generations' \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"prompt\": \"A whimsical illustration of a cat playing chess\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }' > image.pngCopy to clipboardErrorCopied\n\n(Generate Image | OpenAI API - Postman)\n\nGeneration options\n\nAdjust these JSON parameters:\n\n model: gpt-image-1 (default).\n prompt: Text description.\n n: Number of images.\n size: 256x256, 512x512, or 1024x1024.\n responseformat: \"url\" (default) or \"b64json\".\n\n{\n  \"model\": \"gpt-image-1\",\n  \"prompt\": \"...\",\n  \"n\": 2,\n  \"size\": \"512x512\",\n  \"responseformat\": \"b64json\"\n}Copy to clipboardErrorCopied\n\nSimple image editing\n\nUse the Edits endpoint with an image and a mask:\n\ncurl https://api.openai.com/v1/images/edits \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"image\": \"data:image/png;base64,<BASE64IMAGE>\",\n    \"mask\": \"data:image/png;base64,<BASE64MASK>\",\n    \"prompt\": \"Add a rainbow in the sky above the mountains\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'Copy to clipboardErrorCopied\n\n(curl - What’s the correct URL to test OpenAI API? - Stack Overflow)\n\nEditing options\n\nEditing requests accept:\n\n image: Original image (base64 or URL).\n mask: PNG mask for inpainting.\n prompt: Instruction for the edit.\n n, size, responseformat as above.\n Optional user field for attribution.\n\nCosts and optimization\n\nGPT Image 1 pricing (per 1M tokens): text input $5, image input $10, image output $40. Rough per-image costs:\n\n Low quality: $0.02\n Medium quality: $0.07\n High quality: $0.19 (OpenAI’s GPT-Image-1 API — Create Stunning Images for Your Apps!, Usage of gpt-image-1 is priced per token, with … - Hacker News)\n\nTo optimize:\n\n Choose smaller sizes (256x256).\n Generate fewer images (n:1).\n Use responseformat:\"url\" to reduce payload.\n Cache frequent prompts or images.\n\nPrevious\n\nLLM Agents\n\nNext\n\nLLM Speech"
  },
  {
    "title": "LLM Image Generation",
    "filename": "LLM_Image_Generation.md",
    "text": "Gemini Flash Experimental Image Generation and Editing APIs\n----------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn March 2025, Google introduced native image generation and editing capabilities in the Gemini 2.0 Flash Experimental model. You can now generate and iteratively edit images via a single REST endpoint (Experiment with Gemini 2.0 Flash native image generation, Generate images | Gemini API | Google AI for Developers).\n\n[](https://youtu.be/wgs4UYx6quY) (How to use Latest Gemini 2.0 Native Image Generation with API?)\n\nSimple image generation\n\nTo generate a basic image, send a POST request to the generateContent method:\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A serene landscape of rolling hills at sunrise, digital art\" }] }],\n    \"generationConfig\": { \"responseModalities\": [\"TEXT\", \"IMAGE\"] }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nReplace $GEMINIAPIKEY with your key. (Gemini API | Google AI for Developers)\n\nGeneration options\n\nYou can tweak the output with these generationConfig parameters:\n\n responseModalities: Modalities to return (TEXT, IMAGE).\n temperature (0.0–2.0): Controls randomness (default 1.0).\n topP (0.0–1.0): Nucleus sampling threshold.\n topK: Token selection cutoff.\n maxOutputTokens: Max tokens for text parts.\n stopSequences: Sequences to end generation.\n seed: For reproducibility.\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A futuristic city skyline at dusk, neon lights\" }] }],\n    \"generationConfig\": {\n      \"responseModalities\": [\"TEXT\", \"IMAGE\"],\n      \"temperature\": 0.7,\n      \"topP\": 0.9,\n      \"maxOutputTokens\": 1024\n    }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Generation Docs\n\nSimple image editing\n\nTo edit an existing image, include it in the contents as inlineData (base64-encoded):\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n      \"contents\": [{\n        \"parts\":[\n            {\"text\": \"Replace the background with a starry night sky\"},\n            {\"inlinedata\": {\"mimetype\":\"image/jpeg\", \"data\": \"'$(base64 -w 0 cat.jpg)'\"}}\n        ]\n      }],\n      \"generationConfig\": {\"responseModalities\": [\"TEXT\", \"IMAGE\"]}\n    }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Editing Docs\n\nEditing options\n\nEditing requests support:\n\n inlineData: Embed raw image bytes.\n fileData: Reference public URLs.\n All generationConfig options listed above.\n safetySettings: Per-request safety rules.\n Multi-turn edits by repeating contents in conversation history.\n\nCosts and optimization\n\nGemini 2.0 Flash Experimental uses token-based billing:\n\n Input (text/image/video): free tier, then $0.10 per 1M tokens.\n Output (text/image): free tier, then $0.40 per 1M tokens.\n Per-image flat cost for Pro models: $0.001315 /image (Gemini Developer API Pricing | Gemini API | Google AI for Developers, Solved: Re: Outdated Gemini Pro image pricing? By tile, or…).\n\nTo optimize:\n\n Use smaller image sizes by setting responseMimeType.\n Cache or reuse prompts with cachedContent.\n Lower candidateCount or temperature for fewer tokens.\n\nOpenAI gpt-image-1 Model for Image Generation and Editing\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nOpenAI’s GPT Image 1 (gpt-image-1) is a state-of-the-art multimodal model released on April 23, 2025, for high-fidelity image creation and editing.\n\n[](https://youtu.be/k-G71JZA75A)\n\nSimple image generation\n\nUse the Image Generations endpoint:\n\ncurl 'https://api.openai.com/v1/images/generations' \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"prompt\": \"A whimsical illustration of a cat playing chess\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }' > image.pngCopy to clipboardErrorCopied\n\n(Generate Image | OpenAI API - Postman)\n\nGeneration options\n\nAdjust these JSON parameters:\n\n model: gpt-image-1 (default).\n prompt: Text description.\n n: Number of images.\n size: 256x256, 512x512, or 1024x1024.\n responseformat: \"url\" (default) or \"b64json\".\n\n{\n  \"model\": \"gpt-image-1\",\n  \"prompt\": \"...\",\n  \"n\": 2,\n  \"size\": \"512x512\",\n  \"responseformat\": \"b64json\"\n}Copy to clipboardErrorCopied\n\nSimple image editing\n\nUse the Edits endpoint with an image and a mask:\n\ncurl https://api.openai.com/v1/images/edits \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"image\": \"data:image/png;base64,<BASE64IMAGE>\",\n    \"mask\": \"data:image/png;base64,<BASE64MASK>\",\n    \"prompt\": \"Add a rainbow in the sky above the mountains\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'Copy to clipboardErrorCopied\n\n(curl - What’s the correct URL to test OpenAI API? - Stack Overflow)\n\nEditing options\n\nEditing requests accept:\n\n image: Original image (base64 or URL).\n mask: PNG mask for inpainting.\n prompt: Instruction for the edit.\n n, size, responseformat as above.\n Optional user field for attribution.\n\nCosts and optimization\n\nGPT Image 1 pricing (per 1M tokens): text input $5, image input $10, image output $40. Rough per-image costs:\n\n Low quality: $0.02\n Medium quality: $0.07\n High quality: $0.19 (OpenAI’s GPT-Image-1 API — Create Stunning Images for Your Apps!, Usage of gpt-image-1 is priced per token, with … - Hacker News)\n\nTo optimize:\n\n Choose smaller sizes (256x256).\n Generate fewer images (n:1).\n Use responseformat:\"url\" to reduce payload.\n Cache frequent prompts or images.\n\nPrevious\n\nLLM Agents\n\nNext\n\nLLM Speech"
  },
  {
    "title": "LLM Image Generation",
    "filename": "LLM_Image_Generation.md",
    "text": "Gemini Flash Experimental Image Generation and Editing APIs\n----------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn March 2025, Google introduced native image generation and editing capabilities in the Gemini 2.0 Flash Experimental model. You can now generate and iteratively edit images via a single REST endpoint (Experiment with Gemini 2.0 Flash native image generation, Generate images | Gemini API | Google AI for Developers).\n\n[](https://youtu.be/wgs4UYx6quY) (How to use Latest Gemini 2.0 Native Image Generation with API?)\n\nSimple image generation\n\nTo generate a basic image, send a POST request to the generateContent method:\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A serene landscape of rolling hills at sunrise, digital art\" }] }],\n    \"generationConfig\": { \"responseModalities\": [\"TEXT\", \"IMAGE\"] }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nReplace $GEMINIAPIKEY with your key. (Gemini API | Google AI for Developers)\n\nGeneration options\n\nYou can tweak the output with these generationConfig parameters:\n\n responseModalities: Modalities to return (TEXT, IMAGE).\n temperature (0.0–2.0): Controls randomness (default 1.0).\n topP (0.0–1.0): Nucleus sampling threshold.\n topK: Token selection cutoff.\n maxOutputTokens: Max tokens for text parts.\n stopSequences: Sequences to end generation.\n seed: For reproducibility.\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A futuristic city skyline at dusk, neon lights\" }] }],\n    \"generationConfig\": {\n      \"responseModalities\": [\"TEXT\", \"IMAGE\"],\n      \"temperature\": 0.7,\n      \"topP\": 0.9,\n      \"maxOutputTokens\": 1024\n    }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Generation Docs\n\nSimple image editing\n\nTo edit an existing image, include it in the contents as inlineData (base64-encoded):\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n      \"contents\": [{\n        \"parts\":[\n            {\"text\": \"Replace the background with a starry night sky\"},\n            {\"inlinedata\": {\"mimetype\":\"image/jpeg\", \"data\": \"'$(base64 -w 0 cat.jpg)'\"}}\n        ]\n      }],\n      \"generationConfig\": {\"responseModalities\": [\"TEXT\", \"IMAGE\"]}\n    }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Editing Docs\n\nEditing options\n\nEditing requests support:\n\n inlineData: Embed raw image bytes.\n fileData: Reference public URLs.\n All generationConfig options listed above.\n safetySettings: Per-request safety rules.\n Multi-turn edits by repeating contents in conversation history.\n\nCosts and optimization\n\nGemini 2.0 Flash Experimental uses token-based billing:\n\n Input (text/image/video): free tier, then $0.10 per 1M tokens.\n Output (text/image): free tier, then $0.40 per 1M tokens.\n Per-image flat cost for Pro models: $0.001315 /image (Gemini Developer API Pricing | Gemini API | Google AI for Developers, Solved: Re: Outdated Gemini Pro image pricing? By tile, or…).\n\nTo optimize:\n\n Use smaller image sizes by setting responseMimeType.\n Cache or reuse prompts with cachedContent.\n Lower candidateCount or temperature for fewer tokens.\n\nOpenAI gpt-image-1 Model for Image Generation and Editing\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nOpenAI’s GPT Image 1 (gpt-image-1) is a state-of-the-art multimodal model released on April 23, 2025, for high-fidelity image creation and editing.\n\n[](https://youtu.be/k-G71JZA75A)\n\nSimple image generation\n\nUse the Image Generations endpoint:\n\ncurl 'https://api.openai.com/v1/images/generations' \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"prompt\": \"A whimsical illustration of a cat playing chess\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }' > image.pngCopy to clipboardErrorCopied\n\n(Generate Image | OpenAI API - Postman)\n\nGeneration options\n\nAdjust these JSON parameters:\n\n model: gpt-image-1 (default).\n prompt: Text description.\n n: Number of images.\n size: 256x256, 512x512, or 1024x1024.\n responseformat: \"url\" (default) or \"b64json\".\n\n{\n  \"model\": \"gpt-image-1\",\n  \"prompt\": \"...\",\n  \"n\": 2,\n  \"size\": \"512x512\",\n  \"responseformat\": \"b64json\"\n}Copy to clipboardErrorCopied\n\nSimple image editing\n\nUse the Edits endpoint with an image and a mask:\n\ncurl https://api.openai.com/v1/images/edits \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"image\": \"data:image/png;base64,<BASE64IMAGE>\",\n    \"mask\": \"data:image/png;base64,<BASE64MASK>\",\n    \"prompt\": \"Add a rainbow in the sky above the mountains\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'Copy to clipboardErrorCopied\n\n(curl - What’s the correct URL to test OpenAI API? - Stack Overflow)\n\nEditing options\n\nEditing requests accept:\n\n image: Original image (base64 or URL).\n mask: PNG mask for inpainting.\n prompt: Instruction for the edit.\n n, size, responseformat as above.\n Optional user field for attribution.\n\nCosts and optimization\n\nGPT Image 1 pricing (per 1M tokens): text input $5, image input $10, image output $40. Rough per-image costs:\n\n Low quality: $0.02\n Medium quality: $0.07\n High quality: $0.19 (OpenAI’s GPT-Image-1 API — Create Stunning Images for Your Apps!, Usage of gpt-image-1 is priced per token, with … - Hacker News)\n\nTo optimize:\n\n Choose smaller sizes (256x256).\n Generate fewer images (n:1).\n Use responseformat:\"url\" to reduce payload.\n Cache frequent prompts or images.\n\nPrevious\n\nLLM Agents\n\nNext\n\nLLM Speech"
  },
  {
    "title": "LLM Image Generation",
    "filename": "LLM_Image_Generation.md",
    "text": "Gemini Flash Experimental Image Generation and Editing APIs\n----------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn March 2025, Google introduced native image generation and editing capabilities in the Gemini 2.0 Flash Experimental model. You can now generate and iteratively edit images via a single REST endpoint (Experiment with Gemini 2.0 Flash native image generation, Generate images | Gemini API | Google AI for Developers).\n\n[](https://youtu.be/wgs4UYx6quY) (How to use Latest Gemini 2.0 Native Image Generation with API?)\n\nSimple image generation\n\nTo generate a basic image, send a POST request to the generateContent method:\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A serene landscape of rolling hills at sunrise, digital art\" }] }],\n    \"generationConfig\": { \"responseModalities\": [\"TEXT\", \"IMAGE\"] }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nReplace $GEMINIAPIKEY with your key. (Gemini API | Google AI for Developers)\n\nGeneration options\n\nYou can tweak the output with these generationConfig parameters:\n\n responseModalities: Modalities to return (TEXT, IMAGE).\n temperature (0.0–2.0): Controls randomness (default 1.0).\n topP (0.0–1.0): Nucleus sampling threshold.\n topK: Token selection cutoff.\n maxOutputTokens: Max tokens for text parts.\n stopSequences: Sequences to end generation.\n seed: For reproducibility.\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A futuristic city skyline at dusk, neon lights\" }] }],\n    \"generationConfig\": {\n      \"responseModalities\": [\"TEXT\", \"IMAGE\"],\n      \"temperature\": 0.7,\n      \"topP\": 0.9,\n      \"maxOutputTokens\": 1024\n    }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Generation Docs\n\nSimple image editing\n\nTo edit an existing image, include it in the contents as inlineData (base64-encoded):\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n      \"contents\": [{\n        \"parts\":[\n            {\"text\": \"Replace the background with a starry night sky\"},\n            {\"inlinedata\": {\"mimetype\":\"image/jpeg\", \"data\": \"'$(base64 -w 0 cat.jpg)'\"}}\n        ]\n      }],\n      \"generationConfig\": {\"responseModalities\": [\"TEXT\", \"IMAGE\"]}\n    }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Editing Docs\n\nEditing options\n\nEditing requests support:\n\n inlineData: Embed raw image bytes.\n fileData: Reference public URLs.\n All generationConfig options listed above.\n safetySettings: Per-request safety rules.\n Multi-turn edits by repeating contents in conversation history.\n\nCosts and optimization\n\nGemini 2.0 Flash Experimental uses token-based billing:\n\n Input (text/image/video): free tier, then $0.10 per 1M tokens.\n Output (text/image): free tier, then $0.40 per 1M tokens.\n Per-image flat cost for Pro models: $0.001315 /image (Gemini Developer API Pricing | Gemini API | Google AI for Developers, Solved: Re: Outdated Gemini Pro image pricing? By tile, or…).\n\nTo optimize:\n\n Use smaller image sizes by setting responseMimeType.\n Cache or reuse prompts with cachedContent.\n Lower candidateCount or temperature for fewer tokens.\n\nOpenAI gpt-image-1 Model for Image Generation and Editing\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nOpenAI’s GPT Image 1 (gpt-image-1) is a state-of-the-art multimodal model released on April 23, 2025, for high-fidelity image creation and editing.\n\n[](https://youtu.be/k-G71JZA75A)\n\nSimple image generation\n\nUse the Image Generations endpoint:\n\ncurl 'https://api.openai.com/v1/images/generations' \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"prompt\": \"A whimsical illustration of a cat playing chess\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }' > image.pngCopy to clipboardErrorCopied\n\n(Generate Image | OpenAI API - Postman)\n\nGeneration options\n\nAdjust these JSON parameters:\n\n model: gpt-image-1 (default).\n prompt: Text description.\n n: Number of images.\n size: 256x256, 512x512, or 1024x1024.\n responseformat: \"url\" (default) or \"b64json\".\n\n{\n  \"model\": \"gpt-image-1\",\n  \"prompt\": \"...\",\n  \"n\": 2,\n  \"size\": \"512x512\",\n  \"responseformat\": \"b64json\"\n}Copy to clipboardErrorCopied\n\nSimple image editing\n\nUse the Edits endpoint with an image and a mask:\n\ncurl https://api.openai.com/v1/images/edits \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"image\": \"data:image/png;base64,<BASE64IMAGE>\",\n    \"mask\": \"data:image/png;base64,<BASE64MASK>\",\n    \"prompt\": \"Add a rainbow in the sky above the mountains\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'Copy to clipboardErrorCopied\n\n(curl - What’s the correct URL to test OpenAI API? - Stack Overflow)\n\nEditing options\n\nEditing requests accept:\n\n image: Original image (base64 or URL).\n mask: PNG mask for inpainting.\n prompt: Instruction for the edit.\n n, size, responseformat as above.\n Optional user field for attribution.\n\nCosts and optimization\n\nGPT Image 1 pricing (per 1M tokens): text input $5, image input $10, image output $40. Rough per-image costs:\n\n Low quality: $0.02\n Medium quality: $0.07\n High quality: $0.19 (OpenAI’s GPT-Image-1 API — Create Stunning Images for Your Apps!, Usage of gpt-image-1 is priced per token, with … - Hacker News)\n\nTo optimize:\n\n Choose smaller sizes (256x256).\n Generate fewer images (n:1).\n Use responseformat:\"url\" to reduce payload.\n Cache frequent prompts or images.\n\nPrevious\n\nLLM Agents\n\nNext\n\nLLM Speech"
  },
  {
    "title": "LLM Image Generation",
    "filename": "LLM_Image_Generation.md",
    "text": "Gemini Flash Experimental Image Generation and Editing APIs\n----------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn March 2025, Google introduced native image generation and editing capabilities in the Gemini 2.0 Flash Experimental model. You can now generate and iteratively edit images via a single REST endpoint (Experiment with Gemini 2.0 Flash native image generation, Generate images | Gemini API | Google AI for Developers).\n\n[](https://youtu.be/wgs4UYx6quY) (How to use Latest Gemini 2.0 Native Image Generation with API?)\n\nSimple image generation\n\nTo generate a basic image, send a POST request to the generateContent method:\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A serene landscape of rolling hills at sunrise, digital art\" }] }],\n    \"generationConfig\": { \"responseModalities\": [\"TEXT\", \"IMAGE\"] }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nReplace $GEMINIAPIKEY with your key. (Gemini API | Google AI for Developers)\n\nGeneration options\n\nYou can tweak the output with these generationConfig parameters:\n\n responseModalities: Modalities to return (TEXT, IMAGE).\n temperature (0.0–2.0): Controls randomness (default 1.0).\n topP (0.0–1.0): Nucleus sampling threshold.\n topK: Token selection cutoff.\n maxOutputTokens: Max tokens for text parts.\n stopSequences: Sequences to end generation.\n seed: For reproducibility.\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A futuristic city skyline at dusk, neon lights\" }] }],\n    \"generationConfig\": {\n      \"responseModalities\": [\"TEXT\", \"IMAGE\"],\n      \"temperature\": 0.7,\n      \"topP\": 0.9,\n      \"maxOutputTokens\": 1024\n    }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Generation Docs\n\nSimple image editing\n\nTo edit an existing image, include it in the contents as inlineData (base64-encoded):\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n      \"contents\": [{\n        \"parts\":[\n            {\"text\": \"Replace the background with a starry night sky\"},\n            {\"inlinedata\": {\"mimetype\":\"image/jpeg\", \"data\": \"'$(base64 -w 0 cat.jpg)'\"}}\n        ]\n      }],\n      \"generationConfig\": {\"responseModalities\": [\"TEXT\", \"IMAGE\"]}\n    }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Editing Docs\n\nEditing options\n\nEditing requests support:\n\n inlineData: Embed raw image bytes.\n fileData: Reference public URLs.\n All generationConfig options listed above.\n safetySettings: Per-request safety rules.\n Multi-turn edits by repeating contents in conversation history.\n\nCosts and optimization\n\nGemini 2.0 Flash Experimental uses token-based billing:\n\n Input (text/image/video): free tier, then $0.10 per 1M tokens.\n Output (text/image): free tier, then $0.40 per 1M tokens.\n Per-image flat cost for Pro models: $0.001315 /image (Gemini Developer API Pricing | Gemini API | Google AI for Developers, Solved: Re: Outdated Gemini Pro image pricing? By tile, or…).\n\nTo optimize:\n\n Use smaller image sizes by setting responseMimeType.\n Cache or reuse prompts with cachedContent.\n Lower candidateCount or temperature for fewer tokens.\n\nOpenAI gpt-image-1 Model for Image Generation and Editing\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nOpenAI’s GPT Image 1 (gpt-image-1) is a state-of-the-art multimodal model released on April 23, 2025, for high-fidelity image creation and editing.\n\n[](https://youtu.be/k-G71JZA75A)\n\nSimple image generation\n\nUse the Image Generations endpoint:\n\ncurl 'https://api.openai.com/v1/images/generations' \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"prompt\": \"A whimsical illustration of a cat playing chess\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }' > image.pngCopy to clipboardErrorCopied\n\n(Generate Image | OpenAI API - Postman)\n\nGeneration options\n\nAdjust these JSON parameters:\n\n model: gpt-image-1 (default).\n prompt: Text description.\n n: Number of images.\n size: 256x256, 512x512, or 1024x1024.\n responseformat: \"url\" (default) or \"b64json\".\n\n{\n  \"model\": \"gpt-image-1\",\n  \"prompt\": \"...\",\n  \"n\": 2,\n  \"size\": \"512x512\",\n  \"responseformat\": \"b64json\"\n}Copy to clipboardErrorCopied\n\nSimple image editing\n\nUse the Edits endpoint with an image and a mask:\n\ncurl https://api.openai.com/v1/images/edits \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"image\": \"data:image/png;base64,<BASE64IMAGE>\",\n    \"mask\": \"data:image/png;base64,<BASE64MASK>\",\n    \"prompt\": \"Add a rainbow in the sky above the mountains\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'Copy to clipboardErrorCopied\n\n(curl - What’s the correct URL to test OpenAI API? - Stack Overflow)\n\nEditing options\n\nEditing requests accept:\n\n image: Original image (base64 or URL).\n mask: PNG mask for inpainting.\n prompt: Instruction for the edit.\n n, size, responseformat as above.\n Optional user field for attribution.\n\nCosts and optimization\n\nGPT Image 1 pricing (per 1M tokens): text input $5, image input $10, image output $40. Rough per-image costs:\n\n Low quality: $0.02\n Medium quality: $0.07\n High quality: $0.19 (OpenAI’s GPT-Image-1 API — Create Stunning Images for Your Apps!, Usage of gpt-image-1 is priced per token, with … - Hacker News)\n\nTo optimize:\n\n Choose smaller sizes (256x256).\n Generate fewer images (n:1).\n Use responseformat:\"url\" to reduce payload.\n Cache frequent prompts or images.\n\nPrevious\n\nLLM Agents\n\nNext\n\nLLM Speech"
  },
  {
    "title": "LLM Image Generation",
    "filename": "LLM_Image_Generation.md",
    "text": "Gemini Flash Experimental Image Generation and Editing APIs\n----------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn March 2025, Google introduced native image generation and editing capabilities in the Gemini 2.0 Flash Experimental model. You can now generate and iteratively edit images via a single REST endpoint (Experiment with Gemini 2.0 Flash native image generation, Generate images | Gemini API | Google AI for Developers).\n\n[](https://youtu.be/wgs4UYx6quY) (How to use Latest Gemini 2.0 Native Image Generation with API?)\n\nSimple image generation\n\nTo generate a basic image, send a POST request to the generateContent method:\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A serene landscape of rolling hills at sunrise, digital art\" }] }],\n    \"generationConfig\": { \"responseModalities\": [\"TEXT\", \"IMAGE\"] }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nReplace $GEMINIAPIKEY with your key. (Gemini API | Google AI for Developers)\n\nGeneration options\n\nYou can tweak the output with these generationConfig parameters:\n\n responseModalities: Modalities to return (TEXT, IMAGE).\n temperature (0.0–2.0): Controls randomness (default 1.0).\n topP (0.0–1.0): Nucleus sampling threshold.\n topK: Token selection cutoff.\n maxOutputTokens: Max tokens for text parts.\n stopSequences: Sequences to end generation.\n seed: For reproducibility.\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A futuristic city skyline at dusk, neon lights\" }] }],\n    \"generationConfig\": {\n      \"responseModalities\": [\"TEXT\", \"IMAGE\"],\n      \"temperature\": 0.7,\n      \"topP\": 0.9,\n      \"maxOutputTokens\": 1024\n    }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Generation Docs\n\nSimple image editing\n\nTo edit an existing image, include it in the contents as inlineData (base64-encoded):\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n      \"contents\": [{\n        \"parts\":[\n            {\"text\": \"Replace the background with a starry night sky\"},\n            {\"inlinedata\": {\"mimetype\":\"image/jpeg\", \"data\": \"'$(base64 -w 0 cat.jpg)'\"}}\n        ]\n      }],\n      \"generationConfig\": {\"responseModalities\": [\"TEXT\", \"IMAGE\"]}\n    }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Editing Docs\n\nEditing options\n\nEditing requests support:\n\n inlineData: Embed raw image bytes.\n fileData: Reference public URLs.\n All generationConfig options listed above.\n safetySettings: Per-request safety rules.\n Multi-turn edits by repeating contents in conversation history.\n\nCosts and optimization\n\nGemini 2.0 Flash Experimental uses token-based billing:\n\n Input (text/image/video): free tier, then $0.10 per 1M tokens.\n Output (text/image): free tier, then $0.40 per 1M tokens.\n Per-image flat cost for Pro models: $0.001315 /image (Gemini Developer API Pricing | Gemini API | Google AI for Developers, Solved: Re: Outdated Gemini Pro image pricing? By tile, or…).\n\nTo optimize:\n\n Use smaller image sizes by setting responseMimeType.\n Cache or reuse prompts with cachedContent.\n Lower candidateCount or temperature for fewer tokens.\n\nOpenAI gpt-image-1 Model for Image Generation and Editing\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nOpenAI’s GPT Image 1 (gpt-image-1) is a state-of-the-art multimodal model released on April 23, 2025, for high-fidelity image creation and editing.\n\n[](https://youtu.be/k-G71JZA75A)\n\nSimple image generation\n\nUse the Image Generations endpoint:\n\ncurl 'https://api.openai.com/v1/images/generations' \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"prompt\": \"A whimsical illustration of a cat playing chess\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }' > image.pngCopy to clipboardErrorCopied\n\n(Generate Image | OpenAI API - Postman)\n\nGeneration options\n\nAdjust these JSON parameters:\n\n model: gpt-image-1 (default).\n prompt: Text description.\n n: Number of images.\n size: 256x256, 512x512, or 1024x1024.\n responseformat: \"url\" (default) or \"b64json\".\n\n{\n  \"model\": \"gpt-image-1\",\n  \"prompt\": \"...\",\n  \"n\": 2,\n  \"size\": \"512x512\",\n  \"responseformat\": \"b64json\"\n}Copy to clipboardErrorCopied\n\nSimple image editing\n\nUse the Edits endpoint with an image and a mask:\n\ncurl https://api.openai.com/v1/images/edits \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"image\": \"data:image/png;base64,<BASE64IMAGE>\",\n    \"mask\": \"data:image/png;base64,<BASE64MASK>\",\n    \"prompt\": \"Add a rainbow in the sky above the mountains\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'Copy to clipboardErrorCopied\n\n(curl - What’s the correct URL to test OpenAI API? - Stack Overflow)\n\nEditing options\n\nEditing requests accept:\n\n image: Original image (base64 or URL).\n mask: PNG mask for inpainting.\n prompt: Instruction for the edit.\n n, size, responseformat as above.\n Optional user field for attribution.\n\nCosts and optimization\n\nGPT Image 1 pricing (per 1M tokens): text input $5, image input $10, image output $40. Rough per-image costs:\n\n Low quality: $0.02\n Medium quality: $0.07\n High quality: $0.19 (OpenAI’s GPT-Image-1 API — Create Stunning Images for Your Apps!, Usage of gpt-image-1 is priced per token, with … - Hacker News)\n\nTo optimize:\n\n Choose smaller sizes (256x256).\n Generate fewer images (n:1).\n Use responseformat:\"url\" to reduce payload.\n Cache frequent prompts or images.\n\nPrevious\n\nLLM Agents\n\nNext\n\nLLM Speech"
  },
  {
    "title": "Vector databases",
    "filename": "Vector_databases.md",
    "text": "Vector Databases\n----------------------------------------------------------\n\nVector databases are specialized databases that store and search vector embeddings efficiently.\n\nUse vector databases when your embeddings exceed available memory or when you want it run fast at scale. (This is important. If your code runs fast and fits in memory, you DON’T need a vector database. You can can use numpy for these tasks.)\n\nVector databases are an evolving space.\n\nThe first generation of vector databases were written in C and typically used an algorithm called HNSW (a way to approximately find the nearest neighbor). Some popular ones are:\n\n chroma 19,637 ⭐ May 2025\n qdrant 23,341 ⭐ May 2025\n lancedb 6,327 ⭐ May 2025\n faiss 34,684 ⭐ May 2025\n milvus 34,476 ⭐ May 2025\n weaviate 13,222 ⭐ May 2025\n\nIn addition, most relational databases now support vector search. For example:\n\n DuckDB: Supports vector search with vss.\n SQLite: Supports vector search with sqlite-vec.\n PostgreSQL: Supports vector search with pgvector.\n\nTake a look at this Vector DB Comparison.\n\nWatch this Vector Database Tutorial (3 min):\n\n[](https://youtu.be/klTvEwg3oJ4)\n\nChromaDB\n\nHere’s a minimal example using Chroma:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"chromadb\",\n\"sentence-transformers\",\n]\n///\n\nimport chromadb\nfrom chromadb.utils import embeddingfunctions\nfrom sentencetransformers import SentenceTransformer\n\nasync def setupvectordb():\n    \"\"\"Initialize Chroma DB with an embedding function.\"\"\"\n    sentencetransformeref = embeddingfunctions.SentenceTransformerEmbeddingFunction(\n        modelname=\"BAAI/bge-base-en-v1.5\"\n    )\n    client = chromadb.PersistentClient(path=\"./vectordb\")\n    collection = client.createcollection(\n        name=\"documents\",\n        embeddingfunction=sentencetransformeref\n    )\n    return collection\n\nasync def searchsimilar(collection, query: str, nresults: int = 3) -> list[dict]:\n    \"\"\"Search for documents similar to the query.\"\"\"\n    d = collection.query(querytexts=[query], nresults=nresults)\n    return [\n        {\"id\": id, \"text\": text, \"distance\": distance}\n        for id, text, distance in zip(d[\"ids\"][0], d[\"documents\"][0], d[\"distances\"][0])\n    ]\n\nasync def main():\n    collection = await setupvectordb()\n\n     Add some documents\n    collection.add(\n        documents=[\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"],\n        ids=[\"1\", \"2\", \"3\"]\n    )\n\n     Search\n    results = await searchsimilar(collection, \"fruit\")\n    print(results)\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nLanceDB\n\nHere’s the same example using LanceDB:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"lancedb\",\n\"pyarrow\",\n\"sentence-transformers\",\n]\n///\n\nimport lancedb\nimport pyarrow as pa\nfrom sentencetransformers import SentenceTransformer\n\nasync def setupvectordb():\n    \"\"\"Initialize LanceDB with an embedding function.\"\"\"\n    model = SentenceTransformer(\"BAAI/bge-base-en-v1.5\")\n    db = lancedb.connect(\"./vectordb\")\n\n     Create table with schema for documents\n    table = db.createtable(\n        \"documents\",\n        schema=pa.schema([\n            pa.field(\"id\", pa.string()),\n            pa.field(\"text\", pa.string()),\n            pa.field(\"vector\", pa.list(pa.float32(), listsize=768))\n        ])\n    )\n    return table, model\n\nasync def searchsimilar(table, model, query: str, nresults: int = 3) -> list[dict]:\n    \"\"\"Search for documents similar to the query.\"\"\"\n    queryembedding = model.encode(query)\n    results = table.search(queryembedding).limit(nresults).tolist()\n    return [{\"id\": r[\"id\"], \"text\": r[\"text\"], \"distance\": float(r[\"distance\"])} for r in results]\n\nasync def main():\n    table, model = await setupvectordb()\n\n     Add some documents\n    documents = [\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"]\n    embeddings = model.encode(documents)\n\n    table.add(data=[\n        {\"id\": str(i), \"text\": text, \"vector\": embedding}\n        for i, (text, embedding) in enumerate(zip(documents, embeddings), 1)\n    ])\n\n     Search\n    results = await searchsimilar(table, model, \"fruit\")\n    print(results)\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nDuckDB\n\nHere’s the same example using DuckDB:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"duckdb\",\n\"sentence-transformers\",\n]\n///\n\nimport duckdb\nfrom sentencetransformers import SentenceTransformer\n\nasync def setupvectordb() -> tuple[duckdb.DuckDBPyConnection, SentenceTransformer]:\n    \"\"\"Initialize DuckDB with VSS extension and embedding model.\"\"\"\n     Initialize model\n    model = SentenceTransformer(\"BAAI/bge-base-en-v1.5\")\n    vectordim = model.getsentenceembeddingdimension()\n\n     Setup DuckDB with VSS extension\n    conn = duckdb.connect(\":memory:\")\n    conn.installextension(\"vss\")\n    conn.loadextension(\"vss\")\n\n     Create table with vector column\n    conn.execute(f\"\"\"\n        CREATE TABLE documents (\n            id VARCHAR,\n            text VARCHAR,\n            vector FLOAT[{vectordim}]\n        )\n    \"\"\")\n\n     Create HNSW index for vector similarity search\n    conn.execute(\"CREATE INDEX vectoridx ON documents USING HNSW (vector)\")\n    return conn, model\n\nasync def searchsimilar(conn: duckdb.DuckDBPyConnection, model: SentenceTransformer,\n                        query: str, nresults: int = 3) -> list[dict]:\n    \"\"\"Search for documents similar to query using vector similarity.\"\"\"\n     Encode query to vector\n    queryvector = model.encode(query).tolist()\n\n     Search using HNSW index with explicit FLOAT[] cast\n    results = conn.execute(\"\"\"\n        SELECT id, text, arraydistance(vector, CAST(? AS FLOAT[768])) as distance\n        FROM documents\n        ORDER BY arraydistance(vector, CAST(? AS FLOAT[768]))\n        LIMIT ?\n    \"\"\", [queryvector, queryvector, nresults]).fetchall()\n\n    return [{\"id\": r[0], \"text\": r[1], \"distance\": float(r[2])} for r in results]\n\nasync def main():\n    conn, model = await setupvectordb()\n\n     Add sample documents\n    documents = [\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"]\n    embeddings = model.encode(documents).tolist()\n\n     Insert documents and vectors\n    conn.executemany(\"\"\"\n        INSERT INTO documents (id, text, vector)\n        VALUES (?, ?, ?)\n    \"\"\", [(str(i), text, embedding)\n          for i, (text, embedding) in enumerate(zip(documents, embeddings), 1)])\n\n     Search similar documents\n    results = await searchsimilar(conn, model, \"fruit\")\n    print(results)\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nPrevious\n\nTopic modeling\n\nNext\n\nRAG with the CLI)"
  },
  {
    "title": "Vector databases",
    "filename": "Vector_databases.md",
    "text": "Vector Databases\n----------------------------------------------------------\n\nVector databases are specialized databases that store and search vector embeddings efficiently.\n\nUse vector databases when your embeddings exceed available memory or when you want it run fast at scale. (This is important. If your code runs fast and fits in memory, you DON’T need a vector database. You can can use numpy for these tasks.)\n\nVector databases are an evolving space.\n\nThe first generation of vector databases were written in C and typically used an algorithm called HNSW (a way to approximately find the nearest neighbor). Some popular ones are:\n\n chroma 19,637 ⭐ May 2025\n qdrant 23,341 ⭐ May 2025\n lancedb 6,327 ⭐ May 2025\n faiss 34,684 ⭐ May 2025\n milvus 34,476 ⭐ May 2025\n weaviate 13,222 ⭐ May 2025\n\nIn addition, most relational databases now support vector search. For example:\n\n DuckDB: Supports vector search with vss.\n SQLite: Supports vector search with sqlite-vec.\n PostgreSQL: Supports vector search with pgvector.\n\nTake a look at this Vector DB Comparison.\n\nWatch this Vector Database Tutorial (3 min):\n\n[](https://youtu.be/klTvEwg3oJ4)\n\nChromaDB\n\nHere’s a minimal example using Chroma:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"chromadb\",\n\"sentence-transformers\",\n]\n///\n\nimport chromadb\nfrom chromadb.utils import embeddingfunctions\nfrom sentencetransformers import SentenceTransformer\n\nasync def setupvectordb():\n    \"\"\"Initialize Chroma DB with an embedding function.\"\"\"\n    sentencetransformeref = embeddingfunctions.SentenceTransformerEmbeddingFunction(\n        modelname=\"BAAI/bge-base-en-v1.5\"\n    )\n    client = chromadb.PersistentClient(path=\"./vectordb\")\n    collection = client.createcollection(\n        name=\"documents\",\n        embeddingfunction=sentencetransformeref\n    )\n    return collection\n\nasync def searchsimilar(collection, query: str, nresults: int = 3) -> list[dict]:\n    \"\"\"Search for documents similar to the query.\"\"\"\n    d = collection.query(querytexts=[query], nresults=nresults)\n    return [\n        {\"id\": id, \"text\": text, \"distance\": distance}\n        for id, text, distance in zip(d[\"ids\"][0], d[\"documents\"][0], d[\"distances\"][0])\n    ]\n\nasync def main():\n    collection = await setupvectordb()\n\n     Add some documents\n    collection.add(\n        documents=[\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"],\n        ids=[\"1\", \"2\", \"3\"]\n    )\n\n     Search\n    results = await searchsimilar(collection, \"fruit\")\n    print(results)\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nLanceDB\n\nHere’s the same example using LanceDB:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"lancedb\",\n\"pyarrow\",\n\"sentence-transformers\",\n]\n///\n\nimport lancedb\nimport pyarrow as pa\nfrom sentencetransformers import SentenceTransformer\n\nasync def setupvectordb():\n    \"\"\"Initialize LanceDB with an embedding function.\"\"\"\n    model = SentenceTransformer(\"BAAI/bge-base-en-v1.5\")\n    db = lancedb.connect(\"./vectordb\")\n\n     Create table with schema for documents\n    table = db.createtable(\n        \"documents\",\n        schema=pa.schema([\n            pa.field(\"id\", pa.string()),\n            pa.field(\"text\", pa.string()),\n            pa.field(\"vector\", pa.list(pa.float32(), listsize=768))\n        ])\n    )\n    return table, model\n\nasync def searchsimilar(table, model, query: str, nresults: int = 3) -> list[dict]:\n    \"\"\"Search for documents similar to the query.\"\"\"\n    queryembedding = model.encode(query)\n    results = table.search(queryembedding).limit(nresults).tolist()\n    return [{\"id\": r[\"id\"], \"text\": r[\"text\"], \"distance\": float(r[\"distance\"])} for r in results]\n\nasync def main():\n    table, model = await setupvectordb()\n\n     Add some documents\n    documents = [\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"]\n    embeddings = model.encode(documents)\n\n    table.add(data=[\n        {\"id\": str(i), \"text\": text, \"vector\": embedding}\n        for i, (text, embedding) in enumerate(zip(documents, embeddings), 1)\n    ])\n\n     Search\n    results = await searchsimilar(table, model, \"fruit\")\n    print(results)\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nDuckDB\n\nHere’s the same example using DuckDB:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"duckdb\",\n\"sentence-transformers\",\n]\n///\n\nimport duckdb\nfrom sentencetransformers import SentenceTransformer\n\nasync def setupvectordb() -> tuple[duckdb.DuckDBPyConnection, SentenceTransformer]:\n    \"\"\"Initialize DuckDB with VSS extension and embedding model.\"\"\"\n     Initialize model\n    model = SentenceTransformer(\"BAAI/bge-base-en-v1.5\")\n    vectordim = model.getsentenceembeddingdimension()\n\n     Setup DuckDB with VSS extension\n    conn = duckdb.connect(\":memory:\")\n    conn.installextension(\"vss\")\n    conn.loadextension(\"vss\")\n\n     Create table with vector column\n    conn.execute(f\"\"\"\n        CREATE TABLE documents (\n            id VARCHAR,\n            text VARCHAR,\n            vector FLOAT[{vectordim}]\n        )\n    \"\"\")\n\n     Create HNSW index for vector similarity search\n    conn.execute(\"CREATE INDEX vectoridx ON documents USING HNSW (vector)\")\n    return conn, model\n\nasync def searchsimilar(conn: duckdb.DuckDBPyConnection, model: SentenceTransformer,\n                        query: str, nresults: int = 3) -> list[dict]:\n    \"\"\"Search for documents similar to query using vector similarity.\"\"\"\n     Encode query to vector\n    queryvector = model.encode(query).tolist()\n\n     Search using HNSW index with explicit FLOAT[] cast\n    results = conn.execute(\"\"\"\n        SELECT id, text, arraydistance(vector, CAST(? AS FLOAT[768])) as distance\n        FROM documents\n        ORDER BY arraydistance(vector, CAST(? AS FLOAT[768]))\n        LIMIT ?\n    \"\"\", [queryvector, queryvector, nresults]).fetchall()\n\n    return [{\"id\": r[0], \"text\": r[1], \"distance\": float(r[2])} for r in results]\n\nasync def main():\n    conn, model = await setupvectordb()\n\n     Add sample documents\n    documents = [\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"]\n    embeddings = model.encode(documents).tolist()\n\n     Insert documents and vectors\n    conn.executemany(\"\"\"\n        INSERT INTO documents (id, text, vector)\n        VALUES (?, ?, ?)\n    \"\"\", [(str(i), text, embedding)\n          for i, (text, embedding) in enumerate(zip(documents, embeddings), 1)])\n\n     Search similar documents\n    results = await searchsimilar(conn, model, \"fruit\")\n    print(results)\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nPrevious\n\nTopic modeling\n\nNext\n\nRAG with the CLI)"
  },
  {
    "title": "Vector databases",
    "filename": "Vector_databases.md",
    "text": "Vector Databases\n----------------------------------------------------------\n\nVector databases are specialized databases that store and search vector embeddings efficiently.\n\nUse vector databases when your embeddings exceed available memory or when you want it run fast at scale. (This is important. If your code runs fast and fits in memory, you DON’T need a vector database. You can can use numpy for these tasks.)\n\nVector databases are an evolving space.\n\nThe first generation of vector databases were written in C and typically used an algorithm called HNSW (a way to approximately find the nearest neighbor). Some popular ones are:\n\n chroma 19,637 ⭐ May 2025\n qdrant 23,341 ⭐ May 2025\n lancedb 6,327 ⭐ May 2025\n faiss 34,684 ⭐ May 2025\n milvus 34,476 ⭐ May 2025\n weaviate 13,222 ⭐ May 2025\n\nIn addition, most relational databases now support vector search. For example:\n\n DuckDB: Supports vector search with vss.\n SQLite: Supports vector search with sqlite-vec.\n PostgreSQL: Supports vector search with pgvector.\n\nTake a look at this Vector DB Comparison.\n\nWatch this Vector Database Tutorial (3 min):\n\n[](https://youtu.be/klTvEwg3oJ4)\n\nChromaDB\n\nHere’s a minimal example using Chroma:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"chromadb\",\n\"sentence-transformers\",\n]\n///\n\nimport chromadb\nfrom chromadb.utils import embeddingfunctions\nfrom sentencetransformers import SentenceTransformer\n\nasync def setupvectordb():\n    \"\"\"Initialize Chroma DB with an embedding function.\"\"\"\n    sentencetransformeref = embeddingfunctions.SentenceTransformerEmbeddingFunction(\n        modelname=\"BAAI/bge-base-en-v1.5\"\n    )\n    client = chromadb.PersistentClient(path=\"./vectordb\")\n    collection = client.createcollection(\n        name=\"documents\",\n        embeddingfunction=sentencetransformeref\n    )\n    return collection\n\nasync def searchsimilar(collection, query: str, nresults: int = 3) -> list[dict]:\n    \"\"\"Search for documents similar to the query.\"\"\"\n    d = collection.query(querytexts=[query], nresults=nresults)\n    return [\n        {\"id\": id, \"text\": text, \"distance\": distance}\n        for id, text, distance in zip(d[\"ids\"][0], d[\"documents\"][0], d[\"distances\"][0])\n    ]\n\nasync def main():\n    collection = await setupvectordb()\n\n     Add some documents\n    collection.add(\n        documents=[\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"],\n        ids=[\"1\", \"2\", \"3\"]\n    )\n\n     Search\n    results = await searchsimilar(collection, \"fruit\")\n    print(results)\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nLanceDB\n\nHere’s the same example using LanceDB:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"lancedb\",\n\"pyarrow\",\n\"sentence-transformers\",\n]\n///\n\nimport lancedb\nimport pyarrow as pa\nfrom sentencetransformers import SentenceTransformer\n\nasync def setupvectordb():\n    \"\"\"Initialize LanceDB with an embedding function.\"\"\"\n    model = SentenceTransformer(\"BAAI/bge-base-en-v1.5\")\n    db = lancedb.connect(\"./vectordb\")\n\n     Create table with schema for documents\n    table = db.createtable(\n        \"documents\",\n        schema=pa.schema([\n            pa.field(\"id\", pa.string()),\n            pa.field(\"text\", pa.string()),\n            pa.field(\"vector\", pa.list(pa.float32(), listsize=768))\n        ])\n    )\n    return table, model\n\nasync def searchsimilar(table, model, query: str, nresults: int = 3) -> list[dict]:\n    \"\"\"Search for documents similar to the query.\"\"\"\n    queryembedding = model.encode(query)\n    results = table.search(queryembedding).limit(nresults).tolist()\n    return [{\"id\": r[\"id\"], \"text\": r[\"text\"], \"distance\": float(r[\"distance\"])} for r in results]\n\nasync def main():\n    table, model = await setupvectordb()\n\n     Add some documents\n    documents = [\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"]\n    embeddings = model.encode(documents)\n\n    table.add(data=[\n        {\"id\": str(i), \"text\": text, \"vector\": embedding}\n        for i, (text, embedding) in enumerate(zip(documents, embeddings), 1)\n    ])\n\n     Search\n    results = await searchsimilar(table, model, \"fruit\")\n    print(results)\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nDuckDB\n\nHere’s the same example using DuckDB:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"duckdb\",\n\"sentence-transformers\",\n]\n///\n\nimport duckdb\nfrom sentencetransformers import SentenceTransformer\n\nasync def setupvectordb() -> tuple[duckdb.DuckDBPyConnection, SentenceTransformer]:\n    \"\"\"Initialize DuckDB with VSS extension and embedding model.\"\"\"\n     Initialize model\n    model = SentenceTransformer(\"BAAI/bge-base-en-v1.5\")\n    vectordim = model.getsentenceembeddingdimension()\n\n     Setup DuckDB with VSS extension\n    conn = duckdb.connect(\":memory:\")\n    conn.installextension(\"vss\")\n    conn.loadextension(\"vss\")\n\n     Create table with vector column\n    conn.execute(f\"\"\"\n        CREATE TABLE documents (\n            id VARCHAR,\n            text VARCHAR,\n            vector FLOAT[{vectordim}]\n        )\n    \"\"\")\n\n     Create HNSW index for vector similarity search\n    conn.execute(\"CREATE INDEX vectoridx ON documents USING HNSW (vector)\")\n    return conn, model\n\nasync def searchsimilar(conn: duckdb.DuckDBPyConnection, model: SentenceTransformer,\n                        query: str, nresults: int = 3) -> list[dict]:\n    \"\"\"Search for documents similar to query using vector similarity.\"\"\"\n     Encode query to vector\n    queryvector = model.encode(query).tolist()\n\n     Search using HNSW index with explicit FLOAT[] cast\n    results = conn.execute(\"\"\"\n        SELECT id, text, arraydistance(vector, CAST(? AS FLOAT[768])) as distance\n        FROM documents\n        ORDER BY arraydistance(vector, CAST(? AS FLOAT[768]))\n        LIMIT ?\n    \"\"\", [queryvector, queryvector, nresults]).fetchall()\n\n    return [{\"id\": r[0], \"text\": r[1], \"distance\": float(r[2])} for r in results]\n\nasync def main():\n    conn, model = await setupvectordb()\n\n     Add sample documents\n    documents = [\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"]\n    embeddings = model.encode(documents).tolist()\n\n     Insert documents and vectors\n    conn.executemany(\"\"\"\n        INSERT INTO documents (id, text, vector)\n        VALUES (?, ?, ?)\n    \"\"\", [(str(i), text, embedding)\n          for i, (text, embedding) in enumerate(zip(documents, embeddings), 1)])\n\n     Search similar documents\n    results = await searchsimilar(conn, model, \"fruit\")\n    print(results)\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nPrevious\n\nTopic modeling\n\nNext\n\nRAG with the CLI)"
  },
  {
    "title": "Vector databases",
    "filename": "Vector_databases.md",
    "text": "Vector Databases\n----------------------------------------------------------\n\nVector databases are specialized databases that store and search vector embeddings efficiently.\n\nUse vector databases when your embeddings exceed available memory or when you want it run fast at scale. (This is important. If your code runs fast and fits in memory, you DON’T need a vector database. You can can use numpy for these tasks.)\n\nVector databases are an evolving space.\n\nThe first generation of vector databases were written in C and typically used an algorithm called HNSW (a way to approximately find the nearest neighbor). Some popular ones are:\n\n chroma 19,637 ⭐ May 2025\n qdrant 23,341 ⭐ May 2025\n lancedb 6,327 ⭐ May 2025\n faiss 34,684 ⭐ May 2025\n milvus 34,476 ⭐ May 2025\n weaviate 13,222 ⭐ May 2025\n\nIn addition, most relational databases now support vector search. For example:\n\n DuckDB: Supports vector search with vss.\n SQLite: Supports vector search with sqlite-vec.\n PostgreSQL: Supports vector search with pgvector.\n\nTake a look at this Vector DB Comparison.\n\nWatch this Vector Database Tutorial (3 min):\n\n[](https://youtu.be/klTvEwg3oJ4)\n\nChromaDB\n\nHere’s a minimal example using Chroma:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"chromadb\",\n\"sentence-transformers\",\n]\n///\n\nimport chromadb\nfrom chromadb.utils import embeddingfunctions\nfrom sentencetransformers import SentenceTransformer\n\nasync def setupvectordb():\n    \"\"\"Initialize Chroma DB with an embedding function.\"\"\"\n    sentencetransformeref = embeddingfunctions.SentenceTransformerEmbeddingFunction(\n        modelname=\"BAAI/bge-base-en-v1.5\"\n    )\n    client = chromadb.PersistentClient(path=\"./vectordb\")\n    collection = client.createcollection(\n        name=\"documents\",\n        embeddingfunction=sentencetransformeref\n    )\n    return collection\n\nasync def searchsimilar(collection, query: str, nresults: int = 3) -> list[dict]:\n    \"\"\"Search for documents similar to the query.\"\"\"\n    d = collection.query(querytexts=[query], nresults=nresults)\n    return [\n        {\"id\": id, \"text\": text, \"distance\": distance}\n        for id, text, distance in zip(d[\"ids\"][0], d[\"documents\"][0], d[\"distances\"][0])\n    ]\n\nasync def main():\n    collection = await setupvectordb()\n\n     Add some documents\n    collection.add(\n        documents=[\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"],\n        ids=[\"1\", \"2\", \"3\"]\n    )\n\n     Search\n    results = await searchsimilar(collection, \"fruit\")\n    print(results)\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nLanceDB\n\nHere’s the same example using LanceDB:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"lancedb\",\n\"pyarrow\",\n\"sentence-transformers\",\n]\n///\n\nimport lancedb\nimport pyarrow as pa\nfrom sentencetransformers import SentenceTransformer\n\nasync def setupvectordb():\n    \"\"\"Initialize LanceDB with an embedding function.\"\"\"\n    model = SentenceTransformer(\"BAAI/bge-base-en-v1.5\")\n    db = lancedb.connect(\"./vectordb\")\n\n     Create table with schema for documents\n    table = db.createtable(\n        \"documents\",\n        schema=pa.schema([\n            pa.field(\"id\", pa.string()),\n            pa.field(\"text\", pa.string()),\n            pa.field(\"vector\", pa.list(pa.float32(), listsize=768))\n        ])\n    )\n    return table, model\n\nasync def searchsimilar(table, model, query: str, nresults: int = 3) -> list[dict]:\n    \"\"\"Search for documents similar to the query.\"\"\"\n    queryembedding = model.encode(query)\n    results = table.search(queryembedding).limit(nresults).tolist()\n    return [{\"id\": r[\"id\"], \"text\": r[\"text\"], \"distance\": float(r[\"distance\"])} for r in results]\n\nasync def main():\n    table, model = await setupvectordb()\n\n     Add some documents\n    documents = [\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"]\n    embeddings = model.encode(documents)\n\n    table.add(data=[\n        {\"id\": str(i), \"text\": text, \"vector\": embedding}\n        for i, (text, embedding) in enumerate(zip(documents, embeddings), 1)\n    ])\n\n     Search\n    results = await searchsimilar(table, model, \"fruit\")\n    print(results)\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nDuckDB\n\nHere’s the same example using DuckDB:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"duckdb\",\n\"sentence-transformers\",\n]\n///\n\nimport duckdb\nfrom sentencetransformers import SentenceTransformer\n\nasync def setupvectordb() -> tuple[duckdb.DuckDBPyConnection, SentenceTransformer]:\n    \"\"\"Initialize DuckDB with VSS extension and embedding model.\"\"\"\n     Initialize model\n    model = SentenceTransformer(\"BAAI/bge-base-en-v1.5\")\n    vectordim = model.getsentenceembeddingdimension()\n\n     Setup DuckDB with VSS extension\n    conn = duckdb.connect(\":memory:\")\n    conn.installextension(\"vss\")\n    conn.loadextension(\"vss\")\n\n     Create table with vector column\n    conn.execute(f\"\"\"\n        CREATE TABLE documents (\n            id VARCHAR,\n            text VARCHAR,\n            vector FLOAT[{vectordim}]\n        )\n    \"\"\")\n\n     Create HNSW index for vector similarity search\n    conn.execute(\"CREATE INDEX vectoridx ON documents USING HNSW (vector)\")\n    return conn, model\n\nasync def searchsimilar(conn: duckdb.DuckDBPyConnection, model: SentenceTransformer,\n                        query: str, nresults: int = 3) -> list[dict]:\n    \"\"\"Search for documents similar to query using vector similarity.\"\"\"\n     Encode query to vector\n    queryvector = model.encode(query).tolist()\n\n     Search using HNSW index with explicit FLOAT[] cast\n    results = conn.execute(\"\"\"\n        SELECT id, text, arraydistance(vector, CAST(? AS FLOAT[768])) as distance\n        FROM documents\n        ORDER BY arraydistance(vector, CAST(? AS FLOAT[768]))\n        LIMIT ?\n    \"\"\", [queryvector, queryvector, nresults]).fetchall()\n\n    return [{\"id\": r[0], \"text\": r[1], \"distance\": float(r[2])} for r in results]\n\nasync def main():\n    conn, model = await setupvectordb()\n\n     Add sample documents\n    documents = [\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"]\n    embeddings = model.encode(documents).tolist()\n\n     Insert documents and vectors\n    conn.executemany(\"\"\"\n        INSERT INTO documents (id, text, vector)\n        VALUES (?, ?, ?)\n    \"\"\", [(str(i), text, embedding)\n          for i, (text, embedding) in enumerate(zip(documents, embeddings), 1)])\n\n     Search similar documents\n    results = await searchsimilar(conn, model, \"fruit\")\n    print(results)\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nPrevious\n\nTopic modeling\n\nNext\n\nRAG with the CLI)"
  },
  {
    "title": "Geospatial Analysis with Python",
    "filename": "Geospatial_Analysis_with_Python.md",
    "text": "Geospatial Analysis with Python\n-------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video\n\nPrevious\n\nGeospatial Analysis with Excel\n\nNext\n\nGeospatial Analysis with QGIS"
  },
  {
    "title": "1. Development Tools",
    "filename": "1._Development_Tools.md",
    "text": "Development Tools\n=============================================================\n\nNOTE: The tools in this module are PRE-REQUISITES for the course. You would have used most of these before. If most of this is new to you, please take this course later.\n\nSome tools are fundamental to data science because they are industry standards and widely used by data science professionals. Mastering these tools will align you with current best practices and making you more adaptable in a fast-evolving industry.\n\nThe tools we cover here are not just popular, they’re the core technology behind most of today’s data science and software development.\n\nPrevious\n\nTools in Data Science\n\nNext\n\nEditor: VS Code"
  },
  {
    "title": "1. Development Tools",
    "filename": "1._Development_Tools.md",
    "text": "Development Tools\n=============================================================\n\nNOTE: The tools in this module are PRE-REQUISITES for the course. You would have used most of these before. If most of this is new to you, please take this course later.\n\nSome tools are fundamental to data science because they are industry standards and widely used by data science professionals. Mastering these tools will align you with current best practices and making you more adaptable in a fast-evolving industry.\n\nThe tools we cover here are not just popular, they’re the core technology behind most of today’s data science and software development.\n\nPrevious\n\nTools in Data Science\n\nNext\n\nEditor: VS Code"
  },
  {
    "title": "Web Automation with Playwright",
    "filename": "Web_Automation_with_Playwright.md",
    "text": "Web Scraping with Playwright in Python\n--------------------------------------------------------------------------------------------------------------------\n\nScrape JavaScript‑heavy sites effortlessly with Playwright.\n\n[](https://youtu.be/biFzRHk4xpY) (youtube.com)\n\nPlaywright offers:\n\n JavaScript rendering: Executes page scripts so you scrape only after content appears. (playwright.dev)\n Headless & headed modes: Run without UI or in a real browser for debugging. (playwright.dev)\n Auto‑waiting & retry: Built‑in locators reduce flakiness. (playwright.dev)\n Multi‑browser support: Chromium, Firefox, WebKit—all from one API. (playwright.dev)\n\nExample: Scraping a JS‑Rendered Site\n\nWe’ll scrape Quotes to Scrape (JS)—a site that loads quotes via JavaScript, so a simple requests call gets only an empty shell (quotes.toscrape.com). Playwright runs the scripts and gives us the real content:\n\n/// script\ndependencies = [\"playwright\"]\n///\n\nfrom playwright.syncapi import syncplaywright\n\ndef scrapequotes():\n    with syncplaywright() as p:\n         Channel can be \"chrome\", \"msedge\", \"chrome-beta\", \"msedge-beta\" or \"msedge-dev\".\n        browser = p.chromium.launch(headless=True, channel=\"chrome\")\n        page = browser.newpage()\n        page.goto(\"https://quotes.toscrape.com/js/\")\n        quotes = page.queryselectorall(\".quote\")\n        for q in quotes:\n            text = q.queryselector(\".text\").innertext()\n            author = q.queryselector(\".author\").innertext()\n            print(f\"{text} — {author}\")\n        browser.close()\n\nif name == \"main\":\n    scrapequotes()Copy to clipboardErrorCopied\n\nSave as scraper.py and run:\n\nuv run scraper.pyCopy to clipboardErrorCopied\n\nYou’ll see each quote plus author printed—fetched only after the JS executes.\n\nPrevious\n\nLLM Video Screen-Scraping\n\nNext\n\nScheduled Scraping with GitHub Actions"
  },
  {
    "title": "Web Automation with Playwright",
    "filename": "Web_Automation_with_Playwright.md",
    "text": "Web Scraping with Playwright in Python\n--------------------------------------------------------------------------------------------------------------------\n\nScrape JavaScript‑heavy sites effortlessly with Playwright.\n\n[](https://youtu.be/biFzRHk4xpY) (youtube.com)\n\nPlaywright offers:\n\n JavaScript rendering: Executes page scripts so you scrape only after content appears. (playwright.dev)\n Headless & headed modes: Run without UI or in a real browser for debugging. (playwright.dev)\n Auto‑waiting & retry: Built‑in locators reduce flakiness. (playwright.dev)\n Multi‑browser support: Chromium, Firefox, WebKit—all from one API. (playwright.dev)\n\nExample: Scraping a JS‑Rendered Site\n\nWe’ll scrape Quotes to Scrape (JS)—a site that loads quotes via JavaScript, so a simple requests call gets only an empty shell (quotes.toscrape.com). Playwright runs the scripts and gives us the real content:\n\n/// script\ndependencies = [\"playwright\"]\n///\n\nfrom playwright.syncapi import syncplaywright\n\ndef scrapequotes():\n    with syncplaywright() as p:\n         Channel can be \"chrome\", \"msedge\", \"chrome-beta\", \"msedge-beta\" or \"msedge-dev\".\n        browser = p.chromium.launch(headless=True, channel=\"chrome\")\n        page = browser.newpage()\n        page.goto(\"https://quotes.toscrape.com/js/\")\n        quotes = page.queryselectorall(\".quote\")\n        for q in quotes:\n            text = q.queryselector(\".text\").innertext()\n            author = q.queryselector(\".author\").innertext()\n            print(f\"{text} — {author}\")\n        browser.close()\n\nif name == \"main\":\n    scrapequotes()Copy to clipboardErrorCopied\n\nSave as scraper.py and run:\n\nuv run scraper.pyCopy to clipboardErrorCopied\n\nYou’ll see each quote plus author printed—fetched only after the JS executes.\n\nPrevious\n\nLLM Video Screen-Scraping\n\nNext\n\nScheduled Scraping with GitHub Actions"
  },
  {
    "title": "Forecasting with Excel",
    "filename": "Forecasting_with_Excel.md",
    "text": "Forecasting with Excel\n----------------------------------------------------------------------------\n\n[](https://youtu.be/QrTimmxwZw4)\n\nHere are links used in the video:\n\n FORECAST reference\n FORECAST.ETS reference\n Height-weight dataset from Kaggle\n Traffic dataset from Kaggle\n\nPrevious\n\nRegression with Excel\n\nNext\n\nOutlier Detection with Excel"
  },
  {
    "title": "Forecasting with Excel",
    "filename": "Forecasting_with_Excel.md",
    "text": "Forecasting with Excel\n----------------------------------------------------------------------------\n\n[](https://youtu.be/QrTimmxwZw4)\n\nHere are links used in the video:\n\n FORECAST reference\n FORECAST.ETS reference\n Height-weight dataset from Kaggle\n Traffic dataset from Kaggle\n\nPrevious\n\nRegression with Excel\n\nNext\n\nOutlier Detection with Excel"
  },
  {
    "title": "Regression with Excel",
    "filename": "Regression_with_Excel.md",
    "text": "Regression with Excel\n-------------------------------------------------------------------------\n\n[](https://youtu.be/AERQBMIHwXA)\n\nYou’ll learn to perform regression analysis using Excel, covering:\n\n Data Preparation: Understanding the cleaned dataset and necessary columns for analysis.\n Enabling the Tool: How to enable the Data Analysis Tool Pack in Excel.\n Types of Regression: Differences between simple and multiple linear regression.\n Setting Up Regression: Steps to input dependent (new deaths) and independent variables (new cases, new tests, new vaccinations, stringency index) for the analysis.\n Interpreting Output: Reading the regression output, focusing on adjusted R-squared, significance value (F-test), and P-values.\n Coefficient Interpretation: Understanding the impact of each independent variable on the dependent variable, including scaling factors (per 1000 units).\n Model Evaluation: Evaluating the model based on significance values and understanding the implications of unexpected results (e.g., stringency index).\n Further Analysis: Recognizing the need for additional analysis when encountering unexpected or inconclusive results.\n\nHere are the links used in the video:\n\n Understand regression\n COVID-19 vaccinations - Regression Excel file\n COVID-19 vaccinations - Regression Model 2 Excel file\n\nPrevious\n\nCorrelation with Excel\n\nNext\n\nForecasting with Excel"
  },
  {
    "title": "Regression with Excel",
    "filename": "Regression_with_Excel.md",
    "text": "Regression with Excel\n-------------------------------------------------------------------------\n\n[](https://youtu.be/AERQBMIHwXA)\n\nYou’ll learn to perform regression analysis using Excel, covering:\n\n Data Preparation: Understanding the cleaned dataset and necessary columns for analysis.\n Enabling the Tool: How to enable the Data Analysis Tool Pack in Excel.\n Types of Regression: Differences between simple and multiple linear regression.\n Setting Up Regression: Steps to input dependent (new deaths) and independent variables (new cases, new tests, new vaccinations, stringency index) for the analysis.\n Interpreting Output: Reading the regression output, focusing on adjusted R-squared, significance value (F-test), and P-values.\n Coefficient Interpretation: Understanding the impact of each independent variable on the dependent variable, including scaling factors (per 1000 units).\n Model Evaluation: Evaluating the model based on significance values and understanding the implications of unexpected results (e.g., stringency index).\n Further Analysis: Recognizing the need for additional analysis when encountering unexpected or inconclusive results.\n\nHere are the links used in the video:\n\n Understand regression\n COVID-19 vaccinations - Regression Excel file\n COVID-19 vaccinations - Regression Model 2 Excel file\n\nPrevious\n\nCorrelation with Excel\n\nNext\n\nForecasting with Excel"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "LLM Speech",
    "filename": "LLM_Speech.md",
    "text": "OpenAI TTS-1 for Text-to-Speech Generation\n--------------------------------------------------------------------------------------------------------\n\nOpenAI’s Text-to-Speech API (TTS-1) converts text into natural-sounding speech using state-of-the-art neural models. Released in March 2025, it offers multiple voices and control over speaking style and speed.\n\n[](https://youtu.be/lXb0L16ISAc)\n\nSimple speech generation\n\nTo generate speech from text, send a POST request to the speech endpoint:\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1\",\n    \"input\": \"Hello! This is a test of the OpenAI text to speech API.\",\n    \"voice\": \"alloy\"\n  }' --output speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nControl the output with these parameters:\n\n model: tts-1 (standard) or tts-1-hd (higher quality)\n input: Text to convert (max 4096 characters)\n voice: alloy, echo, fable, onyx, nova, or shimmer\n responseformat: mp3 (default), opus, aac, or flac\n speed: 0.25 to 4.0 (default 1.0)\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1-hd\",\n    \"input\": \"Welcome to our podcast! Today we will be discussing artificial intelligence.\",\n    \"voice\": \"nova\",\n    \"responseformat\": \"mp3\",\n    \"speed\": 1.2\n  }' --output podcastintro.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing per 1,000 characters:\n\n tts-1: $0.015\n tts-1-hd: $0.030\n\nTo optimize costs:\n\n Use tts-1 for drafts, tts-1-hd for final versions\n Batch process text in chunks\n Cache frequently used phrases\n Choose lower quality formats for testing\n\nGoogle Gemini Speech Studio for Text-to-Speech\n----------------------------------------------------------------------------------------------------------------\n\nGoogle’s Gemini Speech Studio offers advanced text-to-speech capabilities with support for multiple languages, voices, and speaking styles.\n\n[](https://youtu.be/Rx8PmBo9vfI)\n\nFor this, you need a GOOGLEAPIKEY. You can:\n\n1. Go to the Google Cloud Console: <https://console.cloud.google.com/apis/library/texttospeech.googleapis.com>, select or create the project you want and click Enable.\n2. Create an API key. In the Console, navigate to APIs & Services → Credentials and click + Create Credentials → API key. Copy the generated key (it’ll look like AIza…).\n\nSimple speech generation\n\nGenerate speech using the Gemini API:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": { \"text\": \"Hello, welcome to Gemini Speech Studio!\" },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nCustomize synthesis with these parameters:\n\n voice:\n  + languageCode: Language code (e.g., “en-US”, “es-ES”)\n  + name: Voice model name\n  + ssmlGender: “NEUTRAL”, “MALE”, or “FEMALE”\n audioConfig:\n  + audioEncoding: “MP3”, “WAV”, “OGG\\OPUS”\n  + speakingRate: 0.25 to 4.0\n  + pitch: -20.0 to 20.0\n  + volumeGainDb: Volume adjustment\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"text\": \"This is a demonstration of advanced speech settings.\"\n    },\n    \"voice\": {\n      \"languageCode\": \"en-US\",\n      \"name\": \"en-US-Neural2-D\"\n    },\n    \"audioConfig\": {\n      \"audioEncoding\": \"MP3\",\n      \"speakingRate\": 1.2,\n      \"pitch\": 2.0,\n      \"volumeGainDb\": 1.0\n    }\n  }' | jq -r .audioContent | base64 --decode > gemini-options.mp3Copy to clipboardErrorCopied\n\nSSML support\n\nBoth APIs support Speech Synthesis Markup Language (SSML) for fine-grained control:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"ssml\": \"<speak>Hello <break time=\\\"1s\\\"/> This text has a pause and <emphasis level=\\\"strong\\\">emphasized words</emphasis>.</speak>\"\n    },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-ssml.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing (per character):\n\n Standard voices: $0.000004\n Neural voices: $0.000016\n Neural2 voices: $0.000024\n\nTo optimize:\n\n Use standard voices for development\n Cache common phrases\n Batch process where possible\n Choose appropriate audio quality\n\nPython implementation\n\nHere’s a simple Python wrapper for both APIs:\n\nimport requests\nimport base64\nimport os\n\nopenaikey = os.getenv(\"OPENAIAPIKEY\")\ngooglekey = os.getenv(\"GOOGLEAPIKEY\")\n\ndef generateopenaispeech(text, voice=\"alloy\", model=\"tts-1\"):\n    response = requests.post(\n        \"https://api.openai.com/v1/audio/speech\",\n        headers={\"Authorization\": f\"Bearer {openaikey}\"},\n        json={\"model\": model, \"input\": text, \"voice\": voice}\n    )\n    return response.content\n\ndef generategeminispeech(text, voicename=\"en-US-Neural2-A\"):\n    response = requests.post(\n        f\"https://texttospeech.googleapis.com/v1/text:synthesize?key={googlekey}\",\n        json={\n            \"input\": {\"text\": text},\n            \"voice\": {\"languageCode\": \"en-US\", \"name\": voicename},\n            \"audioConfig\": {\"audioEncoding\": \"MP3\"}\n        }\n    )\n    return base64.b64decode(response.json()[\"audioContent\"])\n\nif name == \"main\":\n    with open(\"openaispeech.mp3\", \"wb\") as f:\n        f.write(generateopenaispeech(\"Hello from OpenAI's text to speech API!\"))\n    with open(\"geminispeech.mp3\", \"wb\") as f:\n        f.write(generategeminispeech(\"Hello from Google's Gemini Speech Studio!\"))Copy to clipboardErrorCopied\n\nPrevious\n\nLLM Image Generation\n\nNext\n\nLLM Evals"
  },
  {
    "title": "LLM Speech",
    "filename": "LLM_Speech.md",
    "text": "OpenAI TTS-1 for Text-to-Speech Generation\n--------------------------------------------------------------------------------------------------------\n\nOpenAI’s Text-to-Speech API (TTS-1) converts text into natural-sounding speech using state-of-the-art neural models. Released in March 2025, it offers multiple voices and control over speaking style and speed.\n\n[](https://youtu.be/lXb0L16ISAc)\n\nSimple speech generation\n\nTo generate speech from text, send a POST request to the speech endpoint:\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1\",\n    \"input\": \"Hello! This is a test of the OpenAI text to speech API.\",\n    \"voice\": \"alloy\"\n  }' --output speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nControl the output with these parameters:\n\n model: tts-1 (standard) or tts-1-hd (higher quality)\n input: Text to convert (max 4096 characters)\n voice: alloy, echo, fable, onyx, nova, or shimmer\n responseformat: mp3 (default), opus, aac, or flac\n speed: 0.25 to 4.0 (default 1.0)\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1-hd\",\n    \"input\": \"Welcome to our podcast! Today we will be discussing artificial intelligence.\",\n    \"voice\": \"nova\",\n    \"responseformat\": \"mp3\",\n    \"speed\": 1.2\n  }' --output podcastintro.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing per 1,000 characters:\n\n tts-1: $0.015\n tts-1-hd: $0.030\n\nTo optimize costs:\n\n Use tts-1 for drafts, tts-1-hd for final versions\n Batch process text in chunks\n Cache frequently used phrases\n Choose lower quality formats for testing\n\nGoogle Gemini Speech Studio for Text-to-Speech\n----------------------------------------------------------------------------------------------------------------\n\nGoogle’s Gemini Speech Studio offers advanced text-to-speech capabilities with support for multiple languages, voices, and speaking styles.\n\n[](https://youtu.be/Rx8PmBo9vfI)\n\nFor this, you need a GOOGLEAPIKEY. You can:\n\n1. Go to the Google Cloud Console: <https://console.cloud.google.com/apis/library/texttospeech.googleapis.com>, select or create the project you want and click Enable.\n2. Create an API key. In the Console, navigate to APIs & Services → Credentials and click + Create Credentials → API key. Copy the generated key (it’ll look like AIza…).\n\nSimple speech generation\n\nGenerate speech using the Gemini API:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": { \"text\": \"Hello, welcome to Gemini Speech Studio!\" },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nCustomize synthesis with these parameters:\n\n voice:\n  + languageCode: Language code (e.g., “en-US”, “es-ES”)\n  + name: Voice model name\n  + ssmlGender: “NEUTRAL”, “MALE”, or “FEMALE”\n audioConfig:\n  + audioEncoding: “MP3”, “WAV”, “OGG\\OPUS”\n  + speakingRate: 0.25 to 4.0\n  + pitch: -20.0 to 20.0\n  + volumeGainDb: Volume adjustment\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"text\": \"This is a demonstration of advanced speech settings.\"\n    },\n    \"voice\": {\n      \"languageCode\": \"en-US\",\n      \"name\": \"en-US-Neural2-D\"\n    },\n    \"audioConfig\": {\n      \"audioEncoding\": \"MP3\",\n      \"speakingRate\": 1.2,\n      \"pitch\": 2.0,\n      \"volumeGainDb\": 1.0\n    }\n  }' | jq -r .audioContent | base64 --decode > gemini-options.mp3Copy to clipboardErrorCopied\n\nSSML support\n\nBoth APIs support Speech Synthesis Markup Language (SSML) for fine-grained control:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"ssml\": \"<speak>Hello <break time=\\\"1s\\\"/> This text has a pause and <emphasis level=\\\"strong\\\">emphasized words</emphasis>.</speak>\"\n    },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-ssml.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing (per character):\n\n Standard voices: $0.000004\n Neural voices: $0.000016\n Neural2 voices: $0.000024\n\nTo optimize:\n\n Use standard voices for development\n Cache common phrases\n Batch process where possible\n Choose appropriate audio quality\n\nPython implementation\n\nHere’s a simple Python wrapper for both APIs:\n\nimport requests\nimport base64\nimport os\n\nopenaikey = os.getenv(\"OPENAIAPIKEY\")\ngooglekey = os.getenv(\"GOOGLEAPIKEY\")\n\ndef generateopenaispeech(text, voice=\"alloy\", model=\"tts-1\"):\n    response = requests.post(\n        \"https://api.openai.com/v1/audio/speech\",\n        headers={\"Authorization\": f\"Bearer {openaikey}\"},\n        json={\"model\": model, \"input\": text, \"voice\": voice}\n    )\n    return response.content\n\ndef generategeminispeech(text, voicename=\"en-US-Neural2-A\"):\n    response = requests.post(\n        f\"https://texttospeech.googleapis.com/v1/text:synthesize?key={googlekey}\",\n        json={\n            \"input\": {\"text\": text},\n            \"voice\": {\"languageCode\": \"en-US\", \"name\": voicename},\n            \"audioConfig\": {\"audioEncoding\": \"MP3\"}\n        }\n    )\n    return base64.b64decode(response.json()[\"audioContent\"])\n\nif name == \"main\":\n    with open(\"openaispeech.mp3\", \"wb\") as f:\n        f.write(generateopenaispeech(\"Hello from OpenAI's text to speech API!\"))\n    with open(\"geminispeech.mp3\", \"wb\") as f:\n        f.write(generategeminispeech(\"Hello from Google's Gemini Speech Studio!\"))Copy to clipboardErrorCopied\n\nPrevious\n\nLLM Image Generation\n\nNext\n\nLLM Evals"
  },
  {
    "title": "LLM Speech",
    "filename": "LLM_Speech.md",
    "text": "OpenAI TTS-1 for Text-to-Speech Generation\n--------------------------------------------------------------------------------------------------------\n\nOpenAI’s Text-to-Speech API (TTS-1) converts text into natural-sounding speech using state-of-the-art neural models. Released in March 2025, it offers multiple voices and control over speaking style and speed.\n\n[](https://youtu.be/lXb0L16ISAc)\n\nSimple speech generation\n\nTo generate speech from text, send a POST request to the speech endpoint:\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1\",\n    \"input\": \"Hello! This is a test of the OpenAI text to speech API.\",\n    \"voice\": \"alloy\"\n  }' --output speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nControl the output with these parameters:\n\n model: tts-1 (standard) or tts-1-hd (higher quality)\n input: Text to convert (max 4096 characters)\n voice: alloy, echo, fable, onyx, nova, or shimmer\n responseformat: mp3 (default), opus, aac, or flac\n speed: 0.25 to 4.0 (default 1.0)\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1-hd\",\n    \"input\": \"Welcome to our podcast! Today we will be discussing artificial intelligence.\",\n    \"voice\": \"nova\",\n    \"responseformat\": \"mp3\",\n    \"speed\": 1.2\n  }' --output podcastintro.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing per 1,000 characters:\n\n tts-1: $0.015\n tts-1-hd: $0.030\n\nTo optimize costs:\n\n Use tts-1 for drafts, tts-1-hd for final versions\n Batch process text in chunks\n Cache frequently used phrases\n Choose lower quality formats for testing\n\nGoogle Gemini Speech Studio for Text-to-Speech\n----------------------------------------------------------------------------------------------------------------\n\nGoogle’s Gemini Speech Studio offers advanced text-to-speech capabilities with support for multiple languages, voices, and speaking styles.\n\n[](https://youtu.be/Rx8PmBo9vfI)\n\nFor this, you need a GOOGLEAPIKEY. You can:\n\n1. Go to the Google Cloud Console: <https://console.cloud.google.com/apis/library/texttospeech.googleapis.com>, select or create the project you want and click Enable.\n2. Create an API key. In the Console, navigate to APIs & Services → Credentials and click + Create Credentials → API key. Copy the generated key (it’ll look like AIza…).\n\nSimple speech generation\n\nGenerate speech using the Gemini API:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": { \"text\": \"Hello, welcome to Gemini Speech Studio!\" },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nCustomize synthesis with these parameters:\n\n voice:\n  + languageCode: Language code (e.g., “en-US”, “es-ES”)\n  + name: Voice model name\n  + ssmlGender: “NEUTRAL”, “MALE”, or “FEMALE”\n audioConfig:\n  + audioEncoding: “MP3”, “WAV”, “OGG\\OPUS”\n  + speakingRate: 0.25 to 4.0\n  + pitch: -20.0 to 20.0\n  + volumeGainDb: Volume adjustment\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"text\": \"This is a demonstration of advanced speech settings.\"\n    },\n    \"voice\": {\n      \"languageCode\": \"en-US\",\n      \"name\": \"en-US-Neural2-D\"\n    },\n    \"audioConfig\": {\n      \"audioEncoding\": \"MP3\",\n      \"speakingRate\": 1.2,\n      \"pitch\": 2.0,\n      \"volumeGainDb\": 1.0\n    }\n  }' | jq -r .audioContent | base64 --decode > gemini-options.mp3Copy to clipboardErrorCopied\n\nSSML support\n\nBoth APIs support Speech Synthesis Markup Language (SSML) for fine-grained control:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"ssml\": \"<speak>Hello <break time=\\\"1s\\\"/> This text has a pause and <emphasis level=\\\"strong\\\">emphasized words</emphasis>.</speak>\"\n    },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-ssml.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing (per character):\n\n Standard voices: $0.000004\n Neural voices: $0.000016\n Neural2 voices: $0.000024\n\nTo optimize:\n\n Use standard voices for development\n Cache common phrases\n Batch process where possible\n Choose appropriate audio quality\n\nPython implementation\n\nHere’s a simple Python wrapper for both APIs:\n\nimport requests\nimport base64\nimport os\n\nopenaikey = os.getenv(\"OPENAIAPIKEY\")\ngooglekey = os.getenv(\"GOOGLEAPIKEY\")\n\ndef generateopenaispeech(text, voice=\"alloy\", model=\"tts-1\"):\n    response = requests.post(\n        \"https://api.openai.com/v1/audio/speech\",\n        headers={\"Authorization\": f\"Bearer {openaikey}\"},\n        json={\"model\": model, \"input\": text, \"voice\": voice}\n    )\n    return response.content\n\ndef generategeminispeech(text, voicename=\"en-US-Neural2-A\"):\n    response = requests.post(\n        f\"https://texttospeech.googleapis.com/v1/text:synthesize?key={googlekey}\",\n        json={\n            \"input\": {\"text\": text},\n            \"voice\": {\"languageCode\": \"en-US\", \"name\": voicename},\n            \"audioConfig\": {\"audioEncoding\": \"MP3\"}\n        }\n    )\n    return base64.b64decode(response.json()[\"audioContent\"])\n\nif name == \"main\":\n    with open(\"openaispeech.mp3\", \"wb\") as f:\n        f.write(generateopenaispeech(\"Hello from OpenAI's text to speech API!\"))\n    with open(\"geminispeech.mp3\", \"wb\") as f:\n        f.write(generategeminispeech(\"Hello from Google's Gemini Speech Studio!\"))Copy to clipboardErrorCopied\n\nPrevious\n\nLLM Image Generation\n\nNext\n\nLLM Evals"
  },
  {
    "title": "LLM Speech",
    "filename": "LLM_Speech.md",
    "text": "OpenAI TTS-1 for Text-to-Speech Generation\n--------------------------------------------------------------------------------------------------------\n\nOpenAI’s Text-to-Speech API (TTS-1) converts text into natural-sounding speech using state-of-the-art neural models. Released in March 2025, it offers multiple voices and control over speaking style and speed.\n\n[](https://youtu.be/lXb0L16ISAc)\n\nSimple speech generation\n\nTo generate speech from text, send a POST request to the speech endpoint:\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1\",\n    \"input\": \"Hello! This is a test of the OpenAI text to speech API.\",\n    \"voice\": \"alloy\"\n  }' --output speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nControl the output with these parameters:\n\n model: tts-1 (standard) or tts-1-hd (higher quality)\n input: Text to convert (max 4096 characters)\n voice: alloy, echo, fable, onyx, nova, or shimmer\n responseformat: mp3 (default), opus, aac, or flac\n speed: 0.25 to 4.0 (default 1.0)\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1-hd\",\n    \"input\": \"Welcome to our podcast! Today we will be discussing artificial intelligence.\",\n    \"voice\": \"nova\",\n    \"responseformat\": \"mp3\",\n    \"speed\": 1.2\n  }' --output podcastintro.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing per 1,000 characters:\n\n tts-1: $0.015\n tts-1-hd: $0.030\n\nTo optimize costs:\n\n Use tts-1 for drafts, tts-1-hd for final versions\n Batch process text in chunks\n Cache frequently used phrases\n Choose lower quality formats for testing\n\nGoogle Gemini Speech Studio for Text-to-Speech\n----------------------------------------------------------------------------------------------------------------\n\nGoogle’s Gemini Speech Studio offers advanced text-to-speech capabilities with support for multiple languages, voices, and speaking styles.\n\n[](https://youtu.be/Rx8PmBo9vfI)\n\nFor this, you need a GOOGLEAPIKEY. You can:\n\n1. Go to the Google Cloud Console: <https://console.cloud.google.com/apis/library/texttospeech.googleapis.com>, select or create the project you want and click Enable.\n2. Create an API key. In the Console, navigate to APIs & Services → Credentials and click + Create Credentials → API key. Copy the generated key (it’ll look like AIza…).\n\nSimple speech generation\n\nGenerate speech using the Gemini API:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": { \"text\": \"Hello, welcome to Gemini Speech Studio!\" },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nCustomize synthesis with these parameters:\n\n voice:\n  + languageCode: Language code (e.g., “en-US”, “es-ES”)\n  + name: Voice model name\n  + ssmlGender: “NEUTRAL”, “MALE”, or “FEMALE”\n audioConfig:\n  + audioEncoding: “MP3”, “WAV”, “OGG\\OPUS”\n  + speakingRate: 0.25 to 4.0\n  + pitch: -20.0 to 20.0\n  + volumeGainDb: Volume adjustment\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"text\": \"This is a demonstration of advanced speech settings.\"\n    },\n    \"voice\": {\n      \"languageCode\": \"en-US\",\n      \"name\": \"en-US-Neural2-D\"\n    },\n    \"audioConfig\": {\n      \"audioEncoding\": \"MP3\",\n      \"speakingRate\": 1.2,\n      \"pitch\": 2.0,\n      \"volumeGainDb\": 1.0\n    }\n  }' | jq -r .audioContent | base64 --decode > gemini-options.mp3Copy to clipboardErrorCopied\n\nSSML support\n\nBoth APIs support Speech Synthesis Markup Language (SSML) for fine-grained control:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"ssml\": \"<speak>Hello <break time=\\\"1s\\\"/> This text has a pause and <emphasis level=\\\"strong\\\">emphasized words</emphasis>.</speak>\"\n    },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-ssml.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing (per character):\n\n Standard voices: $0.000004\n Neural voices: $0.000016\n Neural2 voices: $0.000024\n\nTo optimize:\n\n Use standard voices for development\n Cache common phrases\n Batch process where possible\n Choose appropriate audio quality\n\nPython implementation\n\nHere’s a simple Python wrapper for both APIs:\n\nimport requests\nimport base64\nimport os\n\nopenaikey = os.getenv(\"OPENAIAPIKEY\")\ngooglekey = os.getenv(\"GOOGLEAPIKEY\")\n\ndef generateopenaispeech(text, voice=\"alloy\", model=\"tts-1\"):\n    response = requests.post(\n        \"https://api.openai.com/v1/audio/speech\",\n        headers={\"Authorization\": f\"Bearer {openaikey}\"},\n        json={\"model\": model, \"input\": text, \"voice\": voice}\n    )\n    return response.content\n\ndef generategeminispeech(text, voicename=\"en-US-Neural2-A\"):\n    response = requests.post(\n        f\"https://texttospeech.googleapis.com/v1/text:synthesize?key={googlekey}\",\n        json={\n            \"input\": {\"text\": text},\n            \"voice\": {\"languageCode\": \"en-US\", \"name\": voicename},\n            \"audioConfig\": {\"audioEncoding\": \"MP3\"}\n        }\n    )\n    return base64.b64decode(response.json()[\"audioContent\"])\n\nif name == \"main\":\n    with open(\"openaispeech.mp3\", \"wb\") as f:\n        f.write(generateopenaispeech(\"Hello from OpenAI's text to speech API!\"))\n    with open(\"geminispeech.mp3\", \"wb\") as f:\n        f.write(generategeminispeech(\"Hello from Google's Gemini Speech Studio!\"))Copy to clipboardErrorCopied\n\nPrevious\n\nLLM Image Generation\n\nNext\n\nLLM Evals"
  },
  {
    "title": "LLM Speech",
    "filename": "LLM_Speech.md",
    "text": "OpenAI TTS-1 for Text-to-Speech Generation\n--------------------------------------------------------------------------------------------------------\n\nOpenAI’s Text-to-Speech API (TTS-1) converts text into natural-sounding speech using state-of-the-art neural models. Released in March 2025, it offers multiple voices and control over speaking style and speed.\n\n[](https://youtu.be/lXb0L16ISAc)\n\nSimple speech generation\n\nTo generate speech from text, send a POST request to the speech endpoint:\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1\",\n    \"input\": \"Hello! This is a test of the OpenAI text to speech API.\",\n    \"voice\": \"alloy\"\n  }' --output speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nControl the output with these parameters:\n\n model: tts-1 (standard) or tts-1-hd (higher quality)\n input: Text to convert (max 4096 characters)\n voice: alloy, echo, fable, onyx, nova, or shimmer\n responseformat: mp3 (default), opus, aac, or flac\n speed: 0.25 to 4.0 (default 1.0)\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1-hd\",\n    \"input\": \"Welcome to our podcast! Today we will be discussing artificial intelligence.\",\n    \"voice\": \"nova\",\n    \"responseformat\": \"mp3\",\n    \"speed\": 1.2\n  }' --output podcastintro.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing per 1,000 characters:\n\n tts-1: $0.015\n tts-1-hd: $0.030\n\nTo optimize costs:\n\n Use tts-1 for drafts, tts-1-hd for final versions\n Batch process text in chunks\n Cache frequently used phrases\n Choose lower quality formats for testing\n\nGoogle Gemini Speech Studio for Text-to-Speech\n----------------------------------------------------------------------------------------------------------------\n\nGoogle’s Gemini Speech Studio offers advanced text-to-speech capabilities with support for multiple languages, voices, and speaking styles.\n\n[](https://youtu.be/Rx8PmBo9vfI)\n\nFor this, you need a GOOGLEAPIKEY. You can:\n\n1. Go to the Google Cloud Console: <https://console.cloud.google.com/apis/library/texttospeech.googleapis.com>, select or create the project you want and click Enable.\n2. Create an API key. In the Console, navigate to APIs & Services → Credentials and click + Create Credentials → API key. Copy the generated key (it’ll look like AIza…).\n\nSimple speech generation\n\nGenerate speech using the Gemini API:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": { \"text\": \"Hello, welcome to Gemini Speech Studio!\" },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nCustomize synthesis with these parameters:\n\n voice:\n  + languageCode: Language code (e.g., “en-US”, “es-ES”)\n  + name: Voice model name\n  + ssmlGender: “NEUTRAL”, “MALE”, or “FEMALE”\n audioConfig:\n  + audioEncoding: “MP3”, “WAV”, “OGG\\OPUS”\n  + speakingRate: 0.25 to 4.0\n  + pitch: -20.0 to 20.0\n  + volumeGainDb: Volume adjustment\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"text\": \"This is a demonstration of advanced speech settings.\"\n    },\n    \"voice\": {\n      \"languageCode\": \"en-US\",\n      \"name\": \"en-US-Neural2-D\"\n    },\n    \"audioConfig\": {\n      \"audioEncoding\": \"MP3\",\n      \"speakingRate\": 1.2,\n      \"pitch\": 2.0,\n      \"volumeGainDb\": 1.0\n    }\n  }' | jq -r .audioContent | base64 --decode > gemini-options.mp3Copy to clipboardErrorCopied\n\nSSML support\n\nBoth APIs support Speech Synthesis Markup Language (SSML) for fine-grained control:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"ssml\": \"<speak>Hello <break time=\\\"1s\\\"/> This text has a pause and <emphasis level=\\\"strong\\\">emphasized words</emphasis>.</speak>\"\n    },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-ssml.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing (per character):\n\n Standard voices: $0.000004\n Neural voices: $0.000016\n Neural2 voices: $0.000024\n\nTo optimize:\n\n Use standard voices for development\n Cache common phrases\n Batch process where possible\n Choose appropriate audio quality\n\nPython implementation\n\nHere’s a simple Python wrapper for both APIs:\n\nimport requests\nimport base64\nimport os\n\nopenaikey = os.getenv(\"OPENAIAPIKEY\")\ngooglekey = os.getenv(\"GOOGLEAPIKEY\")\n\ndef generateopenaispeech(text, voice=\"alloy\", model=\"tts-1\"):\n    response = requests.post(\n        \"https://api.openai.com/v1/audio/speech\",\n        headers={\"Authorization\": f\"Bearer {openaikey}\"},\n        json={\"model\": model, \"input\": text, \"voice\": voice}\n    )\n    return response.content\n\ndef generategeminispeech(text, voicename=\"en-US-Neural2-A\"):\n    response = requests.post(\n        f\"https://texttospeech.googleapis.com/v1/text:synthesize?key={googlekey}\",\n        json={\n            \"input\": {\"text\": text},\n            \"voice\": {\"languageCode\": \"en-US\", \"name\": voicename},\n            \"audioConfig\": {\"audioEncoding\": \"MP3\"}\n        }\n    )\n    return base64.b64decode(response.json()[\"audioContent\"])\n\nif name == \"main\":\n    with open(\"openaispeech.mp3\", \"wb\") as f:\n        f.write(generateopenaispeech(\"Hello from OpenAI's text to speech API!\"))\n    with open(\"geminispeech.mp3\", \"wb\") as f:\n        f.write(generategeminispeech(\"Hello from Google's Gemini Speech Studio!\"))Copy to clipboardErrorCopied\n\nPrevious\n\nLLM Image Generation\n\nNext\n\nLLM Evals"
  },
  {
    "title": "LLM Speech",
    "filename": "LLM_Speech.md",
    "text": "OpenAI TTS-1 for Text-to-Speech Generation\n--------------------------------------------------------------------------------------------------------\n\nOpenAI’s Text-to-Speech API (TTS-1) converts text into natural-sounding speech using state-of-the-art neural models. Released in March 2025, it offers multiple voices and control over speaking style and speed.\n\n[](https://youtu.be/lXb0L16ISAc)\n\nSimple speech generation\n\nTo generate speech from text, send a POST request to the speech endpoint:\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1\",\n    \"input\": \"Hello! This is a test of the OpenAI text to speech API.\",\n    \"voice\": \"alloy\"\n  }' --output speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nControl the output with these parameters:\n\n model: tts-1 (standard) or tts-1-hd (higher quality)\n input: Text to convert (max 4096 characters)\n voice: alloy, echo, fable, onyx, nova, or shimmer\n responseformat: mp3 (default), opus, aac, or flac\n speed: 0.25 to 4.0 (default 1.0)\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1-hd\",\n    \"input\": \"Welcome to our podcast! Today we will be discussing artificial intelligence.\",\n    \"voice\": \"nova\",\n    \"responseformat\": \"mp3\",\n    \"speed\": 1.2\n  }' --output podcastintro.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing per 1,000 characters:\n\n tts-1: $0.015\n tts-1-hd: $0.030\n\nTo optimize costs:\n\n Use tts-1 for drafts, tts-1-hd for final versions\n Batch process text in chunks\n Cache frequently used phrases\n Choose lower quality formats for testing\n\nGoogle Gemini Speech Studio for Text-to-Speech\n----------------------------------------------------------------------------------------------------------------\n\nGoogle’s Gemini Speech Studio offers advanced text-to-speech capabilities with support for multiple languages, voices, and speaking styles.\n\n[](https://youtu.be/Rx8PmBo9vfI)\n\nFor this, you need a GOOGLEAPIKEY. You can:\n\n1. Go to the Google Cloud Console: <https://console.cloud.google.com/apis/library/texttospeech.googleapis.com>, select or create the project you want and click Enable.\n2. Create an API key. In the Console, navigate to APIs & Services → Credentials and click + Create Credentials → API key. Copy the generated key (it’ll look like AIza…).\n\nSimple speech generation\n\nGenerate speech using the Gemini API:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": { \"text\": \"Hello, welcome to Gemini Speech Studio!\" },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nCustomize synthesis with these parameters:\n\n voice:\n  + languageCode: Language code (e.g., “en-US”, “es-ES”)\n  + name: Voice model name\n  + ssmlGender: “NEUTRAL”, “MALE”, or “FEMALE”\n audioConfig:\n  + audioEncoding: “MP3”, “WAV”, “OGG\\OPUS”\n  + speakingRate: 0.25 to 4.0\n  + pitch: -20.0 to 20.0\n  + volumeGainDb: Volume adjustment\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"text\": \"This is a demonstration of advanced speech settings.\"\n    },\n    \"voice\": {\n      \"languageCode\": \"en-US\",\n      \"name\": \"en-US-Neural2-D\"\n    },\n    \"audioConfig\": {\n      \"audioEncoding\": \"MP3\",\n      \"speakingRate\": 1.2,\n      \"pitch\": 2.0,\n      \"volumeGainDb\": 1.0\n    }\n  }' | jq -r .audioContent | base64 --decode > gemini-options.mp3Copy to clipboardErrorCopied\n\nSSML support\n\nBoth APIs support Speech Synthesis Markup Language (SSML) for fine-grained control:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"ssml\": \"<speak>Hello <break time=\\\"1s\\\"/> This text has a pause and <emphasis level=\\\"strong\\\">emphasized words</emphasis>.</speak>\"\n    },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-ssml.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing (per character):\n\n Standard voices: $0.000004\n Neural voices: $0.000016\n Neural2 voices: $0.000024\n\nTo optimize:\n\n Use standard voices for development\n Cache common phrases\n Batch process where possible\n Choose appropriate audio quality\n\nPython implementation\n\nHere’s a simple Python wrapper for both APIs:\n\nimport requests\nimport base64\nimport os\n\nopenaikey = os.getenv(\"OPENAIAPIKEY\")\ngooglekey = os.getenv(\"GOOGLEAPIKEY\")\n\ndef generateopenaispeech(text, voice=\"alloy\", model=\"tts-1\"):\n    response = requests.post(\n        \"https://api.openai.com/v1/audio/speech\",\n        headers={\"Authorization\": f\"Bearer {openaikey}\"},\n        json={\"model\": model, \"input\": text, \"voice\": voice}\n    )\n    return response.content\n\ndef generategeminispeech(text, voicename=\"en-US-Neural2-A\"):\n    response = requests.post(\n        f\"https://texttospeech.googleapis.com/v1/text:synthesize?key={googlekey}\",\n        json={\n            \"input\": {\"text\": text},\n            \"voice\": {\"languageCode\": \"en-US\", \"name\": voicename},\n            \"audioConfig\": {\"audioEncoding\": \"MP3\"}\n        }\n    )\n    return base64.b64decode(response.json()[\"audioContent\"])\n\nif name == \"main\":\n    with open(\"openaispeech.mp3\", \"wb\") as f:\n        f.write(generateopenaispeech(\"Hello from OpenAI's text to speech API!\"))\n    with open(\"geminispeech.mp3\", \"wb\") as f:\n        f.write(generategeminispeech(\"Hello from Google's Gemini Speech Studio!\"))Copy to clipboardErrorCopied\n\nPrevious\n\nLLM Image Generation\n\nNext\n\nLLM Evals"
  },
  {
    "title": "LLM Speech",
    "filename": "LLM_Speech.md",
    "text": "OpenAI TTS-1 for Text-to-Speech Generation\n--------------------------------------------------------------------------------------------------------\n\nOpenAI’s Text-to-Speech API (TTS-1) converts text into natural-sounding speech using state-of-the-art neural models. Released in March 2025, it offers multiple voices and control over speaking style and speed.\n\n[](https://youtu.be/lXb0L16ISAc)\n\nSimple speech generation\n\nTo generate speech from text, send a POST request to the speech endpoint:\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1\",\n    \"input\": \"Hello! This is a test of the OpenAI text to speech API.\",\n    \"voice\": \"alloy\"\n  }' --output speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nControl the output with these parameters:\n\n model: tts-1 (standard) or tts-1-hd (higher quality)\n input: Text to convert (max 4096 characters)\n voice: alloy, echo, fable, onyx, nova, or shimmer\n responseformat: mp3 (default), opus, aac, or flac\n speed: 0.25 to 4.0 (default 1.0)\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1-hd\",\n    \"input\": \"Welcome to our podcast! Today we will be discussing artificial intelligence.\",\n    \"voice\": \"nova\",\n    \"responseformat\": \"mp3\",\n    \"speed\": 1.2\n  }' --output podcastintro.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing per 1,000 characters:\n\n tts-1: $0.015\n tts-1-hd: $0.030\n\nTo optimize costs:\n\n Use tts-1 for drafts, tts-1-hd for final versions\n Batch process text in chunks\n Cache frequently used phrases\n Choose lower quality formats for testing\n\nGoogle Gemini Speech Studio for Text-to-Speech\n----------------------------------------------------------------------------------------------------------------\n\nGoogle’s Gemini Speech Studio offers advanced text-to-speech capabilities with support for multiple languages, voices, and speaking styles.\n\n[](https://youtu.be/Rx8PmBo9vfI)\n\nFor this, you need a GOOGLEAPIKEY. You can:\n\n1. Go to the Google Cloud Console: <https://console.cloud.google.com/apis/library/texttospeech.googleapis.com>, select or create the project you want and click Enable.\n2. Create an API key. In the Console, navigate to APIs & Services → Credentials and click + Create Credentials → API key. Copy the generated key (it’ll look like AIza…).\n\nSimple speech generation\n\nGenerate speech using the Gemini API:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": { \"text\": \"Hello, welcome to Gemini Speech Studio!\" },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nCustomize synthesis with these parameters:\n\n voice:\n  + languageCode: Language code (e.g., “en-US”, “es-ES”)\n  + name: Voice model name\n  + ssmlGender: “NEUTRAL”, “MALE”, or “FEMALE”\n audioConfig:\n  + audioEncoding: “MP3”, “WAV”, “OGG\\OPUS”\n  + speakingRate: 0.25 to 4.0\n  + pitch: -20.0 to 20.0\n  + volumeGainDb: Volume adjustment\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"text\": \"This is a demonstration of advanced speech settings.\"\n    },\n    \"voice\": {\n      \"languageCode\": \"en-US\",\n      \"name\": \"en-US-Neural2-D\"\n    },\n    \"audioConfig\": {\n      \"audioEncoding\": \"MP3\",\n      \"speakingRate\": 1.2,\n      \"pitch\": 2.0,\n      \"volumeGainDb\": 1.0\n    }\n  }' | jq -r .audioContent | base64 --decode > gemini-options.mp3Copy to clipboardErrorCopied\n\nSSML support\n\nBoth APIs support Speech Synthesis Markup Language (SSML) for fine-grained control:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"ssml\": \"<speak>Hello <break time=\\\"1s\\\"/> This text has a pause and <emphasis level=\\\"strong\\\">emphasized words</emphasis>.</speak>\"\n    },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-ssml.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing (per character):\n\n Standard voices: $0.000004\n Neural voices: $0.000016\n Neural2 voices: $0.000024\n\nTo optimize:\n\n Use standard voices for development\n Cache common phrases\n Batch process where possible\n Choose appropriate audio quality\n\nPython implementation\n\nHere’s a simple Python wrapper for both APIs:\n\nimport requests\nimport base64\nimport os\n\nopenaikey = os.getenv(\"OPENAIAPIKEY\")\ngooglekey = os.getenv(\"GOOGLEAPIKEY\")\n\ndef generateopenaispeech(text, voice=\"alloy\", model=\"tts-1\"):\n    response = requests.post(\n        \"https://api.openai.com/v1/audio/speech\",\n        headers={\"Authorization\": f\"Bearer {openaikey}\"},\n        json={\"model\": model, \"input\": text, \"voice\": voice}\n    )\n    return response.content\n\ndef generategeminispeech(text, voicename=\"en-US-Neural2-A\"):\n    response = requests.post(\n        f\"https://texttospeech.googleapis.com/v1/text:synthesize?key={googlekey}\",\n        json={\n            \"input\": {\"text\": text},\n            \"voice\": {\"languageCode\": \"en-US\", \"name\": voicename},\n            \"audioConfig\": {\"audioEncoding\": \"MP3\"}\n        }\n    )\n    return base64.b64decode(response.json()[\"audioContent\"])\n\nif name == \"main\":\n    with open(\"openaispeech.mp3\", \"wb\") as f:\n        f.write(generateopenaispeech(\"Hello from OpenAI's text to speech API!\"))\n    with open(\"geminispeech.mp3\", \"wb\") as f:\n        f.write(generategeminispeech(\"Hello from Google's Gemini Speech Studio!\"))Copy to clipboardErrorCopied\n\nPrevious\n\nLLM Image Generation\n\nNext\n\nLLM Evals"
  },
  {
    "title": "LLM Speech",
    "filename": "LLM_Speech.md",
    "text": "OpenAI TTS-1 for Text-to-Speech Generation\n--------------------------------------------------------------------------------------------------------\n\nOpenAI’s Text-to-Speech API (TTS-1) converts text into natural-sounding speech using state-of-the-art neural models. Released in March 2025, it offers multiple voices and control over speaking style and speed.\n\n[](https://youtu.be/lXb0L16ISAc)\n\nSimple speech generation\n\nTo generate speech from text, send a POST request to the speech endpoint:\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1\",\n    \"input\": \"Hello! This is a test of the OpenAI text to speech API.\",\n    \"voice\": \"alloy\"\n  }' --output speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nControl the output with these parameters:\n\n model: tts-1 (standard) or tts-1-hd (higher quality)\n input: Text to convert (max 4096 characters)\n voice: alloy, echo, fable, onyx, nova, or shimmer\n responseformat: mp3 (default), opus, aac, or flac\n speed: 0.25 to 4.0 (default 1.0)\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1-hd\",\n    \"input\": \"Welcome to our podcast! Today we will be discussing artificial intelligence.\",\n    \"voice\": \"nova\",\n    \"responseformat\": \"mp3\",\n    \"speed\": 1.2\n  }' --output podcastintro.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing per 1,000 characters:\n\n tts-1: $0.015\n tts-1-hd: $0.030\n\nTo optimize costs:\n\n Use tts-1 for drafts, tts-1-hd for final versions\n Batch process text in chunks\n Cache frequently used phrases\n Choose lower quality formats for testing\n\nGoogle Gemini Speech Studio for Text-to-Speech\n----------------------------------------------------------------------------------------------------------------\n\nGoogle’s Gemini Speech Studio offers advanced text-to-speech capabilities with support for multiple languages, voices, and speaking styles.\n\n[](https://youtu.be/Rx8PmBo9vfI)\n\nFor this, you need a GOOGLEAPIKEY. You can:\n\n1. Go to the Google Cloud Console: <https://console.cloud.google.com/apis/library/texttospeech.googleapis.com>, select or create the project you want and click Enable.\n2. Create an API key. In the Console, navigate to APIs & Services → Credentials and click + Create Credentials → API key. Copy the generated key (it’ll look like AIza…).\n\nSimple speech generation\n\nGenerate speech using the Gemini API:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": { \"text\": \"Hello, welcome to Gemini Speech Studio!\" },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nCustomize synthesis with these parameters:\n\n voice:\n  + languageCode: Language code (e.g., “en-US”, “es-ES”)\n  + name: Voice model name\n  + ssmlGender: “NEUTRAL”, “MALE”, or “FEMALE”\n audioConfig:\n  + audioEncoding: “MP3”, “WAV”, “OGG\\OPUS”\n  + speakingRate: 0.25 to 4.0\n  + pitch: -20.0 to 20.0\n  + volumeGainDb: Volume adjustment\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"text\": \"This is a demonstration of advanced speech settings.\"\n    },\n    \"voice\": {\n      \"languageCode\": \"en-US\",\n      \"name\": \"en-US-Neural2-D\"\n    },\n    \"audioConfig\": {\n      \"audioEncoding\": \"MP3\",\n      \"speakingRate\": 1.2,\n      \"pitch\": 2.0,\n      \"volumeGainDb\": 1.0\n    }\n  }' | jq -r .audioContent | base64 --decode > gemini-options.mp3Copy to clipboardErrorCopied\n\nSSML support\n\nBoth APIs support Speech Synthesis Markup Language (SSML) for fine-grained control:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"ssml\": \"<speak>Hello <break time=\\\"1s\\\"/> This text has a pause and <emphasis level=\\\"strong\\\">emphasized words</emphasis>.</speak>\"\n    },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-ssml.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing (per character):\n\n Standard voices: $0.000004\n Neural voices: $0.000016\n Neural2 voices: $0.000024\n\nTo optimize:\n\n Use standard voices for development\n Cache common phrases\n Batch process where possible\n Choose appropriate audio quality\n\nPython implementation\n\nHere’s a simple Python wrapper for both APIs:\n\nimport requests\nimport base64\nimport os\n\nopenaikey = os.getenv(\"OPENAIAPIKEY\")\ngooglekey = os.getenv(\"GOOGLEAPIKEY\")\n\ndef generateopenaispeech(text, voice=\"alloy\", model=\"tts-1\"):\n    response = requests.post(\n        \"https://api.openai.com/v1/audio/speech\",\n        headers={\"Authorization\": f\"Bearer {openaikey}\"},\n        json={\"model\": model, \"input\": text, \"voice\": voice}\n    )\n    return response.content\n\ndef generategeminispeech(text, voicename=\"en-US-Neural2-A\"):\n    response = requests.post(\n        f\"https://texttospeech.googleapis.com/v1/text:synthesize?key={googlekey}\",\n        json={\n            \"input\": {\"text\": text},\n            \"voice\": {\"languageCode\": \"en-US\", \"name\": voicename},\n            \"audioConfig\": {\"audioEncoding\": \"MP3\"}\n        }\n    )\n    return base64.b64decode(response.json()[\"audioContent\"])\n\nif name == \"main\":\n    with open(\"openaispeech.mp3\", \"wb\") as f:\n        f.write(generateopenaispeech(\"Hello from OpenAI's text to speech API!\"))\n    with open(\"geminispeech.mp3\", \"wb\") as f:\n        f.write(generategeminispeech(\"Hello from Google's Gemini Speech Studio!\"))Copy to clipboardErrorCopied\n\nPrevious\n\nLLM Image Generation\n\nNext\n\nLLM Evals"
  },
  {
    "title": "LLM Speech",
    "filename": "LLM_Speech.md",
    "text": "OpenAI TTS-1 for Text-to-Speech Generation\n--------------------------------------------------------------------------------------------------------\n\nOpenAI’s Text-to-Speech API (TTS-1) converts text into natural-sounding speech using state-of-the-art neural models. Released in March 2025, it offers multiple voices and control over speaking style and speed.\n\n[](https://youtu.be/lXb0L16ISAc)\n\nSimple speech generation\n\nTo generate speech from text, send a POST request to the speech endpoint:\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1\",\n    \"input\": \"Hello! This is a test of the OpenAI text to speech API.\",\n    \"voice\": \"alloy\"\n  }' --output speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nControl the output with these parameters:\n\n model: tts-1 (standard) or tts-1-hd (higher quality)\n input: Text to convert (max 4096 characters)\n voice: alloy, echo, fable, onyx, nova, or shimmer\n responseformat: mp3 (default), opus, aac, or flac\n speed: 0.25 to 4.0 (default 1.0)\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1-hd\",\n    \"input\": \"Welcome to our podcast! Today we will be discussing artificial intelligence.\",\n    \"voice\": \"nova\",\n    \"responseformat\": \"mp3\",\n    \"speed\": 1.2\n  }' --output podcastintro.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing per 1,000 characters:\n\n tts-1: $0.015\n tts-1-hd: $0.030\n\nTo optimize costs:\n\n Use tts-1 for drafts, tts-1-hd for final versions\n Batch process text in chunks\n Cache frequently used phrases\n Choose lower quality formats for testing\n\nGoogle Gemini Speech Studio for Text-to-Speech\n----------------------------------------------------------------------------------------------------------------\n\nGoogle’s Gemini Speech Studio offers advanced text-to-speech capabilities with support for multiple languages, voices, and speaking styles.\n\n[](https://youtu.be/Rx8PmBo9vfI)\n\nFor this, you need a GOOGLEAPIKEY. You can:\n\n1. Go to the Google Cloud Console: <https://console.cloud.google.com/apis/library/texttospeech.googleapis.com>, select or create the project you want and click Enable.\n2. Create an API key. In the Console, navigate to APIs & Services → Credentials and click + Create Credentials → API key. Copy the generated key (it’ll look like AIza…).\n\nSimple speech generation\n\nGenerate speech using the Gemini API:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": { \"text\": \"Hello, welcome to Gemini Speech Studio!\" },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nCustomize synthesis with these parameters:\n\n voice:\n  + languageCode: Language code (e.g., “en-US”, “es-ES”)\n  + name: Voice model name\n  + ssmlGender: “NEUTRAL”, “MALE”, or “FEMALE”\n audioConfig:\n  + audioEncoding: “MP3”, “WAV”, “OGG\\OPUS”\n  + speakingRate: 0.25 to 4.0\n  + pitch: -20.0 to 20.0\n  + volumeGainDb: Volume adjustment\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"text\": \"This is a demonstration of advanced speech settings.\"\n    },\n    \"voice\": {\n      \"languageCode\": \"en-US\",\n      \"name\": \"en-US-Neural2-D\"\n    },\n    \"audioConfig\": {\n      \"audioEncoding\": \"MP3\",\n      \"speakingRate\": 1.2,\n      \"pitch\": 2.0,\n      \"volumeGainDb\": 1.0\n    }\n  }' | jq -r .audioContent | base64 --decode > gemini-options.mp3Copy to clipboardErrorCopied\n\nSSML support\n\nBoth APIs support Speech Synthesis Markup Language (SSML) for fine-grained control:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"ssml\": \"<speak>Hello <break time=\\\"1s\\\"/> This text has a pause and <emphasis level=\\\"strong\\\">emphasized words</emphasis>.</speak>\"\n    },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-ssml.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing (per character):\n\n Standard voices: $0.000004\n Neural voices: $0.000016\n Neural2 voices: $0.000024\n\nTo optimize:\n\n Use standard voices for development\n Cache common phrases\n Batch process where possible\n Choose appropriate audio quality\n\nPython implementation\n\nHere’s a simple Python wrapper for both APIs:\n\nimport requests\nimport base64\nimport os\n\nopenaikey = os.getenv(\"OPENAIAPIKEY\")\ngooglekey = os.getenv(\"GOOGLEAPIKEY\")\n\ndef generateopenaispeech(text, voice=\"alloy\", model=\"tts-1\"):\n    response = requests.post(\n        \"https://api.openai.com/v1/audio/speech\",\n        headers={\"Authorization\": f\"Bearer {openaikey}\"},\n        json={\"model\": model, \"input\": text, \"voice\": voice}\n    )\n    return response.content\n\ndef generategeminispeech(text, voicename=\"en-US-Neural2-A\"):\n    response = requests.post(\n        f\"https://texttospeech.googleapis.com/v1/text:synthesize?key={googlekey}\",\n        json={\n            \"input\": {\"text\": text},\n            \"voice\": {\"languageCode\": \"en-US\", \"name\": voicename},\n            \"audioConfig\": {\"audioEncoding\": \"MP3\"}\n        }\n    )\n    return base64.b64decode(response.json()[\"audioContent\"])\n\nif name == \"main\":\n    with open(\"openaispeech.mp3\", \"wb\") as f:\n        f.write(generateopenaispeech(\"Hello from OpenAI's text to speech API!\"))\n    with open(\"geminispeech.mp3\", \"wb\") as f:\n        f.write(generategeminispeech(\"Hello from Google's Gemini Speech Studio!\"))Copy to clipboardErrorCopied\n\nPrevious\n\nLLM Image Generation\n\nNext\n\nLLM Evals"
  },
  {
    "title": "LLM Speech",
    "filename": "LLM_Speech.md",
    "text": "OpenAI TTS-1 for Text-to-Speech Generation\n--------------------------------------------------------------------------------------------------------\n\nOpenAI’s Text-to-Speech API (TTS-1) converts text into natural-sounding speech using state-of-the-art neural models. Released in March 2025, it offers multiple voices and control over speaking style and speed.\n\n[](https://youtu.be/lXb0L16ISAc)\n\nSimple speech generation\n\nTo generate speech from text, send a POST request to the speech endpoint:\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1\",\n    \"input\": \"Hello! This is a test of the OpenAI text to speech API.\",\n    \"voice\": \"alloy\"\n  }' --output speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nControl the output with these parameters:\n\n model: tts-1 (standard) or tts-1-hd (higher quality)\n input: Text to convert (max 4096 characters)\n voice: alloy, echo, fable, onyx, nova, or shimmer\n responseformat: mp3 (default), opus, aac, or flac\n speed: 0.25 to 4.0 (default 1.0)\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1-hd\",\n    \"input\": \"Welcome to our podcast! Today we will be discussing artificial intelligence.\",\n    \"voice\": \"nova\",\n    \"responseformat\": \"mp3\",\n    \"speed\": 1.2\n  }' --output podcastintro.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing per 1,000 characters:\n\n tts-1: $0.015\n tts-1-hd: $0.030\n\nTo optimize costs:\n\n Use tts-1 for drafts, tts-1-hd for final versions\n Batch process text in chunks\n Cache frequently used phrases\n Choose lower quality formats for testing\n\nGoogle Gemini Speech Studio for Text-to-Speech\n----------------------------------------------------------------------------------------------------------------\n\nGoogle’s Gemini Speech Studio offers advanced text-to-speech capabilities with support for multiple languages, voices, and speaking styles.\n\n[](https://youtu.be/Rx8PmBo9vfI)\n\nFor this, you need a GOOGLEAPIKEY. You can:\n\n1. Go to the Google Cloud Console: <https://console.cloud.google.com/apis/library/texttospeech.googleapis.com>, select or create the project you want and click Enable.\n2. Create an API key. In the Console, navigate to APIs & Services → Credentials and click + Create Credentials → API key. Copy the generated key (it’ll look like AIza…).\n\nSimple speech generation\n\nGenerate speech using the Gemini API:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": { \"text\": \"Hello, welcome to Gemini Speech Studio!\" },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nCustomize synthesis with these parameters:\n\n voice:\n  + languageCode: Language code (e.g., “en-US”, “es-ES”)\n  + name: Voice model name\n  + ssmlGender: “NEUTRAL”, “MALE”, or “FEMALE”\n audioConfig:\n  + audioEncoding: “MP3”, “WAV”, “OGG\\OPUS”\n  + speakingRate: 0.25 to 4.0\n  + pitch: -20.0 to 20.0\n  + volumeGainDb: Volume adjustment\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"text\": \"This is a demonstration of advanced speech settings.\"\n    },\n    \"voice\": {\n      \"languageCode\": \"en-US\",\n      \"name\": \"en-US-Neural2-D\"\n    },\n    \"audioConfig\": {\n      \"audioEncoding\": \"MP3\",\n      \"speakingRate\": 1.2,\n      \"pitch\": 2.0,\n      \"volumeGainDb\": 1.0\n    }\n  }' | jq -r .audioContent | base64 --decode > gemini-options.mp3Copy to clipboardErrorCopied\n\nSSML support\n\nBoth APIs support Speech Synthesis Markup Language (SSML) for fine-grained control:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"ssml\": \"<speak>Hello <break time=\\\"1s\\\"/> This text has a pause and <emphasis level=\\\"strong\\\">emphasized words</emphasis>.</speak>\"\n    },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-ssml.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing (per character):\n\n Standard voices: $0.000004\n Neural voices: $0.000016\n Neural2 voices: $0.000024\n\nTo optimize:\n\n Use standard voices for development\n Cache common phrases\n Batch process where possible\n Choose appropriate audio quality\n\nPython implementation\n\nHere’s a simple Python wrapper for both APIs:\n\nimport requests\nimport base64\nimport os\n\nopenaikey = os.getenv(\"OPENAIAPIKEY\")\ngooglekey = os.getenv(\"GOOGLEAPIKEY\")\n\ndef generateopenaispeech(text, voice=\"alloy\", model=\"tts-1\"):\n    response = requests.post(\n        \"https://api.openai.com/v1/audio/speech\",\n        headers={\"Authorization\": f\"Bearer {openaikey}\"},\n        json={\"model\": model, \"input\": text, \"voice\": voice}\n    )\n    return response.content\n\ndef generategeminispeech(text, voicename=\"en-US-Neural2-A\"):\n    response = requests.post(\n        f\"https://texttospeech.googleapis.com/v1/text:synthesize?key={googlekey}\",\n        json={\n            \"input\": {\"text\": text},\n            \"voice\": {\"languageCode\": \"en-US\", \"name\": voicename},\n            \"audioConfig\": {\"audioEncoding\": \"MP3\"}\n        }\n    )\n    return base64.b64decode(response.json()[\"audioContent\"])\n\nif name == \"main\":\n    with open(\"openaispeech.mp3\", \"wb\") as f:\n        f.write(generateopenaispeech(\"Hello from OpenAI's text to speech API!\"))\n    with open(\"geminispeech.mp3\", \"wb\") as f:\n        f.write(generategeminispeech(\"Hello from Google's Gemini Speech Studio!\"))Copy to clipboardErrorCopied\n\nPrevious\n\nLLM Image Generation\n\nNext\n\nLLM Evals"
  },
  {
    "title": "2. Deployment Tools",
    "filename": "2._Deployment_Tools.md",
    "text": "Deployment Tools\n==========================================================\n\nAny application you build is likely to be deployed somewhere. This section covers the most popular tools involved in deploying an application.\n\nPrevious\n\nVersion Control: Git, GitHub\n\nNext\n\nMarkdown"
  },
  {
    "title": "Project 1",
    "filename": "Project_1.md",
    "text": "Project: TDS Virtual TA\n=============================================================================\n\nCreate a virtual Teaching Assistant Discourse responder.\n\nBackground\n----------------------------------------------------\n\nYou are a clever student who has joined IIT Madras’ Online Degree in Data Science. You have just enrolled in the Tools in Data Science course.\n\nOut of kindness for your teaching assistants, you have decided to build an API that can automatically answer student questions on their behalf based on:\n\n Course content with content for TDS Jan 2025 as on 15 Apr 2025.\n TDS Discourse posts with content from 1 Jan 2025 - 14 Apr 2025.\n\nScrape the data\n--------------------------------------------------------------\n\nTo make sure you can answer these questions, you will need to extract the data from the above source.\n\nCreate an API\n----------------------------------------------------------\n\nYour application exposes an API endpoint. You may host it anywhere. Let’s assume it’s at https://app.example.com/api/.\n\nThe endpoint must accept a POST request, e.g. POST https://app.example.com/api/ with a student question as well as optional base64 file attachments as JSON.\n\nFor example, here’s how anyone can make a request:\n\ncurl \"https://app.example.com/api/\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"question\\\": \\\"Should I use gpt-4o-mini which AI proxy supports, or gpt3.5 turbo?\\\", \\\"image\\\": \\\"$(base64 -w0 project-tds-virtual-ta-q1.webp)\\\"}\"Copy to clipboardErrorCopied\n\nThis is a real question and uses this screenshot:\n\nThe response must be a JSON object like this:\n\n{\n  \"answer\": \"You must use gpt-3.5-turbo-0125, even if the AI Proxy only supports gpt-4o-mini. Use the OpenAI API directly for this question.\",\n  \"links\": [\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/4\",\n      \"text\": \"Use the model that’s mentioned in the question.\"\n    },\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/3\",\n      \"text\": \"My understanding is that you just have to use a tokenizer, similar to what Prof. Anand used, to get the number of tokens and multiply that by the given rate.\"\n    }\n  ]\n}Copy to clipboardErrorCopied\n\nEvaluate your application\n----------------------------------------------------------------------------------\n\nHere are a few sample questions and evaluation parameters. These are indicative. The actual evaluation could ask any realistic student question.\n\nTo run this:\n\n1. Edit project-tds-virtual-ta-promptfoo.yaml to replace providers[0].config.url with your API URL.\n2. Run this script:\n\n   \n   npx -y promptfoo eval --config project-tds-virtual-ta-promptfoo.yamlCopy to clipboardErrorCopied\n   \n\nDeploy your application\n------------------------------------------------------------------------------\n\nDeploy your application to a public URL that can be accessed by anyone. You may use any platform.\n\n(If you use ngrok, ensure that it is running continuously until you get your results.)\n\nShare your code\n--------------------------------------------------------------\n\n Create a new public GitHub repository\n Add an MIT LICENSE file\n Commit and push your code\n\nSubmit your URL\n--------------------------------------------------------------\n\nSubmit your GitHub repository URL and your API endpoint URL at <https://exam.sanand.workers.dev/tds-project-virtual-ta>\n\nEvaluation\n----------------------------------------------------\n\n Pre-requisites: Your repository MUST meet the following criteria to be eligible for evaluation\n  + Your GitHub repository exists and is publicly accessible\n  + Your GitHub repository has a LICENSE file with the MIT license in the root folder\n We will use a modified version of project-tds-virtual-ta-promptfoo.yaml with 10 realistic questions. Correct answers will be awarded up to 2 marks each.\n Your score will be the sum of the marks above. No normalization. What you get is what you get.\n\nBonus:\n\n 1 mark if your GitHub repo includes a script that scrapes the Discourse posts across a date range from a Discourse course page like TDS\n 2 marks if we deploy your solution (with minimal modifications) as an official solution for students to use.\n\nPrevious\n\nLLM Evals\n\nNext\n\n4. Data Sourcing"
  },
  {
    "title": "Project 1",
    "filename": "Project_1.md",
    "text": "Project: TDS Virtual TA\n=============================================================================\n\nCreate a virtual Teaching Assistant Discourse responder.\n\nBackground\n----------------------------------------------------\n\nYou are a clever student who has joined IIT Madras’ Online Degree in Data Science. You have just enrolled in the Tools in Data Science course.\n\nOut of kindness for your teaching assistants, you have decided to build an API that can automatically answer student questions on their behalf based on:\n\n Course content with content for TDS Jan 2025 as on 15 Apr 2025.\n TDS Discourse posts with content from 1 Jan 2025 - 14 Apr 2025.\n\nScrape the data\n--------------------------------------------------------------\n\nTo make sure you can answer these questions, you will need to extract the data from the above source.\n\nCreate an API\n----------------------------------------------------------\n\nYour application exposes an API endpoint. You may host it anywhere. Let’s assume it’s at https://app.example.com/api/.\n\nThe endpoint must accept a POST request, e.g. POST https://app.example.com/api/ with a student question as well as optional base64 file attachments as JSON.\n\nFor example, here’s how anyone can make a request:\n\ncurl \"https://app.example.com/api/\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"question\\\": \\\"Should I use gpt-4o-mini which AI proxy supports, or gpt3.5 turbo?\\\", \\\"image\\\": \\\"$(base64 -w0 project-tds-virtual-ta-q1.webp)\\\"}\"Copy to clipboardErrorCopied\n\nThis is a real question and uses this screenshot:\n\nThe response must be a JSON object like this:\n\n{\n  \"answer\": \"You must use gpt-3.5-turbo-0125, even if the AI Proxy only supports gpt-4o-mini. Use the OpenAI API directly for this question.\",\n  \"links\": [\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/4\",\n      \"text\": \"Use the model that’s mentioned in the question.\"\n    },\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/3\",\n      \"text\": \"My understanding is that you just have to use a tokenizer, similar to what Prof. Anand used, to get the number of tokens and multiply that by the given rate.\"\n    }\n  ]\n}Copy to clipboardErrorCopied\n\nEvaluate your application\n----------------------------------------------------------------------------------\n\nHere are a few sample questions and evaluation parameters. These are indicative. The actual evaluation could ask any realistic student question.\n\nTo run this:\n\n1. Edit project-tds-virtual-ta-promptfoo.yaml to replace providers[0].config.url with your API URL.\n2. Run this script:\n\n   \n   npx -y promptfoo eval --config project-tds-virtual-ta-promptfoo.yamlCopy to clipboardErrorCopied\n   \n\nDeploy your application\n------------------------------------------------------------------------------\n\nDeploy your application to a public URL that can be accessed by anyone. You may use any platform.\n\n(If you use ngrok, ensure that it is running continuously until you get your results.)\n\nShare your code\n--------------------------------------------------------------\n\n Create a new public GitHub repository\n Add an MIT LICENSE file\n Commit and push your code\n\nSubmit your URL\n--------------------------------------------------------------\n\nSubmit your GitHub repository URL and your API endpoint URL at <https://exam.sanand.workers.dev/tds-project-virtual-ta>\n\nEvaluation\n----------------------------------------------------\n\n Pre-requisites: Your repository MUST meet the following criteria to be eligible for evaluation\n  + Your GitHub repository exists and is publicly accessible\n  + Your GitHub repository has a LICENSE file with the MIT license in the root folder\n We will use a modified version of project-tds-virtual-ta-promptfoo.yaml with 10 realistic questions. Correct answers will be awarded up to 2 marks each.\n Your score will be the sum of the marks above. No normalization. What you get is what you get.\n\nBonus:\n\n 1 mark if your GitHub repo includes a script that scrapes the Discourse posts across a date range from a Discourse course page like TDS\n 2 marks if we deploy your solution (with minimal modifications) as an official solution for students to use.\n\nPrevious\n\nLLM Evals\n\nNext\n\n4. Data Sourcing"
  },
  {
    "title": "Project 1",
    "filename": "Project_1.md",
    "text": "Project: TDS Virtual TA\n=============================================================================\n\nCreate a virtual Teaching Assistant Discourse responder.\n\nBackground\n----------------------------------------------------\n\nYou are a clever student who has joined IIT Madras’ Online Degree in Data Science. You have just enrolled in the Tools in Data Science course.\n\nOut of kindness for your teaching assistants, you have decided to build an API that can automatically answer student questions on their behalf based on:\n\n Course content with content for TDS Jan 2025 as on 15 Apr 2025.\n TDS Discourse posts with content from 1 Jan 2025 - 14 Apr 2025.\n\nScrape the data\n--------------------------------------------------------------\n\nTo make sure you can answer these questions, you will need to extract the data from the above source.\n\nCreate an API\n----------------------------------------------------------\n\nYour application exposes an API endpoint. You may host it anywhere. Let’s assume it’s at https://app.example.com/api/.\n\nThe endpoint must accept a POST request, e.g. POST https://app.example.com/api/ with a student question as well as optional base64 file attachments as JSON.\n\nFor example, here’s how anyone can make a request:\n\ncurl \"https://app.example.com/api/\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"question\\\": \\\"Should I use gpt-4o-mini which AI proxy supports, or gpt3.5 turbo?\\\", \\\"image\\\": \\\"$(base64 -w0 project-tds-virtual-ta-q1.webp)\\\"}\"Copy to clipboardErrorCopied\n\nThis is a real question and uses this screenshot:\n\nThe response must be a JSON object like this:\n\n{\n  \"answer\": \"You must use gpt-3.5-turbo-0125, even if the AI Proxy only supports gpt-4o-mini. Use the OpenAI API directly for this question.\",\n  \"links\": [\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/4\",\n      \"text\": \"Use the model that’s mentioned in the question.\"\n    },\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/3\",\n      \"text\": \"My understanding is that you just have to use a tokenizer, similar to what Prof. Anand used, to get the number of tokens and multiply that by the given rate.\"\n    }\n  ]\n}Copy to clipboardErrorCopied\n\nEvaluate your application\n----------------------------------------------------------------------------------\n\nHere are a few sample questions and evaluation parameters. These are indicative. The actual evaluation could ask any realistic student question.\n\nTo run this:\n\n1. Edit project-tds-virtual-ta-promptfoo.yaml to replace providers[0].config.url with your API URL.\n2. Run this script:\n\n   \n   npx -y promptfoo eval --config project-tds-virtual-ta-promptfoo.yamlCopy to clipboardErrorCopied\n   \n\nDeploy your application\n------------------------------------------------------------------------------\n\nDeploy your application to a public URL that can be accessed by anyone. You may use any platform.\n\n(If you use ngrok, ensure that it is running continuously until you get your results.)\n\nShare your code\n--------------------------------------------------------------\n\n Create a new public GitHub repository\n Add an MIT LICENSE file\n Commit and push your code\n\nSubmit your URL\n--------------------------------------------------------------\n\nSubmit your GitHub repository URL and your API endpoint URL at <https://exam.sanand.workers.dev/tds-project-virtual-ta>\n\nEvaluation\n----------------------------------------------------\n\n Pre-requisites: Your repository MUST meet the following criteria to be eligible for evaluation\n  + Your GitHub repository exists and is publicly accessible\n  + Your GitHub repository has a LICENSE file with the MIT license in the root folder\n We will use a modified version of project-tds-virtual-ta-promptfoo.yaml with 10 realistic questions. Correct answers will be awarded up to 2 marks each.\n Your score will be the sum of the marks above. No normalization. What you get is what you get.\n\nBonus:\n\n 1 mark if your GitHub repo includes a script that scrapes the Discourse posts across a date range from a Discourse course page like TDS\n 2 marks if we deploy your solution (with minimal modifications) as an official solution for students to use.\n\nPrevious\n\nLLM Evals\n\nNext\n\n4. Data Sourcing"
  },
  {
    "title": "Project 1",
    "filename": "Project_1.md",
    "text": "Project: TDS Virtual TA\n=============================================================================\n\nCreate a virtual Teaching Assistant Discourse responder.\n\nBackground\n----------------------------------------------------\n\nYou are a clever student who has joined IIT Madras’ Online Degree in Data Science. You have just enrolled in the Tools in Data Science course.\n\nOut of kindness for your teaching assistants, you have decided to build an API that can automatically answer student questions on their behalf based on:\n\n Course content with content for TDS Jan 2025 as on 15 Apr 2025.\n TDS Discourse posts with content from 1 Jan 2025 - 14 Apr 2025.\n\nScrape the data\n--------------------------------------------------------------\n\nTo make sure you can answer these questions, you will need to extract the data from the above source.\n\nCreate an API\n----------------------------------------------------------\n\nYour application exposes an API endpoint. You may host it anywhere. Let’s assume it’s at https://app.example.com/api/.\n\nThe endpoint must accept a POST request, e.g. POST https://app.example.com/api/ with a student question as well as optional base64 file attachments as JSON.\n\nFor example, here’s how anyone can make a request:\n\ncurl \"https://app.example.com/api/\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"question\\\": \\\"Should I use gpt-4o-mini which AI proxy supports, or gpt3.5 turbo?\\\", \\\"image\\\": \\\"$(base64 -w0 project-tds-virtual-ta-q1.webp)\\\"}\"Copy to clipboardErrorCopied\n\nThis is a real question and uses this screenshot:\n\nThe response must be a JSON object like this:\n\n{\n  \"answer\": \"You must use gpt-3.5-turbo-0125, even if the AI Proxy only supports gpt-4o-mini. Use the OpenAI API directly for this question.\",\n  \"links\": [\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/4\",\n      \"text\": \"Use the model that’s mentioned in the question.\"\n    },\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/3\",\n      \"text\": \"My understanding is that you just have to use a tokenizer, similar to what Prof. Anand used, to get the number of tokens and multiply that by the given rate.\"\n    }\n  ]\n}Copy to clipboardErrorCopied\n\nEvaluate your application\n----------------------------------------------------------------------------------\n\nHere are a few sample questions and evaluation parameters. These are indicative. The actual evaluation could ask any realistic student question.\n\nTo run this:\n\n1. Edit project-tds-virtual-ta-promptfoo.yaml to replace providers[0].config.url with your API URL.\n2. Run this script:\n\n   \n   npx -y promptfoo eval --config project-tds-virtual-ta-promptfoo.yamlCopy to clipboardErrorCopied\n   \n\nDeploy your application\n------------------------------------------------------------------------------\n\nDeploy your application to a public URL that can be accessed by anyone. You may use any platform.\n\n(If you use ngrok, ensure that it is running continuously until you get your results.)\n\nShare your code\n--------------------------------------------------------------\n\n Create a new public GitHub repository\n Add an MIT LICENSE file\n Commit and push your code\n\nSubmit your URL\n--------------------------------------------------------------\n\nSubmit your GitHub repository URL and your API endpoint URL at <https://exam.sanand.workers.dev/tds-project-virtual-ta>\n\nEvaluation\n----------------------------------------------------\n\n Pre-requisites: Your repository MUST meet the following criteria to be eligible for evaluation\n  + Your GitHub repository exists and is publicly accessible\n  + Your GitHub repository has a LICENSE file with the MIT license in the root folder\n We will use a modified version of project-tds-virtual-ta-promptfoo.yaml with 10 realistic questions. Correct answers will be awarded up to 2 marks each.\n Your score will be the sum of the marks above. No normalization. What you get is what you get.\n\nBonus:\n\n 1 mark if your GitHub repo includes a script that scrapes the Discourse posts across a date range from a Discourse course page like TDS\n 2 marks if we deploy your solution (with minimal modifications) as an official solution for students to use.\n\nPrevious\n\nLLM Evals\n\nNext\n\n4. Data Sourcing"
  },
  {
    "title": "Project 1",
    "filename": "Project_1.md",
    "text": "Project: TDS Virtual TA\n=============================================================================\n\nCreate a virtual Teaching Assistant Discourse responder.\n\nBackground\n----------------------------------------------------\n\nYou are a clever student who has joined IIT Madras’ Online Degree in Data Science. You have just enrolled in the Tools in Data Science course.\n\nOut of kindness for your teaching assistants, you have decided to build an API that can automatically answer student questions on their behalf based on:\n\n Course content with content for TDS Jan 2025 as on 15 Apr 2025.\n TDS Discourse posts with content from 1 Jan 2025 - 14 Apr 2025.\n\nScrape the data\n--------------------------------------------------------------\n\nTo make sure you can answer these questions, you will need to extract the data from the above source.\n\nCreate an API\n----------------------------------------------------------\n\nYour application exposes an API endpoint. You may host it anywhere. Let’s assume it’s at https://app.example.com/api/.\n\nThe endpoint must accept a POST request, e.g. POST https://app.example.com/api/ with a student question as well as optional base64 file attachments as JSON.\n\nFor example, here’s how anyone can make a request:\n\ncurl \"https://app.example.com/api/\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"question\\\": \\\"Should I use gpt-4o-mini which AI proxy supports, or gpt3.5 turbo?\\\", \\\"image\\\": \\\"$(base64 -w0 project-tds-virtual-ta-q1.webp)\\\"}\"Copy to clipboardErrorCopied\n\nThis is a real question and uses this screenshot:\n\nThe response must be a JSON object like this:\n\n{\n  \"answer\": \"You must use gpt-3.5-turbo-0125, even if the AI Proxy only supports gpt-4o-mini. Use the OpenAI API directly for this question.\",\n  \"links\": [\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/4\",\n      \"text\": \"Use the model that’s mentioned in the question.\"\n    },\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/3\",\n      \"text\": \"My understanding is that you just have to use a tokenizer, similar to what Prof. Anand used, to get the number of tokens and multiply that by the given rate.\"\n    }\n  ]\n}Copy to clipboardErrorCopied\n\nEvaluate your application\n----------------------------------------------------------------------------------\n\nHere are a few sample questions and evaluation parameters. These are indicative. The actual evaluation could ask any realistic student question.\n\nTo run this:\n\n1. Edit project-tds-virtual-ta-promptfoo.yaml to replace providers[0].config.url with your API URL.\n2. Run this script:\n\n   \n   npx -y promptfoo eval --config project-tds-virtual-ta-promptfoo.yamlCopy to clipboardErrorCopied\n   \n\nDeploy your application\n------------------------------------------------------------------------------\n\nDeploy your application to a public URL that can be accessed by anyone. You may use any platform.\n\n(If you use ngrok, ensure that it is running continuously until you get your results.)\n\nShare your code\n--------------------------------------------------------------\n\n Create a new public GitHub repository\n Add an MIT LICENSE file\n Commit and push your code\n\nSubmit your URL\n--------------------------------------------------------------\n\nSubmit your GitHub repository URL and your API endpoint URL at <https://exam.sanand.workers.dev/tds-project-virtual-ta>\n\nEvaluation\n----------------------------------------------------\n\n Pre-requisites: Your repository MUST meet the following criteria to be eligible for evaluation\n  + Your GitHub repository exists and is publicly accessible\n  + Your GitHub repository has a LICENSE file with the MIT license in the root folder\n We will use a modified version of project-tds-virtual-ta-promptfoo.yaml with 10 realistic questions. Correct answers will be awarded up to 2 marks each.\n Your score will be the sum of the marks above. No normalization. What you get is what you get.\n\nBonus:\n\n 1 mark if your GitHub repo includes a script that scrapes the Discourse posts across a date range from a Discourse course page like TDS\n 2 marks if we deploy your solution (with minimal modifications) as an official solution for students to use.\n\nPrevious\n\nLLM Evals\n\nNext\n\n4. Data Sourcing"
  },
  {
    "title": "Project 1",
    "filename": "Project_1.md",
    "text": "Project: TDS Virtual TA\n=============================================================================\n\nCreate a virtual Teaching Assistant Discourse responder.\n\nBackground\n----------------------------------------------------\n\nYou are a clever student who has joined IIT Madras’ Online Degree in Data Science. You have just enrolled in the Tools in Data Science course.\n\nOut of kindness for your teaching assistants, you have decided to build an API that can automatically answer student questions on their behalf based on:\n\n Course content with content for TDS Jan 2025 as on 15 Apr 2025.\n TDS Discourse posts with content from 1 Jan 2025 - 14 Apr 2025.\n\nScrape the data\n--------------------------------------------------------------\n\nTo make sure you can answer these questions, you will need to extract the data from the above source.\n\nCreate an API\n----------------------------------------------------------\n\nYour application exposes an API endpoint. You may host it anywhere. Let’s assume it’s at https://app.example.com/api/.\n\nThe endpoint must accept a POST request, e.g. POST https://app.example.com/api/ with a student question as well as optional base64 file attachments as JSON.\n\nFor example, here’s how anyone can make a request:\n\ncurl \"https://app.example.com/api/\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"question\\\": \\\"Should I use gpt-4o-mini which AI proxy supports, or gpt3.5 turbo?\\\", \\\"image\\\": \\\"$(base64 -w0 project-tds-virtual-ta-q1.webp)\\\"}\"Copy to clipboardErrorCopied\n\nThis is a real question and uses this screenshot:\n\nThe response must be a JSON object like this:\n\n{\n  \"answer\": \"You must use gpt-3.5-turbo-0125, even if the AI Proxy only supports gpt-4o-mini. Use the OpenAI API directly for this question.\",\n  \"links\": [\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/4\",\n      \"text\": \"Use the model that’s mentioned in the question.\"\n    },\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/3\",\n      \"text\": \"My understanding is that you just have to use a tokenizer, similar to what Prof. Anand used, to get the number of tokens and multiply that by the given rate.\"\n    }\n  ]\n}Copy to clipboardErrorCopied\n\nEvaluate your application\n----------------------------------------------------------------------------------\n\nHere are a few sample questions and evaluation parameters. These are indicative. The actual evaluation could ask any realistic student question.\n\nTo run this:\n\n1. Edit project-tds-virtual-ta-promptfoo.yaml to replace providers[0].config.url with your API URL.\n2. Run this script:\n\n   \n   npx -y promptfoo eval --config project-tds-virtual-ta-promptfoo.yamlCopy to clipboardErrorCopied\n   \n\nDeploy your application\n------------------------------------------------------------------------------\n\nDeploy your application to a public URL that can be accessed by anyone. You may use any platform.\n\n(If you use ngrok, ensure that it is running continuously until you get your results.)\n\nShare your code\n--------------------------------------------------------------\n\n Create a new public GitHub repository\n Add an MIT LICENSE file\n Commit and push your code\n\nSubmit your URL\n--------------------------------------------------------------\n\nSubmit your GitHub repository URL and your API endpoint URL at <https://exam.sanand.workers.dev/tds-project-virtual-ta>\n\nEvaluation\n----------------------------------------------------\n\n Pre-requisites: Your repository MUST meet the following criteria to be eligible for evaluation\n  + Your GitHub repository exists and is publicly accessible\n  + Your GitHub repository has a LICENSE file with the MIT license in the root folder\n We will use a modified version of project-tds-virtual-ta-promptfoo.yaml with 10 realistic questions. Correct answers will be awarded up to 2 marks each.\n Your score will be the sum of the marks above. No normalization. What you get is what you get.\n\nBonus:\n\n 1 mark if your GitHub repo includes a script that scrapes the Discourse posts across a date range from a Discourse course page like TDS\n 2 marks if we deploy your solution (with minimal modifications) as an official solution for students to use.\n\nPrevious\n\nLLM Evals\n\nNext\n\n4. Data Sourcing"
  },
  {
    "title": "Project 1",
    "filename": "Project_1.md",
    "text": "Project: TDS Virtual TA\n=============================================================================\n\nCreate a virtual Teaching Assistant Discourse responder.\n\nBackground\n----------------------------------------------------\n\nYou are a clever student who has joined IIT Madras’ Online Degree in Data Science. You have just enrolled in the Tools in Data Science course.\n\nOut of kindness for your teaching assistants, you have decided to build an API that can automatically answer student questions on their behalf based on:\n\n Course content with content for TDS Jan 2025 as on 15 Apr 2025.\n TDS Discourse posts with content from 1 Jan 2025 - 14 Apr 2025.\n\nScrape the data\n--------------------------------------------------------------\n\nTo make sure you can answer these questions, you will need to extract the data from the above source.\n\nCreate an API\n----------------------------------------------------------\n\nYour application exposes an API endpoint. You may host it anywhere. Let’s assume it’s at https://app.example.com/api/.\n\nThe endpoint must accept a POST request, e.g. POST https://app.example.com/api/ with a student question as well as optional base64 file attachments as JSON.\n\nFor example, here’s how anyone can make a request:\n\ncurl \"https://app.example.com/api/\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"question\\\": \\\"Should I use gpt-4o-mini which AI proxy supports, or gpt3.5 turbo?\\\", \\\"image\\\": \\\"$(base64 -w0 project-tds-virtual-ta-q1.webp)\\\"}\"Copy to clipboardErrorCopied\n\nThis is a real question and uses this screenshot:\n\nThe response must be a JSON object like this:\n\n{\n  \"answer\": \"You must use gpt-3.5-turbo-0125, even if the AI Proxy only supports gpt-4o-mini. Use the OpenAI API directly for this question.\",\n  \"links\": [\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/4\",\n      \"text\": \"Use the model that’s mentioned in the question.\"\n    },\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/3\",\n      \"text\": \"My understanding is that you just have to use a tokenizer, similar to what Prof. Anand used, to get the number of tokens and multiply that by the given rate.\"\n    }\n  ]\n}Copy to clipboardErrorCopied\n\nEvaluate your application\n----------------------------------------------------------------------------------\n\nHere are a few sample questions and evaluation parameters. These are indicative. The actual evaluation could ask any realistic student question.\n\nTo run this:\n\n1. Edit project-tds-virtual-ta-promptfoo.yaml to replace providers[0].config.url with your API URL.\n2. Run this script:\n\n   \n   npx -y promptfoo eval --config project-tds-virtual-ta-promptfoo.yamlCopy to clipboardErrorCopied\n   \n\nDeploy your application\n------------------------------------------------------------------------------\n\nDeploy your application to a public URL that can be accessed by anyone. You may use any platform.\n\n(If you use ngrok, ensure that it is running continuously until you get your results.)\n\nShare your code\n--------------------------------------------------------------\n\n Create a new public GitHub repository\n Add an MIT LICENSE file\n Commit and push your code\n\nSubmit your URL\n--------------------------------------------------------------\n\nSubmit your GitHub repository URL and your API endpoint URL at <https://exam.sanand.workers.dev/tds-project-virtual-ta>\n\nEvaluation\n----------------------------------------------------\n\n Pre-requisites: Your repository MUST meet the following criteria to be eligible for evaluation\n  + Your GitHub repository exists and is publicly accessible\n  + Your GitHub repository has a LICENSE file with the MIT license in the root folder\n We will use a modified version of project-tds-virtual-ta-promptfoo.yaml with 10 realistic questions. Correct answers will be awarded up to 2 marks each.\n Your score will be the sum of the marks above. No normalization. What you get is what you get.\n\nBonus:\n\n 1 mark if your GitHub repo includes a script that scrapes the Discourse posts across a date range from a Discourse course page like TDS\n 2 marks if we deploy your solution (with minimal modifications) as an official solution for students to use.\n\nPrevious\n\nLLM Evals\n\nNext\n\n4. Data Sourcing"
  },
  {
    "title": "Project 1",
    "filename": "Project_1.md",
    "text": "Project: TDS Virtual TA\n=============================================================================\n\nCreate a virtual Teaching Assistant Discourse responder.\n\nBackground\n----------------------------------------------------\n\nYou are a clever student who has joined IIT Madras’ Online Degree in Data Science. You have just enrolled in the Tools in Data Science course.\n\nOut of kindness for your teaching assistants, you have decided to build an API that can automatically answer student questions on their behalf based on:\n\n Course content with content for TDS Jan 2025 as on 15 Apr 2025.\n TDS Discourse posts with content from 1 Jan 2025 - 14 Apr 2025.\n\nScrape the data\n--------------------------------------------------------------\n\nTo make sure you can answer these questions, you will need to extract the data from the above source.\n\nCreate an API\n----------------------------------------------------------\n\nYour application exposes an API endpoint. You may host it anywhere. Let’s assume it’s at https://app.example.com/api/.\n\nThe endpoint must accept a POST request, e.g. POST https://app.example.com/api/ with a student question as well as optional base64 file attachments as JSON.\n\nFor example, here’s how anyone can make a request:\n\ncurl \"https://app.example.com/api/\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"question\\\": \\\"Should I use gpt-4o-mini which AI proxy supports, or gpt3.5 turbo?\\\", \\\"image\\\": \\\"$(base64 -w0 project-tds-virtual-ta-q1.webp)\\\"}\"Copy to clipboardErrorCopied\n\nThis is a real question and uses this screenshot:\n\nThe response must be a JSON object like this:\n\n{\n  \"answer\": \"You must use gpt-3.5-turbo-0125, even if the AI Proxy only supports gpt-4o-mini. Use the OpenAI API directly for this question.\",\n  \"links\": [\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/4\",\n      \"text\": \"Use the model that’s mentioned in the question.\"\n    },\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/3\",\n      \"text\": \"My understanding is that you just have to use a tokenizer, similar to what Prof. Anand used, to get the number of tokens and multiply that by the given rate.\"\n    }\n  ]\n}Copy to clipboardErrorCopied\n\nEvaluate your application\n----------------------------------------------------------------------------------\n\nHere are a few sample questions and evaluation parameters. These are indicative. The actual evaluation could ask any realistic student question.\n\nTo run this:\n\n1. Edit project-tds-virtual-ta-promptfoo.yaml to replace providers[0].config.url with your API URL.\n2. Run this script:\n\n   \n   npx -y promptfoo eval --config project-tds-virtual-ta-promptfoo.yamlCopy to clipboardErrorCopied\n   \n\nDeploy your application\n------------------------------------------------------------------------------\n\nDeploy your application to a public URL that can be accessed by anyone. You may use any platform.\n\n(If you use ngrok, ensure that it is running continuously until you get your results.)\n\nShare your code\n--------------------------------------------------------------\n\n Create a new public GitHub repository\n Add an MIT LICENSE file\n Commit and push your code\n\nSubmit your URL\n--------------------------------------------------------------\n\nSubmit your GitHub repository URL and your API endpoint URL at <https://exam.sanand.workers.dev/tds-project-virtual-ta>\n\nEvaluation\n----------------------------------------------------\n\n Pre-requisites: Your repository MUST meet the following criteria to be eligible for evaluation\n  + Your GitHub repository exists and is publicly accessible\n  + Your GitHub repository has a LICENSE file with the MIT license in the root folder\n We will use a modified version of project-tds-virtual-ta-promptfoo.yaml with 10 realistic questions. Correct answers will be awarded up to 2 marks each.\n Your score will be the sum of the marks above. No normalization. What you get is what you get.\n\nBonus:\n\n 1 mark if your GitHub repo includes a script that scrapes the Discourse posts across a date range from a Discourse course page like TDS\n 2 marks if we deploy your solution (with minimal modifications) as an official solution for students to use.\n\nPrevious\n\nLLM Evals\n\nNext\n\n4. Data Sourcing"
  },
  {
    "title": "Data Visualization with Seaborn",
    "filename": "Data_Visualization_with_Seaborn.md",
    "text": "Data Visualization with Seaborn\n-------------------------------------------------------------------------------------------------------\n\nSeaborn is a data visualization library for Python. It’s based on Matplotlib but a bit easier to use, and a bit prettier.\n\n[](https://youtu.be/6GUZXDef2U0)\n\nPrevious\n\nVisualizing Charts with Excel\n\nNext\n\nData Visualization with ChatGPT"
  },
  {
    "title": "Data Visualization with Seaborn",
    "filename": "Data_Visualization_with_Seaborn.md",
    "text": "Data Visualization with Seaborn\n-------------------------------------------------------------------------------------------------------\n\nSeaborn is a data visualization library for Python. It’s based on Matplotlib but a bit easier to use, and a bit prettier.\n\n[](https://youtu.be/6GUZXDef2U0)\n\nPrevious\n\nVisualizing Charts with Excel\n\nNext\n\nData Visualization with ChatGPT"
  },
  {
    "title": "LLM Evals",
    "filename": "LLM_Evals.md",
    "text": "LLM Evaluations with PromptFoo\n-------------------------------------------------------------------------------\n\nTest-drive your prompts and models with automated, reliable evaluations.\n\n[](https://youtu.be/KhINc5XwhKs)\n\nPromptFoo is a test-driven development framework for LLMs:\n\n Developer-first: Fast CLI with live reload & caching (promptfoo.dev)\n Multi-provider: Works with OpenAI, Anthropic, HuggingFace, Ollama & more (GitHub)\n Assertions: Built‑in (contains, equals) & model‑graded (llm-rubric) (docs)\n CI/CD: Integrate evals into pipelines for regression safety (CI/CD guide)\n\nTo run PromptFoo:\n\n1. Install Node.js & npm (nodejs.org)\n2. Set up your OPENAIAPIKEY environment variable\n3. Configure promptfooconfig.yaml. Below is an example:\n\nprompts:\n  - |\n    Summarize this text: \"{{text}}\"\n  - |\n    Please write a concise summary of: \"{{text}}\"\n\nproviders:\n  - openai:gpt-3.5-turbo\n  - openai:gpt-4\n\ntests:\n  - name: summarytest\n    vars:\n      text: \"PromptFoo is an open-source CLI and library for evaluating and testing LLMs with assertions, caching, and matrices.\"\n    assertions:\n      - contains-all:\n          values:\n            - \"open-source\"\n            - \"LLMs\"\n      - llm-rubric:\n          instruction: |\n            Score the summary from 1 to 5 for:\n            - relevance: captures the main info?\n            - clarity: wording is clear and concise?\n          schema:\n            type: object\n            properties:\n              relevance:\n                type: number\n                minimum: 1\n                maximum: 5\n              clarity:\n                type: number\n                minimum: 1\n                maximum: 5\n            required: [relevance, clarity]\n            additionalProperties: false\n\ncommandLineOptions:\n  cache: trueCopy to clipboardErrorCopied\n\nNow, you can run the evaluations and see the results.\n\nExecute all tests\nnpx -y promptfoo eval -c promptfooconfig.yaml\n\nList past evaluations\nnpx -y promptfoo list evals\n\nLaunch interactive results viewer on port 8080\nnpx -y promptfoo view -p 8080Copy to clipboardErrorCopied\n\nPromptFoo caches API responses by default (TTL 14 days). You can disable it with --no-cache or clear it.\n\nDisable cache for this run\necho y | promptfoo eval --no-cache -c promptfooconfig.yaml\n\nClear all cache\necho y | promptfoo cache clearCopy to clipboardErrorCopied\n\nPrevious\n\nLLM Speech\n\nNext\n\nProject 1"
  },
  {
    "title": "LLM Evals",
    "filename": "LLM_Evals.md",
    "text": "LLM Evaluations with PromptFoo\n-------------------------------------------------------------------------------\n\nTest-drive your prompts and models with automated, reliable evaluations.\n\n[](https://youtu.be/KhINc5XwhKs)\n\nPromptFoo is a test-driven development framework for LLMs:\n\n Developer-first: Fast CLI with live reload & caching (promptfoo.dev)\n Multi-provider: Works with OpenAI, Anthropic, HuggingFace, Ollama & more (GitHub)\n Assertions: Built‑in (contains, equals) & model‑graded (llm-rubric) (docs)\n CI/CD: Integrate evals into pipelines for regression safety (CI/CD guide)\n\nTo run PromptFoo:\n\n1. Install Node.js & npm (nodejs.org)\n2. Set up your OPENAIAPIKEY environment variable\n3. Configure promptfooconfig.yaml. Below is an example:\n\nprompts:\n  - |\n    Summarize this text: \"{{text}}\"\n  - |\n    Please write a concise summary of: \"{{text}}\"\n\nproviders:\n  - openai:gpt-3.5-turbo\n  - openai:gpt-4\n\ntests:\n  - name: summarytest\n    vars:\n      text: \"PromptFoo is an open-source CLI and library for evaluating and testing LLMs with assertions, caching, and matrices.\"\n    assertions:\n      - contains-all:\n          values:\n            - \"open-source\"\n            - \"LLMs\"\n      - llm-rubric:\n          instruction: |\n            Score the summary from 1 to 5 for:\n            - relevance: captures the main info?\n            - clarity: wording is clear and concise?\n          schema:\n            type: object\n            properties:\n              relevance:\n                type: number\n                minimum: 1\n                maximum: 5\n              clarity:\n                type: number\n                minimum: 1\n                maximum: 5\n            required: [relevance, clarity]\n            additionalProperties: false\n\ncommandLineOptions:\n  cache: trueCopy to clipboardErrorCopied\n\nNow, you can run the evaluations and see the results.\n\nExecute all tests\nnpx -y promptfoo eval -c promptfooconfig.yaml\n\nList past evaluations\nnpx -y promptfoo list evals\n\nLaunch interactive results viewer on port 8080\nnpx -y promptfoo view -p 8080Copy to clipboardErrorCopied\n\nPromptFoo caches API responses by default (TTL 14 days). You can disable it with --no-cache or clear it.\n\nDisable cache for this run\necho y | promptfoo eval --no-cache -c promptfooconfig.yaml\n\nClear all cache\necho y | promptfoo cache clearCopy to clipboardErrorCopied\n\nPrevious\n\nLLM Speech\n\nNext\n\nProject 1"
  },
  {
    "title": "JSON",
    "filename": "JSON.md",
    "text": "404 - Not found\n==============="
  },
  {
    "title": "JSON",
    "filename": "JSON.md",
    "text": "404 - Not found\n==============="
  },
  {
    "title": "JSON",
    "filename": "JSON.md",
    "text": "404 - Not found\n==============="
  },
  {
    "title": "Browser: DevTools",
    "filename": "Browser__DevTools.md",
    "text": "404 - Not found\n==============="
  },
  {
    "title": "Data Analysis with Python",
    "filename": "Data_Analysis_with_Python.md",
    "text": "404 - Not found\n==============="
  },
  {
    "title": "Data Analysis with Python",
    "filename": "Data_Analysis_with_Python.md",
    "text": "404 - Not found\n==============="
  },
  {
    "title": "Data Analysis with Python",
    "filename": "Data_Analysis_with_Python.md",
    "text": "404 - Not found\n==============="
  },
  {
    "title": "Convert PDFs to Markdown",
    "filename": "Convert_PDFs_to_Markdown.md",
    "text": "Converting PDFs to Markdown\n----------------------------------------------------------------------------------------\n\nPDF documents are ubiquitous in academic, business, and technical contexts, but extracting and repurposing their content can be challenging. This tutorial explores various command-line tools for converting PDFs to Markdown format, with a focus on preserving structure and formatting suitable for different use cases, including preparation for Large Language Models (LLMs).\n\nUse Cases:\n\n LLM training and fine-tuning: Create clean text data from PDFs for AI model training\n Knowledge base creation: Transform PDFs into searchable, editable markdown documents\n Content repurposing: Convert academic papers and reports for web publication\n Data extraction: Pull structured content from PDF documents for analysis\n Accessibility: Convert PDFs to more accessible formats for screen readers\n Citation and reference management: Extract bibliographic information from academic papers\n Documentation conversion: Transform technical PDFs into maintainable documentation\n\nPyMuPDF4LLM\n\nPyMuPDF4LLM is a specialized component of the PyMuPDF library that generates Markdown specifically formatted for Large Language Models. It produces high-quality markdown with good preservation of document structure. It’s specifically optimized for producing text that works well with LLMs, removing irrelevant formatting while preserving semantic structure. Requires PyTorch, which adds dependencies but enables more advanced processing capabilities.\n\nPyMuPDF4LLM uses MuPDF as its PDF parsing engine. PyMuPDF is emerging as a strong default for PDF text extraction due to its accuracy and performance in handling complex PDF structures.\n\nPYTHONUTF8=1 uv run --with pymupdf4llm python -c 'import pymupdf4llm; h = open(\"pymupdf4llm.md\", \"w\"); h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\"))'Copy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding regardless of system locale\n uv run --with pymupdf4llm: Uses uv package manager to run Python with the pymupdf4llm package\n python -c '...': Executes Python code directly from the command line\n import pymupdf4llm: Imports the PDF-to-Markdown module\n h = open(\"pymupdf4llm.md\", \"w\"): Creates a file to write the markdown output\n h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\")): Converts the PDF to markdown and writes to file\n\nMarkitdown\n------------------------------------------------------\n\n[](https://youtu.be/v65Oyddfxeg)\n\nMarkitdown is Microsoft’s tool for converting various document formats to Markdown, including PDFs, DOCX, XLSX, PPTX, and ZIP files. It’s a versatile multi-format converter that handles PDFs via PDFMiner, DOCX via Mammoth, XLSX via Pandas, and PPTX via Python-PPTX. Good for batch processing of mixed document types. The quality of PDF conversion is generally good but may struggle with complex layouts or heavily formatted documents.\n\nPYTHONUTF8=1 uvx markitdown $FILE.pdf > markitdown.mdCopy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding\n uvx markitdown: Runs the markitdown tool via the uv package manager\n $FILE.pdf: The input PDF file\n > markitdown.md: Redirects output to a markdown file\n\nUnstructured\n\nUnstructured is rapidly becoming the de facto library for parsing over 40 different file types. It is excellent for extracting text and tables from diverse document formats. Particularly useful for generating clean content to pass to LLMs. Strong community support and actively maintained.\n\nGROBID\n----------------------------------------------\n\nIf you specifically need to parse references from text-native PDFs or reliably OCR’ed ones, GROBID remains the de facto choice. It excels at extracting structured bibliographic information with high accuracy.\n\nStart GROBID service\ndocker run -t --rm -p 8070:8070 lfoppiano/grobid:0.7.2\n\nProcess PDF with curl\ncurl -X POST -F \"input=@paper.pdf\" localhost:8070/api/processFulltextDocument > references.tei.xmlCopy to clipboardErrorCopied\n\nMistral OCR API\n\nMistral OCR offers an end-to-end cloud API that preserves both text and layout, making it easier to isolate specific sections like References. It shows the most promise currently, though it requires post-processing.\n\nAzure Document Intelligence API\n------------------------------------------------------------------------------------------------\n\nFor enterprise users already in the Microsoft ecosystem, Azure Document Intelligence provides excellent raw OCR with enterprise SLAs. May require custom model training or post-processing to match GROBID’s reference extraction capabilities.\n\nOther libraries\n\nDocling is IBM’s document understanding library that supports PDF conversion. It can be challenging to install, particularly on Windows and some Linux distributions. Offers advanced document understanding capabilities beyond simple text extraction.\n\nMegaParse takes a comprehensive approach using LibreOffice, Pandoc, Tesseract OCR, and other tools. It has Robust handling of different document types but requires an OpenAI API key for some features. Good for complex documents but has significant dependencies.\n\nComparison of PDF-to-Markdown Tools\n--------------------------------------------------------------------------------------------------------\n\n| Tool | Strengths | Weaknesses | Best For |\n| --- | --- | --- | --- |\n| PyMuPDF4LLM | Structure preservation, LLM optimization | Requires PyTorch | AI training data, semantic structure |\n| Markitdown | Multi-format support, simple usage | Less precise layout handling | Batch processing, mixed documents |\n| Unstructured | Wide format support, active development | Can be resource-intensive | Production pipelines, integration |\n| GROBID | Reference extraction excellence | Narrower use case | Academic papers, citations |\n| Docling | Advanced document understanding | Installation difficulties | Research applications |\n| MegaParse | Comprehensive approach | Requires OpenAI API | Complex documents, OCR needs |\n\nHow to pick:\n\n Need LLM-ready content? PyMuPDF4LLM is specifically designed for this\n Working with multiple document formats? Markitdown handles diverse inputs\n Extracting academic references? GROBID remains the standard\n Building a production pipeline? Unstructured offers the best integration options\n Handling complex layouts? Consider commercial OCR like Mistral or Azure Document Intelligence\n\nThe optimal approach depends on your specific requirements regarding accuracy, structure preservation, and the intended use of the extracted content.\n\nTips for Optimal PDF Conversion\n------------------------------------------------------------------------------------------------\n\n1. Pre-process PDFs when possible:\n\n   \n    Optimize a PDF for text extraction first\n   ocrmypdf --optimize 3 --skip-text input.pdf optimized.pdfCopy to clipboardErrorCopied\n   \n2. Try multiple tools on the same document to compare results:\n3. Handle scanned PDFs appropriately:\n\n   \n    For scanned documents, run OCR first\n   ocrmypdf --force-ocr input.pdf ocrready.pdf\n   PYTHONUTF8=1 uvx markitdown ocrready.pdf > markitdown.mdCopy to clipboardErrorCopied\n   \n4. Consider post-processing for better results:\n\n   \n    Simple post-processing example\n   sed -i 's/\\([A-Z]\\)\\./\\1\\.\\n/g' output.md   Add line breaks after sentencesCopy to clipboardErrorCopied\n   \n\nPrevious\n\nScraping PDFs with Tabula\n\nNext\n\nConvert HTML to Markdown"
  },
  {
    "title": "Convert PDFs to Markdown",
    "filename": "Convert_PDFs_to_Markdown.md",
    "text": "Converting PDFs to Markdown\n----------------------------------------------------------------------------------------\n\nPDF documents are ubiquitous in academic, business, and technical contexts, but extracting and repurposing their content can be challenging. This tutorial explores various command-line tools for converting PDFs to Markdown format, with a focus on preserving structure and formatting suitable for different use cases, including preparation for Large Language Models (LLMs).\n\nUse Cases:\n\n LLM training and fine-tuning: Create clean text data from PDFs for AI model training\n Knowledge base creation: Transform PDFs into searchable, editable markdown documents\n Content repurposing: Convert academic papers and reports for web publication\n Data extraction: Pull structured content from PDF documents for analysis\n Accessibility: Convert PDFs to more accessible formats for screen readers\n Citation and reference management: Extract bibliographic information from academic papers\n Documentation conversion: Transform technical PDFs into maintainable documentation\n\nPyMuPDF4LLM\n\nPyMuPDF4LLM is a specialized component of the PyMuPDF library that generates Markdown specifically formatted for Large Language Models. It produces high-quality markdown with good preservation of document structure. It’s specifically optimized for producing text that works well with LLMs, removing irrelevant formatting while preserving semantic structure. Requires PyTorch, which adds dependencies but enables more advanced processing capabilities.\n\nPyMuPDF4LLM uses MuPDF as its PDF parsing engine. PyMuPDF is emerging as a strong default for PDF text extraction due to its accuracy and performance in handling complex PDF structures.\n\nPYTHONUTF8=1 uv run --with pymupdf4llm python -c 'import pymupdf4llm; h = open(\"pymupdf4llm.md\", \"w\"); h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\"))'Copy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding regardless of system locale\n uv run --with pymupdf4llm: Uses uv package manager to run Python with the pymupdf4llm package\n python -c '...': Executes Python code directly from the command line\n import pymupdf4llm: Imports the PDF-to-Markdown module\n h = open(\"pymupdf4llm.md\", \"w\"): Creates a file to write the markdown output\n h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\")): Converts the PDF to markdown and writes to file\n\nMarkitdown\n------------------------------------------------------\n\n[](https://youtu.be/v65Oyddfxeg)\n\nMarkitdown is Microsoft’s tool for converting various document formats to Markdown, including PDFs, DOCX, XLSX, PPTX, and ZIP files. It’s a versatile multi-format converter that handles PDFs via PDFMiner, DOCX via Mammoth, XLSX via Pandas, and PPTX via Python-PPTX. Good for batch processing of mixed document types. The quality of PDF conversion is generally good but may struggle with complex layouts or heavily formatted documents.\n\nPYTHONUTF8=1 uvx markitdown $FILE.pdf > markitdown.mdCopy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding\n uvx markitdown: Runs the markitdown tool via the uv package manager\n $FILE.pdf: The input PDF file\n > markitdown.md: Redirects output to a markdown file\n\nUnstructured\n\nUnstructured is rapidly becoming the de facto library for parsing over 40 different file types. It is excellent for extracting text and tables from diverse document formats. Particularly useful for generating clean content to pass to LLMs. Strong community support and actively maintained.\n\nGROBID\n----------------------------------------------\n\nIf you specifically need to parse references from text-native PDFs or reliably OCR’ed ones, GROBID remains the de facto choice. It excels at extracting structured bibliographic information with high accuracy.\n\nStart GROBID service\ndocker run -t --rm -p 8070:8070 lfoppiano/grobid:0.7.2\n\nProcess PDF with curl\ncurl -X POST -F \"input=@paper.pdf\" localhost:8070/api/processFulltextDocument > references.tei.xmlCopy to clipboardErrorCopied\n\nMistral OCR API\n\nMistral OCR offers an end-to-end cloud API that preserves both text and layout, making it easier to isolate specific sections like References. It shows the most promise currently, though it requires post-processing.\n\nAzure Document Intelligence API\n------------------------------------------------------------------------------------------------\n\nFor enterprise users already in the Microsoft ecosystem, Azure Document Intelligence provides excellent raw OCR with enterprise SLAs. May require custom model training or post-processing to match GROBID’s reference extraction capabilities.\n\nOther libraries\n\nDocling is IBM’s document understanding library that supports PDF conversion. It can be challenging to install, particularly on Windows and some Linux distributions. Offers advanced document understanding capabilities beyond simple text extraction.\n\nMegaParse takes a comprehensive approach using LibreOffice, Pandoc, Tesseract OCR, and other tools. It has Robust handling of different document types but requires an OpenAI API key for some features. Good for complex documents but has significant dependencies.\n\nComparison of PDF-to-Markdown Tools\n--------------------------------------------------------------------------------------------------------\n\n| Tool | Strengths | Weaknesses | Best For |\n| --- | --- | --- | --- |\n| PyMuPDF4LLM | Structure preservation, LLM optimization | Requires PyTorch | AI training data, semantic structure |\n| Markitdown | Multi-format support, simple usage | Less precise layout handling | Batch processing, mixed documents |\n| Unstructured | Wide format support, active development | Can be resource-intensive | Production pipelines, integration |\n| GROBID | Reference extraction excellence | Narrower use case | Academic papers, citations |\n| Docling | Advanced document understanding | Installation difficulties | Research applications |\n| MegaParse | Comprehensive approach | Requires OpenAI API | Complex documents, OCR needs |\n\nHow to pick:\n\n Need LLM-ready content? PyMuPDF4LLM is specifically designed for this\n Working with multiple document formats? Markitdown handles diverse inputs\n Extracting academic references? GROBID remains the standard\n Building a production pipeline? Unstructured offers the best integration options\n Handling complex layouts? Consider commercial OCR like Mistral or Azure Document Intelligence\n\nThe optimal approach depends on your specific requirements regarding accuracy, structure preservation, and the intended use of the extracted content.\n\nTips for Optimal PDF Conversion\n------------------------------------------------------------------------------------------------\n\n1. Pre-process PDFs when possible:\n\n   \n    Optimize a PDF for text extraction first\n   ocrmypdf --optimize 3 --skip-text input.pdf optimized.pdfCopy to clipboardErrorCopied\n   \n2. Try multiple tools on the same document to compare results:\n3. Handle scanned PDFs appropriately:\n\n   \n    For scanned documents, run OCR first\n   ocrmypdf --force-ocr input.pdf ocrready.pdf\n   PYTHONUTF8=1 uvx markitdown ocrready.pdf > markitdown.mdCopy to clipboardErrorCopied\n   \n4. Consider post-processing for better results:\n\n   \n    Simple post-processing example\n   sed -i 's/\\([A-Z]\\)\\./\\1\\.\\n/g' output.md   Add line breaks after sentencesCopy to clipboardErrorCopied\n   \n\nPrevious\n\nScraping PDFs with Tabula\n\nNext\n\nConvert HTML to Markdown"
  },
  {
    "title": "Convert PDFs to Markdown",
    "filename": "Convert_PDFs_to_Markdown.md",
    "text": "Converting PDFs to Markdown\n----------------------------------------------------------------------------------------\n\nPDF documents are ubiquitous in academic, business, and technical contexts, but extracting and repurposing their content can be challenging. This tutorial explores various command-line tools for converting PDFs to Markdown format, with a focus on preserving structure and formatting suitable for different use cases, including preparation for Large Language Models (LLMs).\n\nUse Cases:\n\n LLM training and fine-tuning: Create clean text data from PDFs for AI model training\n Knowledge base creation: Transform PDFs into searchable, editable markdown documents\n Content repurposing: Convert academic papers and reports for web publication\n Data extraction: Pull structured content from PDF documents for analysis\n Accessibility: Convert PDFs to more accessible formats for screen readers\n Citation and reference management: Extract bibliographic information from academic papers\n Documentation conversion: Transform technical PDFs into maintainable documentation\n\nPyMuPDF4LLM\n\nPyMuPDF4LLM is a specialized component of the PyMuPDF library that generates Markdown specifically formatted for Large Language Models. It produces high-quality markdown with good preservation of document structure. It’s specifically optimized for producing text that works well with LLMs, removing irrelevant formatting while preserving semantic structure. Requires PyTorch, which adds dependencies but enables more advanced processing capabilities.\n\nPyMuPDF4LLM uses MuPDF as its PDF parsing engine. PyMuPDF is emerging as a strong default for PDF text extraction due to its accuracy and performance in handling complex PDF structures.\n\nPYTHONUTF8=1 uv run --with pymupdf4llm python -c 'import pymupdf4llm; h = open(\"pymupdf4llm.md\", \"w\"); h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\"))'Copy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding regardless of system locale\n uv run --with pymupdf4llm: Uses uv package manager to run Python with the pymupdf4llm package\n python -c '...': Executes Python code directly from the command line\n import pymupdf4llm: Imports the PDF-to-Markdown module\n h = open(\"pymupdf4llm.md\", \"w\"): Creates a file to write the markdown output\n h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\")): Converts the PDF to markdown and writes to file\n\nMarkitdown\n------------------------------------------------------\n\n[](https://youtu.be/v65Oyddfxeg)\n\nMarkitdown is Microsoft’s tool for converting various document formats to Markdown, including PDFs, DOCX, XLSX, PPTX, and ZIP files. It’s a versatile multi-format converter that handles PDFs via PDFMiner, DOCX via Mammoth, XLSX via Pandas, and PPTX via Python-PPTX. Good for batch processing of mixed document types. The quality of PDF conversion is generally good but may struggle with complex layouts or heavily formatted documents.\n\nPYTHONUTF8=1 uvx markitdown $FILE.pdf > markitdown.mdCopy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding\n uvx markitdown: Runs the markitdown tool via the uv package manager\n $FILE.pdf: The input PDF file\n > markitdown.md: Redirects output to a markdown file\n\nUnstructured\n\nUnstructured is rapidly becoming the de facto library for parsing over 40 different file types. It is excellent for extracting text and tables from diverse document formats. Particularly useful for generating clean content to pass to LLMs. Strong community support and actively maintained.\n\nGROBID\n----------------------------------------------\n\nIf you specifically need to parse references from text-native PDFs or reliably OCR’ed ones, GROBID remains the de facto choice. It excels at extracting structured bibliographic information with high accuracy.\n\nStart GROBID service\ndocker run -t --rm -p 8070:8070 lfoppiano/grobid:0.7.2\n\nProcess PDF with curl\ncurl -X POST -F \"input=@paper.pdf\" localhost:8070/api/processFulltextDocument > references.tei.xmlCopy to clipboardErrorCopied\n\nMistral OCR API\n\nMistral OCR offers an end-to-end cloud API that preserves both text and layout, making it easier to isolate specific sections like References. It shows the most promise currently, though it requires post-processing.\n\nAzure Document Intelligence API\n------------------------------------------------------------------------------------------------\n\nFor enterprise users already in the Microsoft ecosystem, Azure Document Intelligence provides excellent raw OCR with enterprise SLAs. May require custom model training or post-processing to match GROBID’s reference extraction capabilities.\n\nOther libraries\n\nDocling is IBM’s document understanding library that supports PDF conversion. It can be challenging to install, particularly on Windows and some Linux distributions. Offers advanced document understanding capabilities beyond simple text extraction.\n\nMegaParse takes a comprehensive approach using LibreOffice, Pandoc, Tesseract OCR, and other tools. It has Robust handling of different document types but requires an OpenAI API key for some features. Good for complex documents but has significant dependencies.\n\nComparison of PDF-to-Markdown Tools\n--------------------------------------------------------------------------------------------------------\n\n| Tool | Strengths | Weaknesses | Best For |\n| --- | --- | --- | --- |\n| PyMuPDF4LLM | Structure preservation, LLM optimization | Requires PyTorch | AI training data, semantic structure |\n| Markitdown | Multi-format support, simple usage | Less precise layout handling | Batch processing, mixed documents |\n| Unstructured | Wide format support, active development | Can be resource-intensive | Production pipelines, integration |\n| GROBID | Reference extraction excellence | Narrower use case | Academic papers, citations |\n| Docling | Advanced document understanding | Installation difficulties | Research applications |\n| MegaParse | Comprehensive approach | Requires OpenAI API | Complex documents, OCR needs |\n\nHow to pick:\n\n Need LLM-ready content? PyMuPDF4LLM is specifically designed for this\n Working with multiple document formats? Markitdown handles diverse inputs\n Extracting academic references? GROBID remains the standard\n Building a production pipeline? Unstructured offers the best integration options\n Handling complex layouts? Consider commercial OCR like Mistral or Azure Document Intelligence\n\nThe optimal approach depends on your specific requirements regarding accuracy, structure preservation, and the intended use of the extracted content.\n\nTips for Optimal PDF Conversion\n------------------------------------------------------------------------------------------------\n\n1. Pre-process PDFs when possible:\n\n   \n    Optimize a PDF for text extraction first\n   ocrmypdf --optimize 3 --skip-text input.pdf optimized.pdfCopy to clipboardErrorCopied\n   \n2. Try multiple tools on the same document to compare results:\n3. Handle scanned PDFs appropriately:\n\n   \n    For scanned documents, run OCR first\n   ocrmypdf --force-ocr input.pdf ocrready.pdf\n   PYTHONUTF8=1 uvx markitdown ocrready.pdf > markitdown.mdCopy to clipboardErrorCopied\n   \n4. Consider post-processing for better results:\n\n   \n    Simple post-processing example\n   sed -i 's/\\([A-Z]\\)\\./\\1\\.\\n/g' output.md   Add line breaks after sentencesCopy to clipboardErrorCopied\n   \n\nPrevious\n\nScraping PDFs with Tabula\n\nNext\n\nConvert HTML to Markdown"
  },
  {
    "title": "Convert PDFs to Markdown",
    "filename": "Convert_PDFs_to_Markdown.md",
    "text": "Converting PDFs to Markdown\n----------------------------------------------------------------------------------------\n\nPDF documents are ubiquitous in academic, business, and technical contexts, but extracting and repurposing their content can be challenging. This tutorial explores various command-line tools for converting PDFs to Markdown format, with a focus on preserving structure and formatting suitable for different use cases, including preparation for Large Language Models (LLMs).\n\nUse Cases:\n\n LLM training and fine-tuning: Create clean text data from PDFs for AI model training\n Knowledge base creation: Transform PDFs into searchable, editable markdown documents\n Content repurposing: Convert academic papers and reports for web publication\n Data extraction: Pull structured content from PDF documents for analysis\n Accessibility: Convert PDFs to more accessible formats for screen readers\n Citation and reference management: Extract bibliographic information from academic papers\n Documentation conversion: Transform technical PDFs into maintainable documentation\n\nPyMuPDF4LLM\n\nPyMuPDF4LLM is a specialized component of the PyMuPDF library that generates Markdown specifically formatted for Large Language Models. It produces high-quality markdown with good preservation of document structure. It’s specifically optimized for producing text that works well with LLMs, removing irrelevant formatting while preserving semantic structure. Requires PyTorch, which adds dependencies but enables more advanced processing capabilities.\n\nPyMuPDF4LLM uses MuPDF as its PDF parsing engine. PyMuPDF is emerging as a strong default for PDF text extraction due to its accuracy and performance in handling complex PDF structures.\n\nPYTHONUTF8=1 uv run --with pymupdf4llm python -c 'import pymupdf4llm; h = open(\"pymupdf4llm.md\", \"w\"); h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\"))'Copy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding regardless of system locale\n uv run --with pymupdf4llm: Uses uv package manager to run Python with the pymupdf4llm package\n python -c '...': Executes Python code directly from the command line\n import pymupdf4llm: Imports the PDF-to-Markdown module\n h = open(\"pymupdf4llm.md\", \"w\"): Creates a file to write the markdown output\n h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\")): Converts the PDF to markdown and writes to file\n\nMarkitdown\n------------------------------------------------------\n\n[](https://youtu.be/v65Oyddfxeg)\n\nMarkitdown is Microsoft’s tool for converting various document formats to Markdown, including PDFs, DOCX, XLSX, PPTX, and ZIP files. It’s a versatile multi-format converter that handles PDFs via PDFMiner, DOCX via Mammoth, XLSX via Pandas, and PPTX via Python-PPTX. Good for batch processing of mixed document types. The quality of PDF conversion is generally good but may struggle with complex layouts or heavily formatted documents.\n\nPYTHONUTF8=1 uvx markitdown $FILE.pdf > markitdown.mdCopy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding\n uvx markitdown: Runs the markitdown tool via the uv package manager\n $FILE.pdf: The input PDF file\n > markitdown.md: Redirects output to a markdown file\n\nUnstructured\n\nUnstructured is rapidly becoming the de facto library for parsing over 40 different file types. It is excellent for extracting text and tables from diverse document formats. Particularly useful for generating clean content to pass to LLMs. Strong community support and actively maintained.\n\nGROBID\n----------------------------------------------\n\nIf you specifically need to parse references from text-native PDFs or reliably OCR’ed ones, GROBID remains the de facto choice. It excels at extracting structured bibliographic information with high accuracy.\n\nStart GROBID service\ndocker run -t --rm -p 8070:8070 lfoppiano/grobid:0.7.2\n\nProcess PDF with curl\ncurl -X POST -F \"input=@paper.pdf\" localhost:8070/api/processFulltextDocument > references.tei.xmlCopy to clipboardErrorCopied\n\nMistral OCR API\n\nMistral OCR offers an end-to-end cloud API that preserves both text and layout, making it easier to isolate specific sections like References. It shows the most promise currently, though it requires post-processing.\n\nAzure Document Intelligence API\n------------------------------------------------------------------------------------------------\n\nFor enterprise users already in the Microsoft ecosystem, Azure Document Intelligence provides excellent raw OCR with enterprise SLAs. May require custom model training or post-processing to match GROBID’s reference extraction capabilities.\n\nOther libraries\n\nDocling is IBM’s document understanding library that supports PDF conversion. It can be challenging to install, particularly on Windows and some Linux distributions. Offers advanced document understanding capabilities beyond simple text extraction.\n\nMegaParse takes a comprehensive approach using LibreOffice, Pandoc, Tesseract OCR, and other tools. It has Robust handling of different document types but requires an OpenAI API key for some features. Good for complex documents but has significant dependencies.\n\nComparison of PDF-to-Markdown Tools\n--------------------------------------------------------------------------------------------------------\n\n| Tool | Strengths | Weaknesses | Best For |\n| --- | --- | --- | --- |\n| PyMuPDF4LLM | Structure preservation, LLM optimization | Requires PyTorch | AI training data, semantic structure |\n| Markitdown | Multi-format support, simple usage | Less precise layout handling | Batch processing, mixed documents |\n| Unstructured | Wide format support, active development | Can be resource-intensive | Production pipelines, integration |\n| GROBID | Reference extraction excellence | Narrower use case | Academic papers, citations |\n| Docling | Advanced document understanding | Installation difficulties | Research applications |\n| MegaParse | Comprehensive approach | Requires OpenAI API | Complex documents, OCR needs |\n\nHow to pick:\n\n Need LLM-ready content? PyMuPDF4LLM is specifically designed for this\n Working with multiple document formats? Markitdown handles diverse inputs\n Extracting academic references? GROBID remains the standard\n Building a production pipeline? Unstructured offers the best integration options\n Handling complex layouts? Consider commercial OCR like Mistral or Azure Document Intelligence\n\nThe optimal approach depends on your specific requirements regarding accuracy, structure preservation, and the intended use of the extracted content.\n\nTips for Optimal PDF Conversion\n------------------------------------------------------------------------------------------------\n\n1. Pre-process PDFs when possible:\n\n   \n    Optimize a PDF for text extraction first\n   ocrmypdf --optimize 3 --skip-text input.pdf optimized.pdfCopy to clipboardErrorCopied\n   \n2. Try multiple tools on the same document to compare results:\n3. Handle scanned PDFs appropriately:\n\n   \n    For scanned documents, run OCR first\n   ocrmypdf --force-ocr input.pdf ocrready.pdf\n   PYTHONUTF8=1 uvx markitdown ocrready.pdf > markitdown.mdCopy to clipboardErrorCopied\n   \n4. Consider post-processing for better results:\n\n   \n    Simple post-processing example\n   sed -i 's/\\([A-Z]\\)\\./\\1\\.\\n/g' output.md   Add line breaks after sentencesCopy to clipboardErrorCopied\n   \n\nPrevious\n\nScraping PDFs with Tabula\n\nNext\n\nConvert HTML to Markdown"
  },
  {
    "title": "Convert PDFs to Markdown",
    "filename": "Convert_PDFs_to_Markdown.md",
    "text": "Converting PDFs to Markdown\n----------------------------------------------------------------------------------------\n\nPDF documents are ubiquitous in academic, business, and technical contexts, but extracting and repurposing their content can be challenging. This tutorial explores various command-line tools for converting PDFs to Markdown format, with a focus on preserving structure and formatting suitable for different use cases, including preparation for Large Language Models (LLMs).\n\nUse Cases:\n\n LLM training and fine-tuning: Create clean text data from PDFs for AI model training\n Knowledge base creation: Transform PDFs into searchable, editable markdown documents\n Content repurposing: Convert academic papers and reports for web publication\n Data extraction: Pull structured content from PDF documents for analysis\n Accessibility: Convert PDFs to more accessible formats for screen readers\n Citation and reference management: Extract bibliographic information from academic papers\n Documentation conversion: Transform technical PDFs into maintainable documentation\n\nPyMuPDF4LLM\n\nPyMuPDF4LLM is a specialized component of the PyMuPDF library that generates Markdown specifically formatted for Large Language Models. It produces high-quality markdown with good preservation of document structure. It’s specifically optimized for producing text that works well with LLMs, removing irrelevant formatting while preserving semantic structure. Requires PyTorch, which adds dependencies but enables more advanced processing capabilities.\n\nPyMuPDF4LLM uses MuPDF as its PDF parsing engine. PyMuPDF is emerging as a strong default for PDF text extraction due to its accuracy and performance in handling complex PDF structures.\n\nPYTHONUTF8=1 uv run --with pymupdf4llm python -c 'import pymupdf4llm; h = open(\"pymupdf4llm.md\", \"w\"); h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\"))'Copy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding regardless of system locale\n uv run --with pymupdf4llm: Uses uv package manager to run Python with the pymupdf4llm package\n python -c '...': Executes Python code directly from the command line\n import pymupdf4llm: Imports the PDF-to-Markdown module\n h = open(\"pymupdf4llm.md\", \"w\"): Creates a file to write the markdown output\n h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\")): Converts the PDF to markdown and writes to file\n\nMarkitdown\n------------------------------------------------------\n\n[](https://youtu.be/v65Oyddfxeg)\n\nMarkitdown is Microsoft’s tool for converting various document formats to Markdown, including PDFs, DOCX, XLSX, PPTX, and ZIP files. It’s a versatile multi-format converter that handles PDFs via PDFMiner, DOCX via Mammoth, XLSX via Pandas, and PPTX via Python-PPTX. Good for batch processing of mixed document types. The quality of PDF conversion is generally good but may struggle with complex layouts or heavily formatted documents.\n\nPYTHONUTF8=1 uvx markitdown $FILE.pdf > markitdown.mdCopy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding\n uvx markitdown: Runs the markitdown tool via the uv package manager\n $FILE.pdf: The input PDF file\n > markitdown.md: Redirects output to a markdown file\n\nUnstructured\n\nUnstructured is rapidly becoming the de facto library for parsing over 40 different file types. It is excellent for extracting text and tables from diverse document formats. Particularly useful for generating clean content to pass to LLMs. Strong community support and actively maintained.\n\nGROBID\n----------------------------------------------\n\nIf you specifically need to parse references from text-native PDFs or reliably OCR’ed ones, GROBID remains the de facto choice. It excels at extracting structured bibliographic information with high accuracy.\n\nStart GROBID service\ndocker run -t --rm -p 8070:8070 lfoppiano/grobid:0.7.2\n\nProcess PDF with curl\ncurl -X POST -F \"input=@paper.pdf\" localhost:8070/api/processFulltextDocument > references.tei.xmlCopy to clipboardErrorCopied\n\nMistral OCR API\n\nMistral OCR offers an end-to-end cloud API that preserves both text and layout, making it easier to isolate specific sections like References. It shows the most promise currently, though it requires post-processing.\n\nAzure Document Intelligence API\n------------------------------------------------------------------------------------------------\n\nFor enterprise users already in the Microsoft ecosystem, Azure Document Intelligence provides excellent raw OCR with enterprise SLAs. May require custom model training or post-processing to match GROBID’s reference extraction capabilities.\n\nOther libraries\n\nDocling is IBM’s document understanding library that supports PDF conversion. It can be challenging to install, particularly on Windows and some Linux distributions. Offers advanced document understanding capabilities beyond simple text extraction.\n\nMegaParse takes a comprehensive approach using LibreOffice, Pandoc, Tesseract OCR, and other tools. It has Robust handling of different document types but requires an OpenAI API key for some features. Good for complex documents but has significant dependencies.\n\nComparison of PDF-to-Markdown Tools\n--------------------------------------------------------------------------------------------------------\n\n| Tool | Strengths | Weaknesses | Best For |\n| --- | --- | --- | --- |\n| PyMuPDF4LLM | Structure preservation, LLM optimization | Requires PyTorch | AI training data, semantic structure |\n| Markitdown | Multi-format support, simple usage | Less precise layout handling | Batch processing, mixed documents |\n| Unstructured | Wide format support, active development | Can be resource-intensive | Production pipelines, integration |\n| GROBID | Reference extraction excellence | Narrower use case | Academic papers, citations |\n| Docling | Advanced document understanding | Installation difficulties | Research applications |\n| MegaParse | Comprehensive approach | Requires OpenAI API | Complex documents, OCR needs |\n\nHow to pick:\n\n Need LLM-ready content? PyMuPDF4LLM is specifically designed for this\n Working with multiple document formats? Markitdown handles diverse inputs\n Extracting academic references? GROBID remains the standard\n Building a production pipeline? Unstructured offers the best integration options\n Handling complex layouts? Consider commercial OCR like Mistral or Azure Document Intelligence\n\nThe optimal approach depends on your specific requirements regarding accuracy, structure preservation, and the intended use of the extracted content.\n\nTips for Optimal PDF Conversion\n------------------------------------------------------------------------------------------------\n\n1. Pre-process PDFs when possible:\n\n   \n    Optimize a PDF for text extraction first\n   ocrmypdf --optimize 3 --skip-text input.pdf optimized.pdfCopy to clipboardErrorCopied\n   \n2. Try multiple tools on the same document to compare results:\n3. Handle scanned PDFs appropriately:\n\n   \n    For scanned documents, run OCR first\n   ocrmypdf --force-ocr input.pdf ocrready.pdf\n   PYTHONUTF8=1 uvx markitdown ocrready.pdf > markitdown.mdCopy to clipboardErrorCopied\n   \n4. Consider post-processing for better results:\n\n   \n    Simple post-processing example\n   sed -i 's/\\([A-Z]\\)\\./\\1\\.\\n/g' output.md   Add line breaks after sentencesCopy to clipboardErrorCopied\n   \n\nPrevious\n\nScraping PDFs with Tabula\n\nNext\n\nConvert HTML to Markdown"
  },
  {
    "title": "Convert PDFs to Markdown",
    "filename": "Convert_PDFs_to_Markdown.md",
    "text": "Converting PDFs to Markdown\n----------------------------------------------------------------------------------------\n\nPDF documents are ubiquitous in academic, business, and technical contexts, but extracting and repurposing their content can be challenging. This tutorial explores various command-line tools for converting PDFs to Markdown format, with a focus on preserving structure and formatting suitable for different use cases, including preparation for Large Language Models (LLMs).\n\nUse Cases:\n\n LLM training and fine-tuning: Create clean text data from PDFs for AI model training\n Knowledge base creation: Transform PDFs into searchable, editable markdown documents\n Content repurposing: Convert academic papers and reports for web publication\n Data extraction: Pull structured content from PDF documents for analysis\n Accessibility: Convert PDFs to more accessible formats for screen readers\n Citation and reference management: Extract bibliographic information from academic papers\n Documentation conversion: Transform technical PDFs into maintainable documentation\n\nPyMuPDF4LLM\n\nPyMuPDF4LLM is a specialized component of the PyMuPDF library that generates Markdown specifically formatted for Large Language Models. It produces high-quality markdown with good preservation of document structure. It’s specifically optimized for producing text that works well with LLMs, removing irrelevant formatting while preserving semantic structure. Requires PyTorch, which adds dependencies but enables more advanced processing capabilities.\n\nPyMuPDF4LLM uses MuPDF as its PDF parsing engine. PyMuPDF is emerging as a strong default for PDF text extraction due to its accuracy and performance in handling complex PDF structures.\n\nPYTHONUTF8=1 uv run --with pymupdf4llm python -c 'import pymupdf4llm; h = open(\"pymupdf4llm.md\", \"w\"); h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\"))'Copy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding regardless of system locale\n uv run --with pymupdf4llm: Uses uv package manager to run Python with the pymupdf4llm package\n python -c '...': Executes Python code directly from the command line\n import pymupdf4llm: Imports the PDF-to-Markdown module\n h = open(\"pymupdf4llm.md\", \"w\"): Creates a file to write the markdown output\n h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\")): Converts the PDF to markdown and writes to file\n\nMarkitdown\n------------------------------------------------------\n\n[](https://youtu.be/v65Oyddfxeg)\n\nMarkitdown is Microsoft’s tool for converting various document formats to Markdown, including PDFs, DOCX, XLSX, PPTX, and ZIP files. It’s a versatile multi-format converter that handles PDFs via PDFMiner, DOCX via Mammoth, XLSX via Pandas, and PPTX via Python-PPTX. Good for batch processing of mixed document types. The quality of PDF conversion is generally good but may struggle with complex layouts or heavily formatted documents.\n\nPYTHONUTF8=1 uvx markitdown $FILE.pdf > markitdown.mdCopy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding\n uvx markitdown: Runs the markitdown tool via the uv package manager\n $FILE.pdf: The input PDF file\n > markitdown.md: Redirects output to a markdown file\n\nUnstructured\n\nUnstructured is rapidly becoming the de facto library for parsing over 40 different file types. It is excellent for extracting text and tables from diverse document formats. Particularly useful for generating clean content to pass to LLMs. Strong community support and actively maintained.\n\nGROBID\n----------------------------------------------\n\nIf you specifically need to parse references from text-native PDFs or reliably OCR’ed ones, GROBID remains the de facto choice. It excels at extracting structured bibliographic information with high accuracy.\n\nStart GROBID service\ndocker run -t --rm -p 8070:8070 lfoppiano/grobid:0.7.2\n\nProcess PDF with curl\ncurl -X POST -F \"input=@paper.pdf\" localhost:8070/api/processFulltextDocument > references.tei.xmlCopy to clipboardErrorCopied\n\nMistral OCR API\n\nMistral OCR offers an end-to-end cloud API that preserves both text and layout, making it easier to isolate specific sections like References. It shows the most promise currently, though it requires post-processing.\n\nAzure Document Intelligence API\n------------------------------------------------------------------------------------------------\n\nFor enterprise users already in the Microsoft ecosystem, Azure Document Intelligence provides excellent raw OCR with enterprise SLAs. May require custom model training or post-processing to match GROBID’s reference extraction capabilities.\n\nOther libraries\n\nDocling is IBM’s document understanding library that supports PDF conversion. It can be challenging to install, particularly on Windows and some Linux distributions. Offers advanced document understanding capabilities beyond simple text extraction.\n\nMegaParse takes a comprehensive approach using LibreOffice, Pandoc, Tesseract OCR, and other tools. It has Robust handling of different document types but requires an OpenAI API key for some features. Good for complex documents but has significant dependencies.\n\nComparison of PDF-to-Markdown Tools\n--------------------------------------------------------------------------------------------------------\n\n| Tool | Strengths | Weaknesses | Best For |\n| --- | --- | --- | --- |\n| PyMuPDF4LLM | Structure preservation, LLM optimization | Requires PyTorch | AI training data, semantic structure |\n| Markitdown | Multi-format support, simple usage | Less precise layout handling | Batch processing, mixed documents |\n| Unstructured | Wide format support, active development | Can be resource-intensive | Production pipelines, integration |\n| GROBID | Reference extraction excellence | Narrower use case | Academic papers, citations |\n| Docling | Advanced document understanding | Installation difficulties | Research applications |\n| MegaParse | Comprehensive approach | Requires OpenAI API | Complex documents, OCR needs |\n\nHow to pick:\n\n Need LLM-ready content? PyMuPDF4LLM is specifically designed for this\n Working with multiple document formats? Markitdown handles diverse inputs\n Extracting academic references? GROBID remains the standard\n Building a production pipeline? Unstructured offers the best integration options\n Handling complex layouts? Consider commercial OCR like Mistral or Azure Document Intelligence\n\nThe optimal approach depends on your specific requirements regarding accuracy, structure preservation, and the intended use of the extracted content.\n\nTips for Optimal PDF Conversion\n------------------------------------------------------------------------------------------------\n\n1. Pre-process PDFs when possible:\n\n   \n    Optimize a PDF for text extraction first\n   ocrmypdf --optimize 3 --skip-text input.pdf optimized.pdfCopy to clipboardErrorCopied\n   \n2. Try multiple tools on the same document to compare results:\n3. Handle scanned PDFs appropriately:\n\n   \n    For scanned documents, run OCR first\n   ocrmypdf --force-ocr input.pdf ocrready.pdf\n   PYTHONUTF8=1 uvx markitdown ocrready.pdf > markitdown.mdCopy to clipboardErrorCopied\n   \n4. Consider post-processing for better results:\n\n   \n    Simple post-processing example\n   sed -i 's/\\([A-Z]\\)\\./\\1\\.\\n/g' output.md   Add line breaks after sentencesCopy to clipboardErrorCopied\n   \n\nPrevious\n\nScraping PDFs with Tabula\n\nNext\n\nConvert HTML to Markdown"
  },
  {
    "title": "Convert PDFs to Markdown",
    "filename": "Convert_PDFs_to_Markdown.md",
    "text": "Converting PDFs to Markdown\n----------------------------------------------------------------------------------------\n\nPDF documents are ubiquitous in academic, business, and technical contexts, but extracting and repurposing their content can be challenging. This tutorial explores various command-line tools for converting PDFs to Markdown format, with a focus on preserving structure and formatting suitable for different use cases, including preparation for Large Language Models (LLMs).\n\nUse Cases:\n\n LLM training and fine-tuning: Create clean text data from PDFs for AI model training\n Knowledge base creation: Transform PDFs into searchable, editable markdown documents\n Content repurposing: Convert academic papers and reports for web publication\n Data extraction: Pull structured content from PDF documents for analysis\n Accessibility: Convert PDFs to more accessible formats for screen readers\n Citation and reference management: Extract bibliographic information from academic papers\n Documentation conversion: Transform technical PDFs into maintainable documentation\n\nPyMuPDF4LLM\n\nPyMuPDF4LLM is a specialized component of the PyMuPDF library that generates Markdown specifically formatted for Large Language Models. It produces high-quality markdown with good preservation of document structure. It’s specifically optimized for producing text that works well with LLMs, removing irrelevant formatting while preserving semantic structure. Requires PyTorch, which adds dependencies but enables more advanced processing capabilities.\n\nPyMuPDF4LLM uses MuPDF as its PDF parsing engine. PyMuPDF is emerging as a strong default for PDF text extraction due to its accuracy and performance in handling complex PDF structures.\n\nPYTHONUTF8=1 uv run --with pymupdf4llm python -c 'import pymupdf4llm; h = open(\"pymupdf4llm.md\", \"w\"); h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\"))'Copy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding regardless of system locale\n uv run --with pymupdf4llm: Uses uv package manager to run Python with the pymupdf4llm package\n python -c '...': Executes Python code directly from the command line\n import pymupdf4llm: Imports the PDF-to-Markdown module\n h = open(\"pymupdf4llm.md\", \"w\"): Creates a file to write the markdown output\n h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\")): Converts the PDF to markdown and writes to file\n\nMarkitdown\n------------------------------------------------------\n\n[](https://youtu.be/v65Oyddfxeg)\n\nMarkitdown is Microsoft’s tool for converting various document formats to Markdown, including PDFs, DOCX, XLSX, PPTX, and ZIP files. It’s a versatile multi-format converter that handles PDFs via PDFMiner, DOCX via Mammoth, XLSX via Pandas, and PPTX via Python-PPTX. Good for batch processing of mixed document types. The quality of PDF conversion is generally good but may struggle with complex layouts or heavily formatted documents.\n\nPYTHONUTF8=1 uvx markitdown $FILE.pdf > markitdown.mdCopy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding\n uvx markitdown: Runs the markitdown tool via the uv package manager\n $FILE.pdf: The input PDF file\n > markitdown.md: Redirects output to a markdown file\n\nUnstructured\n\nUnstructured is rapidly becoming the de facto library for parsing over 40 different file types. It is excellent for extracting text and tables from diverse document formats. Particularly useful for generating clean content to pass to LLMs. Strong community support and actively maintained.\n\nGROBID\n----------------------------------------------\n\nIf you specifically need to parse references from text-native PDFs or reliably OCR’ed ones, GROBID remains the de facto choice. It excels at extracting structured bibliographic information with high accuracy.\n\nStart GROBID service\ndocker run -t --rm -p 8070:8070 lfoppiano/grobid:0.7.2\n\nProcess PDF with curl\ncurl -X POST -F \"input=@paper.pdf\" localhost:8070/api/processFulltextDocument > references.tei.xmlCopy to clipboardErrorCopied\n\nMistral OCR API\n\nMistral OCR offers an end-to-end cloud API that preserves both text and layout, making it easier to isolate specific sections like References. It shows the most promise currently, though it requires post-processing.\n\nAzure Document Intelligence API\n------------------------------------------------------------------------------------------------\n\nFor enterprise users already in the Microsoft ecosystem, Azure Document Intelligence provides excellent raw OCR with enterprise SLAs. May require custom model training or post-processing to match GROBID’s reference extraction capabilities.\n\nOther libraries\n\nDocling is IBM’s document understanding library that supports PDF conversion. It can be challenging to install, particularly on Windows and some Linux distributions. Offers advanced document understanding capabilities beyond simple text extraction.\n\nMegaParse takes a comprehensive approach using LibreOffice, Pandoc, Tesseract OCR, and other tools. It has Robust handling of different document types but requires an OpenAI API key for some features. Good for complex documents but has significant dependencies.\n\nComparison of PDF-to-Markdown Tools\n--------------------------------------------------------------------------------------------------------\n\n| Tool | Strengths | Weaknesses | Best For |\n| --- | --- | --- | --- |\n| PyMuPDF4LLM | Structure preservation, LLM optimization | Requires PyTorch | AI training data, semantic structure |\n| Markitdown | Multi-format support, simple usage | Less precise layout handling | Batch processing, mixed documents |\n| Unstructured | Wide format support, active development | Can be resource-intensive | Production pipelines, integration |\n| GROBID | Reference extraction excellence | Narrower use case | Academic papers, citations |\n| Docling | Advanced document understanding | Installation difficulties | Research applications |\n| MegaParse | Comprehensive approach | Requires OpenAI API | Complex documents, OCR needs |\n\nHow to pick:\n\n Need LLM-ready content? PyMuPDF4LLM is specifically designed for this\n Working with multiple document formats? Markitdown handles diverse inputs\n Extracting academic references? GROBID remains the standard\n Building a production pipeline? Unstructured offers the best integration options\n Handling complex layouts? Consider commercial OCR like Mistral or Azure Document Intelligence\n\nThe optimal approach depends on your specific requirements regarding accuracy, structure preservation, and the intended use of the extracted content.\n\nTips for Optimal PDF Conversion\n------------------------------------------------------------------------------------------------\n\n1. Pre-process PDFs when possible:\n\n   \n    Optimize a PDF for text extraction first\n   ocrmypdf --optimize 3 --skip-text input.pdf optimized.pdfCopy to clipboardErrorCopied\n   \n2. Try multiple tools on the same document to compare results:\n3. Handle scanned PDFs appropriately:\n\n   \n    For scanned documents, run OCR first\n   ocrmypdf --force-ocr input.pdf ocrready.pdf\n   PYTHONUTF8=1 uvx markitdown ocrready.pdf > markitdown.mdCopy to clipboardErrorCopied\n   \n4. Consider post-processing for better results:\n\n   \n    Simple post-processing example\n   sed -i 's/\\([A-Z]\\)\\./\\1\\.\\n/g' output.md   Add line breaks after sentencesCopy to clipboardErrorCopied\n   \n\nPrevious\n\nScraping PDFs with Tabula\n\nNext\n\nConvert HTML to Markdown"
  },
  {
    "title": "5. Data Preparation",
    "filename": "5._Data_Preparation.md",
    "text": "Data Preparation\n==========================================================\n\nData preparation is crucial because raw data is rarely perfect.\n\nIt often contains errors, inconsistencies, or missing values. For example, marks data may have ‘NA’ or ‘absent’ for non-attendees, which you need to handle.\n\nThis section teaches you how to clean up data, convert it to different formats, aggregate it if required, and get a feel for the data before you analyze.\n\nHere are links used in the video:\n\n Presentation used in the video\n Scraping assembly elections - Notebook\n Assembly election results (CSV)\n pdftotext software\n OpenRefine software\n The most persistent party\n TN assembly election cartogram\n\n[](https://youtu.be/dF3zchJJKqk)\n\nPrevious\n\nScraping: Live Sessions\n\nNext\n\nData Cleansing in Excel"
  },
  {
    "title": "5. Data Preparation",
    "filename": "5._Data_Preparation.md",
    "text": "Data Preparation\n==========================================================\n\nData preparation is crucial because raw data is rarely perfect.\n\nIt often contains errors, inconsistencies, or missing values. For example, marks data may have ‘NA’ or ‘absent’ for non-attendees, which you need to handle.\n\nThis section teaches you how to clean up data, convert it to different formats, aggregate it if required, and get a feel for the data before you analyze.\n\nHere are links used in the video:\n\n Presentation used in the video\n Scraping assembly elections - Notebook\n Assembly election results (CSV)\n pdftotext software\n OpenRefine software\n The most persistent party\n TN assembly election cartogram\n\n[](https://youtu.be/dF3zchJJKqk)\n\nPrevious\n\nScraping: Live Sessions\n\nNext\n\nData Cleansing in Excel"
  },
  {
    "title": "4. Data Sourcing",
    "filename": "4._Data_Sourcing.md",
    "text": "Data Sourcing\n=================================================\n\nBefore you do any kind of data science, you obviously have to get the data to be able to analyze it, visualize it, narrate it, and deploy it.\nAnd what we are going to cover in this module is how you get the data.\n\nThere are three ways you can get the data.\n\n1. The first is you can download the data. Either somebody gives you the data and says download it from here, or you are asked to download it from the internet because it’s a public data source. But that’s the first way—you download the data.\n2. The second way is you can query it from somewhere. It may be on a database. It may be available through an API. It may be available through a library. But these are ways in which you can selectively query parts of the data and stitch it together.\n3. The third way is you have to scrape it. It’s not directly available in a convenient form that you can query or download. But it is, in fact, on a web page. It’s available on a PDF file. It’s available in a Word document. It’s available on an Excel file. It’s kind of structured, but you will have to figure out that structure and extract it from there.\n\nIn this module, we will be looking at the tools that will help you either download from a data source or query from an API or from a database or from a library. And finally, how you can scrape from different sources.\n\n[](https://youtu.be/1LyblMkJzOo)\n\nHere are links used in the video:\n\n The Movies Dataset\n IMDb Datasets\n Download the IMDb Datasets\n Explore the Internet Movie Database\n What does the world search for?\n HowStat - Cricket statistics\n Cricket Strike Rates\n\nPrevious\n\nProject 1\n\nNext\n\nScraping with Excel"
  },
  {
    "title": "4. Data Sourcing",
    "filename": "4._Data_Sourcing.md",
    "text": "Data Sourcing\n=================================================\n\nBefore you do any kind of data science, you obviously have to get the data to be able to analyze it, visualize it, narrate it, and deploy it.\nAnd what we are going to cover in this module is how you get the data.\n\nThere are three ways you can get the data.\n\n1. The first is you can download the data. Either somebody gives you the data and says download it from here, or you are asked to download it from the internet because it’s a public data source. But that’s the first way—you download the data.\n2. The second way is you can query it from somewhere. It may be on a database. It may be available through an API. It may be available through a library. But these are ways in which you can selectively query parts of the data and stitch it together.\n3. The third way is you have to scrape it. It’s not directly available in a convenient form that you can query or download. But it is, in fact, on a web page. It’s available on a PDF file. It’s available in a Word document. It’s available on an Excel file. It’s kind of structured, but you will have to figure out that structure and extract it from there.\n\nIn this module, we will be looking at the tools that will help you either download from a data source or query from an API or from a database or from a library. And finally, how you can scrape from different sources.\n\n[](https://youtu.be/1LyblMkJzOo)\n\nHere are links used in the video:\n\n The Movies Dataset\n IMDb Datasets\n Download the IMDb Datasets\n Explore the Internet Movie Database\n What does the world search for?\n HowStat - Cricket statistics\n Cricket Strike Rates\n\nPrevious\n\nProject 1\n\nNext\n\nScraping with Excel"
  },
  {
    "title": "Outlier Detection with Excel",
    "filename": "Outlier_Detection_with_Excel.md",
    "text": "Outlier Detection with Excel\n----------------------------------------------------------------------------------------------\n\n[](https://youtu.be/sUTJb0F9eBw)\n\nYou’ll learn how to identify and handle outliers in data using Excel, covering:\n\n Understanding Outliers: Definition of outliers and their impact on statistical analysis.\n Calculating Quartiles: Using Excel formulas to calculate Q1 (first quartile) and Q3 (third quartile).\n Interquartile Range (IQR): Finding the IQR by subtracting Q1 from Q3.\n Determining Bounds: Calculating lower and upper bounds using 1.5 times the IQR.\n Identifying Outliers: Using Excel functions to determine if data points fall outside the calculated bounds.\n Visualizing Data: Creating box plots to visualize outliers and data distribution.\n Handling Outliers: Deciding whether to exclude or keep outliers based on their impact on analysis.\n\nHere are the links used in the video:\n\n Understand distributions and outliers\n COVID-19 vaccinations data - Excel\n\nPrevious\n\nForecasting with Excel\n\nNext\n\nData Analysis with Python"
  },
  {
    "title": "Outlier Detection with Excel",
    "filename": "Outlier_Detection_with_Excel.md",
    "text": "Outlier Detection with Excel\n----------------------------------------------------------------------------------------------\n\n[](https://youtu.be/sUTJb0F9eBw)\n\nYou’ll learn how to identify and handle outliers in data using Excel, covering:\n\n Understanding Outliers: Definition of outliers and their impact on statistical analysis.\n Calculating Quartiles: Using Excel formulas to calculate Q1 (first quartile) and Q3 (third quartile).\n Interquartile Range (IQR): Finding the IQR by subtracting Q1 from Q3.\n Determining Bounds: Calculating lower and upper bounds using 1.5 times the IQR.\n Identifying Outliers: Using Excel functions to determine if data points fall outside the calculated bounds.\n Visualizing Data: Creating box plots to visualize outliers and data distribution.\n Handling Outliers: Deciding whether to exclude or keep outliers based on their impact on analysis.\n\nHere are the links used in the video:\n\n Understand distributions and outliers\n COVID-19 vaccinations data - Excel\n\nPrevious\n\nForecasting with Excel\n\nNext\n\nData Analysis with Python"
  },
  {
    "title": "RAWgraphs",
    "filename": "RAWgraphs.md",
    "text": "404 - Not found\n==============="
  },
  {
    "title": "RAWgraphs",
    "filename": "RAWgraphs.md",
    "text": "404 - Not found\n==============="
  },
  {
    "title": "RAWgraphs",
    "filename": "RAWgraphs.md",
    "text": "404 - Not found\n==============="
  },
  {
    "title": "Scraping with Google Sheets",
    "filename": "Scraping_with_Google_Sheets.md",
    "text": "Scraping with Google Sheets\n-------------------------------------------------------------------------------------------\n\n[](https://youtu.be/eYQEk7XJM7s)\n\nYou’ll learn how to import tables on the web using Google Sheets’s =IMPORTHTML() formula, covering:\n\n Import HTML Formula: Use =IMPORTHTML(URL, “query”, index) to fetch tables or lists from a web page.\n Granting Access: Allow access for formulas to fetch data from external sources.\n Checking Imported Data: Verify if the imported table matches the data on the web page.\n Handling Errors: Understand common issues and how to resolve them.\n Sorting Data: Copy imported data as values and sort it within Google Sheets.\n Freezing Rows: Use frozen rows to maintain headers while sorting.\n Live Formulas: Learn how web data updates automatically when the source changes.\n Other Import Functions: IMPORTXML, IMPORTFEED, IMPORTRANGE, and IMPORTDATA for advanced data fetching options.\n\nHere are links used in the video:\n\n Google sheet used in the video\n IMPORTHTML()\n IMPORTXML()\n Demographics of India\n List of highest grossing Indian films\n\nPrevious\n\nScraping with Excel\n\nNext\n\nCrawling with the CLI"
  },
  {
    "title": "Scraping with Google Sheets",
    "filename": "Scraping_with_Google_Sheets.md",
    "text": "Scraping with Google Sheets\n-------------------------------------------------------------------------------------------\n\n[](https://youtu.be/eYQEk7XJM7s)\n\nYou’ll learn how to import tables on the web using Google Sheets’s =IMPORTHTML() formula, covering:\n\n Import HTML Formula: Use =IMPORTHTML(URL, “query”, index) to fetch tables or lists from a web page.\n Granting Access: Allow access for formulas to fetch data from external sources.\n Checking Imported Data: Verify if the imported table matches the data on the web page.\n Handling Errors: Understand common issues and how to resolve them.\n Sorting Data: Copy imported data as values and sort it within Google Sheets.\n Freezing Rows: Use frozen rows to maintain headers while sorting.\n Live Formulas: Learn how web data updates automatically when the source changes.\n Other Import Functions: IMPORTXML, IMPORTFEED, IMPORTRANGE, and IMPORTDATA for advanced data fetching options.\n\nHere are links used in the video:\n\n Google sheet used in the video\n IMPORTHTML()\n IMPORTXML()\n Demographics of India\n List of highest grossing Indian films\n\nPrevious\n\nScraping with Excel\n\nNext\n\nCrawling with the CLI"
  },
  {
    "title": "Markdown",
    "filename": "Markdown.md",
    "text": "Documentation: Markdown\n---------------------------------------------------------------\n\nMarkdown is a lightweight markup language for creating formatted text using a plain-text editor. It’s the standard for documentation in software projects and data science notebooks.\n\nWatch this introduction to Markdown (19 min):\n\n[](https://youtu.be/HUBNt18RFbo)\n\nCommon Markdown syntax:\n\nHeading 1\nHeading 2\n\nbold and italic\n\n- Bullet point\n- Another point\n  - Nested point\n\n1. Numbered list\n2. Second item\n\nLink text\n\npython\nCode block\ndef hello():\n    print(\"Hello\")\n\n> BlockquoteCopy to clipboardErrorCopied\n\nThere is also a GitHub Flavored Markdown standard which is popular. This includes extensions like:\n\n- [ ] Incomplete task\n- [x] Completed task\n\nStrikethrough\n\nTables:\n\n| Column 1 | Column 2 |\n|----------|----------|\n| Cell 1   | Cell 2   |\nCopy to clipboardErrorCopied\n\nTools for working with Markdown:\n\n markdown2: Python library to convert Markdown to HTML\n markdownlint: Linting\n Markdown All in One: VS Code extension\n pandoc: Convert between formats\n\nPrevious\n\n2. Deployment Tools\n\nNext\n\nImages: Compression"
  },
  {
    "title": "Markdown",
    "filename": "Markdown.md",
    "text": "Documentation: Markdown\n---------------------------------------------------------------\n\nMarkdown is a lightweight markup language for creating formatted text using a plain-text editor. It’s the standard for documentation in software projects and data science notebooks.\n\nWatch this introduction to Markdown (19 min):\n\n[](https://youtu.be/HUBNt18RFbo)\n\nCommon Markdown syntax:\n\nHeading 1\nHeading 2\n\nbold and italic\n\n- Bullet point\n- Another point\n  - Nested point\n\n1. Numbered list\n2. Second item\n\nLink text\n\npython\nCode block\ndef hello():\n    print(\"Hello\")\n\n> BlockquoteCopy to clipboardErrorCopied\n\nThere is also a GitHub Flavored Markdown standard which is popular. This includes extensions like:\n\n- [ ] Incomplete task\n- [x] Completed task\n\nStrikethrough\n\nTables:\n\n| Column 1 | Column 2 |\n|----------|----------|\n| Cell 1   | Cell 2   |\nCopy to clipboardErrorCopied\n\nTools for working with Markdown:\n\n markdown2: Python library to convert Markdown to HTML\n markdownlint: Linting\n Markdown All in One: VS Code extension\n pandoc: Convert between formats\n\nPrevious\n\n2. Deployment Tools\n\nNext\n\nImages: Compression"
  },
  {
    "title": "Function Calling",
    "filename": "Function_Calling.md",
    "text": "Function Calling with OpenAI\n----------------------------------------------------------------------------------\n\nFunction Calling allows Large Language Models to convert natural language into structured function calls. This is perfect for building chatbots and AI assistants that need to interact with your backend systems.\n\nOpenAI supports Function Calling – a way for LLMs to suggest what functions to call and how.\n\n[](https://youtu.be/aqdWSYWCLI)\n\nHere’s a minimal example using Python and OpenAI’s function calling that identifies the weather in a given location.\n\n/// script\nrequires-python = \">=3.11\"\ndependencies = [\n\"httpx\",\n]\n///\n\nimport httpx\nimport os\nfrom typing import Dict, Any\n\ndef querygpt(userinput: str, tools: list[Dict[str, Any]]) -> Dict[str, Any]:\n    response = httpx.post(\n        \"https://api.openai.com/v1/chat/completions\",\n        headers={\n            \"Authorization\": f\"Bearer {os.getenv('OPENAIAPIKEY')}\",\n            \"Content-Type\": \"application/json\",\n        },\n        json={\n            \"model\": \"gpt-4o-mini\",\n            \"messages\": [{\"role\": \"user\", \"content\": userinput}],\n            \"tools\": tools,\n            \"toolchoice\": \"auto\",\n        },\n    )\n    return response.json()[\"choices\"][0][\"message\"]\n\nWEATHERTOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"getweather\",\n        \"description\": \"Get the current weather for a location\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\"type\": \"string\", \"description\": \"City name or coordinates\"}\n            },\n            \"required\": [\"location\"],\n            \"additionalProperties\": False,\n        },\n        \"strict\": True,\n    },\n}\n\nif name == \"main\":\n    response = querygpt(\"What is the weather in San Francisco?\", [WEATHERTOOL])\n    print([toolcall[\"function\"] for toolcall in response[\"toolcalls\"]])Copy to clipboardErrorCopied\n\nHow to define functions\n\nThe function definition is a JSON schema with a few OpenAI specific properties.\nSee the Supported schemas.\n\nHere’s an example of a function definition for scheduling a meeting:\n\nMEETINGTOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"schedulemeeting\",\n        \"description\": \"Schedule a meeting room for a specific date and time\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"date\": {\n                    \"type\": \"string\",\n                    \"description\": \"Meeting date in YYYY-MM-DD format\"\n                },\n                \"time\": {\n                    \"type\": \"string\",\n                    \"description\": \"Meeting time in HH:MM format\"\n                },\n                \"meetingroom\": {\n                    \"type\": \"string\",\n                    \"description\": \"Name of the meeting room\"\n                }\n            },\n            \"required\": [\"date\", \"time\", \"meetingroom\"],\n            \"additionalProperties\": False\n        },\n        \"strict\": True\n    }\n}Copy to clipboardErrorCopied\n\nHow to define multiple functions\n\nYou can define multiple functions by passing a list of function definitions to the tools parameter.\n\nHere’s an example of a list of function definitions for handling employee expenses and calculating performance bonuses:\n\ntools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"getexpensebalance\",\n            \"description\": \"Get expense balance for an employee\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"employeeid\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Employee ID number\"\n                    }\n                },\n                \"required\": [\"employeeid\"],\n                \"additionalProperties\": False\n            },\n            \"strict\": True\n        }\n    },\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"calculateperformancebonus\",\n            \"description\": \"Calculate yearly performance bonus for an employee\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"employeeid\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Employee ID number\"\n                    },\n                    \"currentyear\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Year to calculate bonus for\"\n                    }\n                },\n                \"required\": [\"employeeid\", \"currentyear\"],\n                \"additionalProperties\": False\n            },\n            \"strict\": True\n        }\n    }\n]Copy to clipboardErrorCopied\n\nBest Practices:\n\n1. Use Strict Mode\n    Always set strict: True to ensure valid function calls\n    Define all required parameters\n    Set additionalProperties: False\n2. Use tool choice\n    Set toolchoice: \"required\" to ensure that the model will always call one or more tools\n    The default is toolchoice: \"auto\" which means the model will choose a tool only if appropriate\n3. Clear Descriptions\n    Write detailed function and parameter descriptions\n    Include expected formats and units\n    Mention any constraints or limitations\n4. Error Handling\n    Validate function inputs before execution\n    Return clear error messages\n    Handle missing or invalid parameters\n\nPrevious\n\nHybrid RAG with TypeSense\n\nNext\n\nLLM Agents"
  },
  {
    "title": "Function Calling",
    "filename": "Function_Calling.md",
    "text": "Function Calling with OpenAI\n----------------------------------------------------------------------------------\n\nFunction Calling allows Large Language Models to convert natural language into structured function calls. This is perfect for building chatbots and AI assistants that need to interact with your backend systems.\n\nOpenAI supports Function Calling – a way for LLMs to suggest what functions to call and how.\n\n[](https://youtu.be/aqdWSYWCLI)\n\nHere’s a minimal example using Python and OpenAI’s function calling that identifies the weather in a given location.\n\n/// script\nrequires-python = \">=3.11\"\ndependencies = [\n\"httpx\",\n]\n///\n\nimport httpx\nimport os\nfrom typing import Dict, Any\n\ndef querygpt(userinput: str, tools: list[Dict[str, Any]]) -> Dict[str, Any]:\n    response = httpx.post(\n        \"https://api.openai.com/v1/chat/completions\",\n        headers={\n            \"Authorization\": f\"Bearer {os.getenv('OPENAIAPIKEY')}\",\n            \"Content-Type\": \"application/json\",\n        },\n        json={\n            \"model\": \"gpt-4o-mini\",\n            \"messages\": [{\"role\": \"user\", \"content\": userinput}],\n            \"tools\": tools,\n            \"toolchoice\": \"auto\",\n        },\n    )\n    return response.json()[\"choices\"][0][\"message\"]\n\nWEATHERTOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"getweather\",\n        \"description\": \"Get the current weather for a location\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\"type\": \"string\", \"description\": \"City name or coordinates\"}\n            },\n            \"required\": [\"location\"],\n            \"additionalProperties\": False,\n        },\n        \"strict\": True,\n    },\n}\n\nif name == \"main\":\n    response = querygpt(\"What is the weather in San Francisco?\", [WEATHERTOOL])\n    print([toolcall[\"function\"] for toolcall in response[\"toolcalls\"]])Copy to clipboardErrorCopied\n\nHow to define functions\n\nThe function definition is a JSON schema with a few OpenAI specific properties.\nSee the Supported schemas.\n\nHere’s an example of a function definition for scheduling a meeting:\n\nMEETINGTOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"schedulemeeting\",\n        \"description\": \"Schedule a meeting room for a specific date and time\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"date\": {\n                    \"type\": \"string\",\n                    \"description\": \"Meeting date in YYYY-MM-DD format\"\n                },\n                \"time\": {\n                    \"type\": \"string\",\n                    \"description\": \"Meeting time in HH:MM format\"\n                },\n                \"meetingroom\": {\n                    \"type\": \"string\",\n                    \"description\": \"Name of the meeting room\"\n                }\n            },\n            \"required\": [\"date\", \"time\", \"meetingroom\"],\n            \"additionalProperties\": False\n        },\n        \"strict\": True\n    }\n}Copy to clipboardErrorCopied\n\nHow to define multiple functions\n\nYou can define multiple functions by passing a list of function definitions to the tools parameter.\n\nHere’s an example of a list of function definitions for handling employee expenses and calculating performance bonuses:\n\ntools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"getexpensebalance\",\n            \"description\": \"Get expense balance for an employee\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"employeeid\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Employee ID number\"\n                    }\n                },\n                \"required\": [\"employeeid\"],\n                \"additionalProperties\": False\n            },\n            \"strict\": True\n        }\n    },\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"calculateperformancebonus\",\n            \"description\": \"Calculate yearly performance bonus for an employee\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"employeeid\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Employee ID number\"\n                    },\n                    \"currentyear\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Year to calculate bonus for\"\n                    }\n                },\n                \"required\": [\"employeeid\", \"currentyear\"],\n                \"additionalProperties\": False\n            },\n            \"strict\": True\n        }\n    }\n]Copy to clipboardErrorCopied\n\nBest Practices:\n\n1. Use Strict Mode\n    Always set strict: True to ensure valid function calls\n    Define all required parameters\n    Set additionalProperties: False\n2. Use tool choice\n    Set toolchoice: \"required\" to ensure that the model will always call one or more tools\n    The default is toolchoice: \"auto\" which means the model will choose a tool only if appropriate\n3. Clear Descriptions\n    Write detailed function and parameter descriptions\n    Include expected formats and units\n    Mention any constraints or limitations\n4. Error Handling\n    Validate function inputs before execution\n    Return clear error messages\n    Handle missing or invalid parameters\n\nPrevious\n\nHybrid RAG with TypeSense\n\nNext\n\nLLM Agents"
  },
  {
    "title": "Function Calling",
    "filename": "Function_Calling.md",
    "text": "Function Calling with OpenAI\n----------------------------------------------------------------------------------\n\nFunction Calling allows Large Language Models to convert natural language into structured function calls. This is perfect for building chatbots and AI assistants that need to interact with your backend systems.\n\nOpenAI supports Function Calling – a way for LLMs to suggest what functions to call and how.\n\n[](https://youtu.be/aqdWSYWCLI)\n\nHere’s a minimal example using Python and OpenAI’s function calling that identifies the weather in a given location.\n\n/// script\nrequires-python = \">=3.11\"\ndependencies = [\n\"httpx\",\n]\n///\n\nimport httpx\nimport os\nfrom typing import Dict, Any\n\ndef querygpt(userinput: str, tools: list[Dict[str, Any]]) -> Dict[str, Any]:\n    response = httpx.post(\n        \"https://api.openai.com/v1/chat/completions\",\n        headers={\n            \"Authorization\": f\"Bearer {os.getenv('OPENAIAPIKEY')}\",\n            \"Content-Type\": \"application/json\",\n        },\n        json={\n            \"model\": \"gpt-4o-mini\",\n            \"messages\": [{\"role\": \"user\", \"content\": userinput}],\n            \"tools\": tools,\n            \"toolchoice\": \"auto\",\n        },\n    )\n    return response.json()[\"choices\"][0][\"message\"]\n\nWEATHERTOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"getweather\",\n        \"description\": \"Get the current weather for a location\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\"type\": \"string\", \"description\": \"City name or coordinates\"}\n            },\n            \"required\": [\"location\"],\n            \"additionalProperties\": False,\n        },\n        \"strict\": True,\n    },\n}\n\nif name == \"main\":\n    response = querygpt(\"What is the weather in San Francisco?\", [WEATHERTOOL])\n    print([toolcall[\"function\"] for toolcall in response[\"toolcalls\"]])Copy to clipboardErrorCopied\n\nHow to define functions\n\nThe function definition is a JSON schema with a few OpenAI specific properties.\nSee the Supported schemas.\n\nHere’s an example of a function definition for scheduling a meeting:\n\nMEETINGTOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"schedulemeeting\",\n        \"description\": \"Schedule a meeting room for a specific date and time\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"date\": {\n                    \"type\": \"string\",\n                    \"description\": \"Meeting date in YYYY-MM-DD format\"\n                },\n                \"time\": {\n                    \"type\": \"string\",\n                    \"description\": \"Meeting time in HH:MM format\"\n                },\n                \"meetingroom\": {\n                    \"type\": \"string\",\n                    \"description\": \"Name of the meeting room\"\n                }\n            },\n            \"required\": [\"date\", \"time\", \"meetingroom\"],\n            \"additionalProperties\": False\n        },\n        \"strict\": True\n    }\n}Copy to clipboardErrorCopied\n\nHow to define multiple functions\n\nYou can define multiple functions by passing a list of function definitions to the tools parameter.\n\nHere’s an example of a list of function definitions for handling employee expenses and calculating performance bonuses:\n\ntools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"getexpensebalance\",\n            \"description\": \"Get expense balance for an employee\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"employeeid\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Employee ID number\"\n                    }\n                },\n                \"required\": [\"employeeid\"],\n                \"additionalProperties\": False\n            },\n            \"strict\": True\n        }\n    },\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"calculateperformancebonus\",\n            \"description\": \"Calculate yearly performance bonus for an employee\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"employeeid\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Employee ID number\"\n                    },\n                    \"currentyear\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Year to calculate bonus for\"\n                    }\n                },\n                \"required\": [\"employeeid\", \"currentyear\"],\n                \"additionalProperties\": False\n            },\n            \"strict\": True\n        }\n    }\n]Copy to clipboardErrorCopied\n\nBest Practices:\n\n1. Use Strict Mode\n    Always set strict: True to ensure valid function calls\n    Define all required parameters\n    Set additionalProperties: False\n2. Use tool choice\n    Set toolchoice: \"required\" to ensure that the model will always call one or more tools\n    The default is toolchoice: \"auto\" which means the model will choose a tool only if appropriate\n3. Clear Descriptions\n    Write detailed function and parameter descriptions\n    Include expected formats and units\n    Mention any constraints or limitations\n4. Error Handling\n    Validate function inputs before execution\n    Return clear error messages\n    Handle missing or invalid parameters\n\nPrevious\n\nHybrid RAG with TypeSense\n\nNext\n\nLLM Agents"
  },
  {
    "title": "Interactive Notebooks: Marimo",
    "filename": "Interactive_Notebooks__Marimo.md",
    "text": "Interactive Notebooks: Marimo\n-------------------------------------------------------------------------\n\nMarimo is a new take on notebooks that solves some headaches of Jupyter. It runs cells reactively - when you change one cell, all dependent cells update automatically, just like a spreadsheet.\n\nMarimo’s cells can’t be run out of order. This makes Marimo more reproducible and easier to debug, but requires a mental shift from the Jupyter/Colab way of working.\n\nIt also runs Python directly in the browser and is quite interactive. Browse the gallery of examples. With a wide variety of interactive widgets, It’s growing popular as an alternative to Streamlit for building data science web apps.\n\nCommon Operations:\n\nCreate new notebook\nuvx marimo new\n\nRun notebook server\nuvx marimo edit notebook.py\n\nExport to HTML\nuvx marimo export notebook.pyCopy to clipboardErrorCopied\n\nBest Practices:\n\n1. Cell Dependencies\n\n    Keep cells focused and atomic\n    Use clear variable names\n    Document data flow between cells\n2. Interactive Elements\n\n   \n    Add interactive widgets\n   slider = mo.ui.slider(1, 100)\n    Create dynamic Markdown\n   mo.md(f\"{slider} {\"🟢\"  slider.value}\")Copy to clipboardErrorCopied\n   \n3. Version Control\n\n    Keep notebooks are Python files\n    Use Git to track changes\n    Publish on marimo.app for collaboration\n\n[](https://youtu.be/9R2cQygaoxQ)\n\nPrevious\n\nNarratives with LLMs\n\nNext\n\nHTML Slides: RevealJS"
  },
  {
    "title": "Interactive Notebooks: Marimo",
    "filename": "Interactive_Notebooks__Marimo.md",
    "text": "Interactive Notebooks: Marimo\n-------------------------------------------------------------------------\n\nMarimo is a new take on notebooks that solves some headaches of Jupyter. It runs cells reactively - when you change one cell, all dependent cells update automatically, just like a spreadsheet.\n\nMarimo’s cells can’t be run out of order. This makes Marimo more reproducible and easier to debug, but requires a mental shift from the Jupyter/Colab way of working.\n\nIt also runs Python directly in the browser and is quite interactive. Browse the gallery of examples. With a wide variety of interactive widgets, It’s growing popular as an alternative to Streamlit for building data science web apps.\n\nCommon Operations:\n\nCreate new notebook\nuvx marimo new\n\nRun notebook server\nuvx marimo edit notebook.py\n\nExport to HTML\nuvx marimo export notebook.pyCopy to clipboardErrorCopied\n\nBest Practices:\n\n1. Cell Dependencies\n\n    Keep cells focused and atomic\n    Use clear variable names\n    Document data flow between cells\n2. Interactive Elements\n\n   \n    Add interactive widgets\n   slider = mo.ui.slider(1, 100)\n    Create dynamic Markdown\n   mo.md(f\"{slider} {\"🟢\"  slider.value}\")Copy to clipboardErrorCopied\n   \n3. Version Control\n\n    Keep notebooks are Python files\n    Use Git to track changes\n    Publish on marimo.app for collaboration\n\n[](https://youtu.be/9R2cQygaoxQ)\n\nPrevious\n\nNarratives with LLMs\n\nNext\n\nHTML Slides: RevealJS"
  },
  {
    "title": "Parsing JSON",
    "filename": "Parsing_JSON.md",
    "text": "Parsing JSON\n----------------------------------------------\n\nJSON is everywhere—APIs, logs, configuration files—and its nested or large structure can challenge memory and processing. In this tutorial, we’ll explore tools to flatten, stream, and query JSON data efficiently.\n\nFor example, we’ll often need to process a multi-gigabyte log file from a web service where each record is a JSON object.\n\n[](https://youtu.be/1lxrbezP-g)\n\nThis requires us to handle complex nested structures, large files that don’t fit in memory, or extract specific fields. Here are the key tools and techniques for efficient JSON parsing:\n\n| Tool | Extract from JSON… | Why |\n| --- | --- | --- |\n| jq | JSON in the shell | Quick data exploration and pipeline processing |\n| JMESPath | JSON in Python | Handle complex queries with a clean syntax |\n| ijson | JSON streams in Python | Parse streaming/large JSON files memory-efficiently |\n| Pandas | JSON columns in Python | Fast analysis of structured data |\n| SQL JSON | JSON in databases | Combine structured and semi-structured data |\n| DuckDB | JSON anywhere | Fast analysis of JSON files / databases without loading to memory |\n\nExamples:\n\n Use Pandas when you need to transform API responses into a DataFrame for further analysis.\n Leverage ijson when dealing with huge JSON logs where memory is at a premium.\n Apply jq for quick, iterative exploration directly in your terminal.\n\nPractice with these resources:\n\n JSONPath Online Evaluator: Test JSON queries\n jq play: Interactive jq query testing\n DuckDB JSON Tutorial: Learn DuckDB JSON functions\n\nCommand-line JSON Processing with jq\n\njq is a versatile command-line tool for slicing, filtering, and transforming JSON. It excels in quick data exploration and can be integrated into shell scripts for automated data pipelines.\n\nExample: Sifting through server logs in JSON Lines format to extract error messages or aggregate metrics without launching a full-scale ETL process.\n\nExtract specific fields from JSONL\ncat data.jsonl | jq -c 'select(.type == \"user\") | {id, name}'\n\nTransform JSON structure\ncat data.json | jq '.items[] | {name: .name, count: .details.count}'\n\nFilter and aggregate\ncat events.jsonl | jq -s 'groupby(.category) | map({category: .[0].category, count: length})'Copy to clipboardErrorCopied\n\nJMESPath Queries\n\nJMESPath offers a declarative query language to extract and transform data from nested JSON structures without needing verbose code. It’s a neat alternative when you want to quickly pull out specific values or filter collections based on conditions.\n\nExample: Extracting user emails or filtering out inactive records from a complex JSON payload received from a cloud service.\n\nimport jmespath\n\nExample queries\ndata = {\n    \"locations\": [\n        {\"name\": \"Seattle\", \"state\": \"WA\", \"info\": {\"population\": 737015}},\n        {\"name\": \"Portland\", \"state\": \"OR\", \"info\": {\"population\": 652503}}\n    ]\n}\n\nFind all cities with population > 700000\ncities = jmespath.search(\"locations[?info.population > 700000].name\", data)Copy to clipboardErrorCopied\n\nStreaming with ijson\n\nLoading huge JSON files all at once can quickly exhaust system memory. ijson lets you stream and process JSON incrementally. This method is ideal when your JSON file is too large or when you only need to work with part of the data.\n\nExample: Processing a continuous feed from an API that returns a large JSON array, such as sensor data or event logs, while filtering on the fly.\n\nimport ijson\n\nasync def processlargejson(filepath: str) -> list:\n    \"\"\"Process a large JSON file without loading it entirely into memory.\"\"\"\n    results = []\n\n    with open(filepath, 'rb') as file:\n         Stream objects under the 'items' key\n        parser = ijson.items(file, 'items.item')\n        async for item in parser:\n            if item['value'] > 100:   Process conditionally\n                results.append(item)\n\n    return resultsCopy to clipboardErrorCopied\n\nPandas JSON Columns\n\nPandas makes it easy to work with tabular data that includes JSON strings. When you receive API data where one column holds nested JSON, flattening these structures lets you analyze and visualize the data using familiar DataFrame operations.\n\nExample: Flattening customer records stored as nested JSON in a CSV file to extract demographic details and spending patterns.\n\nimport pandas as pd\n\nParse JSON strings in a column\ndf = pd.DataFrame({'jsoncol': ['{\"name\": \"Alice\", \"age\": 30}', '{\"name\": \"Bob\", \"age\": 25}']})\ndf['parsed'] = df['jsoncol'].apply(pd.jsonnormalize)\n\nNormalize nested JSON columns\ndf = pd.readcsv('data.csv')\ndfnormalized = pd.jsonnormalize(\n    df['nestedjson'].apply(json.loads),\n    recordpath=['items'],         List of nested objects to unpack\n    meta=['id', 'timestamp']       Keep these columns from parent\n)Copy to clipboardErrorCopied\n\nSQL JSON Functions\n\nSQL supports built-in JSON functions allow you to query and manipulate JSON stored within relational databases.\nThese are implemented by most popular databases, including\nSQLite,\nPostgreSQL, and\nMySQL.\nThis is especially handy when you have a hybrid data model, combining structured tables with semi-structured JSON columns.\n\nExample: An application that stores user settings or application logs as JSON in a SQLite database, enabling quick lookups and modifications without external JSON parsing libraries.\n\nSELECT\n    jsonextract(data, '$.name') as name,\n    jsonextract(data, '$.details.age') as age\nFROM users\nWHERE jsonextract(data, '$.active') = trueCopy to clipboardErrorCopied\n\nDuckDB JSON Processing\n\nDuckDB shines when analyzing JSON/JSONL files directly, making it a powerful tool for data analytics without the overhead of loading entire datasets into memory. Its SQL-like syntax simplifies exploratory analysis on nested data.\n\nExample: Performing ad-hoc analytics on streaming JSON logs from a web service, such as calculating average response times or aggregating user behavior metrics.\n\nSELECT\n    jsonextractstring(data, '$.user.name') as name,\n    avg(jsonextractfloat(data, '$.metrics.value')) as avgvalue\nFROM readjsonauto('data/.jsonl')\nGROUP BY 1\nHAVING avgvalue > 100Copy to clipboardErrorCopied\n\nPrevious\n\nProfiling Data with Python\n\nNext\n\nData Transformation with dbt"
  },
  {
    "title": "Parsing JSON",
    "filename": "Parsing_JSON.md",
    "text": "Parsing JSON\n----------------------------------------------\n\nJSON is everywhere—APIs, logs, configuration files—and its nested or large structure can challenge memory and processing. In this tutorial, we’ll explore tools to flatten, stream, and query JSON data efficiently.\n\nFor example, we’ll often need to process a multi-gigabyte log file from a web service where each record is a JSON object.\n\n[](https://youtu.be/1lxrbezP-g)\n\nThis requires us to handle complex nested structures, large files that don’t fit in memory, or extract specific fields. Here are the key tools and techniques for efficient JSON parsing:\n\n| Tool | Extract from JSON… | Why |\n| --- | --- | --- |\n| jq | JSON in the shell | Quick data exploration and pipeline processing |\n| JMESPath | JSON in Python | Handle complex queries with a clean syntax |\n| ijson | JSON streams in Python | Parse streaming/large JSON files memory-efficiently |\n| Pandas | JSON columns in Python | Fast analysis of structured data |\n| SQL JSON | JSON in databases | Combine structured and semi-structured data |\n| DuckDB | JSON anywhere | Fast analysis of JSON files / databases without loading to memory |\n\nExamples:\n\n Use Pandas when you need to transform API responses into a DataFrame for further analysis.\n Leverage ijson when dealing with huge JSON logs where memory is at a premium.\n Apply jq for quick, iterative exploration directly in your terminal.\n\nPractice with these resources:\n\n JSONPath Online Evaluator: Test JSON queries\n jq play: Interactive jq query testing\n DuckDB JSON Tutorial: Learn DuckDB JSON functions\n\nCommand-line JSON Processing with jq\n\njq is a versatile command-line tool for slicing, filtering, and transforming JSON. It excels in quick data exploration and can be integrated into shell scripts for automated data pipelines.\n\nExample: Sifting through server logs in JSON Lines format to extract error messages or aggregate metrics without launching a full-scale ETL process.\n\nExtract specific fields from JSONL\ncat data.jsonl | jq -c 'select(.type == \"user\") | {id, name}'\n\nTransform JSON structure\ncat data.json | jq '.items[] | {name: .name, count: .details.count}'\n\nFilter and aggregate\ncat events.jsonl | jq -s 'groupby(.category) | map({category: .[0].category, count: length})'Copy to clipboardErrorCopied\n\nJMESPath Queries\n\nJMESPath offers a declarative query language to extract and transform data from nested JSON structures without needing verbose code. It’s a neat alternative when you want to quickly pull out specific values or filter collections based on conditions.\n\nExample: Extracting user emails or filtering out inactive records from a complex JSON payload received from a cloud service.\n\nimport jmespath\n\nExample queries\ndata = {\n    \"locations\": [\n        {\"name\": \"Seattle\", \"state\": \"WA\", \"info\": {\"population\": 737015}},\n        {\"name\": \"Portland\", \"state\": \"OR\", \"info\": {\"population\": 652503}}\n    ]\n}\n\nFind all cities with population > 700000\ncities = jmespath.search(\"locations[?info.population > 700000].name\", data)Copy to clipboardErrorCopied\n\nStreaming with ijson\n\nLoading huge JSON files all at once can quickly exhaust system memory. ijson lets you stream and process JSON incrementally. This method is ideal when your JSON file is too large or when you only need to work with part of the data.\n\nExample: Processing a continuous feed from an API that returns a large JSON array, such as sensor data or event logs, while filtering on the fly.\n\nimport ijson\n\nasync def processlargejson(filepath: str) -> list:\n    \"\"\"Process a large JSON file without loading it entirely into memory.\"\"\"\n    results = []\n\n    with open(filepath, 'rb') as file:\n         Stream objects under the 'items' key\n        parser = ijson.items(file, 'items.item')\n        async for item in parser:\n            if item['value'] > 100:   Process conditionally\n                results.append(item)\n\n    return resultsCopy to clipboardErrorCopied\n\nPandas JSON Columns\n\nPandas makes it easy to work with tabular data that includes JSON strings. When you receive API data where one column holds nested JSON, flattening these structures lets you analyze and visualize the data using familiar DataFrame operations.\n\nExample: Flattening customer records stored as nested JSON in a CSV file to extract demographic details and spending patterns.\n\nimport pandas as pd\n\nParse JSON strings in a column\ndf = pd.DataFrame({'jsoncol': ['{\"name\": \"Alice\", \"age\": 30}', '{\"name\": \"Bob\", \"age\": 25}']})\ndf['parsed'] = df['jsoncol'].apply(pd.jsonnormalize)\n\nNormalize nested JSON columns\ndf = pd.readcsv('data.csv')\ndfnormalized = pd.jsonnormalize(\n    df['nestedjson'].apply(json.loads),\n    recordpath=['items'],         List of nested objects to unpack\n    meta=['id', 'timestamp']       Keep these columns from parent\n)Copy to clipboardErrorCopied\n\nSQL JSON Functions\n\nSQL supports built-in JSON functions allow you to query and manipulate JSON stored within relational databases.\nThese are implemented by most popular databases, including\nSQLite,\nPostgreSQL, and\nMySQL.\nThis is especially handy when you have a hybrid data model, combining structured tables with semi-structured JSON columns.\n\nExample: An application that stores user settings or application logs as JSON in a SQLite database, enabling quick lookups and modifications without external JSON parsing libraries.\n\nSELECT\n    jsonextract(data, '$.name') as name,\n    jsonextract(data, '$.details.age') as age\nFROM users\nWHERE jsonextract(data, '$.active') = trueCopy to clipboardErrorCopied\n\nDuckDB JSON Processing\n\nDuckDB shines when analyzing JSON/JSONL files directly, making it a powerful tool for data analytics without the overhead of loading entire datasets into memory. Its SQL-like syntax simplifies exploratory analysis on nested data.\n\nExample: Performing ad-hoc analytics on streaming JSON logs from a web service, such as calculating average response times or aggregating user behavior metrics.\n\nSELECT\n    jsonextractstring(data, '$.user.name') as name,\n    avg(jsonextractfloat(data, '$.metrics.value')) as avgvalue\nFROM readjsonauto('data/.jsonl')\nGROUP BY 1\nHAVING avgvalue > 100Copy to clipboardErrorCopied\n\nPrevious\n\nProfiling Data with Python\n\nNext\n\nData Transformation with dbt"
  },
  {
    "title": "Parsing JSON",
    "filename": "Parsing_JSON.md",
    "text": "Parsing JSON\n----------------------------------------------\n\nJSON is everywhere—APIs, logs, configuration files—and its nested or large structure can challenge memory and processing. In this tutorial, we’ll explore tools to flatten, stream, and query JSON data efficiently.\n\nFor example, we’ll often need to process a multi-gigabyte log file from a web service where each record is a JSON object.\n\n[](https://youtu.be/1lxrbezP-g)\n\nThis requires us to handle complex nested structures, large files that don’t fit in memory, or extract specific fields. Here are the key tools and techniques for efficient JSON parsing:\n\n| Tool | Extract from JSON… | Why |\n| --- | --- | --- |\n| jq | JSON in the shell | Quick data exploration and pipeline processing |\n| JMESPath | JSON in Python | Handle complex queries with a clean syntax |\n| ijson | JSON streams in Python | Parse streaming/large JSON files memory-efficiently |\n| Pandas | JSON columns in Python | Fast analysis of structured data |\n| SQL JSON | JSON in databases | Combine structured and semi-structured data |\n| DuckDB | JSON anywhere | Fast analysis of JSON files / databases without loading to memory |\n\nExamples:\n\n Use Pandas when you need to transform API responses into a DataFrame for further analysis.\n Leverage ijson when dealing with huge JSON logs where memory is at a premium.\n Apply jq for quick, iterative exploration directly in your terminal.\n\nPractice with these resources:\n\n JSONPath Online Evaluator: Test JSON queries\n jq play: Interactive jq query testing\n DuckDB JSON Tutorial: Learn DuckDB JSON functions\n\nCommand-line JSON Processing with jq\n\njq is a versatile command-line tool for slicing, filtering, and transforming JSON. It excels in quick data exploration and can be integrated into shell scripts for automated data pipelines.\n\nExample: Sifting through server logs in JSON Lines format to extract error messages or aggregate metrics without launching a full-scale ETL process.\n\nExtract specific fields from JSONL\ncat data.jsonl | jq -c 'select(.type == \"user\") | {id, name}'\n\nTransform JSON structure\ncat data.json | jq '.items[] | {name: .name, count: .details.count}'\n\nFilter and aggregate\ncat events.jsonl | jq -s 'groupby(.category) | map({category: .[0].category, count: length})'Copy to clipboardErrorCopied\n\nJMESPath Queries\n\nJMESPath offers a declarative query language to extract and transform data from nested JSON structures without needing verbose code. It’s a neat alternative when you want to quickly pull out specific values or filter collections based on conditions.\n\nExample: Extracting user emails or filtering out inactive records from a complex JSON payload received from a cloud service.\n\nimport jmespath\n\nExample queries\ndata = {\n    \"locations\": [\n        {\"name\": \"Seattle\", \"state\": \"WA\", \"info\": {\"population\": 737015}},\n        {\"name\": \"Portland\", \"state\": \"OR\", \"info\": {\"population\": 652503}}\n    ]\n}\n\nFind all cities with population > 700000\ncities = jmespath.search(\"locations[?info.population > 700000].name\", data)Copy to clipboardErrorCopied\n\nStreaming with ijson\n\nLoading huge JSON files all at once can quickly exhaust system memory. ijson lets you stream and process JSON incrementally. This method is ideal when your JSON file is too large or when you only need to work with part of the data.\n\nExample: Processing a continuous feed from an API that returns a large JSON array, such as sensor data or event logs, while filtering on the fly.\n\nimport ijson\n\nasync def processlargejson(filepath: str) -> list:\n    \"\"\"Process a large JSON file without loading it entirely into memory.\"\"\"\n    results = []\n\n    with open(filepath, 'rb') as file:\n         Stream objects under the 'items' key\n        parser = ijson.items(file, 'items.item')\n        async for item in parser:\n            if item['value'] > 100:   Process conditionally\n                results.append(item)\n\n    return resultsCopy to clipboardErrorCopied\n\nPandas JSON Columns\n\nPandas makes it easy to work with tabular data that includes JSON strings. When you receive API data where one column holds nested JSON, flattening these structures lets you analyze and visualize the data using familiar DataFrame operations.\n\nExample: Flattening customer records stored as nested JSON in a CSV file to extract demographic details and spending patterns.\n\nimport pandas as pd\n\nParse JSON strings in a column\ndf = pd.DataFrame({'jsoncol': ['{\"name\": \"Alice\", \"age\": 30}', '{\"name\": \"Bob\", \"age\": 25}']})\ndf['parsed'] = df['jsoncol'].apply(pd.jsonnormalize)\n\nNormalize nested JSON columns\ndf = pd.readcsv('data.csv')\ndfnormalized = pd.jsonnormalize(\n    df['nestedjson'].apply(json.loads),\n    recordpath=['items'],         List of nested objects to unpack\n    meta=['id', 'timestamp']       Keep these columns from parent\n)Copy to clipboardErrorCopied\n\nSQL JSON Functions\n\nSQL supports built-in JSON functions allow you to query and manipulate JSON stored within relational databases.\nThese are implemented by most popular databases, including\nSQLite,\nPostgreSQL, and\nMySQL.\nThis is especially handy when you have a hybrid data model, combining structured tables with semi-structured JSON columns.\n\nExample: An application that stores user settings or application logs as JSON in a SQLite database, enabling quick lookups and modifications without external JSON parsing libraries.\n\nSELECT\n    jsonextract(data, '$.name') as name,\n    jsonextract(data, '$.details.age') as age\nFROM users\nWHERE jsonextract(data, '$.active') = trueCopy to clipboardErrorCopied\n\nDuckDB JSON Processing\n\nDuckDB shines when analyzing JSON/JSONL files directly, making it a powerful tool for data analytics without the overhead of loading entire datasets into memory. Its SQL-like syntax simplifies exploratory analysis on nested data.\n\nExample: Performing ad-hoc analytics on streaming JSON logs from a web service, such as calculating average response times or aggregating user behavior metrics.\n\nSELECT\n    jsonextractstring(data, '$.user.name') as name,\n    avg(jsonextractfloat(data, '$.metrics.value')) as avgvalue\nFROM readjsonauto('data/.jsonl')\nGROUP BY 1\nHAVING avgvalue > 100Copy to clipboardErrorCopied\n\nPrevious\n\nProfiling Data with Python\n\nNext\n\nData Transformation with dbt"
  },
  {
    "title": "Parsing JSON",
    "filename": "Parsing_JSON.md",
    "text": "Parsing JSON\n----------------------------------------------\n\nJSON is everywhere—APIs, logs, configuration files—and its nested or large structure can challenge memory and processing. In this tutorial, we’ll explore tools to flatten, stream, and query JSON data efficiently.\n\nFor example, we’ll often need to process a multi-gigabyte log file from a web service where each record is a JSON object.\n\n[](https://youtu.be/1lxrbezP-g)\n\nThis requires us to handle complex nested structures, large files that don’t fit in memory, or extract specific fields. Here are the key tools and techniques for efficient JSON parsing:\n\n| Tool | Extract from JSON… | Why |\n| --- | --- | --- |\n| jq | JSON in the shell | Quick data exploration and pipeline processing |\n| JMESPath | JSON in Python | Handle complex queries with a clean syntax |\n| ijson | JSON streams in Python | Parse streaming/large JSON files memory-efficiently |\n| Pandas | JSON columns in Python | Fast analysis of structured data |\n| SQL JSON | JSON in databases | Combine structured and semi-structured data |\n| DuckDB | JSON anywhere | Fast analysis of JSON files / databases without loading to memory |\n\nExamples:\n\n Use Pandas when you need to transform API responses into a DataFrame for further analysis.\n Leverage ijson when dealing with huge JSON logs where memory is at a premium.\n Apply jq for quick, iterative exploration directly in your terminal.\n\nPractice with these resources:\n\n JSONPath Online Evaluator: Test JSON queries\n jq play: Interactive jq query testing\n DuckDB JSON Tutorial: Learn DuckDB JSON functions\n\nCommand-line JSON Processing with jq\n\njq is a versatile command-line tool for slicing, filtering, and transforming JSON. It excels in quick data exploration and can be integrated into shell scripts for automated data pipelines.\n\nExample: Sifting through server logs in JSON Lines format to extract error messages or aggregate metrics without launching a full-scale ETL process.\n\nExtract specific fields from JSONL\ncat data.jsonl | jq -c 'select(.type == \"user\") | {id, name}'\n\nTransform JSON structure\ncat data.json | jq '.items[] | {name: .name, count: .details.count}'\n\nFilter and aggregate\ncat events.jsonl | jq -s 'groupby(.category) | map({category: .[0].category, count: length})'Copy to clipboardErrorCopied\n\nJMESPath Queries\n\nJMESPath offers a declarative query language to extract and transform data from nested JSON structures without needing verbose code. It’s a neat alternative when you want to quickly pull out specific values or filter collections based on conditions.\n\nExample: Extracting user emails or filtering out inactive records from a complex JSON payload received from a cloud service.\n\nimport jmespath\n\nExample queries\ndata = {\n    \"locations\": [\n        {\"name\": \"Seattle\", \"state\": \"WA\", \"info\": {\"population\": 737015}},\n        {\"name\": \"Portland\", \"state\": \"OR\", \"info\": {\"population\": 652503}}\n    ]\n}\n\nFind all cities with population > 700000\ncities = jmespath.search(\"locations[?info.population > 700000].name\", data)Copy to clipboardErrorCopied\n\nStreaming with ijson\n\nLoading huge JSON files all at once can quickly exhaust system memory. ijson lets you stream and process JSON incrementally. This method is ideal when your JSON file is too large or when you only need to work with part of the data.\n\nExample: Processing a continuous feed from an API that returns a large JSON array, such as sensor data or event logs, while filtering on the fly.\n\nimport ijson\n\nasync def processlargejson(filepath: str) -> list:\n    \"\"\"Process a large JSON file without loading it entirely into memory.\"\"\"\n    results = []\n\n    with open(filepath, 'rb') as file:\n         Stream objects under the 'items' key\n        parser = ijson.items(file, 'items.item')\n        async for item in parser:\n            if item['value'] > 100:   Process conditionally\n                results.append(item)\n\n    return resultsCopy to clipboardErrorCopied\n\nPandas JSON Columns\n\nPandas makes it easy to work with tabular data that includes JSON strings. When you receive API data where one column holds nested JSON, flattening these structures lets you analyze and visualize the data using familiar DataFrame operations.\n\nExample: Flattening customer records stored as nested JSON in a CSV file to extract demographic details and spending patterns.\n\nimport pandas as pd\n\nParse JSON strings in a column\ndf = pd.DataFrame({'jsoncol': ['{\"name\": \"Alice\", \"age\": 30}', '{\"name\": \"Bob\", \"age\": 25}']})\ndf['parsed'] = df['jsoncol'].apply(pd.jsonnormalize)\n\nNormalize nested JSON columns\ndf = pd.readcsv('data.csv')\ndfnormalized = pd.jsonnormalize(\n    df['nestedjson'].apply(json.loads),\n    recordpath=['items'],         List of nested objects to unpack\n    meta=['id', 'timestamp']       Keep these columns from parent\n)Copy to clipboardErrorCopied\n\nSQL JSON Functions\n\nSQL supports built-in JSON functions allow you to query and manipulate JSON stored within relational databases.\nThese are implemented by most popular databases, including\nSQLite,\nPostgreSQL, and\nMySQL.\nThis is especially handy when you have a hybrid data model, combining structured tables with semi-structured JSON columns.\n\nExample: An application that stores user settings or application logs as JSON in a SQLite database, enabling quick lookups and modifications without external JSON parsing libraries.\n\nSELECT\n    jsonextract(data, '$.name') as name,\n    jsonextract(data, '$.details.age') as age\nFROM users\nWHERE jsonextract(data, '$.active') = trueCopy to clipboardErrorCopied\n\nDuckDB JSON Processing\n\nDuckDB shines when analyzing JSON/JSONL files directly, making it a powerful tool for data analytics without the overhead of loading entire datasets into memory. Its SQL-like syntax simplifies exploratory analysis on nested data.\n\nExample: Performing ad-hoc analytics on streaming JSON logs from a web service, such as calculating average response times or aggregating user behavior metrics.\n\nSELECT\n    jsonextractstring(data, '$.user.name') as name,\n    avg(jsonextractfloat(data, '$.metrics.value')) as avgvalue\nFROM readjsonauto('data/.jsonl')\nGROUP BY 1\nHAVING avgvalue > 100Copy to clipboardErrorCopied\n\nPrevious\n\nProfiling Data with Python\n\nNext\n\nData Transformation with dbt"
  },
  {
    "title": "Parsing JSON",
    "filename": "Parsing_JSON.md",
    "text": "Parsing JSON\n----------------------------------------------\n\nJSON is everywhere—APIs, logs, configuration files—and its nested or large structure can challenge memory and processing. In this tutorial, we’ll explore tools to flatten, stream, and query JSON data efficiently.\n\nFor example, we’ll often need to process a multi-gigabyte log file from a web service where each record is a JSON object.\n\n[](https://youtu.be/1lxrbezP-g)\n\nThis requires us to handle complex nested structures, large files that don’t fit in memory, or extract specific fields. Here are the key tools and techniques for efficient JSON parsing:\n\n| Tool | Extract from JSON… | Why |\n| --- | --- | --- |\n| jq | JSON in the shell | Quick data exploration and pipeline processing |\n| JMESPath | JSON in Python | Handle complex queries with a clean syntax |\n| ijson | JSON streams in Python | Parse streaming/large JSON files memory-efficiently |\n| Pandas | JSON columns in Python | Fast analysis of structured data |\n| SQL JSON | JSON in databases | Combine structured and semi-structured data |\n| DuckDB | JSON anywhere | Fast analysis of JSON files / databases without loading to memory |\n\nExamples:\n\n Use Pandas when you need to transform API responses into a DataFrame for further analysis.\n Leverage ijson when dealing with huge JSON logs where memory is at a premium.\n Apply jq for quick, iterative exploration directly in your terminal.\n\nPractice with these resources:\n\n JSONPath Online Evaluator: Test JSON queries\n jq play: Interactive jq query testing\n DuckDB JSON Tutorial: Learn DuckDB JSON functions\n\nCommand-line JSON Processing with jq\n\njq is a versatile command-line tool for slicing, filtering, and transforming JSON. It excels in quick data exploration and can be integrated into shell scripts for automated data pipelines.\n\nExample: Sifting through server logs in JSON Lines format to extract error messages or aggregate metrics without launching a full-scale ETL process.\n\nExtract specific fields from JSONL\ncat data.jsonl | jq -c 'select(.type == \"user\") | {id, name}'\n\nTransform JSON structure\ncat data.json | jq '.items[] | {name: .name, count: .details.count}'\n\nFilter and aggregate\ncat events.jsonl | jq -s 'groupby(.category) | map({category: .[0].category, count: length})'Copy to clipboardErrorCopied\n\nJMESPath Queries\n\nJMESPath offers a declarative query language to extract and transform data from nested JSON structures without needing verbose code. It’s a neat alternative when you want to quickly pull out specific values or filter collections based on conditions.\n\nExample: Extracting user emails or filtering out inactive records from a complex JSON payload received from a cloud service.\n\nimport jmespath\n\nExample queries\ndata = {\n    \"locations\": [\n        {\"name\": \"Seattle\", \"state\": \"WA\", \"info\": {\"population\": 737015}},\n        {\"name\": \"Portland\", \"state\": \"OR\", \"info\": {\"population\": 652503}}\n    ]\n}\n\nFind all cities with population > 700000\ncities = jmespath.search(\"locations[?info.population > 700000].name\", data)Copy to clipboardErrorCopied\n\nStreaming with ijson\n\nLoading huge JSON files all at once can quickly exhaust system memory. ijson lets you stream and process JSON incrementally. This method is ideal when your JSON file is too large or when you only need to work with part of the data.\n\nExample: Processing a continuous feed from an API that returns a large JSON array, such as sensor data or event logs, while filtering on the fly.\n\nimport ijson\n\nasync def processlargejson(filepath: str) -> list:\n    \"\"\"Process a large JSON file without loading it entirely into memory.\"\"\"\n    results = []\n\n    with open(filepath, 'rb') as file:\n         Stream objects under the 'items' key\n        parser = ijson.items(file, 'items.item')\n        async for item in parser:\n            if item['value'] > 100:   Process conditionally\n                results.append(item)\n\n    return resultsCopy to clipboardErrorCopied\n\nPandas JSON Columns\n\nPandas makes it easy to work with tabular data that includes JSON strings. When you receive API data where one column holds nested JSON, flattening these structures lets you analyze and visualize the data using familiar DataFrame operations.\n\nExample: Flattening customer records stored as nested JSON in a CSV file to extract demographic details and spending patterns.\n\nimport pandas as pd\n\nParse JSON strings in a column\ndf = pd.DataFrame({'jsoncol': ['{\"name\": \"Alice\", \"age\": 30}', '{\"name\": \"Bob\", \"age\": 25}']})\ndf['parsed'] = df['jsoncol'].apply(pd.jsonnormalize)\n\nNormalize nested JSON columns\ndf = pd.readcsv('data.csv')\ndfnormalized = pd.jsonnormalize(\n    df['nestedjson'].apply(json.loads),\n    recordpath=['items'],         List of nested objects to unpack\n    meta=['id', 'timestamp']       Keep these columns from parent\n)Copy to clipboardErrorCopied\n\nSQL JSON Functions\n\nSQL supports built-in JSON functions allow you to query and manipulate JSON stored within relational databases.\nThese are implemented by most popular databases, including\nSQLite,\nPostgreSQL, and\nMySQL.\nThis is especially handy when you have a hybrid data model, combining structured tables with semi-structured JSON columns.\n\nExample: An application that stores user settings or application logs as JSON in a SQLite database, enabling quick lookups and modifications without external JSON parsing libraries.\n\nSELECT\n    jsonextract(data, '$.name') as name,\n    jsonextract(data, '$.details.age') as age\nFROM users\nWHERE jsonextract(data, '$.active') = trueCopy to clipboardErrorCopied\n\nDuckDB JSON Processing\n\nDuckDB shines when analyzing JSON/JSONL files directly, making it a powerful tool for data analytics without the overhead of loading entire datasets into memory. Its SQL-like syntax simplifies exploratory analysis on nested data.\n\nExample: Performing ad-hoc analytics on streaming JSON logs from a web service, such as calculating average response times or aggregating user behavior metrics.\n\nSELECT\n    jsonextractstring(data, '$.user.name') as name,\n    avg(jsonextractfloat(data, '$.metrics.value')) as avgvalue\nFROM readjsonauto('data/.jsonl')\nGROUP BY 1\nHAVING avgvalue > 100Copy to clipboardErrorCopied\n\nPrevious\n\nProfiling Data with Python\n\nNext\n\nData Transformation with dbt"
  },
  {
    "title": "Parsing JSON",
    "filename": "Parsing_JSON.md",
    "text": "Parsing JSON\n----------------------------------------------\n\nJSON is everywhere—APIs, logs, configuration files—and its nested or large structure can challenge memory and processing. In this tutorial, we’ll explore tools to flatten, stream, and query JSON data efficiently.\n\nFor example, we’ll often need to process a multi-gigabyte log file from a web service where each record is a JSON object.\n\n[](https://youtu.be/1lxrbezP-g)\n\nThis requires us to handle complex nested structures, large files that don’t fit in memory, or extract specific fields. Here are the key tools and techniques for efficient JSON parsing:\n\n| Tool | Extract from JSON… | Why |\n| --- | --- | --- |\n| jq | JSON in the shell | Quick data exploration and pipeline processing |\n| JMESPath | JSON in Python | Handle complex queries with a clean syntax |\n| ijson | JSON streams in Python | Parse streaming/large JSON files memory-efficiently |\n| Pandas | JSON columns in Python | Fast analysis of structured data |\n| SQL JSON | JSON in databases | Combine structured and semi-structured data |\n| DuckDB | JSON anywhere | Fast analysis of JSON files / databases without loading to memory |\n\nExamples:\n\n Use Pandas when you need to transform API responses into a DataFrame for further analysis.\n Leverage ijson when dealing with huge JSON logs where memory is at a premium.\n Apply jq for quick, iterative exploration directly in your terminal.\n\nPractice with these resources:\n\n JSONPath Online Evaluator: Test JSON queries\n jq play: Interactive jq query testing\n DuckDB JSON Tutorial: Learn DuckDB JSON functions\n\nCommand-line JSON Processing with jq\n\njq is a versatile command-line tool for slicing, filtering, and transforming JSON. It excels in quick data exploration and can be integrated into shell scripts for automated data pipelines.\n\nExample: Sifting through server logs in JSON Lines format to extract error messages or aggregate metrics without launching a full-scale ETL process.\n\nExtract specific fields from JSONL\ncat data.jsonl | jq -c 'select(.type == \"user\") | {id, name}'\n\nTransform JSON structure\ncat data.json | jq '.items[] | {name: .name, count: .details.count}'\n\nFilter and aggregate\ncat events.jsonl | jq -s 'groupby(.category) | map({category: .[0].category, count: length})'Copy to clipboardErrorCopied\n\nJMESPath Queries\n\nJMESPath offers a declarative query language to extract and transform data from nested JSON structures without needing verbose code. It’s a neat alternative when you want to quickly pull out specific values or filter collections based on conditions.\n\nExample: Extracting user emails or filtering out inactive records from a complex JSON payload received from a cloud service.\n\nimport jmespath\n\nExample queries\ndata = {\n    \"locations\": [\n        {\"name\": \"Seattle\", \"state\": \"WA\", \"info\": {\"population\": 737015}},\n        {\"name\": \"Portland\", \"state\": \"OR\", \"info\": {\"population\": 652503}}\n    ]\n}\n\nFind all cities with population > 700000\ncities = jmespath.search(\"locations[?info.population > 700000].name\", data)Copy to clipboardErrorCopied\n\nStreaming with ijson\n\nLoading huge JSON files all at once can quickly exhaust system memory. ijson lets you stream and process JSON incrementally. This method is ideal when your JSON file is too large or when you only need to work with part of the data.\n\nExample: Processing a continuous feed from an API that returns a large JSON array, such as sensor data or event logs, while filtering on the fly.\n\nimport ijson\n\nasync def processlargejson(filepath: str) -> list:\n    \"\"\"Process a large JSON file without loading it entirely into memory.\"\"\"\n    results = []\n\n    with open(filepath, 'rb') as file:\n         Stream objects under the 'items' key\n        parser = ijson.items(file, 'items.item')\n        async for item in parser:\n            if item['value'] > 100:   Process conditionally\n                results.append(item)\n\n    return resultsCopy to clipboardErrorCopied\n\nPandas JSON Columns\n\nPandas makes it easy to work with tabular data that includes JSON strings. When you receive API data where one column holds nested JSON, flattening these structures lets you analyze and visualize the data using familiar DataFrame operations.\n\nExample: Flattening customer records stored as nested JSON in a CSV file to extract demographic details and spending patterns.\n\nimport pandas as pd\n\nParse JSON strings in a column\ndf = pd.DataFrame({'jsoncol': ['{\"name\": \"Alice\", \"age\": 30}', '{\"name\": \"Bob\", \"age\": 25}']})\ndf['parsed'] = df['jsoncol'].apply(pd.jsonnormalize)\n\nNormalize nested JSON columns\ndf = pd.readcsv('data.csv')\ndfnormalized = pd.jsonnormalize(\n    df['nestedjson'].apply(json.loads),\n    recordpath=['items'],         List of nested objects to unpack\n    meta=['id', 'timestamp']       Keep these columns from parent\n)Copy to clipboardErrorCopied\n\nSQL JSON Functions\n\nSQL supports built-in JSON functions allow you to query and manipulate JSON stored within relational databases.\nThese are implemented by most popular databases, including\nSQLite,\nPostgreSQL, and\nMySQL.\nThis is especially handy when you have a hybrid data model, combining structured tables with semi-structured JSON columns.\n\nExample: An application that stores user settings or application logs as JSON in a SQLite database, enabling quick lookups and modifications without external JSON parsing libraries.\n\nSELECT\n    jsonextract(data, '$.name') as name,\n    jsonextract(data, '$.details.age') as age\nFROM users\nWHERE jsonextract(data, '$.active') = trueCopy to clipboardErrorCopied\n\nDuckDB JSON Processing\n\nDuckDB shines when analyzing JSON/JSONL files directly, making it a powerful tool for data analytics without the overhead of loading entire datasets into memory. Its SQL-like syntax simplifies exploratory analysis on nested data.\n\nExample: Performing ad-hoc analytics on streaming JSON logs from a web service, such as calculating average response times or aggregating user behavior metrics.\n\nSELECT\n    jsonextractstring(data, '$.user.name') as name,\n    avg(jsonextractfloat(data, '$.metrics.value')) as avgvalue\nFROM readjsonauto('data/.jsonl')\nGROUP BY 1\nHAVING avgvalue > 100Copy to clipboardErrorCopied\n\nPrevious\n\nProfiling Data with Python\n\nNext\n\nData Transformation with dbt"
  },
  {
    "title": "Parsing JSON",
    "filename": "Parsing_JSON.md",
    "text": "Parsing JSON\n----------------------------------------------\n\nJSON is everywhere—APIs, logs, configuration files—and its nested or large structure can challenge memory and processing. In this tutorial, we’ll explore tools to flatten, stream, and query JSON data efficiently.\n\nFor example, we’ll often need to process a multi-gigabyte log file from a web service where each record is a JSON object.\n\n[](https://youtu.be/1lxrbezP-g)\n\nThis requires us to handle complex nested structures, large files that don’t fit in memory, or extract specific fields. Here are the key tools and techniques for efficient JSON parsing:\n\n| Tool | Extract from JSON… | Why |\n| --- | --- | --- |\n| jq | JSON in the shell | Quick data exploration and pipeline processing |\n| JMESPath | JSON in Python | Handle complex queries with a clean syntax |\n| ijson | JSON streams in Python | Parse streaming/large JSON files memory-efficiently |\n| Pandas | JSON columns in Python | Fast analysis of structured data |\n| SQL JSON | JSON in databases | Combine structured and semi-structured data |\n| DuckDB | JSON anywhere | Fast analysis of JSON files / databases without loading to memory |\n\nExamples:\n\n Use Pandas when you need to transform API responses into a DataFrame for further analysis.\n Leverage ijson when dealing with huge JSON logs where memory is at a premium.\n Apply jq for quick, iterative exploration directly in your terminal.\n\nPractice with these resources:\n\n JSONPath Online Evaluator: Test JSON queries\n jq play: Interactive jq query testing\n DuckDB JSON Tutorial: Learn DuckDB JSON functions\n\nCommand-line JSON Processing with jq\n\njq is a versatile command-line tool for slicing, filtering, and transforming JSON. It excels in quick data exploration and can be integrated into shell scripts for automated data pipelines.\n\nExample: Sifting through server logs in JSON Lines format to extract error messages or aggregate metrics without launching a full-scale ETL process.\n\nExtract specific fields from JSONL\ncat data.jsonl | jq -c 'select(.type == \"user\") | {id, name}'\n\nTransform JSON structure\ncat data.json | jq '.items[] | {name: .name, count: .details.count}'\n\nFilter and aggregate\ncat events.jsonl | jq -s 'groupby(.category) | map({category: .[0].category, count: length})'Copy to clipboardErrorCopied\n\nJMESPath Queries\n\nJMESPath offers a declarative query language to extract and transform data from nested JSON structures without needing verbose code. It’s a neat alternative when you want to quickly pull out specific values or filter collections based on conditions.\n\nExample: Extracting user emails or filtering out inactive records from a complex JSON payload received from a cloud service.\n\nimport jmespath\n\nExample queries\ndata = {\n    \"locations\": [\n        {\"name\": \"Seattle\", \"state\": \"WA\", \"info\": {\"population\": 737015}},\n        {\"name\": \"Portland\", \"state\": \"OR\", \"info\": {\"population\": 652503}}\n    ]\n}\n\nFind all cities with population > 700000\ncities = jmespath.search(\"locations[?info.population > 700000].name\", data)Copy to clipboardErrorCopied\n\nStreaming with ijson\n\nLoading huge JSON files all at once can quickly exhaust system memory. ijson lets you stream and process JSON incrementally. This method is ideal when your JSON file is too large or when you only need to work with part of the data.\n\nExample: Processing a continuous feed from an API that returns a large JSON array, such as sensor data or event logs, while filtering on the fly.\n\nimport ijson\n\nasync def processlargejson(filepath: str) -> list:\n    \"\"\"Process a large JSON file without loading it entirely into memory.\"\"\"\n    results = []\n\n    with open(filepath, 'rb') as file:\n         Stream objects under the 'items' key\n        parser = ijson.items(file, 'items.item')\n        async for item in parser:\n            if item['value'] > 100:   Process conditionally\n                results.append(item)\n\n    return resultsCopy to clipboardErrorCopied\n\nPandas JSON Columns\n\nPandas makes it easy to work with tabular data that includes JSON strings. When you receive API data where one column holds nested JSON, flattening these structures lets you analyze and visualize the data using familiar DataFrame operations.\n\nExample: Flattening customer records stored as nested JSON in a CSV file to extract demographic details and spending patterns.\n\nimport pandas as pd\n\nParse JSON strings in a column\ndf = pd.DataFrame({'jsoncol': ['{\"name\": \"Alice\", \"age\": 30}', '{\"name\": \"Bob\", \"age\": 25}']})\ndf['parsed'] = df['jsoncol'].apply(pd.jsonnormalize)\n\nNormalize nested JSON columns\ndf = pd.readcsv('data.csv')\ndfnormalized = pd.jsonnormalize(\n    df['nestedjson'].apply(json.loads),\n    recordpath=['items'],         List of nested objects to unpack\n    meta=['id', 'timestamp']       Keep these columns from parent\n)Copy to clipboardErrorCopied\n\nSQL JSON Functions\n\nSQL supports built-in JSON functions allow you to query and manipulate JSON stored within relational databases.\nThese are implemented by most popular databases, including\nSQLite,\nPostgreSQL, and\nMySQL.\nThis is especially handy when you have a hybrid data model, combining structured tables with semi-structured JSON columns.\n\nExample: An application that stores user settings or application logs as JSON in a SQLite database, enabling quick lookups and modifications without external JSON parsing libraries.\n\nSELECT\n    jsonextract(data, '$.name') as name,\n    jsonextract(data, '$.details.age') as age\nFROM users\nWHERE jsonextract(data, '$.active') = trueCopy to clipboardErrorCopied\n\nDuckDB JSON Processing\n\nDuckDB shines when analyzing JSON/JSONL files directly, making it a powerful tool for data analytics without the overhead of loading entire datasets into memory. Its SQL-like syntax simplifies exploratory analysis on nested data.\n\nExample: Performing ad-hoc analytics on streaming JSON logs from a web service, such as calculating average response times or aggregating user behavior metrics.\n\nSELECT\n    jsonextractstring(data, '$.user.name') as name,\n    avg(jsonextractfloat(data, '$.metrics.value')) as avgvalue\nFROM readjsonauto('data/.jsonl')\nGROUP BY 1\nHAVING avgvalue > 100Copy to clipboardErrorCopied\n\nPrevious\n\nProfiling Data with Python\n\nNext\n\nData Transformation with dbt"
  },
  {
    "title": "Parsing JSON",
    "filename": "Parsing_JSON.md",
    "text": "Parsing JSON\n----------------------------------------------\n\nJSON is everywhere—APIs, logs, configuration files—and its nested or large structure can challenge memory and processing. In this tutorial, we’ll explore tools to flatten, stream, and query JSON data efficiently.\n\nFor example, we’ll often need to process a multi-gigabyte log file from a web service where each record is a JSON object.\n\n[](https://youtu.be/1lxrbezP-g)\n\nThis requires us to handle complex nested structures, large files that don’t fit in memory, or extract specific fields. Here are the key tools and techniques for efficient JSON parsing:\n\n| Tool | Extract from JSON… | Why |\n| --- | --- | --- |\n| jq | JSON in the shell | Quick data exploration and pipeline processing |\n| JMESPath | JSON in Python | Handle complex queries with a clean syntax |\n| ijson | JSON streams in Python | Parse streaming/large JSON files memory-efficiently |\n| Pandas | JSON columns in Python | Fast analysis of structured data |\n| SQL JSON | JSON in databases | Combine structured and semi-structured data |\n| DuckDB | JSON anywhere | Fast analysis of JSON files / databases without loading to memory |\n\nExamples:\n\n Use Pandas when you need to transform API responses into a DataFrame for further analysis.\n Leverage ijson when dealing with huge JSON logs where memory is at a premium.\n Apply jq for quick, iterative exploration directly in your terminal.\n\nPractice with these resources:\n\n JSONPath Online Evaluator: Test JSON queries\n jq play: Interactive jq query testing\n DuckDB JSON Tutorial: Learn DuckDB JSON functions\n\nCommand-line JSON Processing with jq\n\njq is a versatile command-line tool for slicing, filtering, and transforming JSON. It excels in quick data exploration and can be integrated into shell scripts for automated data pipelines.\n\nExample: Sifting through server logs in JSON Lines format to extract error messages or aggregate metrics without launching a full-scale ETL process.\n\nExtract specific fields from JSONL\ncat data.jsonl | jq -c 'select(.type == \"user\") | {id, name}'\n\nTransform JSON structure\ncat data.json | jq '.items[] | {name: .name, count: .details.count}'\n\nFilter and aggregate\ncat events.jsonl | jq -s 'groupby(.category) | map({category: .[0].category, count: length})'Copy to clipboardErrorCopied\n\nJMESPath Queries\n\nJMESPath offers a declarative query language to extract and transform data from nested JSON structures without needing verbose code. It’s a neat alternative when you want to quickly pull out specific values or filter collections based on conditions.\n\nExample: Extracting user emails or filtering out inactive records from a complex JSON payload received from a cloud service.\n\nimport jmespath\n\nExample queries\ndata = {\n    \"locations\": [\n        {\"name\": \"Seattle\", \"state\": \"WA\", \"info\": {\"population\": 737015}},\n        {\"name\": \"Portland\", \"state\": \"OR\", \"info\": {\"population\": 652503}}\n    ]\n}\n\nFind all cities with population > 700000\ncities = jmespath.search(\"locations[?info.population > 700000].name\", data)Copy to clipboardErrorCopied\n\nStreaming with ijson\n\nLoading huge JSON files all at once can quickly exhaust system memory. ijson lets you stream and process JSON incrementally. This method is ideal when your JSON file is too large or when you only need to work with part of the data.\n\nExample: Processing a continuous feed from an API that returns a large JSON array, such as sensor data or event logs, while filtering on the fly.\n\nimport ijson\n\nasync def processlargejson(filepath: str) -> list:\n    \"\"\"Process a large JSON file without loading it entirely into memory.\"\"\"\n    results = []\n\n    with open(filepath, 'rb') as file:\n         Stream objects under the 'items' key\n        parser = ijson.items(file, 'items.item')\n        async for item in parser:\n            if item['value'] > 100:   Process conditionally\n                results.append(item)\n\n    return resultsCopy to clipboardErrorCopied\n\nPandas JSON Columns\n\nPandas makes it easy to work with tabular data that includes JSON strings. When you receive API data where one column holds nested JSON, flattening these structures lets you analyze and visualize the data using familiar DataFrame operations.\n\nExample: Flattening customer records stored as nested JSON in a CSV file to extract demographic details and spending patterns.\n\nimport pandas as pd\n\nParse JSON strings in a column\ndf = pd.DataFrame({'jsoncol': ['{\"name\": \"Alice\", \"age\": 30}', '{\"name\": \"Bob\", \"age\": 25}']})\ndf['parsed'] = df['jsoncol'].apply(pd.jsonnormalize)\n\nNormalize nested JSON columns\ndf = pd.readcsv('data.csv')\ndfnormalized = pd.jsonnormalize(\n    df['nestedjson'].apply(json.loads),\n    recordpath=['items'],         List of nested objects to unpack\n    meta=['id', 'timestamp']       Keep these columns from parent\n)Copy to clipboardErrorCopied\n\nSQL JSON Functions\n\nSQL supports built-in JSON functions allow you to query and manipulate JSON stored within relational databases.\nThese are implemented by most popular databases, including\nSQLite,\nPostgreSQL, and\nMySQL.\nThis is especially handy when you have a hybrid data model, combining structured tables with semi-structured JSON columns.\n\nExample: An application that stores user settings or application logs as JSON in a SQLite database, enabling quick lookups and modifications without external JSON parsing libraries.\n\nSELECT\n    jsonextract(data, '$.name') as name,\n    jsonextract(data, '$.details.age') as age\nFROM users\nWHERE jsonextract(data, '$.active') = trueCopy to clipboardErrorCopied\n\nDuckDB JSON Processing\n\nDuckDB shines when analyzing JSON/JSONL files directly, making it a powerful tool for data analytics without the overhead of loading entire datasets into memory. Its SQL-like syntax simplifies exploratory analysis on nested data.\n\nExample: Performing ad-hoc analytics on streaming JSON logs from a web service, such as calculating average response times or aggregating user behavior metrics.\n\nSELECT\n    jsonextractstring(data, '$.user.name') as name,\n    avg(jsonextractfloat(data, '$.metrics.value')) as avgvalue\nFROM readjsonauto('data/.jsonl')\nGROUP BY 1\nHAVING avgvalue > 100Copy to clipboardErrorCopied\n\nPrevious\n\nProfiling Data with Python\n\nNext\n\nData Transformation with dbt"
  },
  {
    "title": "LLM Video Screen-Scraping",
    "filename": "LLM_Video_Screen-Scraping.md",
    "text": "LLM Video Screen-Scraping\n-------------------------------------------------------------------------------------\n\nVideo screen-scraping with LLMs is a powerful technique for extracting structured data from screen recordings. This approach works with any visible screen content and bypasses traditional web scraping limitations like authentication or anti-scraping measures.\n\n[](https://youtu.be/2G1LqS6qO5s)\n\nKey benefits:\n\n No setup cost or authentication handling\n Works with any visible screen content\n Full control over data exposure\n Extremely cost-effective (< $0.001 per short video)\n Bypasses anti-scraping measures\n Handles varying formats and layouts\n\nQuick Start Example\n\nHere’s a basic workflow using Google’s AI Studio and Gemini:\n\n1. Record the Screen\n    Use QuickTime (Mac) or Windows Game Bar (Windows), Screen2Gif, or any tool of your choice\n    Select specific screen area containing target data\n    Record scrolling/clicking through content\n    Keep recordings short (30-60 seconds)\n2. Process with Gemini\n    Upload to Google AI Studio\n    Select Gemini 1.5 Flash (cost-effective)\n    Prompt for structured output (JSON/CSV)\n\nExample prompt for extracting tabular data:\n\nTurn this video into a JSON array where each item has:\n{\n  \"date\": \"yyyy-mm-dd\",\n  \"amount\": float\n}Copy to clipboardErrorCopied\n\nCost Calculation\n\nGemini 1.5 Flash pricing (as of January 2025):\n\n $0.075 per million tokens\n Cost per frame  250 tokens\n Cost for 24 hours of video at 1 frame per second  $1.62!\n\nBest Practices\n\n1. Recording Quality\n    Frame only relevant content\n    Pause briefly on important data\n    Maintain consistent scroll speed\n    Use high contrast display settings\n2. Data Validation\n    Always verify critical data manually\n    Use spot-checking for large datasets\n    Consider running multiple passes\n    Log and review any anomalies\n3. Error Handling\n    Request data in simple formats (CSV/JSON)\n    Include validation in prompts\n    Split long videos into segments\n    Handle missing/partial data gracefully\n\nUse Cases\n\n1. Data Extraction\n    Email content aggregation\n    Dashboard metrics collection\n    Protected web content\n    Legacy system data\n2. Data Journalism\n    Public records analysis\n    Time-series data collection\n    Interactive visualization data\n    Government website scraping\n3. Business Intelligence\n    Competitor pricing analysis\n    Market research data\n    Internal system migration\n    Legacy report conversion\n\nTools:\n\n Google AI Studio: Process videos with Gemini\n QuickTime Player: Screen recording (Mac)\n Screen2Gif: Screen recording (Windows)\n OBS Studio: Advanced screen recording (cross-platform)\n\nReferences:\n\n Simon Willison’s Video Scraping Tutorial\n Gemini API Documentation\n\nPrevious\n\nLLM Website Scraping\n\nNext\n\nWeb Automation with Playwright"
  },
  {
    "title": "LLM Video Screen-Scraping",
    "filename": "LLM_Video_Screen-Scraping.md",
    "text": "LLM Video Screen-Scraping\n-------------------------------------------------------------------------------------\n\nVideo screen-scraping with LLMs is a powerful technique for extracting structured data from screen recordings. This approach works with any visible screen content and bypasses traditional web scraping limitations like authentication or anti-scraping measures.\n\n[](https://youtu.be/2G1LqS6qO5s)\n\nKey benefits:\n\n No setup cost or authentication handling\n Works with any visible screen content\n Full control over data exposure\n Extremely cost-effective (< $0.001 per short video)\n Bypasses anti-scraping measures\n Handles varying formats and layouts\n\nQuick Start Example\n\nHere’s a basic workflow using Google’s AI Studio and Gemini:\n\n1. Record the Screen\n    Use QuickTime (Mac) or Windows Game Bar (Windows), Screen2Gif, or any tool of your choice\n    Select specific screen area containing target data\n    Record scrolling/clicking through content\n    Keep recordings short (30-60 seconds)\n2. Process with Gemini\n    Upload to Google AI Studio\n    Select Gemini 1.5 Flash (cost-effective)\n    Prompt for structured output (JSON/CSV)\n\nExample prompt for extracting tabular data:\n\nTurn this video into a JSON array where each item has:\n{\n  \"date\": \"yyyy-mm-dd\",\n  \"amount\": float\n}Copy to clipboardErrorCopied\n\nCost Calculation\n\nGemini 1.5 Flash pricing (as of January 2025):\n\n $0.075 per million tokens\n Cost per frame  250 tokens\n Cost for 24 hours of video at 1 frame per second  $1.62!\n\nBest Practices\n\n1. Recording Quality\n    Frame only relevant content\n    Pause briefly on important data\n    Maintain consistent scroll speed\n    Use high contrast display settings\n2. Data Validation\n    Always verify critical data manually\n    Use spot-checking for large datasets\n    Consider running multiple passes\n    Log and review any anomalies\n3. Error Handling\n    Request data in simple formats (CSV/JSON)\n    Include validation in prompts\n    Split long videos into segments\n    Handle missing/partial data gracefully\n\nUse Cases\n\n1. Data Extraction\n    Email content aggregation\n    Dashboard metrics collection\n    Protected web content\n    Legacy system data\n2. Data Journalism\n    Public records analysis\n    Time-series data collection\n    Interactive visualization data\n    Government website scraping\n3. Business Intelligence\n    Competitor pricing analysis\n    Market research data\n    Internal system migration\n    Legacy report conversion\n\nTools:\n\n Google AI Studio: Process videos with Gemini\n QuickTime Player: Screen recording (Mac)\n Screen2Gif: Screen recording (Windows)\n OBS Studio: Advanced screen recording (cross-platform)\n\nReferences:\n\n Simon Willison’s Video Scraping Tutorial\n Gemini API Documentation\n\nPrevious\n\nLLM Website Scraping\n\nNext\n\nWeb Automation with Playwright"
  },
  {
    "title": "LLM Video Screen-Scraping",
    "filename": "LLM_Video_Screen-Scraping.md",
    "text": "LLM Video Screen-Scraping\n-------------------------------------------------------------------------------------\n\nVideo screen-scraping with LLMs is a powerful technique for extracting structured data from screen recordings. This approach works with any visible screen content and bypasses traditional web scraping limitations like authentication or anti-scraping measures.\n\n[](https://youtu.be/2G1LqS6qO5s)\n\nKey benefits:\n\n No setup cost or authentication handling\n Works with any visible screen content\n Full control over data exposure\n Extremely cost-effective (< $0.001 per short video)\n Bypasses anti-scraping measures\n Handles varying formats and layouts\n\nQuick Start Example\n\nHere’s a basic workflow using Google’s AI Studio and Gemini:\n\n1. Record the Screen\n    Use QuickTime (Mac) or Windows Game Bar (Windows), Screen2Gif, or any tool of your choice\n    Select specific screen area containing target data\n    Record scrolling/clicking through content\n    Keep recordings short (30-60 seconds)\n2. Process with Gemini\n    Upload to Google AI Studio\n    Select Gemini 1.5 Flash (cost-effective)\n    Prompt for structured output (JSON/CSV)\n\nExample prompt for extracting tabular data:\n\nTurn this video into a JSON array where each item has:\n{\n  \"date\": \"yyyy-mm-dd\",\n  \"amount\": float\n}Copy to clipboardErrorCopied\n\nCost Calculation\n\nGemini 1.5 Flash pricing (as of January 2025):\n\n $0.075 per million tokens\n Cost per frame  250 tokens\n Cost for 24 hours of video at 1 frame per second  $1.62!\n\nBest Practices\n\n1. Recording Quality\n    Frame only relevant content\n    Pause briefly on important data\n    Maintain consistent scroll speed\n    Use high contrast display settings\n2. Data Validation\n    Always verify critical data manually\n    Use spot-checking for large datasets\n    Consider running multiple passes\n    Log and review any anomalies\n3. Error Handling\n    Request data in simple formats (CSV/JSON)\n    Include validation in prompts\n    Split long videos into segments\n    Handle missing/partial data gracefully\n\nUse Cases\n\n1. Data Extraction\n    Email content aggregation\n    Dashboard metrics collection\n    Protected web content\n    Legacy system data\n2. Data Journalism\n    Public records analysis\n    Time-series data collection\n    Interactive visualization data\n    Government website scraping\n3. Business Intelligence\n    Competitor pricing analysis\n    Market research data\n    Internal system migration\n    Legacy report conversion\n\nTools:\n\n Google AI Studio: Process videos with Gemini\n QuickTime Player: Screen recording (Mac)\n Screen2Gif: Screen recording (Windows)\n OBS Studio: Advanced screen recording (cross-platform)\n\nReferences:\n\n Simon Willison’s Video Scraping Tutorial\n Gemini API Documentation\n\nPrevious\n\nLLM Website Scraping\n\nNext\n\nWeb Automation with Playwright"
  },
  {
    "title": "LLM Video Screen-Scraping",
    "filename": "LLM_Video_Screen-Scraping.md",
    "text": "LLM Video Screen-Scraping\n-------------------------------------------------------------------------------------\n\nVideo screen-scraping with LLMs is a powerful technique for extracting structured data from screen recordings. This approach works with any visible screen content and bypasses traditional web scraping limitations like authentication or anti-scraping measures.\n\n[](https://youtu.be/2G1LqS6qO5s)\n\nKey benefits:\n\n No setup cost or authentication handling\n Works with any visible screen content\n Full control over data exposure\n Extremely cost-effective (< $0.001 per short video)\n Bypasses anti-scraping measures\n Handles varying formats and layouts\n\nQuick Start Example\n\nHere’s a basic workflow using Google’s AI Studio and Gemini:\n\n1. Record the Screen\n    Use QuickTime (Mac) or Windows Game Bar (Windows), Screen2Gif, or any tool of your choice\n    Select specific screen area containing target data\n    Record scrolling/clicking through content\n    Keep recordings short (30-60 seconds)\n2. Process with Gemini\n    Upload to Google AI Studio\n    Select Gemini 1.5 Flash (cost-effective)\n    Prompt for structured output (JSON/CSV)\n\nExample prompt for extracting tabular data:\n\nTurn this video into a JSON array where each item has:\n{\n  \"date\": \"yyyy-mm-dd\",\n  \"amount\": float\n}Copy to clipboardErrorCopied\n\nCost Calculation\n\nGemini 1.5 Flash pricing (as of January 2025):\n\n $0.075 per million tokens\n Cost per frame  250 tokens\n Cost for 24 hours of video at 1 frame per second  $1.62!\n\nBest Practices\n\n1. Recording Quality\n    Frame only relevant content\n    Pause briefly on important data\n    Maintain consistent scroll speed\n    Use high contrast display settings\n2. Data Validation\n    Always verify critical data manually\n    Use spot-checking for large datasets\n    Consider running multiple passes\n    Log and review any anomalies\n3. Error Handling\n    Request data in simple formats (CSV/JSON)\n    Include validation in prompts\n    Split long videos into segments\n    Handle missing/partial data gracefully\n\nUse Cases\n\n1. Data Extraction\n    Email content aggregation\n    Dashboard metrics collection\n    Protected web content\n    Legacy system data\n2. Data Journalism\n    Public records analysis\n    Time-series data collection\n    Interactive visualization data\n    Government website scraping\n3. Business Intelligence\n    Competitor pricing analysis\n    Market research data\n    Internal system migration\n    Legacy report conversion\n\nTools:\n\n Google AI Studio: Process videos with Gemini\n QuickTime Player: Screen recording (Mac)\n Screen2Gif: Screen recording (Windows)\n OBS Studio: Advanced screen recording (cross-platform)\n\nReferences:\n\n Simon Willison’s Video Scraping Tutorial\n Gemini API Documentation\n\nPrevious\n\nLLM Website Scraping\n\nNext\n\nWeb Automation with Playwright"
  },
  {
    "title": "LLM Video Screen-Scraping",
    "filename": "LLM_Video_Screen-Scraping.md",
    "text": "LLM Video Screen-Scraping\n-------------------------------------------------------------------------------------\n\nVideo screen-scraping with LLMs is a powerful technique for extracting structured data from screen recordings. This approach works with any visible screen content and bypasses traditional web scraping limitations like authentication or anti-scraping measures.\n\n[](https://youtu.be/2G1LqS6qO5s)\n\nKey benefits:\n\n No setup cost or authentication handling\n Works with any visible screen content\n Full control over data exposure\n Extremely cost-effective (< $0.001 per short video)\n Bypasses anti-scraping measures\n Handles varying formats and layouts\n\nQuick Start Example\n\nHere’s a basic workflow using Google’s AI Studio and Gemini:\n\n1. Record the Screen\n    Use QuickTime (Mac) or Windows Game Bar (Windows), Screen2Gif, or any tool of your choice\n    Select specific screen area containing target data\n    Record scrolling/clicking through content\n    Keep recordings short (30-60 seconds)\n2. Process with Gemini\n    Upload to Google AI Studio\n    Select Gemini 1.5 Flash (cost-effective)\n    Prompt for structured output (JSON/CSV)\n\nExample prompt for extracting tabular data:\n\nTurn this video into a JSON array where each item has:\n{\n  \"date\": \"yyyy-mm-dd\",\n  \"amount\": float\n}Copy to clipboardErrorCopied\n\nCost Calculation\n\nGemini 1.5 Flash pricing (as of January 2025):\n\n $0.075 per million tokens\n Cost per frame  250 tokens\n Cost for 24 hours of video at 1 frame per second  $1.62!\n\nBest Practices\n\n1. Recording Quality\n    Frame only relevant content\n    Pause briefly on important data\n    Maintain consistent scroll speed\n    Use high contrast display settings\n2. Data Validation\n    Always verify critical data manually\n    Use spot-checking for large datasets\n    Consider running multiple passes\n    Log and review any anomalies\n3. Error Handling\n    Request data in simple formats (CSV/JSON)\n    Include validation in prompts\n    Split long videos into segments\n    Handle missing/partial data gracefully\n\nUse Cases\n\n1. Data Extraction\n    Email content aggregation\n    Dashboard metrics collection\n    Protected web content\n    Legacy system data\n2. Data Journalism\n    Public records analysis\n    Time-series data collection\n    Interactive visualization data\n    Government website scraping\n3. Business Intelligence\n    Competitor pricing analysis\n    Market research data\n    Internal system migration\n    Legacy report conversion\n\nTools:\n\n Google AI Studio: Process videos with Gemini\n QuickTime Player: Screen recording (Mac)\n Screen2Gif: Screen recording (Windows)\n OBS Studio: Advanced screen recording (cross-platform)\n\nReferences:\n\n Simon Willison’s Video Scraping Tutorial\n Gemini API Documentation\n\nPrevious\n\nLLM Website Scraping\n\nNext\n\nWeb Automation with Playwright"
  },
  {
    "title": "LLM Video Screen-Scraping",
    "filename": "LLM_Video_Screen-Scraping.md",
    "text": "LLM Video Screen-Scraping\n-------------------------------------------------------------------------------------\n\nVideo screen-scraping with LLMs is a powerful technique for extracting structured data from screen recordings. This approach works with any visible screen content and bypasses traditional web scraping limitations like authentication or anti-scraping measures.\n\n[](https://youtu.be/2G1LqS6qO5s)\n\nKey benefits:\n\n No setup cost or authentication handling\n Works with any visible screen content\n Full control over data exposure\n Extremely cost-effective (< $0.001 per short video)\n Bypasses anti-scraping measures\n Handles varying formats and layouts\n\nQuick Start Example\n\nHere’s a basic workflow using Google’s AI Studio and Gemini:\n\n1. Record the Screen\n    Use QuickTime (Mac) or Windows Game Bar (Windows), Screen2Gif, or any tool of your choice\n    Select specific screen area containing target data\n    Record scrolling/clicking through content\n    Keep recordings short (30-60 seconds)\n2. Process with Gemini\n    Upload to Google AI Studio\n    Select Gemini 1.5 Flash (cost-effective)\n    Prompt for structured output (JSON/CSV)\n\nExample prompt for extracting tabular data:\n\nTurn this video into a JSON array where each item has:\n{\n  \"date\": \"yyyy-mm-dd\",\n  \"amount\": float\n}Copy to clipboardErrorCopied\n\nCost Calculation\n\nGemini 1.5 Flash pricing (as of January 2025):\n\n $0.075 per million tokens\n Cost per frame  250 tokens\n Cost for 24 hours of video at 1 frame per second  $1.62!\n\nBest Practices\n\n1. Recording Quality\n    Frame only relevant content\n    Pause briefly on important data\n    Maintain consistent scroll speed\n    Use high contrast display settings\n2. Data Validation\n    Always verify critical data manually\n    Use spot-checking for large datasets\n    Consider running multiple passes\n    Log and review any anomalies\n3. Error Handling\n    Request data in simple formats (CSV/JSON)\n    Include validation in prompts\n    Split long videos into segments\n    Handle missing/partial data gracefully\n\nUse Cases\n\n1. Data Extraction\n    Email content aggregation\n    Dashboard metrics collection\n    Protected web content\n    Legacy system data\n2. Data Journalism\n    Public records analysis\n    Time-series data collection\n    Interactive visualization data\n    Government website scraping\n3. Business Intelligence\n    Competitor pricing analysis\n    Market research data\n    Internal system migration\n    Legacy report conversion\n\nTools:\n\n Google AI Studio: Process videos with Gemini\n QuickTime Player: Screen recording (Mac)\n Screen2Gif: Screen recording (Windows)\n OBS Studio: Advanced screen recording (cross-platform)\n\nReferences:\n\n Simon Willison’s Video Scraping Tutorial\n Gemini API Documentation\n\nPrevious\n\nLLM Website Scraping\n\nNext\n\nWeb Automation with Playwright"
  },
  {
    "title": "Scheduled Scraping with GitHub Actions",
    "filename": "Scheduled_Scraping_with_GitHub_Actions.md",
    "text": "Scheduled Scraping with GitHub Actions\n----------------------------------------------------------------------------------------------------------------------------\n\nGitHub Actions provides an excellent platform for running web scrapers on a schedule. This tutorial shows how to automate data collection from websites using GitHub Actions workflows.\n\nKey Concepts\n\n Scheduling: Use cron syntax to run scrapers at specific times\n Dependencies: Install required packages like httpx, lxml\n Data Storage: Save scraped data to files and commit back to the repository\n Error Handling: Implement robust error handling for network issues and HTML parsing\n Rate Limiting: Respect website terms of service and implement delays between requests\n\nHere’s a sample scrape.py that scrapes the IMDb Top 250 movies using httpx and lxml:\n\nimport json\nimport httpx\nfrom datetime import datetime, UTC\nfrom lxml import html\nfrom typing import List, Dict\n\ndef scrapeimdb() -> List[Dict[str, str]]:\n    \"\"\"Scrape IMDb Top 250 movies using httpx and lxml.\n\n    Returns:\n        List of dictionaries containing movie title, year, and rating.\n    \"\"\"\n    headers = {\"User-Agent\": \"Mozilla/5.0 (compatible; IMDbBot/1.0)\"}\n    response = httpx.get(\"https://www.imdb.com/chart/top/\", headers=headers)\n    response.raiseforstatus()\n\n    tree = html.fromstring(response.text)\n    movies = []\n\n    for item in tree.cssselect(\".ipc-metadata-list-summary-item\"):\n        title = (\n            item.cssselect(\".ipc-titletext\")[0].textcontent()\n            if item.cssselect(\".ipc-titletext\")\n            else None\n        )\n        year = (\n            item.cssselect(\".cli-title-metadata span\")[0].textcontent()\n            if item.cssselect(\".cli-title-metadata span\")\n            else None\n        )\n        rating = (\n            item.cssselect(\".ipc-rating-star\")[0].textcontent()\n            if item.cssselect(\".ipc-rating-star\")\n            else None\n        )\n\n        if title and year and rating:\n            movies.append({\"title\": title, \"year\": year, \"rating\": rating})\n\n    return movies\n\nScrape data and save with timestamp\nnow = datetime.now(UTC)\nwith open(f'imdb-top250-{now.strftime(\"%Y-%m-%d\")}.json', \"a\") as f:\n    f.write(json.dumps({\"timestamp\": now.isoformat(), \"movies\": scrapeimdb()}) + \"\\n\")Copy to clipboardErrorCopied\n\nHere’s a sample .github/workflows/imdb-top250.yml that runs the scraper daily and saves the data:\n\nname: Scrape IMDb Top 250\n\non:\n  schedule:\n     Runs at 00:00 UTC every day\n    - cron: \"0 0   \"\n  workflowdispatch:  Allow manual triggers\n\njobs:\n  scrape-imdb:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Install uv\n        uses: astral-sh/setup-uv@v5\n\n      - name: Run scraper\n        run: |  python\n          uv run --with httpx,lxml,cssselect python scrape.py\n\n      - name: Commit and push changes\n        run: |\n          git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add .json\n          git commit -m \"Update IMDb Top 250 data [skip ci]\" || exit 0\n          git pushCopy to clipboardErrorCopied\n\nBest Practices\n\n1. Cache Dependencies: Use GitHub’s caching to speed up package installation\n2. Handle Errors: Implement retries and error logging\n3. Rate Limiting: Add delays between requests to avoid overwhelming servers\n4. Data Validation: Verify scraped data structure before saving\n5. Monitoring: Set up notifications for workflow failures\n\nTools and Resources\n\n httpx: Async HTTP client\n GitHub Actions Marketplace\n GitHub Actions Documentation\n\nVideo Tutorials\n\n[](https://youtu.be/eJG86J200nM)\n\nPrevious\n\nWeb Automation with Playwright\n\nNext\n\nScraping emarketer.com"
  },
  {
    "title": "Scheduled Scraping with GitHub Actions",
    "filename": "Scheduled_Scraping_with_GitHub_Actions.md",
    "text": "Scheduled Scraping with GitHub Actions\n----------------------------------------------------------------------------------------------------------------------------\n\nGitHub Actions provides an excellent platform for running web scrapers on a schedule. This tutorial shows how to automate data collection from websites using GitHub Actions workflows.\n\nKey Concepts\n\n Scheduling: Use cron syntax to run scrapers at specific times\n Dependencies: Install required packages like httpx, lxml\n Data Storage: Save scraped data to files and commit back to the repository\n Error Handling: Implement robust error handling for network issues and HTML parsing\n Rate Limiting: Respect website terms of service and implement delays between requests\n\nHere’s a sample scrape.py that scrapes the IMDb Top 250 movies using httpx and lxml:\n\nimport json\nimport httpx\nfrom datetime import datetime, UTC\nfrom lxml import html\nfrom typing import List, Dict\n\ndef scrapeimdb() -> List[Dict[str, str]]:\n    \"\"\"Scrape IMDb Top 250 movies using httpx and lxml.\n\n    Returns:\n        List of dictionaries containing movie title, year, and rating.\n    \"\"\"\n    headers = {\"User-Agent\": \"Mozilla/5.0 (compatible; IMDbBot/1.0)\"}\n    response = httpx.get(\"https://www.imdb.com/chart/top/\", headers=headers)\n    response.raiseforstatus()\n\n    tree = html.fromstring(response.text)\n    movies = []\n\n    for item in tree.cssselect(\".ipc-metadata-list-summary-item\"):\n        title = (\n            item.cssselect(\".ipc-titletext\")[0].textcontent()\n            if item.cssselect(\".ipc-titletext\")\n            else None\n        )\n        year = (\n            item.cssselect(\".cli-title-metadata span\")[0].textcontent()\n            if item.cssselect(\".cli-title-metadata span\")\n            else None\n        )\n        rating = (\n            item.cssselect(\".ipc-rating-star\")[0].textcontent()\n            if item.cssselect(\".ipc-rating-star\")\n            else None\n        )\n\n        if title and year and rating:\n            movies.append({\"title\": title, \"year\": year, \"rating\": rating})\n\n    return movies\n\nScrape data and save with timestamp\nnow = datetime.now(UTC)\nwith open(f'imdb-top250-{now.strftime(\"%Y-%m-%d\")}.json', \"a\") as f:\n    f.write(json.dumps({\"timestamp\": now.isoformat(), \"movies\": scrapeimdb()}) + \"\\n\")Copy to clipboardErrorCopied\n\nHere’s a sample .github/workflows/imdb-top250.yml that runs the scraper daily and saves the data:\n\nname: Scrape IMDb Top 250\n\non:\n  schedule:\n     Runs at 00:00 UTC every day\n    - cron: \"0 0   \"\n  workflowdispatch:  Allow manual triggers\n\njobs:\n  scrape-imdb:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Install uv\n        uses: astral-sh/setup-uv@v5\n\n      - name: Run scraper\n        run: |  python\n          uv run --with httpx,lxml,cssselect python scrape.py\n\n      - name: Commit and push changes\n        run: |\n          git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add .json\n          git commit -m \"Update IMDb Top 250 data [skip ci]\" || exit 0\n          git pushCopy to clipboardErrorCopied\n\nBest Practices\n\n1. Cache Dependencies: Use GitHub’s caching to speed up package installation\n2. Handle Errors: Implement retries and error logging\n3. Rate Limiting: Add delays between requests to avoid overwhelming servers\n4. Data Validation: Verify scraped data structure before saving\n5. Monitoring: Set up notifications for workflow failures\n\nTools and Resources\n\n httpx: Async HTTP client\n GitHub Actions Marketplace\n GitHub Actions Documentation\n\nVideo Tutorials\n\n[](https://youtu.be/eJG86J200nM)\n\nPrevious\n\nWeb Automation with Playwright\n\nNext\n\nScraping emarketer.com"
  },
  {
    "title": "Scheduled Scraping with GitHub Actions",
    "filename": "Scheduled_Scraping_with_GitHub_Actions.md",
    "text": "Scheduled Scraping with GitHub Actions\n----------------------------------------------------------------------------------------------------------------------------\n\nGitHub Actions provides an excellent platform for running web scrapers on a schedule. This tutorial shows how to automate data collection from websites using GitHub Actions workflows.\n\nKey Concepts\n\n Scheduling: Use cron syntax to run scrapers at specific times\n Dependencies: Install required packages like httpx, lxml\n Data Storage: Save scraped data to files and commit back to the repository\n Error Handling: Implement robust error handling for network issues and HTML parsing\n Rate Limiting: Respect website terms of service and implement delays between requests\n\nHere’s a sample scrape.py that scrapes the IMDb Top 250 movies using httpx and lxml:\n\nimport json\nimport httpx\nfrom datetime import datetime, UTC\nfrom lxml import html\nfrom typing import List, Dict\n\ndef scrapeimdb() -> List[Dict[str, str]]:\n    \"\"\"Scrape IMDb Top 250 movies using httpx and lxml.\n\n    Returns:\n        List of dictionaries containing movie title, year, and rating.\n    \"\"\"\n    headers = {\"User-Agent\": \"Mozilla/5.0 (compatible; IMDbBot/1.0)\"}\n    response = httpx.get(\"https://www.imdb.com/chart/top/\", headers=headers)\n    response.raiseforstatus()\n\n    tree = html.fromstring(response.text)\n    movies = []\n\n    for item in tree.cssselect(\".ipc-metadata-list-summary-item\"):\n        title = (\n            item.cssselect(\".ipc-titletext\")[0].textcontent()\n            if item.cssselect(\".ipc-titletext\")\n            else None\n        )\n        year = (\n            item.cssselect(\".cli-title-metadata span\")[0].textcontent()\n            if item.cssselect(\".cli-title-metadata span\")\n            else None\n        )\n        rating = (\n            item.cssselect(\".ipc-rating-star\")[0].textcontent()\n            if item.cssselect(\".ipc-rating-star\")\n            else None\n        )\n\n        if title and year and rating:\n            movies.append({\"title\": title, \"year\": year, \"rating\": rating})\n\n    return movies\n\nScrape data and save with timestamp\nnow = datetime.now(UTC)\nwith open(f'imdb-top250-{now.strftime(\"%Y-%m-%d\")}.json', \"a\") as f:\n    f.write(json.dumps({\"timestamp\": now.isoformat(), \"movies\": scrapeimdb()}) + \"\\n\")Copy to clipboardErrorCopied\n\nHere’s a sample .github/workflows/imdb-top250.yml that runs the scraper daily and saves the data:\n\nname: Scrape IMDb Top 250\n\non:\n  schedule:\n     Runs at 00:00 UTC every day\n    - cron: \"0 0   \"\n  workflowdispatch:  Allow manual triggers\n\njobs:\n  scrape-imdb:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Install uv\n        uses: astral-sh/setup-uv@v5\n\n      - name: Run scraper\n        run: |  python\n          uv run --with httpx,lxml,cssselect python scrape.py\n\n      - name: Commit and push changes\n        run: |\n          git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add .json\n          git commit -m \"Update IMDb Top 250 data [skip ci]\" || exit 0\n          git pushCopy to clipboardErrorCopied\n\nBest Practices\n\n1. Cache Dependencies: Use GitHub’s caching to speed up package installation\n2. Handle Errors: Implement retries and error logging\n3. Rate Limiting: Add delays between requests to avoid overwhelming servers\n4. Data Validation: Verify scraped data structure before saving\n5. Monitoring: Set up notifications for workflow failures\n\nTools and Resources\n\n httpx: Async HTTP client\n GitHub Actions Marketplace\n GitHub Actions Documentation\n\nVideo Tutorials\n\n[](https://youtu.be/eJG86J200nM)\n\nPrevious\n\nWeb Automation with Playwright\n\nNext\n\nScraping emarketer.com"
  },
  {
    "title": "Scheduled Scraping with GitHub Actions",
    "filename": "Scheduled_Scraping_with_GitHub_Actions.md",
    "text": "Scheduled Scraping with GitHub Actions\n----------------------------------------------------------------------------------------------------------------------------\n\nGitHub Actions provides an excellent platform for running web scrapers on a schedule. This tutorial shows how to automate data collection from websites using GitHub Actions workflows.\n\nKey Concepts\n\n Scheduling: Use cron syntax to run scrapers at specific times\n Dependencies: Install required packages like httpx, lxml\n Data Storage: Save scraped data to files and commit back to the repository\n Error Handling: Implement robust error handling for network issues and HTML parsing\n Rate Limiting: Respect website terms of service and implement delays between requests\n\nHere’s a sample scrape.py that scrapes the IMDb Top 250 movies using httpx and lxml:\n\nimport json\nimport httpx\nfrom datetime import datetime, UTC\nfrom lxml import html\nfrom typing import List, Dict\n\ndef scrapeimdb() -> List[Dict[str, str]]:\n    \"\"\"Scrape IMDb Top 250 movies using httpx and lxml.\n\n    Returns:\n        List of dictionaries containing movie title, year, and rating.\n    \"\"\"\n    headers = {\"User-Agent\": \"Mozilla/5.0 (compatible; IMDbBot/1.0)\"}\n    response = httpx.get(\"https://www.imdb.com/chart/top/\", headers=headers)\n    response.raiseforstatus()\n\n    tree = html.fromstring(response.text)\n    movies = []\n\n    for item in tree.cssselect(\".ipc-metadata-list-summary-item\"):\n        title = (\n            item.cssselect(\".ipc-titletext\")[0].textcontent()\n            if item.cssselect(\".ipc-titletext\")\n            else None\n        )\n        year = (\n            item.cssselect(\".cli-title-metadata span\")[0].textcontent()\n            if item.cssselect(\".cli-title-metadata span\")\n            else None\n        )\n        rating = (\n            item.cssselect(\".ipc-rating-star\")[0].textcontent()\n            if item.cssselect(\".ipc-rating-star\")\n            else None\n        )\n\n        if title and year and rating:\n            movies.append({\"title\": title, \"year\": year, \"rating\": rating})\n\n    return movies\n\nScrape data and save with timestamp\nnow = datetime.now(UTC)\nwith open(f'imdb-top250-{now.strftime(\"%Y-%m-%d\")}.json', \"a\") as f:\n    f.write(json.dumps({\"timestamp\": now.isoformat(), \"movies\": scrapeimdb()}) + \"\\n\")Copy to clipboardErrorCopied\n\nHere’s a sample .github/workflows/imdb-top250.yml that runs the scraper daily and saves the data:\n\nname: Scrape IMDb Top 250\n\non:\n  schedule:\n     Runs at 00:00 UTC every day\n    - cron: \"0 0   \"\n  workflowdispatch:  Allow manual triggers\n\njobs:\n  scrape-imdb:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Install uv\n        uses: astral-sh/setup-uv@v5\n\n      - name: Run scraper\n        run: |  python\n          uv run --with httpx,lxml,cssselect python scrape.py\n\n      - name: Commit and push changes\n        run: |\n          git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add .json\n          git commit -m \"Update IMDb Top 250 data [skip ci]\" || exit 0\n          git pushCopy to clipboardErrorCopied\n\nBest Practices\n\n1. Cache Dependencies: Use GitHub’s caching to speed up package installation\n2. Handle Errors: Implement retries and error logging\n3. Rate Limiting: Add delays between requests to avoid overwhelming servers\n4. Data Validation: Verify scraped data structure before saving\n5. Monitoring: Set up notifications for workflow failures\n\nTools and Resources\n\n httpx: Async HTTP client\n GitHub Actions Marketplace\n GitHub Actions Documentation\n\nVideo Tutorials\n\n[](https://youtu.be/eJG86J200nM)\n\nPrevious\n\nWeb Automation with Playwright\n\nNext\n\nScraping emarketer.com"
  },
  {
    "title": "Scheduled Scraping with GitHub Actions",
    "filename": "Scheduled_Scraping_with_GitHub_Actions.md",
    "text": "Scheduled Scraping with GitHub Actions\n----------------------------------------------------------------------------------------------------------------------------\n\nGitHub Actions provides an excellent platform for running web scrapers on a schedule. This tutorial shows how to automate data collection from websites using GitHub Actions workflows.\n\nKey Concepts\n\n Scheduling: Use cron syntax to run scrapers at specific times\n Dependencies: Install required packages like httpx, lxml\n Data Storage: Save scraped data to files and commit back to the repository\n Error Handling: Implement robust error handling for network issues and HTML parsing\n Rate Limiting: Respect website terms of service and implement delays between requests\n\nHere’s a sample scrape.py that scrapes the IMDb Top 250 movies using httpx and lxml:\n\nimport json\nimport httpx\nfrom datetime import datetime, UTC\nfrom lxml import html\nfrom typing import List, Dict\n\ndef scrapeimdb() -> List[Dict[str, str]]:\n    \"\"\"Scrape IMDb Top 250 movies using httpx and lxml.\n\n    Returns:\n        List of dictionaries containing movie title, year, and rating.\n    \"\"\"\n    headers = {\"User-Agent\": \"Mozilla/5.0 (compatible; IMDbBot/1.0)\"}\n    response = httpx.get(\"https://www.imdb.com/chart/top/\", headers=headers)\n    response.raiseforstatus()\n\n    tree = html.fromstring(response.text)\n    movies = []\n\n    for item in tree.cssselect(\".ipc-metadata-list-summary-item\"):\n        title = (\n            item.cssselect(\".ipc-titletext\")[0].textcontent()\n            if item.cssselect(\".ipc-titletext\")\n            else None\n        )\n        year = (\n            item.cssselect(\".cli-title-metadata span\")[0].textcontent()\n            if item.cssselect(\".cli-title-metadata span\")\n            else None\n        )\n        rating = (\n            item.cssselect(\".ipc-rating-star\")[0].textcontent()\n            if item.cssselect(\".ipc-rating-star\")\n            else None\n        )\n\n        if title and year and rating:\n            movies.append({\"title\": title, \"year\": year, \"rating\": rating})\n\n    return movies\n\nScrape data and save with timestamp\nnow = datetime.now(UTC)\nwith open(f'imdb-top250-{now.strftime(\"%Y-%m-%d\")}.json', \"a\") as f:\n    f.write(json.dumps({\"timestamp\": now.isoformat(), \"movies\": scrapeimdb()}) + \"\\n\")Copy to clipboardErrorCopied\n\nHere’s a sample .github/workflows/imdb-top250.yml that runs the scraper daily and saves the data:\n\nname: Scrape IMDb Top 250\n\non:\n  schedule:\n     Runs at 00:00 UTC every day\n    - cron: \"0 0   \"\n  workflowdispatch:  Allow manual triggers\n\njobs:\n  scrape-imdb:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Install uv\n        uses: astral-sh/setup-uv@v5\n\n      - name: Run scraper\n        run: |  python\n          uv run --with httpx,lxml,cssselect python scrape.py\n\n      - name: Commit and push changes\n        run: |\n          git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add .json\n          git commit -m \"Update IMDb Top 250 data [skip ci]\" || exit 0\n          git pushCopy to clipboardErrorCopied\n\nBest Practices\n\n1. Cache Dependencies: Use GitHub’s caching to speed up package installation\n2. Handle Errors: Implement retries and error logging\n3. Rate Limiting: Add delays between requests to avoid overwhelming servers\n4. Data Validation: Verify scraped data structure before saving\n5. Monitoring: Set up notifications for workflow failures\n\nTools and Resources\n\n httpx: Async HTTP client\n GitHub Actions Marketplace\n GitHub Actions Documentation\n\nVideo Tutorials\n\n[](https://youtu.be/eJG86J200nM)\n\nPrevious\n\nWeb Automation with Playwright\n\nNext\n\nScraping emarketer.com"
  },
  {
    "title": "Scheduled Scraping with GitHub Actions",
    "filename": "Scheduled_Scraping_with_GitHub_Actions.md",
    "text": "Scheduled Scraping with GitHub Actions\n----------------------------------------------------------------------------------------------------------------------------\n\nGitHub Actions provides an excellent platform for running web scrapers on a schedule. This tutorial shows how to automate data collection from websites using GitHub Actions workflows.\n\nKey Concepts\n\n Scheduling: Use cron syntax to run scrapers at specific times\n Dependencies: Install required packages like httpx, lxml\n Data Storage: Save scraped data to files and commit back to the repository\n Error Handling: Implement robust error handling for network issues and HTML parsing\n Rate Limiting: Respect website terms of service and implement delays between requests\n\nHere’s a sample scrape.py that scrapes the IMDb Top 250 movies using httpx and lxml:\n\nimport json\nimport httpx\nfrom datetime import datetime, UTC\nfrom lxml import html\nfrom typing import List, Dict\n\ndef scrapeimdb() -> List[Dict[str, str]]:\n    \"\"\"Scrape IMDb Top 250 movies using httpx and lxml.\n\n    Returns:\n        List of dictionaries containing movie title, year, and rating.\n    \"\"\"\n    headers = {\"User-Agent\": \"Mozilla/5.0 (compatible; IMDbBot/1.0)\"}\n    response = httpx.get(\"https://www.imdb.com/chart/top/\", headers=headers)\n    response.raiseforstatus()\n\n    tree = html.fromstring(response.text)\n    movies = []\n\n    for item in tree.cssselect(\".ipc-metadata-list-summary-item\"):\n        title = (\n            item.cssselect(\".ipc-titletext\")[0].textcontent()\n            if item.cssselect(\".ipc-titletext\")\n            else None\n        )\n        year = (\n            item.cssselect(\".cli-title-metadata span\")[0].textcontent()\n            if item.cssselect(\".cli-title-metadata span\")\n            else None\n        )\n        rating = (\n            item.cssselect(\".ipc-rating-star\")[0].textcontent()\n            if item.cssselect(\".ipc-rating-star\")\n            else None\n        )\n\n        if title and year and rating:\n            movies.append({\"title\": title, \"year\": year, \"rating\": rating})\n\n    return movies\n\nScrape data and save with timestamp\nnow = datetime.now(UTC)\nwith open(f'imdb-top250-{now.strftime(\"%Y-%m-%d\")}.json', \"a\") as f:\n    f.write(json.dumps({\"timestamp\": now.isoformat(), \"movies\": scrapeimdb()}) + \"\\n\")Copy to clipboardErrorCopied\n\nHere’s a sample .github/workflows/imdb-top250.yml that runs the scraper daily and saves the data:\n\nname: Scrape IMDb Top 250\n\non:\n  schedule:\n     Runs at 00:00 UTC every day\n    - cron: \"0 0   \"\n  workflowdispatch:  Allow manual triggers\n\njobs:\n  scrape-imdb:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Install uv\n        uses: astral-sh/setup-uv@v5\n\n      - name: Run scraper\n        run: |  python\n          uv run --with httpx,lxml,cssselect python scrape.py\n\n      - name: Commit and push changes\n        run: |\n          git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add .json\n          git commit -m \"Update IMDb Top 250 data [skip ci]\" || exit 0\n          git pushCopy to clipboardErrorCopied\n\nBest Practices\n\n1. Cache Dependencies: Use GitHub’s caching to speed up package installation\n2. Handle Errors: Implement retries and error logging\n3. Rate Limiting: Add delays between requests to avoid overwhelming servers\n4. Data Validation: Verify scraped data structure before saving\n5. Monitoring: Set up notifications for workflow failures\n\nTools and Resources\n\n httpx: Async HTTP client\n GitHub Actions Marketplace\n GitHub Actions Documentation\n\nVideo Tutorials\n\n[](https://youtu.be/eJG86J200nM)\n\nPrevious\n\nWeb Automation with Playwright\n\nNext\n\nScraping emarketer.com"
  },
  {
    "title": "Base 64 Encoding",
    "filename": "Base_64_Encoding.md",
    "text": "404 - Not found\n==============="
  },
  {
    "title": "Base 64 Encoding",
    "filename": "Base_64_Encoding.md",
    "text": "404 - Not found\n==============="
  },
  {
    "title": "Base 64 Encoding",
    "filename": "Base_64_Encoding.md",
    "text": "404 - Not found\n==============="
  },
  {
    "title": "Data Cleansing in Excel",
    "filename": "Data_Cleansing_in_Excel.md",
    "text": "Data Cleansing in Excel\n-------------------------------------------------------------------------------\n\n[](https://youtu.be/7du7xkqeu4s)\n\nYou’ll learn basic but essential data cleaning techniques in Excel, covering:\n\n Find and Replace: Use Ctrl+H to replace or remove specific terms (e.g., removing “[more]” from country names).\n Changing Data Formats: Convert columns from general to numerical format.\n Removing Extra Spaces: Use the TRIM function to clean up unnecessary spaces in text.\n Identifying and Removing Blank Cells: Highlight and delete entire rows with blank cells using the “Go To Special” function.\n Removing Duplicates: Use the “Remove Duplicates” feature to eliminate duplicate entries, demonstrated with country names.\n\nHere are links used in the video:\n\n List of Largest Cities Excel file\n\nPrevious\n\n5. Data Preparation\n\nNext\n\nData Transformation in Excel"
  },
  {
    "title": "Data Cleansing in Excel",
    "filename": "Data_Cleansing_in_Excel.md",
    "text": "Data Cleansing in Excel\n-------------------------------------------------------------------------------\n\n[](https://youtu.be/7du7xkqeu4s)\n\nYou’ll learn basic but essential data cleaning techniques in Excel, covering:\n\n Find and Replace: Use Ctrl+H to replace or remove specific terms (e.g., removing “[more]” from country names).\n Changing Data Formats: Convert columns from general to numerical format.\n Removing Extra Spaces: Use the TRIM function to clean up unnecessary spaces in text.\n Identifying and Removing Blank Cells: Highlight and delete entire rows with blank cells using the “Go To Special” function.\n Removing Duplicates: Use the “Remove Duplicates” feature to eliminate duplicate entries, demonstrated with country names.\n\nHere are links used in the video:\n\n List of Largest Cities Excel file\n\nPrevious\n\n5. Data Preparation\n\nNext\n\nData Transformation in Excel"
  },
  {
    "title": "Profiling Data with Python",
    "filename": "Profiling_Data_with_Python.md",
    "text": "Profile Data with Python\n------------------------------------------------------------------------------------\n\n[](https://youtu.be/kFVxdBhLaA)\n\nThis session covers the use of the pandasprofiling library for generating comprehensive data reports in Python:\n\n Library Installation and Import: Learn how to install and import the pandas\\profiling library.\n Profile Report Generation: Generate an HTML report with a single line of code using ProfileReport.\n Descriptive Statistics: View detailed descriptive statistics such as variance, standard deviation, and kurtosis.\n Outlier Detection: Identify and analyze outliers within the dataset.\n Correlation Analysis: Understand how variables are correlated with each other using visual representations.\n Handling Missing Values: Get insights on missing data and decide on imputation or removal strategies.\n Initial Data Insights: Use the report to gather early warnings and insights before starting the data cleaning and modeling process.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Pandas Profiling output\n Learn about the pandasprofiling package. Video\n Learn about the google.colab package\n\nPrevious\n\nCleaning Data with OpenRefine\n\nNext\n\nParsing JSON"
  },
  {
    "title": "Profiling Data with Python",
    "filename": "Profiling_Data_with_Python.md",
    "text": "Profile Data with Python\n------------------------------------------------------------------------------------\n\n[](https://youtu.be/kFVxdBhLaA)\n\nThis session covers the use of the pandasprofiling library for generating comprehensive data reports in Python:\n\n Library Installation and Import: Learn how to install and import the pandas\\profiling library.\n Profile Report Generation: Generate an HTML report with a single line of code using ProfileReport.\n Descriptive Statistics: View detailed descriptive statistics such as variance, standard deviation, and kurtosis.\n Outlier Detection: Identify and analyze outliers within the dataset.\n Correlation Analysis: Understand how variables are correlated with each other using visual representations.\n Handling Missing Values: Get insights on missing data and decide on imputation or removal strategies.\n Initial Data Insights: Use the report to gather early warnings and insights before starting the data cleaning and modeling process.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Pandas Profiling output\n Learn about the pandasprofiling package. Video\n Learn about the google.colab package\n\nPrevious\n\nCleaning Data with OpenRefine\n\nNext\n\nParsing JSON"
  },
  {
    "title": "Network Analysis in Python",
    "filename": "Network_Analysis_in_Python.md",
    "text": "Network Analysis in Python\n----------------------------------------------------------------------------------------\n\n[](https://youtu.be/uPL3VuRqOy4)\n\nYou’ll learn how to use network analysis to identify clusters and connections between nodes in a dataset, covering:\n\n Network Construction: Build a network from the IMDB database, where nodes represent actors and edges represent shared movie appearances.\n Clustering: Apply clustering techniques to detect communities within the network, using scikit-learn’s network library.\n Matrix Operations: Utilize matrix operations to efficiently analyze actor relationships and interactions.\n Community Detection: Implement algorithms to identify and interpret clusters, examining how different actor clusters are connected.\n Application of Findings: Explore practical applications of network analysis, such as social network analysis and its potential uses in various domains.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Exploring the Movie Actor Network in Python\n Jupyter Notebook - Shortest Path\n Jupyter Notebook - Actor network\n IMDb Datasets\n Learn about the sknetwork package\n Learn about the scipy.sparse matrices and video\n Introduction to Kumu\n Network analysis with Kumu\n Introduction to Systems and Network Mapping with Kumu\n\nPrevious\n\nGeospatial Analysis with QGIS\n\nNext\n\n7. Data Visualization"
  },
  {
    "title": "Network Analysis in Python",
    "filename": "Network_Analysis_in_Python.md",
    "text": "Network Analysis in Python\n----------------------------------------------------------------------------------------\n\n[](https://youtu.be/uPL3VuRqOy4)\n\nYou’ll learn how to use network analysis to identify clusters and connections between nodes in a dataset, covering:\n\n Network Construction: Build a network from the IMDB database, where nodes represent actors and edges represent shared movie appearances.\n Clustering: Apply clustering techniques to detect communities within the network, using scikit-learn’s network library.\n Matrix Operations: Utilize matrix operations to efficiently analyze actor relationships and interactions.\n Community Detection: Implement algorithms to identify and interpret clusters, examining how different actor clusters are connected.\n Application of Findings: Explore practical applications of network analysis, such as social network analysis and its potential uses in various domains.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Exploring the Movie Actor Network in Python\n Jupyter Notebook - Shortest Path\n Jupyter Notebook - Actor network\n IMDb Datasets\n Learn about the sknetwork package\n Learn about the scipy.sparse matrices and video\n Introduction to Kumu\n Network analysis with Kumu\n Introduction to Systems and Network Mapping with Kumu\n\nPrevious\n\nGeospatial Analysis with QGIS\n\nNext\n\n7. Data Visualization"
  },
  {
    "title": "Python tools: uv",
    "filename": "Python_tools__uv.md",
    "text": "Python tools: uv\n-------------------------------------------\n\nInstall uv.\n\nuv is a fast Python package and project manager that’s becoming the standard for running Python scripts. It replaces tools like pip, conda, pipx, poetry, pyenv, twine, and virtualenv into one, enabling:\n\n Python Version Management: uv installs and manages multiple Python versions, allowing developers to specify and switch between versions seamlessly.\n Virtual Environment Handling: It automates the creation and management of virtual environments, ensuring isolated and consistent development spaces for different projects.\n Dependency Management: With support for the pyproject.toml format, uv enables precise specification of project dependencies. It maintains a universal lockfile, uv.lock, to ensure reproducible installations across different systems.\n Project Execution: The uv run command allows for the execution of scripts and applications within the managed environment, streamlining development workflows.\n\nHere are some commonly used commands:\n\nReplace python with uv. This automatically installs Python and dependencies.\nuv run script.py\n\nRun a Python script directly from the Internet\nuv run https://example.com/script.py\n\nRun a Python script without installing\nuvx ruff\n\nUse a specific Python version\nuv run --python 3.11 script.py\n\nAdd dependencies to your script\nuv add httpx --script script.py\n\nCreate a virtual environment at .venv\nuv venv\n\nInstall packages to your virtual environment\nuv pip install httpxCopy to clipboardErrorCopied\n\nHere are some useful tools you can run with uvx without installation:\n\nuvx --from jupyterlab jupyter-lab    Jupyter notebook\nuvx marimo       Interactive notebook\nuvx llm          Chat with LLMs from the command line\nuvx openwebui    Chat with LLMs via the browser\nuvx httpie       Make HTTP requests\nuvx datasette    Browse SQLite databases\nuvx markitdown   Convert PDF to Markdown\nuvx yt-dlp       Download YouTube videos\nuvx asciinema    Record your terminal and play itCopy to clipboardErrorCopied\n\nuv uses inline script metadata for dependencies.\nThe eliminates the need for requirements.txt or virtual environments. For example:\n\n/// script\nrequires-python = \">=3.11\"\ndependencies = [\n\"httpx\",\n\"pandas\",\n]\n///Copy to clipboardErrorCopied\n\n[](https://youtu.be/igWlYl3asKw?t=1240)\n\nPrevious\n\nAI Code Editors: GitHub Copilot\n\nNext\n\nJavaScript tools: npx"
  },
  {
    "title": "Python tools: uv",
    "filename": "Python_tools__uv.md",
    "text": "Python tools: uv\n-------------------------------------------\n\nInstall uv.\n\nuv is a fast Python package and project manager that’s becoming the standard for running Python scripts. It replaces tools like pip, conda, pipx, poetry, pyenv, twine, and virtualenv into one, enabling:\n\n Python Version Management: uv installs and manages multiple Python versions, allowing developers to specify and switch between versions seamlessly.\n Virtual Environment Handling: It automates the creation and management of virtual environments, ensuring isolated and consistent development spaces for different projects.\n Dependency Management: With support for the pyproject.toml format, uv enables precise specification of project dependencies. It maintains a universal lockfile, uv.lock, to ensure reproducible installations across different systems.\n Project Execution: The uv run command allows for the execution of scripts and applications within the managed environment, streamlining development workflows.\n\nHere are some commonly used commands:\n\nReplace python with uv. This automatically installs Python and dependencies.\nuv run script.py\n\nRun a Python script directly from the Internet\nuv run https://example.com/script.py\n\nRun a Python script without installing\nuvx ruff\n\nUse a specific Python version\nuv run --python 3.11 script.py\n\nAdd dependencies to your script\nuv add httpx --script script.py\n\nCreate a virtual environment at .venv\nuv venv\n\nInstall packages to your virtual environment\nuv pip install httpxCopy to clipboardErrorCopied\n\nHere are some useful tools you can run with uvx without installation:\n\nuvx --from jupyterlab jupyter-lab    Jupyter notebook\nuvx marimo       Interactive notebook\nuvx llm          Chat with LLMs from the command line\nuvx openwebui    Chat with LLMs via the browser\nuvx httpie       Make HTTP requests\nuvx datasette    Browse SQLite databases\nuvx markitdown   Convert PDF to Markdown\nuvx yt-dlp       Download YouTube videos\nuvx asciinema    Record your terminal and play itCopy to clipboardErrorCopied\n\nuv uses inline script metadata for dependencies.\nThe eliminates the need for requirements.txt or virtual environments. For example:\n\n/// script\nrequires-python = \">=3.11\"\ndependencies = [\n\"httpx\",\n\"pandas\",\n]\n///Copy to clipboardErrorCopied\n\n[](https://youtu.be/igWlYl3asKw?t=1240)\n\nPrevious\n\nAI Code Editors: GitHub Copilot\n\nNext\n\nJavaScript tools: npx"
  },
  {
    "title": "7. Data Visualization",
    "filename": "7._Data_Visualization.md",
    "text": "Data visualization\n================================================================\n\n[](https://youtu.be/XkxRDql00UU)\n\nPrevious\n\nNetwork Analysis in Python\n\nNext\n\nVisualizing Forecasts with Excel"
  },
  {
    "title": "7. Data Visualization",
    "filename": "7._Data_Visualization.md",
    "text": "Data visualization\n================================================================\n\n[](https://youtu.be/XkxRDql00UU)\n\nPrevious\n\nNetwork Analysis in Python\n\nNext\n\nVisualizing Forecasts with Excel"
  },
  {
    "title": "Function Calling",
    "filename": "Function_Calling.md",
    "text": "Function Calling with OpenAI\n----------------------------------------------------------------------------------\n\nFunction Calling allows Large Language Models to convert natural language into structured function calls. This is perfect for building chatbots and AI assistants that need to interact with your backend systems.\n\nOpenAI supports Function Calling – a way for LLMs to suggest what functions to call and how.\n\n[](https://youtu.be/aqdWSYWCLI)\n\nHere’s a minimal example using Python and OpenAI’s function calling that identifies the weather in a given location.\n\n/// script\nrequires-python = \">=3.11\"\ndependencies = [\n\"httpx\",\n]\n///\n\nimport httpx\nimport os\nfrom typing import Dict, Any\n\ndef querygpt(userinput: str, tools: list[Dict[str, Any]]) -> Dict[str, Any]:\n    response = httpx.post(\n        \"https://api.openai.com/v1/chat/completions\",\n        headers={\n            \"Authorization\": f\"Bearer {os.getenv('OPENAIAPIKEY')}\",\n            \"Content-Type\": \"application/json\",\n        },\n        json={\n            \"model\": \"gpt-4o-mini\",\n            \"messages\": [{\"role\": \"user\", \"content\": userinput}],\n            \"tools\": tools,\n            \"toolchoice\": \"auto\",\n        },\n    )\n    return response.json()[\"choices\"][0][\"message\"]\n\nWEATHERTOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"getweather\",\n        \"description\": \"Get the current weather for a location\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\"type\": \"string\", \"description\": \"City name or coordinates\"}\n            },\n            \"required\": [\"location\"],\n            \"additionalProperties\": False,\n        },\n        \"strict\": True,\n    },\n}\n\nif name == \"main\":\n    response = querygpt(\"What is the weather in San Francisco?\", [WEATHERTOOL])\n    print([toolcall[\"function\"] for toolcall in response[\"toolcalls\"]])Copy to clipboardErrorCopied\n\nHow to define functions\n\nThe function definition is a JSON schema with a few OpenAI specific properties.\nSee the Supported schemas.\n\nHere’s an example of a function definition for scheduling a meeting:\n\nMEETINGTOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"schedulemeeting\",\n        \"description\": \"Schedule a meeting room for a specific date and time\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"date\": {\n                    \"type\": \"string\",\n                    \"description\": \"Meeting date in YYYY-MM-DD format\"\n                },\n                \"time\": {\n                    \"type\": \"string\",\n                    \"description\": \"Meeting time in HH:MM format\"\n                },\n                \"meetingroom\": {\n                    \"type\": \"string\",\n                    \"description\": \"Name of the meeting room\"\n                }\n            },\n            \"required\": [\"date\", \"time\", \"meetingroom\"],\n            \"additionalProperties\": False\n        },\n        \"strict\": True\n    }\n}Copy to clipboardErrorCopied\n\nHow to define multiple functions\n\nYou can define multiple functions by passing a list of function definitions to the tools parameter.\n\nHere’s an example of a list of function definitions for handling employee expenses and calculating performance bonuses:\n\ntools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"getexpensebalance\",\n            \"description\": \"Get expense balance for an employee\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"employeeid\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Employee ID number\"\n                    }\n                },\n                \"required\": [\"employeeid\"],\n                \"additionalProperties\": False\n            },\n            \"strict\": True\n        }\n    },\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"calculateperformancebonus\",\n            \"description\": \"Calculate yearly performance bonus for an employee\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"employeeid\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Employee ID number\"\n                    },\n                    \"currentyear\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Year to calculate bonus for\"\n                    }\n                },\n                \"required\": [\"employeeid\", \"currentyear\"],\n                \"additionalProperties\": False\n            },\n            \"strict\": True\n        }\n    }\n]Copy to clipboardErrorCopied\n\nBest Practices:\n\n1. Use Strict Mode\n    Always set strict: True to ensure valid function calls\n    Define all required parameters\n    Set additionalProperties: False\n2. Use tool choice\n    Set toolchoice: \"required\" to ensure that the model will always call one or more tools\n    The default is toolchoice: \"auto\" which means the model will choose a tool only if appropriate\n3. Clear Descriptions\n    Write detailed function and parameter descriptions\n    Include expected formats and units\n    Mention any constraints or limitations\n4. Error Handling\n    Validate function inputs before execution\n    Return clear error messages\n    Handle missing or invalid parameters\n\nPrevious\n\nHybrid RAG with TypeSense\n\nNext\n\nLLM Agents"
  },
  {
    "title": "Convert PDFs to Markdown",
    "filename": "Convert_PDFs_to_Markdown.md",
    "text": "Converting PDFs to Markdown\n----------------------------------------------------------------------------------------\n\nPDF documents are ubiquitous in academic, business, and technical contexts, but extracting and repurposing their content can be challenging. This tutorial explores various command-line tools for converting PDFs to Markdown format, with a focus on preserving structure and formatting suitable for different use cases, including preparation for Large Language Models (LLMs).\n\nUse Cases:\n\n LLM training and fine-tuning: Create clean text data from PDFs for AI model training\n Knowledge base creation: Transform PDFs into searchable, editable markdown documents\n Content repurposing: Convert academic papers and reports for web publication\n Data extraction: Pull structured content from PDF documents for analysis\n Accessibility: Convert PDFs to more accessible formats for screen readers\n Citation and reference management: Extract bibliographic information from academic papers\n Documentation conversion: Transform technical PDFs into maintainable documentation\n\nPyMuPDF4LLM\n\nPyMuPDF4LLM is a specialized component of the PyMuPDF library that generates Markdown specifically formatted for Large Language Models. It produces high-quality markdown with good preservation of document structure. It’s specifically optimized for producing text that works well with LLMs, removing irrelevant formatting while preserving semantic structure. Requires PyTorch, which adds dependencies but enables more advanced processing capabilities.\n\nPyMuPDF4LLM uses MuPDF as its PDF parsing engine. PyMuPDF is emerging as a strong default for PDF text extraction due to its accuracy and performance in handling complex PDF structures.\n\nPYTHONUTF8=1 uv run --with pymupdf4llm python -c 'import pymupdf4llm; h = open(\"pymupdf4llm.md\", \"w\"); h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\"))'Copy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding regardless of system locale\n uv run --with pymupdf4llm: Uses uv package manager to run Python with the pymupdf4llm package\n python -c '...': Executes Python code directly from the command line\n import pymupdf4llm: Imports the PDF-to-Markdown module\n h = open(\"pymupdf4llm.md\", \"w\"): Creates a file to write the markdown output\n h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\")): Converts the PDF to markdown and writes to file\n\nMarkitdown\n------------------------------------------------------\n\n[](https://youtu.be/v65Oyddfxeg)\n\nMarkitdown is Microsoft’s tool for converting various document formats to Markdown, including PDFs, DOCX, XLSX, PPTX, and ZIP files. It’s a versatile multi-format converter that handles PDFs via PDFMiner, DOCX via Mammoth, XLSX via Pandas, and PPTX via Python-PPTX. Good for batch processing of mixed document types. The quality of PDF conversion is generally good but may struggle with complex layouts or heavily formatted documents.\n\nPYTHONUTF8=1 uvx markitdown $FILE.pdf > markitdown.mdCopy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding\n uvx markitdown: Runs the markitdown tool via the uv package manager\n $FILE.pdf: The input PDF file\n > markitdown.md: Redirects output to a markdown file\n\nUnstructured\n\nUnstructured is rapidly becoming the de facto library for parsing over 40 different file types. It is excellent for extracting text and tables from diverse document formats. Particularly useful for generating clean content to pass to LLMs. Strong community support and actively maintained.\n\nGROBID\n----------------------------------------------\n\nIf you specifically need to parse references from text-native PDFs or reliably OCR’ed ones, GROBID remains the de facto choice. It excels at extracting structured bibliographic information with high accuracy.\n\nStart GROBID service\ndocker run -t --rm -p 8070:8070 lfoppiano/grobid:0.7.2\n\nProcess PDF with curl\ncurl -X POST -F \"input=@paper.pdf\" localhost:8070/api/processFulltextDocument > references.tei.xmlCopy to clipboardErrorCopied\n\nMistral OCR API\n\nMistral OCR offers an end-to-end cloud API that preserves both text and layout, making it easier to isolate specific sections like References. It shows the most promise currently, though it requires post-processing.\n\nAzure Document Intelligence API\n------------------------------------------------------------------------------------------------\n\nFor enterprise users already in the Microsoft ecosystem, Azure Document Intelligence provides excellent raw OCR with enterprise SLAs. May require custom model training or post-processing to match GROBID’s reference extraction capabilities.\n\nOther libraries\n\nDocling is IBM’s document understanding library that supports PDF conversion. It can be challenging to install, particularly on Windows and some Linux distributions. Offers advanced document understanding capabilities beyond simple text extraction.\n\nMegaParse takes a comprehensive approach using LibreOffice, Pandoc, Tesseract OCR, and other tools. It has Robust handling of different document types but requires an OpenAI API key for some features. Good for complex documents but has significant dependencies.\n\nComparison of PDF-to-Markdown Tools\n--------------------------------------------------------------------------------------------------------\n\n| Tool | Strengths | Weaknesses | Best For |\n| --- | --- | --- | --- |\n| PyMuPDF4LLM | Structure preservation, LLM optimization | Requires PyTorch | AI training data, semantic structure |\n| Markitdown | Multi-format support, simple usage | Less precise layout handling | Batch processing, mixed documents |\n| Unstructured | Wide format support, active development | Can be resource-intensive | Production pipelines, integration |\n| GROBID | Reference extraction excellence | Narrower use case | Academic papers, citations |\n| Docling | Advanced document understanding | Installation difficulties | Research applications |\n| MegaParse | Comprehensive approach | Requires OpenAI API | Complex documents, OCR needs |\n\nHow to pick:\n\n Need LLM-ready content? PyMuPDF4LLM is specifically designed for this\n Working with multiple document formats? Markitdown handles diverse inputs\n Extracting academic references? GROBID remains the standard\n Building a production pipeline? Unstructured offers the best integration options\n Handling complex layouts? Consider commercial OCR like Mistral or Azure Document Intelligence\n\nThe optimal approach depends on your specific requirements regarding accuracy, structure preservation, and the intended use of the extracted content.\n\nTips for Optimal PDF Conversion\n------------------------------------------------------------------------------------------------\n\n1. Pre-process PDFs when possible:\n\n   \n    Optimize a PDF for text extraction first\n   ocrmypdf --optimize 3 --skip-text input.pdf optimized.pdfCopy to clipboardErrorCopied\n   \n2. Try multiple tools on the same document to compare results:\n3. Handle scanned PDFs appropriately:\n\n   \n    For scanned documents, run OCR first\n   ocrmypdf --force-ocr input.pdf ocrready.pdf\n   PYTHONUTF8=1 uvx markitdown ocrready.pdf > markitdown.mdCopy to clipboardErrorCopied\n   \n4. Consider post-processing for better results:\n\n   \n    Simple post-processing example\n   sed -i 's/\\([A-Z]\\)\\./\\1\\.\\n/g' output.md   Add line breaks after sentencesCopy to clipboardErrorCopied\n   \n\nPrevious\n\nScraping PDFs with Tabula\n\nNext\n\nConvert HTML to Markdown"
  },
  {
    "title": "Convert PDFs to Markdown",
    "filename": "Convert_PDFs_to_Markdown.md",
    "text": "Converting PDFs to Markdown\n----------------------------------------------------------------------------------------\n\nPDF documents are ubiquitous in academic, business, and technical contexts, but extracting and repurposing their content can be challenging. This tutorial explores various command-line tools for converting PDFs to Markdown format, with a focus on preserving structure and formatting suitable for different use cases, including preparation for Large Language Models (LLMs).\n\nUse Cases:\n\n LLM training and fine-tuning: Create clean text data from PDFs for AI model training\n Knowledge base creation: Transform PDFs into searchable, editable markdown documents\n Content repurposing: Convert academic papers and reports for web publication\n Data extraction: Pull structured content from PDF documents for analysis\n Accessibility: Convert PDFs to more accessible formats for screen readers\n Citation and reference management: Extract bibliographic information from academic papers\n Documentation conversion: Transform technical PDFs into maintainable documentation\n\nPyMuPDF4LLM\n\nPyMuPDF4LLM is a specialized component of the PyMuPDF library that generates Markdown specifically formatted for Large Language Models. It produces high-quality markdown with good preservation of document structure. It’s specifically optimized for producing text that works well with LLMs, removing irrelevant formatting while preserving semantic structure. Requires PyTorch, which adds dependencies but enables more advanced processing capabilities.\n\nPyMuPDF4LLM uses MuPDF as its PDF parsing engine. PyMuPDF is emerging as a strong default for PDF text extraction due to its accuracy and performance in handling complex PDF structures.\n\nPYTHONUTF8=1 uv run --with pymupdf4llm python -c 'import pymupdf4llm; h = open(\"pymupdf4llm.md\", \"w\"); h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\"))'Copy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding regardless of system locale\n uv run --with pymupdf4llm: Uses uv package manager to run Python with the pymupdf4llm package\n python -c '...': Executes Python code directly from the command line\n import pymupdf4llm: Imports the PDF-to-Markdown module\n h = open(\"pymupdf4llm.md\", \"w\"): Creates a file to write the markdown output\n h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\")): Converts the PDF to markdown and writes to file\n\nMarkitdown\n------------------------------------------------------\n\n[](https://youtu.be/v65Oyddfxeg)\n\nMarkitdown is Microsoft’s tool for converting various document formats to Markdown, including PDFs, DOCX, XLSX, PPTX, and ZIP files. It’s a versatile multi-format converter that handles PDFs via PDFMiner, DOCX via Mammoth, XLSX via Pandas, and PPTX via Python-PPTX. Good for batch processing of mixed document types. The quality of PDF conversion is generally good but may struggle with complex layouts or heavily formatted documents.\n\nPYTHONUTF8=1 uvx markitdown $FILE.pdf > markitdown.mdCopy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding\n uvx markitdown: Runs the markitdown tool via the uv package manager\n $FILE.pdf: The input PDF file\n > markitdown.md: Redirects output to a markdown file\n\nUnstructured\n\nUnstructured is rapidly becoming the de facto library for parsing over 40 different file types. It is excellent for extracting text and tables from diverse document formats. Particularly useful for generating clean content to pass to LLMs. Strong community support and actively maintained.\n\nGROBID\n----------------------------------------------\n\nIf you specifically need to parse references from text-native PDFs or reliably OCR’ed ones, GROBID remains the de facto choice. It excels at extracting structured bibliographic information with high accuracy.\n\nStart GROBID service\ndocker run -t --rm -p 8070:8070 lfoppiano/grobid:0.7.2\n\nProcess PDF with curl\ncurl -X POST -F \"input=@paper.pdf\" localhost:8070/api/processFulltextDocument > references.tei.xmlCopy to clipboardErrorCopied\n\nMistral OCR API\n\nMistral OCR offers an end-to-end cloud API that preserves both text and layout, making it easier to isolate specific sections like References. It shows the most promise currently, though it requires post-processing.\n\nAzure Document Intelligence API\n------------------------------------------------------------------------------------------------\n\nFor enterprise users already in the Microsoft ecosystem, Azure Document Intelligence provides excellent raw OCR with enterprise SLAs. May require custom model training or post-processing to match GROBID’s reference extraction capabilities.\n\nOther libraries\n\nDocling is IBM’s document understanding library that supports PDF conversion. It can be challenging to install, particularly on Windows and some Linux distributions. Offers advanced document understanding capabilities beyond simple text extraction.\n\nMegaParse takes a comprehensive approach using LibreOffice, Pandoc, Tesseract OCR, and other tools. It has Robust handling of different document types but requires an OpenAI API key for some features. Good for complex documents but has significant dependencies.\n\nComparison of PDF-to-Markdown Tools\n--------------------------------------------------------------------------------------------------------\n\n| Tool | Strengths | Weaknesses | Best For |\n| --- | --- | --- | --- |\n| PyMuPDF4LLM | Structure preservation, LLM optimization | Requires PyTorch | AI training data, semantic structure |\n| Markitdown | Multi-format support, simple usage | Less precise layout handling | Batch processing, mixed documents |\n| Unstructured | Wide format support, active development | Can be resource-intensive | Production pipelines, integration |\n| GROBID | Reference extraction excellence | Narrower use case | Academic papers, citations |\n| Docling | Advanced document understanding | Installation difficulties | Research applications |\n| MegaParse | Comprehensive approach | Requires OpenAI API | Complex documents, OCR needs |\n\nHow to pick:\n\n Need LLM-ready content? PyMuPDF4LLM is specifically designed for this\n Working with multiple document formats? Markitdown handles diverse inputs\n Extracting academic references? GROBID remains the standard\n Building a production pipeline? Unstructured offers the best integration options\n Handling complex layouts? Consider commercial OCR like Mistral or Azure Document Intelligence\n\nThe optimal approach depends on your specific requirements regarding accuracy, structure preservation, and the intended use of the extracted content.\n\nTips for Optimal PDF Conversion\n------------------------------------------------------------------------------------------------\n\n1. Pre-process PDFs when possible:\n\n   \n    Optimize a PDF for text extraction first\n   ocrmypdf --optimize 3 --skip-text input.pdf optimized.pdfCopy to clipboardErrorCopied\n   \n2. Try multiple tools on the same document to compare results:\n3. Handle scanned PDFs appropriately:\n\n   \n    For scanned documents, run OCR first\n   ocrmypdf --force-ocr input.pdf ocrready.pdf\n   PYTHONUTF8=1 uvx markitdown ocrready.pdf > markitdown.mdCopy to clipboardErrorCopied\n   \n4. Consider post-processing for better results:\n\n   \n    Simple post-processing example\n   sed -i 's/\\([A-Z]\\)\\./\\1\\.\\n/g' output.md   Add line breaks after sentencesCopy to clipboardErrorCopied\n   \n\nPrevious\n\nScraping PDFs with Tabula\n\nNext\n\nConvert HTML to Markdown"
  },
  {
    "title": "Convert PDFs to Markdown",
    "filename": "Convert_PDFs_to_Markdown.md",
    "text": "Converting PDFs to Markdown\n----------------------------------------------------------------------------------------\n\nPDF documents are ubiquitous in academic, business, and technical contexts, but extracting and repurposing their content can be challenging. This tutorial explores various command-line tools for converting PDFs to Markdown format, with a focus on preserving structure and formatting suitable for different use cases, including preparation for Large Language Models (LLMs).\n\nUse Cases:\n\n LLM training and fine-tuning: Create clean text data from PDFs for AI model training\n Knowledge base creation: Transform PDFs into searchable, editable markdown documents\n Content repurposing: Convert academic papers and reports for web publication\n Data extraction: Pull structured content from PDF documents for analysis\n Accessibility: Convert PDFs to more accessible formats for screen readers\n Citation and reference management: Extract bibliographic information from academic papers\n Documentation conversion: Transform technical PDFs into maintainable documentation\n\nPyMuPDF4LLM\n\nPyMuPDF4LLM is a specialized component of the PyMuPDF library that generates Markdown specifically formatted for Large Language Models. It produces high-quality markdown with good preservation of document structure. It’s specifically optimized for producing text that works well with LLMs, removing irrelevant formatting while preserving semantic structure. Requires PyTorch, which adds dependencies but enables more advanced processing capabilities.\n\nPyMuPDF4LLM uses MuPDF as its PDF parsing engine. PyMuPDF is emerging as a strong default for PDF text extraction due to its accuracy and performance in handling complex PDF structures.\n\nPYTHONUTF8=1 uv run --with pymupdf4llm python -c 'import pymupdf4llm; h = open(\"pymupdf4llm.md\", \"w\"); h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\"))'Copy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding regardless of system locale\n uv run --with pymupdf4llm: Uses uv package manager to run Python with the pymupdf4llm package\n python -c '...': Executes Python code directly from the command line\n import pymupdf4llm: Imports the PDF-to-Markdown module\n h = open(\"pymupdf4llm.md\", \"w\"): Creates a file to write the markdown output\n h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\")): Converts the PDF to markdown and writes to file\n\nMarkitdown\n------------------------------------------------------\n\n[](https://youtu.be/v65Oyddfxeg)\n\nMarkitdown is Microsoft’s tool for converting various document formats to Markdown, including PDFs, DOCX, XLSX, PPTX, and ZIP files. It’s a versatile multi-format converter that handles PDFs via PDFMiner, DOCX via Mammoth, XLSX via Pandas, and PPTX via Python-PPTX. Good for batch processing of mixed document types. The quality of PDF conversion is generally good but may struggle with complex layouts or heavily formatted documents.\n\nPYTHONUTF8=1 uvx markitdown $FILE.pdf > markitdown.mdCopy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding\n uvx markitdown: Runs the markitdown tool via the uv package manager\n $FILE.pdf: The input PDF file\n > markitdown.md: Redirects output to a markdown file\n\nUnstructured\n\nUnstructured is rapidly becoming the de facto library for parsing over 40 different file types. It is excellent for extracting text and tables from diverse document formats. Particularly useful for generating clean content to pass to LLMs. Strong community support and actively maintained.\n\nGROBID\n----------------------------------------------\n\nIf you specifically need to parse references from text-native PDFs or reliably OCR’ed ones, GROBID remains the de facto choice. It excels at extracting structured bibliographic information with high accuracy.\n\nStart GROBID service\ndocker run -t --rm -p 8070:8070 lfoppiano/grobid:0.7.2\n\nProcess PDF with curl\ncurl -X POST -F \"input=@paper.pdf\" localhost:8070/api/processFulltextDocument > references.tei.xmlCopy to clipboardErrorCopied\n\nMistral OCR API\n\nMistral OCR offers an end-to-end cloud API that preserves both text and layout, making it easier to isolate specific sections like References. It shows the most promise currently, though it requires post-processing.\n\nAzure Document Intelligence API\n------------------------------------------------------------------------------------------------\n\nFor enterprise users already in the Microsoft ecosystem, Azure Document Intelligence provides excellent raw OCR with enterprise SLAs. May require custom model training or post-processing to match GROBID’s reference extraction capabilities.\n\nOther libraries\n\nDocling is IBM’s document understanding library that supports PDF conversion. It can be challenging to install, particularly on Windows and some Linux distributions. Offers advanced document understanding capabilities beyond simple text extraction.\n\nMegaParse takes a comprehensive approach using LibreOffice, Pandoc, Tesseract OCR, and other tools. It has Robust handling of different document types but requires an OpenAI API key for some features. Good for complex documents but has significant dependencies.\n\nComparison of PDF-to-Markdown Tools\n--------------------------------------------------------------------------------------------------------\n\n| Tool | Strengths | Weaknesses | Best For |\n| --- | --- | --- | --- |\n| PyMuPDF4LLM | Structure preservation, LLM optimization | Requires PyTorch | AI training data, semantic structure |\n| Markitdown | Multi-format support, simple usage | Less precise layout handling | Batch processing, mixed documents |\n| Unstructured | Wide format support, active development | Can be resource-intensive | Production pipelines, integration |\n| GROBID | Reference extraction excellence | Narrower use case | Academic papers, citations |\n| Docling | Advanced document understanding | Installation difficulties | Research applications |\n| MegaParse | Comprehensive approach | Requires OpenAI API | Complex documents, OCR needs |\n\nHow to pick:\n\n Need LLM-ready content? PyMuPDF4LLM is specifically designed for this\n Working with multiple document formats? Markitdown handles diverse inputs\n Extracting academic references? GROBID remains the standard\n Building a production pipeline? Unstructured offers the best integration options\n Handling complex layouts? Consider commercial OCR like Mistral or Azure Document Intelligence\n\nThe optimal approach depends on your specific requirements regarding accuracy, structure preservation, and the intended use of the extracted content.\n\nTips for Optimal PDF Conversion\n------------------------------------------------------------------------------------------------\n\n1. Pre-process PDFs when possible:\n\n   \n    Optimize a PDF for text extraction first\n   ocrmypdf --optimize 3 --skip-text input.pdf optimized.pdfCopy to clipboardErrorCopied\n   \n2. Try multiple tools on the same document to compare results:\n3. Handle scanned PDFs appropriately:\n\n   \n    For scanned documents, run OCR first\n   ocrmypdf --force-ocr input.pdf ocrready.pdf\n   PYTHONUTF8=1 uvx markitdown ocrready.pdf > markitdown.mdCopy to clipboardErrorCopied\n   \n4. Consider post-processing for better results:\n\n   \n    Simple post-processing example\n   sed -i 's/\\([A-Z]\\)\\./\\1\\.\\n/g' output.md   Add line breaks after sentencesCopy to clipboardErrorCopied\n   \n\nPrevious\n\nScraping PDFs with Tabula\n\nNext\n\nConvert HTML to Markdown"
  },
  {
    "title": "Convert PDFs to Markdown",
    "filename": "Convert_PDFs_to_Markdown.md",
    "text": "Converting PDFs to Markdown\n----------------------------------------------------------------------------------------\n\nPDF documents are ubiquitous in academic, business, and technical contexts, but extracting and repurposing their content can be challenging. This tutorial explores various command-line tools for converting PDFs to Markdown format, with a focus on preserving structure and formatting suitable for different use cases, including preparation for Large Language Models (LLMs).\n\nUse Cases:\n\n LLM training and fine-tuning: Create clean text data from PDFs for AI model training\n Knowledge base creation: Transform PDFs into searchable, editable markdown documents\n Content repurposing: Convert academic papers and reports for web publication\n Data extraction: Pull structured content from PDF documents for analysis\n Accessibility: Convert PDFs to more accessible formats for screen readers\n Citation and reference management: Extract bibliographic information from academic papers\n Documentation conversion: Transform technical PDFs into maintainable documentation\n\nPyMuPDF4LLM\n\nPyMuPDF4LLM is a specialized component of the PyMuPDF library that generates Markdown specifically formatted for Large Language Models. It produces high-quality markdown with good preservation of document structure. It’s specifically optimized for producing text that works well with LLMs, removing irrelevant formatting while preserving semantic structure. Requires PyTorch, which adds dependencies but enables more advanced processing capabilities.\n\nPyMuPDF4LLM uses MuPDF as its PDF parsing engine. PyMuPDF is emerging as a strong default for PDF text extraction due to its accuracy and performance in handling complex PDF structures.\n\nPYTHONUTF8=1 uv run --with pymupdf4llm python -c 'import pymupdf4llm; h = open(\"pymupdf4llm.md\", \"w\"); h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\"))'Copy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding regardless of system locale\n uv run --with pymupdf4llm: Uses uv package manager to run Python with the pymupdf4llm package\n python -c '...': Executes Python code directly from the command line\n import pymupdf4llm: Imports the PDF-to-Markdown module\n h = open(\"pymupdf4llm.md\", \"w\"): Creates a file to write the markdown output\n h.write(pymupdf4llm.tomarkdown(\"$FILE.pdf\")): Converts the PDF to markdown and writes to file\n\nMarkitdown\n------------------------------------------------------\n\n[](https://youtu.be/v65Oyddfxeg)\n\nMarkitdown is Microsoft’s tool for converting various document formats to Markdown, including PDFs, DOCX, XLSX, PPTX, and ZIP files. It’s a versatile multi-format converter that handles PDFs via PDFMiner, DOCX via Mammoth, XLSX via Pandas, and PPTX via Python-PPTX. Good for batch processing of mixed document types. The quality of PDF conversion is generally good but may struggle with complex layouts or heavily formatted documents.\n\nPYTHONUTF8=1 uvx markitdown $FILE.pdf > markitdown.mdCopy to clipboardErrorCopied\n\n PYTHONUTF8=1: Forces Python to use UTF-8 encoding\n uvx markitdown: Runs the markitdown tool via the uv package manager\n $FILE.pdf: The input PDF file\n > markitdown.md: Redirects output to a markdown file\n\nUnstructured\n\nUnstructured is rapidly becoming the de facto library for parsing over 40 different file types. It is excellent for extracting text and tables from diverse document formats. Particularly useful for generating clean content to pass to LLMs. Strong community support and actively maintained.\n\nGROBID\n----------------------------------------------\n\nIf you specifically need to parse references from text-native PDFs or reliably OCR’ed ones, GROBID remains the de facto choice. It excels at extracting structured bibliographic information with high accuracy.\n\nStart GROBID service\ndocker run -t --rm -p 8070:8070 lfoppiano/grobid:0.7.2\n\nProcess PDF with curl\ncurl -X POST -F \"input=@paper.pdf\" localhost:8070/api/processFulltextDocument > references.tei.xmlCopy to clipboardErrorCopied\n\nMistral OCR API\n\nMistral OCR offers an end-to-end cloud API that preserves both text and layout, making it easier to isolate specific sections like References. It shows the most promise currently, though it requires post-processing.\n\nAzure Document Intelligence API\n------------------------------------------------------------------------------------------------\n\nFor enterprise users already in the Microsoft ecosystem, Azure Document Intelligence provides excellent raw OCR with enterprise SLAs. May require custom model training or post-processing to match GROBID’s reference extraction capabilities.\n\nOther libraries\n\nDocling is IBM’s document understanding library that supports PDF conversion. It can be challenging to install, particularly on Windows and some Linux distributions. Offers advanced document understanding capabilities beyond simple text extraction.\n\nMegaParse takes a comprehensive approach using LibreOffice, Pandoc, Tesseract OCR, and other tools. It has Robust handling of different document types but requires an OpenAI API key for some features. Good for complex documents but has significant dependencies.\n\nComparison of PDF-to-Markdown Tools\n--------------------------------------------------------------------------------------------------------\n\n| Tool | Strengths | Weaknesses | Best For |\n| --- | --- | --- | --- |\n| PyMuPDF4LLM | Structure preservation, LLM optimization | Requires PyTorch | AI training data, semantic structure |\n| Markitdown | Multi-format support, simple usage | Less precise layout handling | Batch processing, mixed documents |\n| Unstructured | Wide format support, active development | Can be resource-intensive | Production pipelines, integration |\n| GROBID | Reference extraction excellence | Narrower use case | Academic papers, citations |\n| Docling | Advanced document understanding | Installation difficulties | Research applications |\n| MegaParse | Comprehensive approach | Requires OpenAI API | Complex documents, OCR needs |\n\nHow to pick:\n\n Need LLM-ready content? PyMuPDF4LLM is specifically designed for this\n Working with multiple document formats? Markitdown handles diverse inputs\n Extracting academic references? GROBID remains the standard\n Building a production pipeline? Unstructured offers the best integration options\n Handling complex layouts? Consider commercial OCR like Mistral or Azure Document Intelligence\n\nThe optimal approach depends on your specific requirements regarding accuracy, structure preservation, and the intended use of the extracted content.\n\nTips for Optimal PDF Conversion\n------------------------------------------------------------------------------------------------\n\n1. Pre-process PDFs when possible:\n\n   \n    Optimize a PDF for text extraction first\n   ocrmypdf --optimize 3 --skip-text input.pdf optimized.pdfCopy to clipboardErrorCopied\n   \n2. Try multiple tools on the same document to compare results:\n3. Handle scanned PDFs appropriately:\n\n   \n    For scanned documents, run OCR first\n   ocrmypdf --force-ocr input.pdf ocrready.pdf\n   PYTHONUTF8=1 uvx markitdown ocrready.pdf > markitdown.mdCopy to clipboardErrorCopied\n   \n4. Consider post-processing for better results:\n\n   \n    Simple post-processing example\n   sed -i 's/\\([A-Z]\\)\\./\\1\\.\\n/g' output.md   Add line breaks after sentencesCopy to clipboardErrorCopied\n   \n\nPrevious\n\nScraping PDFs with Tabula\n\nNext\n\nConvert HTML to Markdown"
  },
  {
    "title": "Browser: DevTools",
    "filename": "Browser__DevTools.md",
    "text": "404 - Not found\n==============="
  },
  {
    "title": "Browser: DevTools",
    "filename": "Browser__DevTools.md",
    "text": "404 - Not found\n==============="
  },
  {
    "title": "Project 1",
    "filename": "Project_1.md",
    "text": "Project: TDS Virtual TA\n=============================================================================\n\nCreate a virtual Teaching Assistant Discourse responder.\n\nBackground\n----------------------------------------------------\n\nYou are a clever student who has joined IIT Madras’ Online Degree in Data Science. You have just enrolled in the Tools in Data Science course.\n\nOut of kindness for your teaching assistants, you have decided to build an API that can automatically answer student questions on their behalf based on:\n\n Course content with content for TDS Jan 2025 as on 15 Apr 2025.\n TDS Discourse posts with content from 1 Jan 2025 - 14 Apr 2025.\n\nScrape the data\n--------------------------------------------------------------\n\nTo make sure you can answer these questions, you will need to extract the data from the above source.\n\nCreate an API\n----------------------------------------------------------\n\nYour application exposes an API endpoint. You may host it anywhere. Let’s assume it’s at https://app.example.com/api/.\n\nThe endpoint must accept a POST request, e.g. POST https://app.example.com/api/ with a student question as well as optional base64 file attachments as JSON.\n\nFor example, here’s how anyone can make a request:\n\ncurl \"https://app.example.com/api/\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"question\\\": \\\"Should I use gpt-4o-mini which AI proxy supports, or gpt3.5 turbo?\\\", \\\"image\\\": \\\"$(base64 -w0 project-tds-virtual-ta-q1.webp)\\\"}\"Copy to clipboardErrorCopied\n\nThis is a real question and uses this screenshot:\n\nThe response must be a JSON object like this:\n\n{\n  \"answer\": \"You must use gpt-3.5-turbo-0125, even if the AI Proxy only supports gpt-4o-mini. Use the OpenAI API directly for this question.\",\n  \"links\": [\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/4\",\n      \"text\": \"Use the model that’s mentioned in the question.\"\n    },\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/3\",\n      \"text\": \"My understanding is that you just have to use a tokenizer, similar to what Prof. Anand used, to get the number of tokens and multiply that by the given rate.\"\n    }\n  ]\n}Copy to clipboardErrorCopied\n\nEvaluate your application\n----------------------------------------------------------------------------------\n\nHere are a few sample questions and evaluation parameters. These are indicative. The actual evaluation could ask any realistic student question.\n\nTo run this:\n\n1. Edit project-tds-virtual-ta-promptfoo.yaml to replace providers[0].config.url with your API URL.\n2. Run this script:\n\n   \n   npx -y promptfoo eval --config project-tds-virtual-ta-promptfoo.yamlCopy to clipboardErrorCopied\n   \n\nDeploy your application\n------------------------------------------------------------------------------\n\nDeploy your application to a public URL that can be accessed by anyone. You may use any platform.\n\n(If you use ngrok, ensure that it is running continuously until you get your results.)\n\nShare your code\n--------------------------------------------------------------\n\n Create a new public GitHub repository\n Add an MIT LICENSE file\n Commit and push your code\n\nSubmit your URL\n--------------------------------------------------------------\n\nSubmit your GitHub repository URL and your API endpoint URL at <https://exam.sanand.workers.dev/tds-project-virtual-ta>\n\nEvaluation\n----------------------------------------------------\n\n Pre-requisites: Your repository MUST meet the following criteria to be eligible for evaluation\n  + Your GitHub repository exists and is publicly accessible\n  + Your GitHub repository has a LICENSE file with the MIT license in the root folder\n We will use a modified version of project-tds-virtual-ta-promptfoo.yaml with 10 realistic questions. Correct answers will be awarded up to 2 marks each.\n Your score will be the sum of the marks above. No normalization. What you get is what you get.\n\nBonus:\n\n 1 mark if your GitHub repo includes a script that scrapes the Discourse posts across a date range from a Discourse course page like TDS\n 2 marks if we deploy your solution (with minimal modifications) as an official solution for students to use.\n\nPrevious\n\nLLM Evals\n\nNext\n\n4. Data Sourcing"
  },
  {
    "title": "Project 1",
    "filename": "Project_1.md",
    "text": "Project: TDS Virtual TA\n=============================================================================\n\nCreate a virtual Teaching Assistant Discourse responder.\n\nBackground\n----------------------------------------------------\n\nYou are a clever student who has joined IIT Madras’ Online Degree in Data Science. You have just enrolled in the Tools in Data Science course.\n\nOut of kindness for your teaching assistants, you have decided to build an API that can automatically answer student questions on their behalf based on:\n\n Course content with content for TDS Jan 2025 as on 15 Apr 2025.\n TDS Discourse posts with content from 1 Jan 2025 - 14 Apr 2025.\n\nScrape the data\n--------------------------------------------------------------\n\nTo make sure you can answer these questions, you will need to extract the data from the above source.\n\nCreate an API\n----------------------------------------------------------\n\nYour application exposes an API endpoint. You may host it anywhere. Let’s assume it’s at https://app.example.com/api/.\n\nThe endpoint must accept a POST request, e.g. POST https://app.example.com/api/ with a student question as well as optional base64 file attachments as JSON.\n\nFor example, here’s how anyone can make a request:\n\ncurl \"https://app.example.com/api/\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"question\\\": \\\"Should I use gpt-4o-mini which AI proxy supports, or gpt3.5 turbo?\\\", \\\"image\\\": \\\"$(base64 -w0 project-tds-virtual-ta-q1.webp)\\\"}\"Copy to clipboardErrorCopied\n\nThis is a real question and uses this screenshot:\n\nThe response must be a JSON object like this:\n\n{\n  \"answer\": \"You must use gpt-3.5-turbo-0125, even if the AI Proxy only supports gpt-4o-mini. Use the OpenAI API directly for this question.\",\n  \"links\": [\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/4\",\n      \"text\": \"Use the model that’s mentioned in the question.\"\n    },\n    {\n      \"url\": \"https://discourse.onlinedegree.iitm.ac.in/t/ga5-question-8-clarification/155939/3\",\n      \"text\": \"My understanding is that you just have to use a tokenizer, similar to what Prof. Anand used, to get the number of tokens and multiply that by the given rate.\"\n    }\n  ]\n}Copy to clipboardErrorCopied\n\nEvaluate your application\n----------------------------------------------------------------------------------\n\nHere are a few sample questions and evaluation parameters. These are indicative. The actual evaluation could ask any realistic student question.\n\nTo run this:\n\n1. Edit project-tds-virtual-ta-promptfoo.yaml to replace providers[0].config.url with your API URL.\n2. Run this script:\n\n   \n   npx -y promptfoo eval --config project-tds-virtual-ta-promptfoo.yamlCopy to clipboardErrorCopied\n   \n\nDeploy your application\n------------------------------------------------------------------------------\n\nDeploy your application to a public URL that can be accessed by anyone. You may use any platform.\n\n(If you use ngrok, ensure that it is running continuously until you get your results.)\n\nShare your code\n--------------------------------------------------------------\n\n Create a new public GitHub repository\n Add an MIT LICENSE file\n Commit and push your code\n\nSubmit your URL\n--------------------------------------------------------------\n\nSubmit your GitHub repository URL and your API endpoint URL at <https://exam.sanand.workers.dev/tds-project-virtual-ta>\n\nEvaluation\n----------------------------------------------------\n\n Pre-requisites: Your repository MUST meet the following criteria to be eligible for evaluation\n  + Your GitHub repository exists and is publicly accessible\n  + Your GitHub repository has a LICENSE file with the MIT license in the root folder\n We will use a modified version of project-tds-virtual-ta-promptfoo.yaml with 10 realistic questions. Correct answers will be awarded up to 2 marks each.\n Your score will be the sum of the marks above. No normalization. What you get is what you get.\n\nBonus:\n\n 1 mark if your GitHub repo includes a script that scrapes the Discourse posts across a date range from a Discourse course page like TDS\n 2 marks if we deploy your solution (with minimal modifications) as an official solution for students to use.\n\nPrevious\n\nLLM Evals\n\nNext\n\n4. Data Sourcing"
  },
  {
    "title": "2. Deployment Tools",
    "filename": "2._Deployment_Tools.md",
    "text": "Deployment Tools\n==========================================================\n\nAny application you build is likely to be deployed somewhere. This section covers the most popular tools involved in deploying an application.\n\nPrevious\n\nVersion Control: Git, GitHub\n\nNext\n\nMarkdown"
  },
  {
    "title": "LLM Speech",
    "filename": "LLM_Speech.md",
    "text": "OpenAI TTS-1 for Text-to-Speech Generation\n--------------------------------------------------------------------------------------------------------\n\nOpenAI’s Text-to-Speech API (TTS-1) converts text into natural-sounding speech using state-of-the-art neural models. Released in March 2025, it offers multiple voices and control over speaking style and speed.\n\n[](https://youtu.be/lXb0L16ISAc)\n\nSimple speech generation\n\nTo generate speech from text, send a POST request to the speech endpoint:\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1\",\n    \"input\": \"Hello! This is a test of the OpenAI text to speech API.\",\n    \"voice\": \"alloy\"\n  }' --output speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nControl the output with these parameters:\n\n model: tts-1 (standard) or tts-1-hd (higher quality)\n input: Text to convert (max 4096 characters)\n voice: alloy, echo, fable, onyx, nova, or shimmer\n responseformat: mp3 (default), opus, aac, or flac\n speed: 0.25 to 4.0 (default 1.0)\n\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1-hd\",\n    \"input\": \"Welcome to our podcast! Today we will be discussing artificial intelligence.\",\n    \"voice\": \"nova\",\n    \"responseformat\": \"mp3\",\n    \"speed\": 1.2\n  }' --output podcastintro.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing per 1,000 characters:\n\n tts-1: $0.015\n tts-1-hd: $0.030\n\nTo optimize costs:\n\n Use tts-1 for drafts, tts-1-hd for final versions\n Batch process text in chunks\n Cache frequently used phrases\n Choose lower quality formats for testing\n\nGoogle Gemini Speech Studio for Text-to-Speech\n----------------------------------------------------------------------------------------------------------------\n\nGoogle’s Gemini Speech Studio offers advanced text-to-speech capabilities with support for multiple languages, voices, and speaking styles.\n\n[](https://youtu.be/Rx8PmBo9vfI)\n\nFor this, you need a GOOGLEAPIKEY. You can:\n\n1. Go to the Google Cloud Console: <https://console.cloud.google.com/apis/library/texttospeech.googleapis.com>, select or create the project you want and click Enable.\n2. Create an API key. In the Console, navigate to APIs & Services → Credentials and click + Create Credentials → API key. Copy the generated key (it’ll look like AIza…).\n\nSimple speech generation\n\nGenerate speech using the Gemini API:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": { \"text\": \"Hello, welcome to Gemini Speech Studio!\" },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-speech.mp3Copy to clipboardErrorCopied\n\nGeneration options\n\nCustomize synthesis with these parameters:\n\n voice:\n  + languageCode: Language code (e.g., “en-US”, “es-ES”)\n  + name: Voice model name\n  + ssmlGender: “NEUTRAL”, “MALE”, or “FEMALE”\n audioConfig:\n  + audioEncoding: “MP3”, “WAV”, “OGG\\OPUS”\n  + speakingRate: 0.25 to 4.0\n  + pitch: -20.0 to 20.0\n  + volumeGainDb: Volume adjustment\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"text\": \"This is a demonstration of advanced speech settings.\"\n    },\n    \"voice\": {\n      \"languageCode\": \"en-US\",\n      \"name\": \"en-US-Neural2-D\"\n    },\n    \"audioConfig\": {\n      \"audioEncoding\": \"MP3\",\n      \"speakingRate\": 1.2,\n      \"pitch\": 2.0,\n      \"volumeGainDb\": 1.0\n    }\n  }' | jq -r .audioContent | base64 --decode > gemini-options.mp3Copy to clipboardErrorCopied\n\nSSML support\n\nBoth APIs support Speech Synthesis Markup Language (SSML) for fine-grained control:\n\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLEAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": {\n      \"ssml\": \"<speak>Hello <break time=\\\"1s\\\"/> This text has a pause and <emphasis level=\\\"strong\\\">emphasized words</emphasis>.</speak>\"\n    },\n    \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n    \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n  }' | jq -r .audioContent | base64 --decode > gemini-ssml.mp3Copy to clipboardErrorCopied\n\nCosts and optimization\n\nPricing (per character):\n\n Standard voices: $0.000004\n Neural voices: $0.000016\n Neural2 voices: $0.000024\n\nTo optimize:\n\n Use standard voices for development\n Cache common phrases\n Batch process where possible\n Choose appropriate audio quality\n\nPython implementation\n\nHere’s a simple Python wrapper for both APIs:\n\nimport requests\nimport base64\nimport os\n\nopenaikey = os.getenv(\"OPENAIAPIKEY\")\ngooglekey = os.getenv(\"GOOGLEAPIKEY\")\n\ndef generateopenaispeech(text, voice=\"alloy\", model=\"tts-1\"):\n    response = requests.post(\n        \"https://api.openai.com/v1/audio/speech\",\n        headers={\"Authorization\": f\"Bearer {openaikey}\"},\n        json={\"model\": model, \"input\": text, \"voice\": voice}\n    )\n    return response.content\n\ndef generategeminispeech(text, voicename=\"en-US-Neural2-A\"):\n    response = requests.post(\n        f\"https://texttospeech.googleapis.com/v1/text:synthesize?key={googlekey}\",\n        json={\n            \"input\": {\"text\": text},\n            \"voice\": {\"languageCode\": \"en-US\", \"name\": voicename},\n            \"audioConfig\": {\"audioEncoding\": \"MP3\"}\n        }\n    )\n    return base64.b64decode(response.json()[\"audioContent\"])\n\nif name == \"main\":\n    with open(\"openaispeech.mp3\", \"wb\") as f:\n        f.write(generateopenaispeech(\"Hello from OpenAI's text to speech API!\"))\n    with open(\"geminispeech.mp3\", \"wb\") as f:\n        f.write(generategeminispeech(\"Hello from Google's Gemini Speech Studio!\"))Copy to clipboardErrorCopied\n\nPrevious\n\nLLM Image Generation\n\nNext\n\nLLM Evals"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Web Automation with Playwright",
    "filename": "Web_Automation_with_Playwright.md",
    "text": "Web Scraping with Playwright in Python\n--------------------------------------------------------------------------------------------------------------------\n\nScrape JavaScript‑heavy sites effortlessly with Playwright.\n\n[](https://youtu.be/biFzRHk4xpY) (youtube.com)\n\nPlaywright offers:\n\n JavaScript rendering: Executes page scripts so you scrape only after content appears. (playwright.dev)\n Headless & headed modes: Run without UI or in a real browser for debugging. (playwright.dev)\n Auto‑waiting & retry: Built‑in locators reduce flakiness. (playwright.dev)\n Multi‑browser support: Chromium, Firefox, WebKit—all from one API. (playwright.dev)\n\nExample: Scraping a JS‑Rendered Site\n\nWe’ll scrape Quotes to Scrape (JS)—a site that loads quotes via JavaScript, so a simple requests call gets only an empty shell (quotes.toscrape.com). Playwright runs the scripts and gives us the real content:\n\n/// script\ndependencies = [\"playwright\"]\n///\n\nfrom playwright.syncapi import syncplaywright\n\ndef scrapequotes():\n    with syncplaywright() as p:\n         Channel can be \"chrome\", \"msedge\", \"chrome-beta\", \"msedge-beta\" or \"msedge-dev\".\n        browser = p.chromium.launch(headless=True, channel=\"chrome\")\n        page = browser.newpage()\n        page.goto(\"https://quotes.toscrape.com/js/\")\n        quotes = page.queryselectorall(\".quote\")\n        for q in quotes:\n            text = q.queryselector(\".text\").innertext()\n            author = q.queryselector(\".author\").innertext()\n            print(f\"{text} — {author}\")\n        browser.close()\n\nif name == \"main\":\n    scrapequotes()Copy to clipboardErrorCopied\n\nSave as scraper.py and run:\n\nuv run scraper.pyCopy to clipboardErrorCopied\n\nYou’ll see each quote plus author printed—fetched only after the JS executes.\n\nPrevious\n\nLLM Video Screen-Scraping\n\nNext\n\nScheduled Scraping with GitHub Actions"
  },
  {
    "title": "Geospatial Analysis with Python",
    "filename": "Geospatial_Analysis_with_Python.md",
    "text": "Geospatial Analysis with Python\n-------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video\n\nPrevious\n\nGeospatial Analysis with Excel\n\nNext\n\nGeospatial Analysis with QGIS"
  },
  {
    "title": "Vector databases",
    "filename": "Vector_databases.md",
    "text": "Vector Databases\n----------------------------------------------------------\n\nVector databases are specialized databases that store and search vector embeddings efficiently.\n\nUse vector databases when your embeddings exceed available memory or when you want it run fast at scale. (This is important. If your code runs fast and fits in memory, you DON’T need a vector database. You can can use numpy for these tasks.)\n\nVector databases are an evolving space.\n\nThe first generation of vector databases were written in C and typically used an algorithm called HNSW (a way to approximately find the nearest neighbor). Some popular ones are:\n\n chroma 19,637 ⭐ May 2025\n qdrant 23,341 ⭐ May 2025\n lancedb 6,327 ⭐ May 2025\n faiss 34,684 ⭐ May 2025\n milvus 34,476 ⭐ May 2025\n weaviate 13,222 ⭐ May 2025\n\nIn addition, most relational databases now support vector search. For example:\n\n DuckDB: Supports vector search with vss.\n SQLite: Supports vector search with sqlite-vec.\n PostgreSQL: Supports vector search with pgvector.\n\nTake a look at this Vector DB Comparison.\n\nWatch this Vector Database Tutorial (3 min):\n\n[](https://youtu.be/klTvEwg3oJ4)\n\nChromaDB\n\nHere’s a minimal example using Chroma:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"chromadb\",\n\"sentence-transformers\",\n]\n///\n\nimport chromadb\nfrom chromadb.utils import embeddingfunctions\nfrom sentencetransformers import SentenceTransformer\n\nasync def setupvectordb():\n    \"\"\"Initialize Chroma DB with an embedding function.\"\"\"\n    sentencetransformeref = embeddingfunctions.SentenceTransformerEmbeddingFunction(\n        modelname=\"BAAI/bge-base-en-v1.5\"\n    )\n    client = chromadb.PersistentClient(path=\"./vectordb\")\n    collection = client.createcollection(\n        name=\"documents\",\n        embeddingfunction=sentencetransformeref\n    )\n    return collection\n\nasync def searchsimilar(collection, query: str, nresults: int = 3) -> list[dict]:\n    \"\"\"Search for documents similar to the query.\"\"\"\n    d = collection.query(querytexts=[query], nresults=nresults)\n    return [\n        {\"id\": id, \"text\": text, \"distance\": distance}\n        for id, text, distance in zip(d[\"ids\"][0], d[\"documents\"][0], d[\"distances\"][0])\n    ]\n\nasync def main():\n    collection = await setupvectordb()\n\n     Add some documents\n    collection.add(\n        documents=[\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"],\n        ids=[\"1\", \"2\", \"3\"]\n    )\n\n     Search\n    results = await searchsimilar(collection, \"fruit\")\n    print(results)\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nLanceDB\n\nHere’s the same example using LanceDB:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"lancedb\",\n\"pyarrow\",\n\"sentence-transformers\",\n]\n///\n\nimport lancedb\nimport pyarrow as pa\nfrom sentencetransformers import SentenceTransformer\n\nasync def setupvectordb():\n    \"\"\"Initialize LanceDB with an embedding function.\"\"\"\n    model = SentenceTransformer(\"BAAI/bge-base-en-v1.5\")\n    db = lancedb.connect(\"./vectordb\")\n\n     Create table with schema for documents\n    table = db.createtable(\n        \"documents\",\n        schema=pa.schema([\n            pa.field(\"id\", pa.string()),\n            pa.field(\"text\", pa.string()),\n            pa.field(\"vector\", pa.list(pa.float32(), listsize=768))\n        ])\n    )\n    return table, model\n\nasync def searchsimilar(table, model, query: str, nresults: int = 3) -> list[dict]:\n    \"\"\"Search for documents similar to the query.\"\"\"\n    queryembedding = model.encode(query)\n    results = table.search(queryembedding).limit(nresults).tolist()\n    return [{\"id\": r[\"id\"], \"text\": r[\"text\"], \"distance\": float(r[\"distance\"])} for r in results]\n\nasync def main():\n    table, model = await setupvectordb()\n\n     Add some documents\n    documents = [\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"]\n    embeddings = model.encode(documents)\n\n    table.add(data=[\n        {\"id\": str(i), \"text\": text, \"vector\": embedding}\n        for i, (text, embedding) in enumerate(zip(documents, embeddings), 1)\n    ])\n\n     Search\n    results = await searchsimilar(table, model, \"fruit\")\n    print(results)\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nDuckDB\n\nHere’s the same example using DuckDB:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"duckdb\",\n\"sentence-transformers\",\n]\n///\n\nimport duckdb\nfrom sentencetransformers import SentenceTransformer\n\nasync def setupvectordb() -> tuple[duckdb.DuckDBPyConnection, SentenceTransformer]:\n    \"\"\"Initialize DuckDB with VSS extension and embedding model.\"\"\"\n     Initialize model\n    model = SentenceTransformer(\"BAAI/bge-base-en-v1.5\")\n    vectordim = model.getsentenceembeddingdimension()\n\n     Setup DuckDB with VSS extension\n    conn = duckdb.connect(\":memory:\")\n    conn.installextension(\"vss\")\n    conn.loadextension(\"vss\")\n\n     Create table with vector column\n    conn.execute(f\"\"\"\n        CREATE TABLE documents (\n            id VARCHAR,\n            text VARCHAR,\n            vector FLOAT[{vectordim}]\n        )\n    \"\"\")\n\n     Create HNSW index for vector similarity search\n    conn.execute(\"CREATE INDEX vectoridx ON documents USING HNSW (vector)\")\n    return conn, model\n\nasync def searchsimilar(conn: duckdb.DuckDBPyConnection, model: SentenceTransformer,\n                        query: str, nresults: int = 3) -> list[dict]:\n    \"\"\"Search for documents similar to query using vector similarity.\"\"\"\n     Encode query to vector\n    queryvector = model.encode(query).tolist()\n\n     Search using HNSW index with explicit FLOAT[] cast\n    results = conn.execute(\"\"\"\n        SELECT id, text, arraydistance(vector, CAST(? AS FLOAT[768])) as distance\n        FROM documents\n        ORDER BY arraydistance(vector, CAST(? AS FLOAT[768]))\n        LIMIT ?\n    \"\"\", [queryvector, queryvector, nresults]).fetchall()\n\n    return [{\"id\": r[0], \"text\": r[1], \"distance\": float(r[2])} for r in results]\n\nasync def main():\n    conn, model = await setupvectordb()\n\n     Add sample documents\n    documents = [\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"]\n    embeddings = model.encode(documents).tolist()\n\n     Insert documents and vectors\n    conn.executemany(\"\"\"\n        INSERT INTO documents (id, text, vector)\n        VALUES (?, ?, ?)\n    \"\"\", [(str(i), text, embedding)\n          for i, (text, embedding) in enumerate(zip(documents, embeddings), 1)])\n\n     Search similar documents\n    results = await searchsimilar(conn, model, \"fruit\")\n    print(results)\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nPrevious\n\nTopic modeling\n\nNext\n\nRAG with the CLI)"
  },
  {
    "title": "LLM Image Generation",
    "filename": "LLM_Image_Generation.md",
    "text": "Gemini Flash Experimental Image Generation and Editing APIs\n----------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn March 2025, Google introduced native image generation and editing capabilities in the Gemini 2.0 Flash Experimental model. You can now generate and iteratively edit images via a single REST endpoint (Experiment with Gemini 2.0 Flash native image generation, Generate images | Gemini API | Google AI for Developers).\n\n[](https://youtu.be/wgs4UYx6quY) (How to use Latest Gemini 2.0 Native Image Generation with API?)\n\nSimple image generation\n\nTo generate a basic image, send a POST request to the generateContent method:\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A serene landscape of rolling hills at sunrise, digital art\" }] }],\n    \"generationConfig\": { \"responseModalities\": [\"TEXT\", \"IMAGE\"] }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nReplace $GEMINIAPIKEY with your key. (Gemini API | Google AI for Developers)\n\nGeneration options\n\nYou can tweak the output with these generationConfig parameters:\n\n responseModalities: Modalities to return (TEXT, IMAGE).\n temperature (0.0–2.0): Controls randomness (default 1.0).\n topP (0.0–1.0): Nucleus sampling threshold.\n topK: Token selection cutoff.\n maxOutputTokens: Max tokens for text parts.\n stopSequences: Sequences to end generation.\n seed: For reproducibility.\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A futuristic city skyline at dusk, neon lights\" }] }],\n    \"generationConfig\": {\n      \"responseModalities\": [\"TEXT\", \"IMAGE\"],\n      \"temperature\": 0.7,\n      \"topP\": 0.9,\n      \"maxOutputTokens\": 1024\n    }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Generation Docs\n\nSimple image editing\n\nTo edit an existing image, include it in the contents as inlineData (base64-encoded):\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n      \"contents\": [{\n        \"parts\":[\n            {\"text\": \"Replace the background with a starry night sky\"},\n            {\"inlinedata\": {\"mimetype\":\"image/jpeg\", \"data\": \"'$(base64 -w 0 cat.jpg)'\"}}\n        ]\n      }],\n      \"generationConfig\": {\"responseModalities\": [\"TEXT\", \"IMAGE\"]}\n    }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Editing Docs\n\nEditing options\n\nEditing requests support:\n\n inlineData: Embed raw image bytes.\n fileData: Reference public URLs.\n All generationConfig options listed above.\n safetySettings: Per-request safety rules.\n Multi-turn edits by repeating contents in conversation history.\n\nCosts and optimization\n\nGemini 2.0 Flash Experimental uses token-based billing:\n\n Input (text/image/video): free tier, then $0.10 per 1M tokens.\n Output (text/image): free tier, then $0.40 per 1M tokens.\n Per-image flat cost for Pro models: $0.001315 /image (Gemini Developer API Pricing | Gemini API | Google AI for Developers, Solved: Re: Outdated Gemini Pro image pricing? By tile, or…).\n\nTo optimize:\n\n Use smaller image sizes by setting responseMimeType.\n Cache or reuse prompts with cachedContent.\n Lower candidateCount or temperature for fewer tokens.\n\nOpenAI gpt-image-1 Model for Image Generation and Editing\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nOpenAI’s GPT Image 1 (gpt-image-1) is a state-of-the-art multimodal model released on April 23, 2025, for high-fidelity image creation and editing.\n\n[](https://youtu.be/k-G71JZA75A)\n\nSimple image generation\n\nUse the Image Generations endpoint:\n\ncurl 'https://api.openai.com/v1/images/generations' \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"prompt\": \"A whimsical illustration of a cat playing chess\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }' > image.pngCopy to clipboardErrorCopied\n\n(Generate Image | OpenAI API - Postman)\n\nGeneration options\n\nAdjust these JSON parameters:\n\n model: gpt-image-1 (default).\n prompt: Text description.\n n: Number of images.\n size: 256x256, 512x512, or 1024x1024.\n responseformat: \"url\" (default) or \"b64json\".\n\n{\n  \"model\": \"gpt-image-1\",\n  \"prompt\": \"...\",\n  \"n\": 2,\n  \"size\": \"512x512\",\n  \"responseformat\": \"b64json\"\n}Copy to clipboardErrorCopied\n\nSimple image editing\n\nUse the Edits endpoint with an image and a mask:\n\ncurl https://api.openai.com/v1/images/edits \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"image\": \"data:image/png;base64,<BASE64IMAGE>\",\n    \"mask\": \"data:image/png;base64,<BASE64MASK>\",\n    \"prompt\": \"Add a rainbow in the sky above the mountains\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'Copy to clipboardErrorCopied\n\n(curl - What’s the correct URL to test OpenAI API? - Stack Overflow)\n\nEditing options\n\nEditing requests accept:\n\n image: Original image (base64 or URL).\n mask: PNG mask for inpainting.\n prompt: Instruction for the edit.\n n, size, responseformat as above.\n Optional user field for attribution.\n\nCosts and optimization\n\nGPT Image 1 pricing (per 1M tokens): text input $5, image input $10, image output $40. Rough per-image costs:\n\n Low quality: $0.02\n Medium quality: $0.07\n High quality: $0.19 (OpenAI’s GPT-Image-1 API — Create Stunning Images for Your Apps!, Usage of gpt-image-1 is priced per token, with … - Hacker News)\n\nTo optimize:\n\n Choose smaller sizes (256x256).\n Generate fewer images (n:1).\n Use responseformat:\"url\" to reduce payload.\n Cache frequent prompts or images.\n\nPrevious\n\nLLM Agents\n\nNext\n\nLLM Speech"
  },
  {
    "title": "LLM Image Generation",
    "filename": "LLM_Image_Generation.md",
    "text": "Gemini Flash Experimental Image Generation and Editing APIs\n----------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn March 2025, Google introduced native image generation and editing capabilities in the Gemini 2.0 Flash Experimental model. You can now generate and iteratively edit images via a single REST endpoint (Experiment with Gemini 2.0 Flash native image generation, Generate images | Gemini API | Google AI for Developers).\n\n[](https://youtu.be/wgs4UYx6quY) (How to use Latest Gemini 2.0 Native Image Generation with API?)\n\nSimple image generation\n\nTo generate a basic image, send a POST request to the generateContent method:\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A serene landscape of rolling hills at sunrise, digital art\" }] }],\n    \"generationConfig\": { \"responseModalities\": [\"TEXT\", \"IMAGE\"] }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nReplace $GEMINIAPIKEY with your key. (Gemini API | Google AI for Developers)\n\nGeneration options\n\nYou can tweak the output with these generationConfig parameters:\n\n responseModalities: Modalities to return (TEXT, IMAGE).\n temperature (0.0–2.0): Controls randomness (default 1.0).\n topP (0.0–1.0): Nucleus sampling threshold.\n topK: Token selection cutoff.\n maxOutputTokens: Max tokens for text parts.\n stopSequences: Sequences to end generation.\n seed: For reproducibility.\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A futuristic city skyline at dusk, neon lights\" }] }],\n    \"generationConfig\": {\n      \"responseModalities\": [\"TEXT\", \"IMAGE\"],\n      \"temperature\": 0.7,\n      \"topP\": 0.9,\n      \"maxOutputTokens\": 1024\n    }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Generation Docs\n\nSimple image editing\n\nTo edit an existing image, include it in the contents as inlineData (base64-encoded):\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n      \"contents\": [{\n        \"parts\":[\n            {\"text\": \"Replace the background with a starry night sky\"},\n            {\"inlinedata\": {\"mimetype\":\"image/jpeg\", \"data\": \"'$(base64 -w 0 cat.jpg)'\"}}\n        ]\n      }],\n      \"generationConfig\": {\"responseModalities\": [\"TEXT\", \"IMAGE\"]}\n    }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Editing Docs\n\nEditing options\n\nEditing requests support:\n\n inlineData: Embed raw image bytes.\n fileData: Reference public URLs.\n All generationConfig options listed above.\n safetySettings: Per-request safety rules.\n Multi-turn edits by repeating contents in conversation history.\n\nCosts and optimization\n\nGemini 2.0 Flash Experimental uses token-based billing:\n\n Input (text/image/video): free tier, then $0.10 per 1M tokens.\n Output (text/image): free tier, then $0.40 per 1M tokens.\n Per-image flat cost for Pro models: $0.001315 /image (Gemini Developer API Pricing | Gemini API | Google AI for Developers, Solved: Re: Outdated Gemini Pro image pricing? By tile, or…).\n\nTo optimize:\n\n Use smaller image sizes by setting responseMimeType.\n Cache or reuse prompts with cachedContent.\n Lower candidateCount or temperature for fewer tokens.\n\nOpenAI gpt-image-1 Model for Image Generation and Editing\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nOpenAI’s GPT Image 1 (gpt-image-1) is a state-of-the-art multimodal model released on April 23, 2025, for high-fidelity image creation and editing.\n\n[](https://youtu.be/k-G71JZA75A)\n\nSimple image generation\n\nUse the Image Generations endpoint:\n\ncurl 'https://api.openai.com/v1/images/generations' \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"prompt\": \"A whimsical illustration of a cat playing chess\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }' > image.pngCopy to clipboardErrorCopied\n\n(Generate Image | OpenAI API - Postman)\n\nGeneration options\n\nAdjust these JSON parameters:\n\n model: gpt-image-1 (default).\n prompt: Text description.\n n: Number of images.\n size: 256x256, 512x512, or 1024x1024.\n responseformat: \"url\" (default) or \"b64json\".\n\n{\n  \"model\": \"gpt-image-1\",\n  \"prompt\": \"...\",\n  \"n\": 2,\n  \"size\": \"512x512\",\n  \"responseformat\": \"b64json\"\n}Copy to clipboardErrorCopied\n\nSimple image editing\n\nUse the Edits endpoint with an image and a mask:\n\ncurl https://api.openai.com/v1/images/edits \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"image\": \"data:image/png;base64,<BASE64IMAGE>\",\n    \"mask\": \"data:image/png;base64,<BASE64MASK>\",\n    \"prompt\": \"Add a rainbow in the sky above the mountains\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'Copy to clipboardErrorCopied\n\n(curl - What’s the correct URL to test OpenAI API? - Stack Overflow)\n\nEditing options\n\nEditing requests accept:\n\n image: Original image (base64 or URL).\n mask: PNG mask for inpainting.\n prompt: Instruction for the edit.\n n, size, responseformat as above.\n Optional user field for attribution.\n\nCosts and optimization\n\nGPT Image 1 pricing (per 1M tokens): text input $5, image input $10, image output $40. Rough per-image costs:\n\n Low quality: $0.02\n Medium quality: $0.07\n High quality: $0.19 (OpenAI’s GPT-Image-1 API — Create Stunning Images for Your Apps!, Usage of gpt-image-1 is priced per token, with … - Hacker News)\n\nTo optimize:\n\n Choose smaller sizes (256x256).\n Generate fewer images (n:1).\n Use responseformat:\"url\" to reduce payload.\n Cache frequent prompts or images.\n\nPrevious\n\nLLM Agents\n\nNext\n\nLLM Speech"
  },
  {
    "title": "LLM Image Generation",
    "filename": "LLM_Image_Generation.md",
    "text": "Gemini Flash Experimental Image Generation and Editing APIs\n----------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn March 2025, Google introduced native image generation and editing capabilities in the Gemini 2.0 Flash Experimental model. You can now generate and iteratively edit images via a single REST endpoint (Experiment with Gemini 2.0 Flash native image generation, Generate images | Gemini API | Google AI for Developers).\n\n[](https://youtu.be/wgs4UYx6quY) (How to use Latest Gemini 2.0 Native Image Generation with API?)\n\nSimple image generation\n\nTo generate a basic image, send a POST request to the generateContent method:\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A serene landscape of rolling hills at sunrise, digital art\" }] }],\n    \"generationConfig\": { \"responseModalities\": [\"TEXT\", \"IMAGE\"] }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nReplace $GEMINIAPIKEY with your key. (Gemini API | Google AI for Developers)\n\nGeneration options\n\nYou can tweak the output with these generationConfig parameters:\n\n responseModalities: Modalities to return (TEXT, IMAGE).\n temperature (0.0–2.0): Controls randomness (default 1.0).\n topP (0.0–1.0): Nucleus sampling threshold.\n topK: Token selection cutoff.\n maxOutputTokens: Max tokens for text parts.\n stopSequences: Sequences to end generation.\n seed: For reproducibility.\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A futuristic city skyline at dusk, neon lights\" }] }],\n    \"generationConfig\": {\n      \"responseModalities\": [\"TEXT\", \"IMAGE\"],\n      \"temperature\": 0.7,\n      \"topP\": 0.9,\n      \"maxOutputTokens\": 1024\n    }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Generation Docs\n\nSimple image editing\n\nTo edit an existing image, include it in the contents as inlineData (base64-encoded):\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n      \"contents\": [{\n        \"parts\":[\n            {\"text\": \"Replace the background with a starry night sky\"},\n            {\"inlinedata\": {\"mimetype\":\"image/jpeg\", \"data\": \"'$(base64 -w 0 cat.jpg)'\"}}\n        ]\n      }],\n      \"generationConfig\": {\"responseModalities\": [\"TEXT\", \"IMAGE\"]}\n    }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Editing Docs\n\nEditing options\n\nEditing requests support:\n\n inlineData: Embed raw image bytes.\n fileData: Reference public URLs.\n All generationConfig options listed above.\n safetySettings: Per-request safety rules.\n Multi-turn edits by repeating contents in conversation history.\n\nCosts and optimization\n\nGemini 2.0 Flash Experimental uses token-based billing:\n\n Input (text/image/video): free tier, then $0.10 per 1M tokens.\n Output (text/image): free tier, then $0.40 per 1M tokens.\n Per-image flat cost for Pro models: $0.001315 /image (Gemini Developer API Pricing | Gemini API | Google AI for Developers, Solved: Re: Outdated Gemini Pro image pricing? By tile, or…).\n\nTo optimize:\n\n Use smaller image sizes by setting responseMimeType.\n Cache or reuse prompts with cachedContent.\n Lower candidateCount or temperature for fewer tokens.\n\nOpenAI gpt-image-1 Model for Image Generation and Editing\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nOpenAI’s GPT Image 1 (gpt-image-1) is a state-of-the-art multimodal model released on April 23, 2025, for high-fidelity image creation and editing.\n\n[](https://youtu.be/k-G71JZA75A)\n\nSimple image generation\n\nUse the Image Generations endpoint:\n\ncurl 'https://api.openai.com/v1/images/generations' \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"prompt\": \"A whimsical illustration of a cat playing chess\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }' > image.pngCopy to clipboardErrorCopied\n\n(Generate Image | OpenAI API - Postman)\n\nGeneration options\n\nAdjust these JSON parameters:\n\n model: gpt-image-1 (default).\n prompt: Text description.\n n: Number of images.\n size: 256x256, 512x512, or 1024x1024.\n responseformat: \"url\" (default) or \"b64json\".\n\n{\n  \"model\": \"gpt-image-1\",\n  \"prompt\": \"...\",\n  \"n\": 2,\n  \"size\": \"512x512\",\n  \"responseformat\": \"b64json\"\n}Copy to clipboardErrorCopied\n\nSimple image editing\n\nUse the Edits endpoint with an image and a mask:\n\ncurl https://api.openai.com/v1/images/edits \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"image\": \"data:image/png;base64,<BASE64IMAGE>\",\n    \"mask\": \"data:image/png;base64,<BASE64MASK>\",\n    \"prompt\": \"Add a rainbow in the sky above the mountains\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'Copy to clipboardErrorCopied\n\n(curl - What’s the correct URL to test OpenAI API? - Stack Overflow)\n\nEditing options\n\nEditing requests accept:\n\n image: Original image (base64 or URL).\n mask: PNG mask for inpainting.\n prompt: Instruction for the edit.\n n, size, responseformat as above.\n Optional user field for attribution.\n\nCosts and optimization\n\nGPT Image 1 pricing (per 1M tokens): text input $5, image input $10, image output $40. Rough per-image costs:\n\n Low quality: $0.02\n Medium quality: $0.07\n High quality: $0.19 (OpenAI’s GPT-Image-1 API — Create Stunning Images for Your Apps!, Usage of gpt-image-1 is priced per token, with … - Hacker News)\n\nTo optimize:\n\n Choose smaller sizes (256x256).\n Generate fewer images (n:1).\n Use responseformat:\"url\" to reduce payload.\n Cache frequent prompts or images.\n\nPrevious\n\nLLM Agents\n\nNext\n\nLLM Speech"
  },
  {
    "title": "LLM Image Generation",
    "filename": "LLM_Image_Generation.md",
    "text": "Gemini Flash Experimental Image Generation and Editing APIs\n----------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn March 2025, Google introduced native image generation and editing capabilities in the Gemini 2.0 Flash Experimental model. You can now generate and iteratively edit images via a single REST endpoint (Experiment with Gemini 2.0 Flash native image generation, Generate images | Gemini API | Google AI for Developers).\n\n[](https://youtu.be/wgs4UYx6quY) (How to use Latest Gemini 2.0 Native Image Generation with API?)\n\nSimple image generation\n\nTo generate a basic image, send a POST request to the generateContent method:\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A serene landscape of rolling hills at sunrise, digital art\" }] }],\n    \"generationConfig\": { \"responseModalities\": [\"TEXT\", \"IMAGE\"] }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nReplace $GEMINIAPIKEY with your key. (Gemini API | Google AI for Developers)\n\nGeneration options\n\nYou can tweak the output with these generationConfig parameters:\n\n responseModalities: Modalities to return (TEXT, IMAGE).\n temperature (0.0–2.0): Controls randomness (default 1.0).\n topP (0.0–1.0): Nucleus sampling threshold.\n topK: Token selection cutoff.\n maxOutputTokens: Max tokens for text parts.\n stopSequences: Sequences to end generation.\n seed: For reproducibility.\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\n    \"contents\": [{ \"parts\": [{ \"text\": \"A futuristic city skyline at dusk, neon lights\" }] }],\n    \"generationConfig\": {\n      \"responseModalities\": [\"TEXT\", \"IMAGE\"],\n      \"temperature\": 0.7,\n      \"topP\": 0.9,\n      \"maxOutputTokens\": 1024\n    }\n  }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Generation Docs\n\nSimple image editing\n\nTo edit an existing image, include it in the contents as inlineData (base64-encoded):\n\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINIAPIKEY\" \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n      \"contents\": [{\n        \"parts\":[\n            {\"text\": \"Replace the background with a starry night sky\"},\n            {\"inlinedata\": {\"mimetype\":\"image/jpeg\", \"data\": \"'$(base64 -w 0 cat.jpg)'\"}}\n        ]\n      }],\n      \"generationConfig\": {\"responseModalities\": [\"TEXT\", \"IMAGE\"]}\n    }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.pngCopy to clipboardErrorCopied\n\nImage Editing Docs\n\nEditing options\n\nEditing requests support:\n\n inlineData: Embed raw image bytes.\n fileData: Reference public URLs.\n All generationConfig options listed above.\n safetySettings: Per-request safety rules.\n Multi-turn edits by repeating contents in conversation history.\n\nCosts and optimization\n\nGemini 2.0 Flash Experimental uses token-based billing:\n\n Input (text/image/video): free tier, then $0.10 per 1M tokens.\n Output (text/image): free tier, then $0.40 per 1M tokens.\n Per-image flat cost for Pro models: $0.001315 /image (Gemini Developer API Pricing | Gemini API | Google AI for Developers, Solved: Re: Outdated Gemini Pro image pricing? By tile, or…).\n\nTo optimize:\n\n Use smaller image sizes by setting responseMimeType.\n Cache or reuse prompts with cachedContent.\n Lower candidateCount or temperature for fewer tokens.\n\nOpenAI gpt-image-1 Model for Image Generation and Editing\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nOpenAI’s GPT Image 1 (gpt-image-1) is a state-of-the-art multimodal model released on April 23, 2025, for high-fidelity image creation and editing.\n\n[](https://youtu.be/k-G71JZA75A)\n\nSimple image generation\n\nUse the Image Generations endpoint:\n\ncurl 'https://api.openai.com/v1/images/generations' \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"prompt\": \"A whimsical illustration of a cat playing chess\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }' > image.pngCopy to clipboardErrorCopied\n\n(Generate Image | OpenAI API - Postman)\n\nGeneration options\n\nAdjust these JSON parameters:\n\n model: gpt-image-1 (default).\n prompt: Text description.\n n: Number of images.\n size: 256x256, 512x512, or 1024x1024.\n responseformat: \"url\" (default) or \"b64json\".\n\n{\n  \"model\": \"gpt-image-1\",\n  \"prompt\": \"...\",\n  \"n\": 2,\n  \"size\": \"512x512\",\n  \"responseformat\": \"b64json\"\n}Copy to clipboardErrorCopied\n\nSimple image editing\n\nUse the Edits endpoint with an image and a mask:\n\ncurl https://api.openai.com/v1/images/edits \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"image\": \"data:image/png;base64,<BASE64IMAGE>\",\n    \"mask\": \"data:image/png;base64,<BASE64MASK>\",\n    \"prompt\": \"Add a rainbow in the sky above the mountains\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'Copy to clipboardErrorCopied\n\n(curl - What’s the correct URL to test OpenAI API? - Stack Overflow)\n\nEditing options\n\nEditing requests accept:\n\n image: Original image (base64 or URL).\n mask: PNG mask for inpainting.\n prompt: Instruction for the edit.\n n, size, responseformat as above.\n Optional user field for attribution.\n\nCosts and optimization\n\nGPT Image 1 pricing (per 1M tokens): text input $5, image input $10, image output $40. Rough per-image costs:\n\n Low quality: $0.02\n Medium quality: $0.07\n High quality: $0.19 (OpenAI’s GPT-Image-1 API — Create Stunning Images for Your Apps!, Usage of gpt-image-1 is priced per token, with … - Hacker News)\n\nTo optimize:\n\n Choose smaller sizes (256x256).\n Generate fewer images (n:1).\n Use responseformat:\"url\" to reduce payload.\n Cache frequent prompts or images.\n\nPrevious\n\nLLM Agents\n\nNext\n\nLLM Speech"
  },
  {
    "title": "LLM Agents",
    "filename": "LLM_Agents.md",
    "text": "LLM Agents: Building AI Systems That Can Think and Act\n-------------------------------------------------------------------------------------------------------------------------------\n\nLLM Agents are AI systems that can define and execute their own workflows to accomplish tasks. Unlike simple prompt-response patterns, agents make multiple LLM calls, use tools, and adapt their approach based on intermediate results. They represent a significant step toward more autonomous AI systems.\n\n[](https://youtu.be/DWUdGhRrv2c)\n\nWhat Makes an Agent?\n\nAn LLM agent consists of three core components:\n\n1. LLM Brain: Makes decisions about what to do next\n2. Tools: External capabilities the agent can use (e.g., web search, code execution)\n3. Memory: Retains context across multiple steps\n\nAgents operate through a loop:\n\n Observe the environment\n Think about what to do\n Take action using tools\n Observe results\n Repeat until task completion\n\nCommand-Line Agent Example\n\nWe’ve created a minimal command-line agent called llm-cmd-agent.py that:\n\n1. Takes a task description from the command line\n2. Generates code to accomplish the task\n3. Automatically extracts and executes the code\n4. Passes the results back to the LLM\n5. Provides a final answer or tries again if the execution fails\n\nHere’s how it works:\n\nuv run llm-cmd-agent.py \"list all Python files under the current directory, recursively, by size\"\nuv run llm-cmd-agent.py \"convert the largest Markdown file to HTML\"Copy to clipboardErrorCopied\n\nThe agent will:\n\n1. Generate a shell script to list files with their sizes\n2. Execute the script in a subprocess\n3. Capture the output (stdout and stderr)\n4. Pass the output back to the LLM for interpretation\n5. Present a final answer to the user\n\nUnder the hood, the agent follows this workflow:\n\n1. Initial prompt to generate a shell script\n2. Code extraction from the LLM response\n3. Code execution in a subprocess\n4. Result interpretation by the LLM\n5. Error handling and retry logic if needed\n\nThis demonstrates the core agent loop of:\n\n Planning (generating code)\n Execution (running the code)\n Reflection (interpreting results)\n Adaptation (fixing errors if needed)\n\nAgent Architectures\n\nDifferent agent architectures exist for different use cases:\n\n1. ReAct (Reasoning + Acting): Interleaves reasoning steps with actions\n2. Reflexion: Adds self-reflection to improve reasoning\n3. MRKL (Modular Reasoning, Knowledge and Language): Combines neural and symbolic modules\n4. Plan-and-Execute: Creates a plan first, then executes steps\n\nReal-World Applications\n\nLLM agents can be applied to various domains:\n\n1. Research assistants that search, summarize, and synthesize information\n2. Coding assistants that write, debug, and explain code\n3. Data analysis agents that clean, visualize, and interpret data\n4. Customer service agents that handle queries and perform actions\n5. Personal assistants that manage schedules, emails, and tasks\n\nProject Ideas\n\nHere are some practical agent projects you could build:\n\n1. Study buddy agent: Helps create flashcards, generates practice questions, and explains concepts\n2. Job application assistant: Searches job listings, tailors resumes, and prepares interview responses\n3. Personal finance agent: Categorizes expenses, suggests budgets, and identifies savings opportunities\n4. Health and fitness coach: Creates workout plans, tracks nutrition, and provides motivation\n5. Course project helper: Breaks down assignments, suggests resources, and reviews work\n\nBest Practices\n\n1. Clear instructions: Define the agent’s capabilities and limitations\n2. Effective tool design: Create tools that are specific and reliable\n3. Robust error handling: Agents should recover gracefully from failures\n4. Memory management: Balance context retention with token efficiency\n5. User feedback: Allow users to correct or guide the agent\n\nLimitations and Challenges\n\nCurrent LLM agents face several challenges:\n\n1. Hallucination: Agents may generate false information or tool calls\n2. Planning limitations: Complex tasks require better planning capabilities\n3. Tool integration complexity: Each new tool adds implementation overhead\n4. Context window constraints: Limited memory for long-running tasks\n5. Security concerns: Tool access requires careful permission management\n\nPrevious\n\nFunction Calling\n\nNext\n\nLLM Image Generation"
  },
  {
    "title": "LLM Agents",
    "filename": "LLM_Agents.md",
    "text": "LLM Agents: Building AI Systems That Can Think and Act\n-------------------------------------------------------------------------------------------------------------------------------\n\nLLM Agents are AI systems that can define and execute their own workflows to accomplish tasks. Unlike simple prompt-response patterns, agents make multiple LLM calls, use tools, and adapt their approach based on intermediate results. They represent a significant step toward more autonomous AI systems.\n\n[](https://youtu.be/DWUdGhRrv2c)\n\nWhat Makes an Agent?\n\nAn LLM agent consists of three core components:\n\n1. LLM Brain: Makes decisions about what to do next\n2. Tools: External capabilities the agent can use (e.g., web search, code execution)\n3. Memory: Retains context across multiple steps\n\nAgents operate through a loop:\n\n Observe the environment\n Think about what to do\n Take action using tools\n Observe results\n Repeat until task completion\n\nCommand-Line Agent Example\n\nWe’ve created a minimal command-line agent called llm-cmd-agent.py that:\n\n1. Takes a task description from the command line\n2. Generates code to accomplish the task\n3. Automatically extracts and executes the code\n4. Passes the results back to the LLM\n5. Provides a final answer or tries again if the execution fails\n\nHere’s how it works:\n\nuv run llm-cmd-agent.py \"list all Python files under the current directory, recursively, by size\"\nuv run llm-cmd-agent.py \"convert the largest Markdown file to HTML\"Copy to clipboardErrorCopied\n\nThe agent will:\n\n1. Generate a shell script to list files with their sizes\n2. Execute the script in a subprocess\n3. Capture the output (stdout and stderr)\n4. Pass the output back to the LLM for interpretation\n5. Present a final answer to the user\n\nUnder the hood, the agent follows this workflow:\n\n1. Initial prompt to generate a shell script\n2. Code extraction from the LLM response\n3. Code execution in a subprocess\n4. Result interpretation by the LLM\n5. Error handling and retry logic if needed\n\nThis demonstrates the core agent loop of:\n\n Planning (generating code)\n Execution (running the code)\n Reflection (interpreting results)\n Adaptation (fixing errors if needed)\n\nAgent Architectures\n\nDifferent agent architectures exist for different use cases:\n\n1. ReAct (Reasoning + Acting): Interleaves reasoning steps with actions\n2. Reflexion: Adds self-reflection to improve reasoning\n3. MRKL (Modular Reasoning, Knowledge and Language): Combines neural and symbolic modules\n4. Plan-and-Execute: Creates a plan first, then executes steps\n\nReal-World Applications\n\nLLM agents can be applied to various domains:\n\n1. Research assistants that search, summarize, and synthesize information\n2. Coding assistants that write, debug, and explain code\n3. Data analysis agents that clean, visualize, and interpret data\n4. Customer service agents that handle queries and perform actions\n5. Personal assistants that manage schedules, emails, and tasks\n\nProject Ideas\n\nHere are some practical agent projects you could build:\n\n1. Study buddy agent: Helps create flashcards, generates practice questions, and explains concepts\n2. Job application assistant: Searches job listings, tailors resumes, and prepares interview responses\n3. Personal finance agent: Categorizes expenses, suggests budgets, and identifies savings opportunities\n4. Health and fitness coach: Creates workout plans, tracks nutrition, and provides motivation\n5. Course project helper: Breaks down assignments, suggests resources, and reviews work\n\nBest Practices\n\n1. Clear instructions: Define the agent’s capabilities and limitations\n2. Effective tool design: Create tools that are specific and reliable\n3. Robust error handling: Agents should recover gracefully from failures\n4. Memory management: Balance context retention with token efficiency\n5. User feedback: Allow users to correct or guide the agent\n\nLimitations and Challenges\n\nCurrent LLM agents face several challenges:\n\n1. Hallucination: Agents may generate false information or tool calls\n2. Planning limitations: Complex tasks require better planning capabilities\n3. Tool integration complexity: Each new tool adds implementation overhead\n4. Context window constraints: Limited memory for long-running tasks\n5. Security concerns: Tool access requires careful permission management\n\nPrevious\n\nFunction Calling\n\nNext\n\nLLM Image Generation"
  },
  {
    "title": "LLM Agents",
    "filename": "LLM_Agents.md",
    "text": "LLM Agents: Building AI Systems That Can Think and Act\n-------------------------------------------------------------------------------------------------------------------------------\n\nLLM Agents are AI systems that can define and execute their own workflows to accomplish tasks. Unlike simple prompt-response patterns, agents make multiple LLM calls, use tools, and adapt their approach based on intermediate results. They represent a significant step toward more autonomous AI systems.\n\n[](https://youtu.be/DWUdGhRrv2c)\n\nWhat Makes an Agent?\n\nAn LLM agent consists of three core components:\n\n1. LLM Brain: Makes decisions about what to do next\n2. Tools: External capabilities the agent can use (e.g., web search, code execution)\n3. Memory: Retains context across multiple steps\n\nAgents operate through a loop:\n\n Observe the environment\n Think about what to do\n Take action using tools\n Observe results\n Repeat until task completion\n\nCommand-Line Agent Example\n\nWe’ve created a minimal command-line agent called llm-cmd-agent.py that:\n\n1. Takes a task description from the command line\n2. Generates code to accomplish the task\n3. Automatically extracts and executes the code\n4. Passes the results back to the LLM\n5. Provides a final answer or tries again if the execution fails\n\nHere’s how it works:\n\nuv run llm-cmd-agent.py \"list all Python files under the current directory, recursively, by size\"\nuv run llm-cmd-agent.py \"convert the largest Markdown file to HTML\"Copy to clipboardErrorCopied\n\nThe agent will:\n\n1. Generate a shell script to list files with their sizes\n2. Execute the script in a subprocess\n3. Capture the output (stdout and stderr)\n4. Pass the output back to the LLM for interpretation\n5. Present a final answer to the user\n\nUnder the hood, the agent follows this workflow:\n\n1. Initial prompt to generate a shell script\n2. Code extraction from the LLM response\n3. Code execution in a subprocess\n4. Result interpretation by the LLM\n5. Error handling and retry logic if needed\n\nThis demonstrates the core agent loop of:\n\n Planning (generating code)\n Execution (running the code)\n Reflection (interpreting results)\n Adaptation (fixing errors if needed)\n\nAgent Architectures\n\nDifferent agent architectures exist for different use cases:\n\n1. ReAct (Reasoning + Acting): Interleaves reasoning steps with actions\n2. Reflexion: Adds self-reflection to improve reasoning\n3. MRKL (Modular Reasoning, Knowledge and Language): Combines neural and symbolic modules\n4. Plan-and-Execute: Creates a plan first, then executes steps\n\nReal-World Applications\n\nLLM agents can be applied to various domains:\n\n1. Research assistants that search, summarize, and synthesize information\n2. Coding assistants that write, debug, and explain code\n3. Data analysis agents that clean, visualize, and interpret data\n4. Customer service agents that handle queries and perform actions\n5. Personal assistants that manage schedules, emails, and tasks\n\nProject Ideas\n\nHere are some practical agent projects you could build:\n\n1. Study buddy agent: Helps create flashcards, generates practice questions, and explains concepts\n2. Job application assistant: Searches job listings, tailors resumes, and prepares interview responses\n3. Personal finance agent: Categorizes expenses, suggests budgets, and identifies savings opportunities\n4. Health and fitness coach: Creates workout plans, tracks nutrition, and provides motivation\n5. Course project helper: Breaks down assignments, suggests resources, and reviews work\n\nBest Practices\n\n1. Clear instructions: Define the agent’s capabilities and limitations\n2. Effective tool design: Create tools that are specific and reliable\n3. Robust error handling: Agents should recover gracefully from failures\n4. Memory management: Balance context retention with token efficiency\n5. User feedback: Allow users to correct or guide the agent\n\nLimitations and Challenges\n\nCurrent LLM agents face several challenges:\n\n1. Hallucination: Agents may generate false information or tool calls\n2. Planning limitations: Complex tasks require better planning capabilities\n3. Tool integration complexity: Each new tool adds implementation overhead\n4. Context window constraints: Limited memory for long-running tasks\n5. Security concerns: Tool access requires careful permission management\n\nPrevious\n\nFunction Calling\n\nNext\n\nLLM Image Generation"
  },
  {
    "title": "LLM Agents",
    "filename": "LLM_Agents.md",
    "text": "LLM Agents: Building AI Systems That Can Think and Act\n-------------------------------------------------------------------------------------------------------------------------------\n\nLLM Agents are AI systems that can define and execute their own workflows to accomplish tasks. Unlike simple prompt-response patterns, agents make multiple LLM calls, use tools, and adapt their approach based on intermediate results. They represent a significant step toward more autonomous AI systems.\n\n[](https://youtu.be/DWUdGhRrv2c)\n\nWhat Makes an Agent?\n\nAn LLM agent consists of three core components:\n\n1. LLM Brain: Makes decisions about what to do next\n2. Tools: External capabilities the agent can use (e.g., web search, code execution)\n3. Memory: Retains context across multiple steps\n\nAgents operate through a loop:\n\n Observe the environment\n Think about what to do\n Take action using tools\n Observe results\n Repeat until task completion\n\nCommand-Line Agent Example\n\nWe’ve created a minimal command-line agent called llm-cmd-agent.py that:\n\n1. Takes a task description from the command line\n2. Generates code to accomplish the task\n3. Automatically extracts and executes the code\n4. Passes the results back to the LLM\n5. Provides a final answer or tries again if the execution fails\n\nHere’s how it works:\n\nuv run llm-cmd-agent.py \"list all Python files under the current directory, recursively, by size\"\nuv run llm-cmd-agent.py \"convert the largest Markdown file to HTML\"Copy to clipboardErrorCopied\n\nThe agent will:\n\n1. Generate a shell script to list files with their sizes\n2. Execute the script in a subprocess\n3. Capture the output (stdout and stderr)\n4. Pass the output back to the LLM for interpretation\n5. Present a final answer to the user\n\nUnder the hood, the agent follows this workflow:\n\n1. Initial prompt to generate a shell script\n2. Code extraction from the LLM response\n3. Code execution in a subprocess\n4. Result interpretation by the LLM\n5. Error handling and retry logic if needed\n\nThis demonstrates the core agent loop of:\n\n Planning (generating code)\n Execution (running the code)\n Reflection (interpreting results)\n Adaptation (fixing errors if needed)\n\nAgent Architectures\n\nDifferent agent architectures exist for different use cases:\n\n1. ReAct (Reasoning + Acting): Interleaves reasoning steps with actions\n2. Reflexion: Adds self-reflection to improve reasoning\n3. MRKL (Modular Reasoning, Knowledge and Language): Combines neural and symbolic modules\n4. Plan-and-Execute: Creates a plan first, then executes steps\n\nReal-World Applications\n\nLLM agents can be applied to various domains:\n\n1. Research assistants that search, summarize, and synthesize information\n2. Coding assistants that write, debug, and explain code\n3. Data analysis agents that clean, visualize, and interpret data\n4. Customer service agents that handle queries and perform actions\n5. Personal assistants that manage schedules, emails, and tasks\n\nProject Ideas\n\nHere are some practical agent projects you could build:\n\n1. Study buddy agent: Helps create flashcards, generates practice questions, and explains concepts\n2. Job application assistant: Searches job listings, tailors resumes, and prepares interview responses\n3. Personal finance agent: Categorizes expenses, suggests budgets, and identifies savings opportunities\n4. Health and fitness coach: Creates workout plans, tracks nutrition, and provides motivation\n5. Course project helper: Breaks down assignments, suggests resources, and reviews work\n\nBest Practices\n\n1. Clear instructions: Define the agent’s capabilities and limitations\n2. Effective tool design: Create tools that are specific and reliable\n3. Robust error handling: Agents should recover gracefully from failures\n4. Memory management: Balance context retention with token efficiency\n5. User feedback: Allow users to correct or guide the agent\n\nLimitations and Challenges\n\nCurrent LLM agents face several challenges:\n\n1. Hallucination: Agents may generate false information or tool calls\n2. Planning limitations: Complex tasks require better planning capabilities\n3. Tool integration complexity: Each new tool adds implementation overhead\n4. Context window constraints: Limited memory for long-running tasks\n5. Security concerns: Tool access requires careful permission management\n\nPrevious\n\nFunction Calling\n\nNext\n\nLLM Image Generation"
  },
  {
    "title": "LLM Agents",
    "filename": "LLM_Agents.md",
    "text": "LLM Agents: Building AI Systems That Can Think and Act\n-------------------------------------------------------------------------------------------------------------------------------\n\nLLM Agents are AI systems that can define and execute their own workflows to accomplish tasks. Unlike simple prompt-response patterns, agents make multiple LLM calls, use tools, and adapt their approach based on intermediate results. They represent a significant step toward more autonomous AI systems.\n\n[](https://youtu.be/DWUdGhRrv2c)\n\nWhat Makes an Agent?\n\nAn LLM agent consists of three core components:\n\n1. LLM Brain: Makes decisions about what to do next\n2. Tools: External capabilities the agent can use (e.g., web search, code execution)\n3. Memory: Retains context across multiple steps\n\nAgents operate through a loop:\n\n Observe the environment\n Think about what to do\n Take action using tools\n Observe results\n Repeat until task completion\n\nCommand-Line Agent Example\n\nWe’ve created a minimal command-line agent called llm-cmd-agent.py that:\n\n1. Takes a task description from the command line\n2. Generates code to accomplish the task\n3. Automatically extracts and executes the code\n4. Passes the results back to the LLM\n5. Provides a final answer or tries again if the execution fails\n\nHere’s how it works:\n\nuv run llm-cmd-agent.py \"list all Python files under the current directory, recursively, by size\"\nuv run llm-cmd-agent.py \"convert the largest Markdown file to HTML\"Copy to clipboardErrorCopied\n\nThe agent will:\n\n1. Generate a shell script to list files with their sizes\n2. Execute the script in a subprocess\n3. Capture the output (stdout and stderr)\n4. Pass the output back to the LLM for interpretation\n5. Present a final answer to the user\n\nUnder the hood, the agent follows this workflow:\n\n1. Initial prompt to generate a shell script\n2. Code extraction from the LLM response\n3. Code execution in a subprocess\n4. Result interpretation by the LLM\n5. Error handling and retry logic if needed\n\nThis demonstrates the core agent loop of:\n\n Planning (generating code)\n Execution (running the code)\n Reflection (interpreting results)\n Adaptation (fixing errors if needed)\n\nAgent Architectures\n\nDifferent agent architectures exist for different use cases:\n\n1. ReAct (Reasoning + Acting): Interleaves reasoning steps with actions\n2. Reflexion: Adds self-reflection to improve reasoning\n3. MRKL (Modular Reasoning, Knowledge and Language): Combines neural and symbolic modules\n4. Plan-and-Execute: Creates a plan first, then executes steps\n\nReal-World Applications\n\nLLM agents can be applied to various domains:\n\n1. Research assistants that search, summarize, and synthesize information\n2. Coding assistants that write, debug, and explain code\n3. Data analysis agents that clean, visualize, and interpret data\n4. Customer service agents that handle queries and perform actions\n5. Personal assistants that manage schedules, emails, and tasks\n\nProject Ideas\n\nHere are some practical agent projects you could build:\n\n1. Study buddy agent: Helps create flashcards, generates practice questions, and explains concepts\n2. Job application assistant: Searches job listings, tailors resumes, and prepares interview responses\n3. Personal finance agent: Categorizes expenses, suggests budgets, and identifies savings opportunities\n4. Health and fitness coach: Creates workout plans, tracks nutrition, and provides motivation\n5. Course project helper: Breaks down assignments, suggests resources, and reviews work\n\nBest Practices\n\n1. Clear instructions: Define the agent’s capabilities and limitations\n2. Effective tool design: Create tools that are specific and reliable\n3. Robust error handling: Agents should recover gracefully from failures\n4. Memory management: Balance context retention with token efficiency\n5. User feedback: Allow users to correct or guide the agent\n\nLimitations and Challenges\n\nCurrent LLM agents face several challenges:\n\n1. Hallucination: Agents may generate false information or tool calls\n2. Planning limitations: Complex tasks require better planning capabilities\n3. Tool integration complexity: Each new tool adds implementation overhead\n4. Context window constraints: Limited memory for long-running tasks\n5. Security concerns: Tool access requires careful permission management\n\nPrevious\n\nFunction Calling\n\nNext\n\nLLM Image Generation"
  },
  {
    "title": "Hybrid RAG with TypeSense",
    "filename": "Hybrid_RAG_with_TypeSense.md",
    "text": "Hybrid Retrieval Augmented Generation (Hybrid RAG) with TypeSense\n--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nHybrid RAG combines semantic (vector) search with traditional keyword search to improve retrieval accuracy and relevance. By mixing exact text matches with embedding-based similarity, you get the best of both worlds: precision when keywords are present, and semantic recall when phrasing varies. TypeSense makes this easy with built-in hybrid search and automatic embedding generation.\n\nBelow is a fully self-contained Hybrid RAG tutorial using TypeSense, Python, and the command line.\n\nInstall and run TypeSense\n\nInstall TypeSense.\n\nmkdir typesense-data\n\ndocker run -p 8108:8108 \\\n  -v typesense-data:/data typesense/typesense:28.0 \\\n  --data-dir /data \\\n  --api-key=secret-key \\\n  --enable-corsCopy to clipboardErrorCopied\n\n docker run: spins up a containerized TypeSense server on port 8108\n  + -p 8108:8108 maps host port to container port.\n  + -v typesense-data:/data mounts a Docker volume for persistence.\n  + --data-dir /data points TypeSense at that volume.\n  + --api-key=secret-key secures your API.\n  + --enable-cors allows browser-based requests.\n\nExpected output:\n\n Docker logs showing TypeSense startup messages, such as Started Typesense API server.\n Listening on http://0.0.0.0:8108.\n\nEmbed and import documents into TypeSense\n\nFollow the steps in the RAG with the CLI tutorial to create a chunks.json that has one {id, content} JSON object per line.\n\nTypeSense supports automatic embedding of documents. We’ll use that capability.\n\nSave the following as addnotes.py and run it with uv run addnotes.py.\n\n/// script\nrequires-python = \">=3.13\"\ndependencies = [\"httpx\"]\n///\nimport json\nimport httpx\nimport os\n\nheaders = {\"X-TYPESENSE-API-KEY\": \"secret-key\"}\n\nschema = {\n    \"name\": \"notes\",\n    \"fields\": [\n        {\"name\": \"id\", \"type\": \"string\", \"facet\": False},\n        {\"name\": \"content\", \"type\": \"string\", \"facet\": False},\n        {\n            \"name\": \"embedding\",\n            \"type\": \"float[]\",\n            \"embed\": {\n                \"from\": [\"content\"],\n                \"modelconfig\": {\n                    \"modelname\": \"openai/text-embedding-3-small\",\n                    \"apikey\": os.getenv(\"OPENAIAPIKEY\"),\n                },\n            },\n        },\n    ],\n}\n\nwith open(\"chunks.json\", \"r\") as f:\n    chunks = [json.loads(line) for line in f.readlines()]\n\nwith httpx.Client() as client:\n     Create the collection\n    if client.get(f\"http://localhost:8108/collections/notes\", headers=headers).statuscode == 404:\n        r = client.post(\"http://localhost:8108/collections\", json=schema, headers=headers)\n\n     Embed the chunks\n    result = client.post(\n        \"http://localhost:8108/collections/notes/documents/import?action=emplace\",\n        headers={headers, \"Content-Type\": \"text/plain\"},\n        data=\"\\n\".join(json.dumps(chunk) for chunk in chunks),\n    )\n    print(result.text)Copy to clipboardErrorCopied\n\n httpx.Client: an HTTP client for Python.\n Collection schema: id and content fields plus an embedding field with auto-generated embeddings from OpenAI.\n Auto-embedding: the embed block instructs TypeSense to call the specified model for each document.\n GET /collections/notes: checks existence.\n POST /collections: creates the collection.\n POST /collections/notes/documents/import?action=emplace: bulk upsert documents, embedding them on the fly.\n\nExpected output:\n\n A JSON summary string like {\"success\": X, \"failed\": 0} indicating how many docs were imported.\n (On timeouts, re-run until all chunks are processed.)\n\n4. Run a hybrid search and answer a question\n\nNow, we can use a single curl against the Multi-Search endpoint to combine keyword and vector search as a hybrid search:\n\nQ=\"What does the author affectionately call the => syntax?\"\n\npayload=$(jq -n --arg coll \"notes\" --arg q \"$Q\" \\\n  '{\n     searches: [\n       {\n         collection: $coll,\n         q:           $q,\n         queryby:    \"content,embedding\",\n         sortby:     \"textmatch:desc\",\n         prefix:      false,\n         excludefields: \"embedding\"\n       }\n     ]\n   }'\n)\ncurl -s 'http://localhost:8108/multisearch' \\\n  -H \"X-TYPESENSE-API-KEY: secret-key\" \\\n  -d \"$payload\" \\\n  | jq -r '.results[].hits[].document.content' \\\n  | llm -s \"${Q} - \\$Answer ONLY from these notes. Cite verbatim from the notes.\" \\\n  | uvx streamdownCopy to clipboardErrorCopied\n\n queryby: \"content,embedding\": tells TypeSense to score by both keyword and vector similarity.\n sortby: \"textmatch:desc\": boosts exact text hits.\n excludefields: \"embedding\": keeps responses lightweight.\n curl -d: posts the search request.\n jq -r: extracts each hit’s content. See jq manual\n llm -s and uvx streamdown: generate and stream a grounded answer.\n\nExpected output:\n\n The raw matched snippets printed first.\n Then a concise, streamed LLM answer citing the note verbatim.\n\nPrevious\n\nRAG with the CLI)\n\nNext\n\nFunction Calling"
  },
  {
    "title": "Hybrid RAG with TypeSense",
    "filename": "Hybrid_RAG_with_TypeSense.md",
    "text": "Hybrid Retrieval Augmented Generation (Hybrid RAG) with TypeSense\n--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nHybrid RAG combines semantic (vector) search with traditional keyword search to improve retrieval accuracy and relevance. By mixing exact text matches with embedding-based similarity, you get the best of both worlds: precision when keywords are present, and semantic recall when phrasing varies. TypeSense makes this easy with built-in hybrid search and automatic embedding generation.\n\nBelow is a fully self-contained Hybrid RAG tutorial using TypeSense, Python, and the command line.\n\nInstall and run TypeSense\n\nInstall TypeSense.\n\nmkdir typesense-data\n\ndocker run -p 8108:8108 \\\n  -v typesense-data:/data typesense/typesense:28.0 \\\n  --data-dir /data \\\n  --api-key=secret-key \\\n  --enable-corsCopy to clipboardErrorCopied\n\n docker run: spins up a containerized TypeSense server on port 8108\n  + -p 8108:8108 maps host port to container port.\n  + -v typesense-data:/data mounts a Docker volume for persistence.\n  + --data-dir /data points TypeSense at that volume.\n  + --api-key=secret-key secures your API.\n  + --enable-cors allows browser-based requests.\n\nExpected output:\n\n Docker logs showing TypeSense startup messages, such as Started Typesense API server.\n Listening on http://0.0.0.0:8108.\n\nEmbed and import documents into TypeSense\n\nFollow the steps in the RAG with the CLI tutorial to create a chunks.json that has one {id, content} JSON object per line.\n\nTypeSense supports automatic embedding of documents. We’ll use that capability.\n\nSave the following as addnotes.py and run it with uv run addnotes.py.\n\n/// script\nrequires-python = \">=3.13\"\ndependencies = [\"httpx\"]\n///\nimport json\nimport httpx\nimport os\n\nheaders = {\"X-TYPESENSE-API-KEY\": \"secret-key\"}\n\nschema = {\n    \"name\": \"notes\",\n    \"fields\": [\n        {\"name\": \"id\", \"type\": \"string\", \"facet\": False},\n        {\"name\": \"content\", \"type\": \"string\", \"facet\": False},\n        {\n            \"name\": \"embedding\",\n            \"type\": \"float[]\",\n            \"embed\": {\n                \"from\": [\"content\"],\n                \"modelconfig\": {\n                    \"modelname\": \"openai/text-embedding-3-small\",\n                    \"apikey\": os.getenv(\"OPENAIAPIKEY\"),\n                },\n            },\n        },\n    ],\n}\n\nwith open(\"chunks.json\", \"r\") as f:\n    chunks = [json.loads(line) for line in f.readlines()]\n\nwith httpx.Client() as client:\n     Create the collection\n    if client.get(f\"http://localhost:8108/collections/notes\", headers=headers).statuscode == 404:\n        r = client.post(\"http://localhost:8108/collections\", json=schema, headers=headers)\n\n     Embed the chunks\n    result = client.post(\n        \"http://localhost:8108/collections/notes/documents/import?action=emplace\",\n        headers={headers, \"Content-Type\": \"text/plain\"},\n        data=\"\\n\".join(json.dumps(chunk) for chunk in chunks),\n    )\n    print(result.text)Copy to clipboardErrorCopied\n\n httpx.Client: an HTTP client for Python.\n Collection schema: id and content fields plus an embedding field with auto-generated embeddings from OpenAI.\n Auto-embedding: the embed block instructs TypeSense to call the specified model for each document.\n GET /collections/notes: checks existence.\n POST /collections: creates the collection.\n POST /collections/notes/documents/import?action=emplace: bulk upsert documents, embedding them on the fly.\n\nExpected output:\n\n A JSON summary string like {\"success\": X, \"failed\": 0} indicating how many docs were imported.\n (On timeouts, re-run until all chunks are processed.)\n\n4. Run a hybrid search and answer a question\n\nNow, we can use a single curl against the Multi-Search endpoint to combine keyword and vector search as a hybrid search:\n\nQ=\"What does the author affectionately call the => syntax?\"\n\npayload=$(jq -n --arg coll \"notes\" --arg q \"$Q\" \\\n  '{\n     searches: [\n       {\n         collection: $coll,\n         q:           $q,\n         queryby:    \"content,embedding\",\n         sortby:     \"textmatch:desc\",\n         prefix:      false,\n         excludefields: \"embedding\"\n       }\n     ]\n   }'\n)\ncurl -s 'http://localhost:8108/multisearch' \\\n  -H \"X-TYPESENSE-API-KEY: secret-key\" \\\n  -d \"$payload\" \\\n  | jq -r '.results[].hits[].document.content' \\\n  | llm -s \"${Q} - \\$Answer ONLY from these notes. Cite verbatim from the notes.\" \\\n  | uvx streamdownCopy to clipboardErrorCopied\n\n queryby: \"content,embedding\": tells TypeSense to score by both keyword and vector similarity.\n sortby: \"textmatch:desc\": boosts exact text hits.\n excludefields: \"embedding\": keeps responses lightweight.\n curl -d: posts the search request.\n jq -r: extracts each hit’s content. See jq manual\n llm -s and uvx streamdown: generate and stream a grounded answer.\n\nExpected output:\n\n The raw matched snippets printed first.\n Then a concise, streamed LLM answer citing the note verbatim.\n\nPrevious\n\nRAG with the CLI)\n\nNext\n\nFunction Calling"
  },
  {
    "title": "Hybrid RAG with TypeSense",
    "filename": "Hybrid_RAG_with_TypeSense.md",
    "text": "Hybrid Retrieval Augmented Generation (Hybrid RAG) with TypeSense\n--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nHybrid RAG combines semantic (vector) search with traditional keyword search to improve retrieval accuracy and relevance. By mixing exact text matches with embedding-based similarity, you get the best of both worlds: precision when keywords are present, and semantic recall when phrasing varies. TypeSense makes this easy with built-in hybrid search and automatic embedding generation.\n\nBelow is a fully self-contained Hybrid RAG tutorial using TypeSense, Python, and the command line.\n\nInstall and run TypeSense\n\nInstall TypeSense.\n\nmkdir typesense-data\n\ndocker run -p 8108:8108 \\\n  -v typesense-data:/data typesense/typesense:28.0 \\\n  --data-dir /data \\\n  --api-key=secret-key \\\n  --enable-corsCopy to clipboardErrorCopied\n\n docker run: spins up a containerized TypeSense server on port 8108\n  + -p 8108:8108 maps host port to container port.\n  + -v typesense-data:/data mounts a Docker volume for persistence.\n  + --data-dir /data points TypeSense at that volume.\n  + --api-key=secret-key secures your API.\n  + --enable-cors allows browser-based requests.\n\nExpected output:\n\n Docker logs showing TypeSense startup messages, such as Started Typesense API server.\n Listening on http://0.0.0.0:8108.\n\nEmbed and import documents into TypeSense\n\nFollow the steps in the RAG with the CLI tutorial to create a chunks.json that has one {id, content} JSON object per line.\n\nTypeSense supports automatic embedding of documents. We’ll use that capability.\n\nSave the following as addnotes.py and run it with uv run addnotes.py.\n\n/// script\nrequires-python = \">=3.13\"\ndependencies = [\"httpx\"]\n///\nimport json\nimport httpx\nimport os\n\nheaders = {\"X-TYPESENSE-API-KEY\": \"secret-key\"}\n\nschema = {\n    \"name\": \"notes\",\n    \"fields\": [\n        {\"name\": \"id\", \"type\": \"string\", \"facet\": False},\n        {\"name\": \"content\", \"type\": \"string\", \"facet\": False},\n        {\n            \"name\": \"embedding\",\n            \"type\": \"float[]\",\n            \"embed\": {\n                \"from\": [\"content\"],\n                \"modelconfig\": {\n                    \"modelname\": \"openai/text-embedding-3-small\",\n                    \"apikey\": os.getenv(\"OPENAIAPIKEY\"),\n                },\n            },\n        },\n    ],\n}\n\nwith open(\"chunks.json\", \"r\") as f:\n    chunks = [json.loads(line) for line in f.readlines()]\n\nwith httpx.Client() as client:\n     Create the collection\n    if client.get(f\"http://localhost:8108/collections/notes\", headers=headers).statuscode == 404:\n        r = client.post(\"http://localhost:8108/collections\", json=schema, headers=headers)\n\n     Embed the chunks\n    result = client.post(\n        \"http://localhost:8108/collections/notes/documents/import?action=emplace\",\n        headers={headers, \"Content-Type\": \"text/plain\"},\n        data=\"\\n\".join(json.dumps(chunk) for chunk in chunks),\n    )\n    print(result.text)Copy to clipboardErrorCopied\n\n httpx.Client: an HTTP client for Python.\n Collection schema: id and content fields plus an embedding field with auto-generated embeddings from OpenAI.\n Auto-embedding: the embed block instructs TypeSense to call the specified model for each document.\n GET /collections/notes: checks existence.\n POST /collections: creates the collection.\n POST /collections/notes/documents/import?action=emplace: bulk upsert documents, embedding them on the fly.\n\nExpected output:\n\n A JSON summary string like {\"success\": X, \"failed\": 0} indicating how many docs were imported.\n (On timeouts, re-run until all chunks are processed.)\n\n4. Run a hybrid search and answer a question\n\nNow, we can use a single curl against the Multi-Search endpoint to combine keyword and vector search as a hybrid search:\n\nQ=\"What does the author affectionately call the => syntax?\"\n\npayload=$(jq -n --arg coll \"notes\" --arg q \"$Q\" \\\n  '{\n     searches: [\n       {\n         collection: $coll,\n         q:           $q,\n         queryby:    \"content,embedding\",\n         sortby:     \"textmatch:desc\",\n         prefix:      false,\n         excludefields: \"embedding\"\n       }\n     ]\n   }'\n)\ncurl -s 'http://localhost:8108/multisearch' \\\n  -H \"X-TYPESENSE-API-KEY: secret-key\" \\\n  -d \"$payload\" \\\n  | jq -r '.results[].hits[].document.content' \\\n  | llm -s \"${Q} - \\$Answer ONLY from these notes. Cite verbatim from the notes.\" \\\n  | uvx streamdownCopy to clipboardErrorCopied\n\n queryby: \"content,embedding\": tells TypeSense to score by both keyword and vector similarity.\n sortby: \"textmatch:desc\": boosts exact text hits.\n excludefields: \"embedding\": keeps responses lightweight.\n curl -d: posts the search request.\n jq -r: extracts each hit’s content. See jq manual\n llm -s and uvx streamdown: generate and stream a grounded answer.\n\nExpected output:\n\n The raw matched snippets printed first.\n Then a concise, streamed LLM answer citing the note verbatim.\n\nPrevious\n\nRAG with the CLI)\n\nNext\n\nFunction Calling"
  },
  {
    "title": "RAG with the CLI)",
    "filename": "RAG_with_the_CLI).md",
    "text": "Retrieval Augmented Generation (RAG) with the CLI\n-----------------------------------------------------------------------------------------------------------------\n\nRetrieval Augmented Generation (RAG) combines retrieval (searching a knowledge base) with generation (using an LLM) to produce answers grounded in your own documents. Instead of relying solely on a general-purpose LLM, RAG lets you feed it the most relevant chunks from your corpus at query time, improving accuracy, reducing hallucinations, and allowing you to answer domain‑specific questions without fine‑tuning.\n\nIn particular, you can answer questions that are hard to answer with a keyword search. For example:\n\nQ=\"What does the author affectionately call the => syntax?\"\nAnswer: fat arrow\n\nQ=\"What lets you walk every child node of a ts.Node?\"\nAnswer: node.getChildren()\n\nQ=\"What are code pieces like comments and whitespace that aren’t in the AST called?\"\nAnswer: trivia\n\nQ=\"Which operator converts any value into an explicit boolean?\"\nAnswer: !!Copy to clipboardErrorCopied\n\nYou can implement RAG entirely from your terminal, without writing a single line of application code. Below is a step‑by‑step example using the TypeScript book as a data source.\n\n1. Clone the repository\n\ngit clone --depth 1 https://github.com/basarat/typescript-book\ncd typescript-bookCopy to clipboardErrorCopied\n\n --depth 1 fetches only the latest commit to minimize download size.\n cd typescript-book moves into the project folder.\n\nYou’ll now be in a new folder typescript-book containing the repo.\n\n2. Split Markdown files into chunks\n\n(\n  shopt -s globstar\n  for f in /.md; do\n    uvx --from splitmarkdown4gpt mdsplit4gpt \"$f\" --model gpt-4o --limit 4096 --separator \"===SPLIT===\" \\\n    | sed '1s/^/===SPLIT===\\n/' \\\n    | jq -R -s -c --arg file \"$f\" '\n      split(\"===SPLIT===\")[1:]\n      | toentries\n      | map({\n          id: ($file + \"\" + (.key | tostring)),\n          content: .value\n        })[]\n    '\n  done\n) | tee chunks.jsonCopy to clipboardErrorCopied\n\n shopt -s globstar: lets /.md match Markdown files in all subdirectories. bash shopt manual\n uvx --from splitmarkdown4gpt mdsplit4gpt: a tool that splits Markdown into LLM‑sized chunks:\n  + --model gpt-4o: uses GPT‑4o token limits\n  + --limit 4096: max tokens per chunk\n  + --separator \"===SPLIT===\": custom split marker\n sed '1s/^/===SPLIT===\\n/': ensures the very first chunk starts with the separator (GNU sed manual)\n jq -R -s -c --arg file \"$f\": uses jq to convert chunks to JSON\n  + -R: read raw input\n  + -s: slurp entire input into a single string\n  + -c: compact JSON output\n  + builds an array of objects {id, content}, where id is filenamechunkIndex\n tee chunks.json: writes the resulting JSON array to chunks.json while printing it to stdout.\n\nYou’ll now have a chunks.json that has one {id, content} JSON object per line.\n\n3. Generate embeddings\n\nllm embed-multi typescript-book --model 3-small --store --format nl chunks.jsonCopy to clipboardErrorCopied\n\n embed-multi: computes embeddings for each entry in chunks.json.\n typescript-book: a namespace or collection name for storage.\n --model 3-small: selects the embedding model.\n --store: save embeddings in the default backend.\n --format nl: input is newline‑delimited JSON. llm CLI embed-multi\n\nThis stores the embeddings in a collection called typescript-book.\n\nllm collections path   shows where the collections are stored\nllm collections delete typescript-book   deletes the typescript-book collectionCopy to clipboardErrorCopied\n\n4. Find similar topics\n\nllm similar typescript-book -n 3 -c \"What does the author affectionately call the => syntax?\"Copy to clipboardErrorCopied\n\nThis returns the 3 chunksmost similar to the question posed.\n\n similar: retrieves the top n most similar chunks from the embeddings store.\n -n 3: return three results.\n -c: the user’s query string.\n\n5. Answer a question using retrieved context\n\nQ=\"What does the author affectionately call the => syntax?\"\nllm similar typescript-book -n 3 -c \"$Q\" \\\n  | jq '.content' \\\n  | llm -s \"$Q - Answer ONLY from these notes. Cite verbatim from notes.\" \\\n  | uvx streamdownCopy to clipboardErrorCopied\n\nThis answers the question in natural language following these steps:\n\n1. Store the query in Q.\n2. Retrieve the top 3 matching chunks.\n3. jq '.content' extracts just the text snippets.\n4. Pipe into llm -s, instructing the model:\n    -s: stream a prompt directly to the LLM.\n    \"$Q - Answer ONLY from these notes. Cite verbatim from notes.\": ensures the response is grounded.\n5. uvx streamdown formats the streamed LLM output for easy reading.\n\nPrevious\n\nVector databases\n\nNext\n\nHybrid RAG with TypeSense"
  },
  {
    "title": "RAG with the CLI)",
    "filename": "RAG_with_the_CLI).md",
    "text": "Retrieval Augmented Generation (RAG) with the CLI\n-----------------------------------------------------------------------------------------------------------------\n\nRetrieval Augmented Generation (RAG) combines retrieval (searching a knowledge base) with generation (using an LLM) to produce answers grounded in your own documents. Instead of relying solely on a general-purpose LLM, RAG lets you feed it the most relevant chunks from your corpus at query time, improving accuracy, reducing hallucinations, and allowing you to answer domain‑specific questions without fine‑tuning.\n\nIn particular, you can answer questions that are hard to answer with a keyword search. For example:\n\nQ=\"What does the author affectionately call the => syntax?\"\nAnswer: fat arrow\n\nQ=\"What lets you walk every child node of a ts.Node?\"\nAnswer: node.getChildren()\n\nQ=\"What are code pieces like comments and whitespace that aren’t in the AST called?\"\nAnswer: trivia\n\nQ=\"Which operator converts any value into an explicit boolean?\"\nAnswer: !!Copy to clipboardErrorCopied\n\nYou can implement RAG entirely from your terminal, without writing a single line of application code. Below is a step‑by‑step example using the TypeScript book as a data source.\n\n1. Clone the repository\n\ngit clone --depth 1 https://github.com/basarat/typescript-book\ncd typescript-bookCopy to clipboardErrorCopied\n\n --depth 1 fetches only the latest commit to minimize download size.\n cd typescript-book moves into the project folder.\n\nYou’ll now be in a new folder typescript-book containing the repo.\n\n2. Split Markdown files into chunks\n\n(\n  shopt -s globstar\n  for f in /.md; do\n    uvx --from splitmarkdown4gpt mdsplit4gpt \"$f\" --model gpt-4o --limit 4096 --separator \"===SPLIT===\" \\\n    | sed '1s/^/===SPLIT===\\n/' \\\n    | jq -R -s -c --arg file \"$f\" '\n      split(\"===SPLIT===\")[1:]\n      | toentries\n      | map({\n          id: ($file + \"\" + (.key | tostring)),\n          content: .value\n        })[]\n    '\n  done\n) | tee chunks.jsonCopy to clipboardErrorCopied\n\n shopt -s globstar: lets /.md match Markdown files in all subdirectories. bash shopt manual\n uvx --from splitmarkdown4gpt mdsplit4gpt: a tool that splits Markdown into LLM‑sized chunks:\n  + --model gpt-4o: uses GPT‑4o token limits\n  + --limit 4096: max tokens per chunk\n  + --separator \"===SPLIT===\": custom split marker\n sed '1s/^/===SPLIT===\\n/': ensures the very first chunk starts with the separator (GNU sed manual)\n jq -R -s -c --arg file \"$f\": uses jq to convert chunks to JSON\n  + -R: read raw input\n  + -s: slurp entire input into a single string\n  + -c: compact JSON output\n  + builds an array of objects {id, content}, where id is filenamechunkIndex\n tee chunks.json: writes the resulting JSON array to chunks.json while printing it to stdout.\n\nYou’ll now have a chunks.json that has one {id, content} JSON object per line.\n\n3. Generate embeddings\n\nllm embed-multi typescript-book --model 3-small --store --format nl chunks.jsonCopy to clipboardErrorCopied\n\n embed-multi: computes embeddings for each entry in chunks.json.\n typescript-book: a namespace or collection name for storage.\n --model 3-small: selects the embedding model.\n --store: save embeddings in the default backend.\n --format nl: input is newline‑delimited JSON. llm CLI embed-multi\n\nThis stores the embeddings in a collection called typescript-book.\n\nllm collections path   shows where the collections are stored\nllm collections delete typescript-book   deletes the typescript-book collectionCopy to clipboardErrorCopied\n\n4. Find similar topics\n\nllm similar typescript-book -n 3 -c \"What does the author affectionately call the => syntax?\"Copy to clipboardErrorCopied\n\nThis returns the 3 chunksmost similar to the question posed.\n\n similar: retrieves the top n most similar chunks from the embeddings store.\n -n 3: return three results.\n -c: the user’s query string.\n\n5. Answer a question using retrieved context\n\nQ=\"What does the author affectionately call the => syntax?\"\nllm similar typescript-book -n 3 -c \"$Q\" \\\n  | jq '.content' \\\n  | llm -s \"$Q - Answer ONLY from these notes. Cite verbatim from notes.\" \\\n  | uvx streamdownCopy to clipboardErrorCopied\n\nThis answers the question in natural language following these steps:\n\n1. Store the query in Q.\n2. Retrieve the top 3 matching chunks.\n3. jq '.content' extracts just the text snippets.\n4. Pipe into llm -s, instructing the model:\n    -s: stream a prompt directly to the LLM.\n    \"$Q - Answer ONLY from these notes. Cite verbatim from notes.\": ensures the response is grounded.\n5. uvx streamdown formats the streamed LLM output for easy reading.\n\nPrevious\n\nVector databases\n\nNext\n\nHybrid RAG with TypeSense"
  },
  {
    "title": "Web Framework: FastAPI",
    "filename": "Web_Framework__FastAPI.md",
    "text": "Web Framework: FastAPI\n------------------------------------------------------------\n\nFastAPI is a modern Python web framework for building APIs with automatic interactive documentation. It’s fast, easy to use, and designed for building production-ready REST APIs.\n\nHere’s a minimal FastAPI app, app.py:\n\n/// script\nrequires-python = \">=3.11\"\ndependencies = [\n\"fastapi\",\n\"uvicorn\",\n]\n///\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello!\"}\n\nif name == \"main\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)Copy to clipboardErrorCopied\n\nRun this with uv run app.py.\n\n1. Handle errors by raising HTTPException\n\n   \n   from fastapi import HTTPException\n\n   async def getitem(itemid: int):\n       if not validitem(itemid):\n           raise HTTPException(\n               statuscode=404,\n               detail=f\"Item {itemid} not found\"\n           )Copy to clipboardErrorCopied\n   \n2. Use middleware for logging\n\n   \n   from fastapi import Request\n   import time\n\n   @app.middleware(\"http\")\n   async def addtiming(request: Request, callnext):\n       start = time.time()\n       response = await callnext(request)\n       response.headers[\"X-Process-Time\"] = str(time.time() - start)\n       return responseCopy to clipboardErrorCopied\n   \n\nTools:\n\n FastAPI CLI: Project scaffolding\n Pydantic: Data validation\n SQLModel: SQL databases\n FastAPI Users: Authentication\n\nWatch this FastAPI Course for Beginners (64 min):\n\n[](https://youtu.be/tLKKmouUams)\n\nPrevious\n\nREST APIs\n\nNext\n\nAuthentication: Google Auth"
  },
  {
    "title": "CORS",
    "filename": "CORS.md",
    "text": "CORS: Cross-Origin Resource Sharing\n-----------------------------------------------------------------------------------\n\nCORS (Cross-Origin Resource Sharing) is a security mechanism that controls how web browsers handle requests between different origins (domains, protocols, or ports). Data scientists need CORS for APIs serving data or analysis to a browser on a different domain.\n\nWatch this practical explanation of CORS (3 min):\n\n[](https://youtu.be/4KHiSt0oLJ0)\n\nKey CORS concepts:\n\n Same-Origin Policy: Browsers block requests between different origins by default\n CORS Headers: Server responses must include specific headers to allow cross-origin requests\n Preflight Requests: Browsers send OPTIONS requests to check if the actual request is allowed\n Credentials: Special handling required for requests with cookies or authentication\n\nIf you’re exposing your API with a GET request publicly, the only thing you need to do is set the HTTP header Access-Control-Allow-Origin: .\n\nHere are other common CORS headers:\n\nAccess-Control-Allow-Origin: https://example.com\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE\nAccess-Control-Allow-Headers: Content-Type, Authorization\nAccess-Control-Allow-Credentials: trueCopy to clipboardErrorCopied\n\nTo implement CORS in FastAPI, use the CORSMiddleware middleware:\n\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\napp.addmiddleware(CORSMiddleware, alloworigins=[\"\"])  Allow GET requests from all origins\nOr, provide more granular control:\napp.addmiddleware(\n    CORSMiddleware,\n    alloworigins=[\"https://example.com\"],   Allow a specific domain\n    allowcredentials=True,   Allow cookies\n    allowmethods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"],   Allow specific methods\n    allowheaders=[\"\"],   Allow all headers\n)Copy to clipboardErrorCopied\n\nTesting CORS with JavaScript:\n\n// Simple request\nconst response = await fetch(\"https://api.example.com/data\", {\n  method: \"GET\",\n  headers: { \"Content-Type\": \"application/json\" },\n});\n\n// Request with credentials\nconst response = await fetch(\"https://api.example.com/data\", {\n  credentials: \"include\",\n  headers: { \"Content-Type\": \"application/json\" },\n});Copy to clipboardErrorCopied\n\nUseful CORS debugging tools:\n\n CORS Checker: Test CORS configurations\n Browser DevTools Network tab: Inspect CORS headers and preflight requests\n cors-anywhere: CORS proxy for development\n\nCommon CORS errors and solutions:\n\n No 'Access-Control-Allow-Origin' header: Configure server to send proper CORS headers\n Request header field not allowed: Add required headers to Access-Control-Allow-Headers\n Credentials flag: Set both credentials: 'include' and Access-Control-Allow-Credentials: true\n Wild card error: Cannot use  with credentials; specify exact origins\n\nPrevious\n\nTunneling: ngrok\n\nNext\n\nREST APIs"
  },
  {
    "title": "Data Preparation in the Editor",
    "filename": "Data_Preparation_in_the_Editor.md",
    "text": "Data Preparation in the Editor\n----------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/99lYu43L9uM)\n\nYou’ll learn how to use a text editor Visual Studio Code to process and clean data, covering:\n\n Format JSON files\n Find all and multiple cursors to extract specific fields\n Sort lines\n Delete duplicate lines\n Replace text with multiple cursors\n\nHere are the links used in the video:\n\n City-wise product sales JSON\n\nPrevious\n\nData Preparation in the Shell\n\nNext\n\nCleaning Data with OpenRefine"
  },
  {
    "title": "Convert HTML to Markdown",
    "filename": "Convert_HTML_to_Markdown.md",
    "text": "Converting HTML to Markdown\n----------------------------------------------------------------------------------------\n\nWhen working with web content, converting HTML files to plain text or Markdown is a common requirement for content extraction, analysis, and preservation. For example:\n\n Content analysis: Extract clean text from HTML for natural language processing\n Data mining: Strip formatting to focus on the actual content\n Offline reading: Convert web pages to readable formats for e-readers or offline consumption\n Content migration: Move content between different CMS platforms\n SEO analysis: Extract headings, content structure, and text for optimization\n Archive creation: Store web content in more compact, preservation-friendly formats\n Accessibility: Convert content to formats that work better with screen readers\n\nThis tutorial covers both converting existing HTML files and combining web crawling with HTML-to-text conversion in a single workflow – all using the command line.\n\ndefuddle-cli\n\ndefuddle-cli specializes in HTML - Markdown conversion. It’s a bit slow and not very customizable but produces clean Markdown that preserves structure, links, and basic formatting. Best for content where preserving the document structure is important.\n\nfind . -name '.html' -exec npx --package defuddle-cli -y defuddle parse {} --md -o {}.md \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n npx --package defuddle-cli -y: Installs and runs defuddle-cli without prompting\n defuddle parse {} --md: Parses the HTML file (represented by {}) and converts to markdown\n -o {}.md: Outputs to a file with the original name plus .md extension\n\nPandoc\n\nPandoc is a bit slow and highly customizable, preserving almost all formatting elements, leading to verbose markdown. Best for academic or documentation conversion where precision matters.\n\nPandoc can convert from many other formats (such as Word, PDF, LaTeX, etc.) to Markdown and vice versa, making it one of most popular and versatele document convertors.\n\n[](https://youtu.be/HPSK7q13-40)\n\nfind . -name '.html' -exec pandoc -f html -t markdownstrict -o {}.md {} \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n pandoc: The Swiss Army knife of document conversion\n -f html -t markdownstrict: Convert from HTML format to strict markdown\n -o {}.md {}: Output to a markdown file, with the input file as the last argument\n\nLynx\n\nLynx is fast and generates text (not Markdown) with minimal formatting. Lynx renders the HTML as it would appear in a text browser, preserving basic structure but losing complex formatting. Best for quick content extraction or when processing large numbers of files.\n\nfind . -type f -name '.html' -exec sh -c 'for f; do lynx -dump -nolist \"$f\" > \"${f%.html}.txt\"; done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n lynx -dump -nolist \"$f\": Uses the lynx text browser to render HTML as plain text\n  + -dump: Output the rendered page to stdout\n  + -nolist: Don’t include the list of links at the end\n > \"${f%.html}.txt\": Save output to a .txt file with the same base name\n\nw3m\n\nw3m is very slow processing with minimal formatting. w3m tends to be more thorough in its rendering than lynx but takes considerably longer. It supports basic JavaScript processing, making it better at handling modern websites with dynamic content. Best for cases where you need slightly better rendering than lynx, particularly for complex layouts and tables, and when some JavaScript processing is beneficial.\n\nfind . -type f -name '.html' \\\n  -exec sh -c 'for f; do \\\n      w3m -dump -T text/html -cols 80 -no-graph \"$f\" > \"${f%.html}.md\"; \\\n    done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n w3m -dump -T text/html -cols 80 -no-graph \"$f\": Uses the w3m text browser to render HTML\n  + -dump: Output the rendered page to stdout\n  + -T text/html: Specify input format as HTML\n  + -cols 80: Set output width to 80 columns\n  + -no-graph: Don’t show graphic characters for tables and frames\n > \"${f%.html}.md\": Save output to a .md file with the same base name\n\nComparison\n\n| Approach | Speed | Format Quality | Preservation | Best For |\n| --- | --- | --- | --- | --- |\n| defuddle-cli | Slow | High | Good structure and links | Content migration, publishing |\n| pandoc | Slow | Very High | Almost everything | Academic papers, documentation |\n| lynx | Fast | Low | Basic structure only | Quick extraction, large batches |\n| w3m | Very Slow | Medium-Low | Basic structure with better tables | Improved readability over lynx |\n\nOptimize Batch Processing\n\n1. Process in parallel: Use GNU Parallel for multi-core processing:\n\n   \n   find . -name \".html\" | parallel \"pandoc -f html -t markdownstrict -o {}.md {}\"Copy to clipboardErrorCopied\n   \n2. Filter files before processing:\n\n   \n   find . -name \".html\" -type f -size -1M -exec pandoc -f html -t markdown {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n3. Customize output format with additional parameters:\n\n   \n    For pandoc, preserve line breaks but simplify other formatting\n   find . -name \".html\" -exec pandoc -f html -t markdown --wrap=preserve --atx-headers {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n4. Handle errors gracefully:\n\n   \n   find . -name \".html\" -exec sh -c 'for f; do pandoc -f html -t markdown \"$f\" -o \"${f%.html}.md\" 2>/dev/null || echo \"Failed: $f\" >> conversionerrors.log; done'  {} +Copy to clipboardErrorCopied\n   \n\nChoosing the Right Tool\n\n Need speed with minimal formatting? Use the lynx approach\n Need precise, complete conversion? Use pandoc\n Need a balance of structure and cleanliness? Try defuddle-cli\n Working with complex tables? w3m might render them better\n\nRemember that the best approach depends on your specific use case, volume of files, and how you intend to use the converted text.\n\nCombined Crawling and Conversion\n\nSometimes you need to both crawl a website and convert its content to markdown or text in a single workflow, like Crawl4AI or markdown-crawler.\n\n1. For research/data collection: Use a specialized crawler (like Crawl4AI) with post-processing conversion\n2. For simple website archiving: Markdown-crawler provides a convenient all-in-one solution\n3. For high-quality conversion: Use wget/wget2 for crawling followed by pandoc for conversion\n4. For maximum speed: Combine wget with lynx in a pipeline\n\nCrawl4AI\n\nCrawl4AI is designed for single-page extraction with high-quality content processing. Crawl4AI is optimized for AI training data extraction, focusing on clean, structured content rather than complete site preservation. It excels at removing boilerplate content and preserving the main article text.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install crawl4ai\ncrawl4ai-setupCopy to clipboardErrorCopied\n\n uv venv: Creates a Python virtual environment using uv (a faster alternative to virtualenv)\n source .venv/bin/activate.fish: Activates the virtual environment (fish shell syntax)\n uv pip install crawl4ai: Installs the crawl4ai package\n crawl4ai-setup: Initializes crawl4ai’s required dependencies\n\nmarkdown-crawler\n\nmarkdown-crawler combines web crawling with markdown conversion in one tool. It’s efficient for bulk processing but tends to produce lower-quality markdown conversion compared to specialized converters like pandoc or defuddle. Best for projects where quantity and integration are more important than perfect formatting.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install markdown-crawler\nmarkdown-crawler -t 5 -d 3 -b ./markdown https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\n uv venv and activation: Same as above\n uv pip install markdown-crawler: Installs the markdown-crawler package\n markdown-crawler: Runs the crawler with these options:\n  + -t 5: Sets 5 threads for parallel crawling\n  + -d 3: Limits crawl depth to 3 levels\n  + -b ./markdown: Sets the base output directory\n  + Final argument is the starting URL\n\nPrevious\n\nConvert PDFs to Markdown\n\nNext\n\nLLM Website Scraping"
  },
  {
    "title": "Convert HTML to Markdown",
    "filename": "Convert_HTML_to_Markdown.md",
    "text": "Converting HTML to Markdown\n----------------------------------------------------------------------------------------\n\nWhen working with web content, converting HTML files to plain text or Markdown is a common requirement for content extraction, analysis, and preservation. For example:\n\n Content analysis: Extract clean text from HTML for natural language processing\n Data mining: Strip formatting to focus on the actual content\n Offline reading: Convert web pages to readable formats for e-readers or offline consumption\n Content migration: Move content between different CMS platforms\n SEO analysis: Extract headings, content structure, and text for optimization\n Archive creation: Store web content in more compact, preservation-friendly formats\n Accessibility: Convert content to formats that work better with screen readers\n\nThis tutorial covers both converting existing HTML files and combining web crawling with HTML-to-text conversion in a single workflow – all using the command line.\n\ndefuddle-cli\n\ndefuddle-cli specializes in HTML - Markdown conversion. It’s a bit slow and not very customizable but produces clean Markdown that preserves structure, links, and basic formatting. Best for content where preserving the document structure is important.\n\nfind . -name '.html' -exec npx --package defuddle-cli -y defuddle parse {} --md -o {}.md \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n npx --package defuddle-cli -y: Installs and runs defuddle-cli without prompting\n defuddle parse {} --md: Parses the HTML file (represented by {}) and converts to markdown\n -o {}.md: Outputs to a file with the original name plus .md extension\n\nPandoc\n\nPandoc is a bit slow and highly customizable, preserving almost all formatting elements, leading to verbose markdown. Best for academic or documentation conversion where precision matters.\n\nPandoc can convert from many other formats (such as Word, PDF, LaTeX, etc.) to Markdown and vice versa, making it one of most popular and versatele document convertors.\n\n[](https://youtu.be/HPSK7q13-40)\n\nfind . -name '.html' -exec pandoc -f html -t markdownstrict -o {}.md {} \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n pandoc: The Swiss Army knife of document conversion\n -f html -t markdownstrict: Convert from HTML format to strict markdown\n -o {}.md {}: Output to a markdown file, with the input file as the last argument\n\nLynx\n\nLynx is fast and generates text (not Markdown) with minimal formatting. Lynx renders the HTML as it would appear in a text browser, preserving basic structure but losing complex formatting. Best for quick content extraction or when processing large numbers of files.\n\nfind . -type f -name '.html' -exec sh -c 'for f; do lynx -dump -nolist \"$f\" > \"${f%.html}.txt\"; done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n lynx -dump -nolist \"$f\": Uses the lynx text browser to render HTML as plain text\n  + -dump: Output the rendered page to stdout\n  + -nolist: Don’t include the list of links at the end\n > \"${f%.html}.txt\": Save output to a .txt file with the same base name\n\nw3m\n\nw3m is very slow processing with minimal formatting. w3m tends to be more thorough in its rendering than lynx but takes considerably longer. It supports basic JavaScript processing, making it better at handling modern websites with dynamic content. Best for cases where you need slightly better rendering than lynx, particularly for complex layouts and tables, and when some JavaScript processing is beneficial.\n\nfind . -type f -name '.html' \\\n  -exec sh -c 'for f; do \\\n      w3m -dump -T text/html -cols 80 -no-graph \"$f\" > \"${f%.html}.md\"; \\\n    done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n w3m -dump -T text/html -cols 80 -no-graph \"$f\": Uses the w3m text browser to render HTML\n  + -dump: Output the rendered page to stdout\n  + -T text/html: Specify input format as HTML\n  + -cols 80: Set output width to 80 columns\n  + -no-graph: Don’t show graphic characters for tables and frames\n > \"${f%.html}.md\": Save output to a .md file with the same base name\n\nComparison\n\n| Approach | Speed | Format Quality | Preservation | Best For |\n| --- | --- | --- | --- | --- |\n| defuddle-cli | Slow | High | Good structure and links | Content migration, publishing |\n| pandoc | Slow | Very High | Almost everything | Academic papers, documentation |\n| lynx | Fast | Low | Basic structure only | Quick extraction, large batches |\n| w3m | Very Slow | Medium-Low | Basic structure with better tables | Improved readability over lynx |\n\nOptimize Batch Processing\n\n1. Process in parallel: Use GNU Parallel for multi-core processing:\n\n   \n   find . -name \".html\" | parallel \"pandoc -f html -t markdownstrict -o {}.md {}\"Copy to clipboardErrorCopied\n   \n2. Filter files before processing:\n\n   \n   find . -name \".html\" -type f -size -1M -exec pandoc -f html -t markdown {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n3. Customize output format with additional parameters:\n\n   \n    For pandoc, preserve line breaks but simplify other formatting\n   find . -name \".html\" -exec pandoc -f html -t markdown --wrap=preserve --atx-headers {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n4. Handle errors gracefully:\n\n   \n   find . -name \".html\" -exec sh -c 'for f; do pandoc -f html -t markdown \"$f\" -o \"${f%.html}.md\" 2>/dev/null || echo \"Failed: $f\" >> conversionerrors.log; done'  {} +Copy to clipboardErrorCopied\n   \n\nChoosing the Right Tool\n\n Need speed with minimal formatting? Use the lynx approach\n Need precise, complete conversion? Use pandoc\n Need a balance of structure and cleanliness? Try defuddle-cli\n Working with complex tables? w3m might render them better\n\nRemember that the best approach depends on your specific use case, volume of files, and how you intend to use the converted text.\n\nCombined Crawling and Conversion\n\nSometimes you need to both crawl a website and convert its content to markdown or text in a single workflow, like Crawl4AI or markdown-crawler.\n\n1. For research/data collection: Use a specialized crawler (like Crawl4AI) with post-processing conversion\n2. For simple website archiving: Markdown-crawler provides a convenient all-in-one solution\n3. For high-quality conversion: Use wget/wget2 for crawling followed by pandoc for conversion\n4. For maximum speed: Combine wget with lynx in a pipeline\n\nCrawl4AI\n\nCrawl4AI is designed for single-page extraction with high-quality content processing. Crawl4AI is optimized for AI training data extraction, focusing on clean, structured content rather than complete site preservation. It excels at removing boilerplate content and preserving the main article text.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install crawl4ai\ncrawl4ai-setupCopy to clipboardErrorCopied\n\n uv venv: Creates a Python virtual environment using uv (a faster alternative to virtualenv)\n source .venv/bin/activate.fish: Activates the virtual environment (fish shell syntax)\n uv pip install crawl4ai: Installs the crawl4ai package\n crawl4ai-setup: Initializes crawl4ai’s required dependencies\n\nmarkdown-crawler\n\nmarkdown-crawler combines web crawling with markdown conversion in one tool. It’s efficient for bulk processing but tends to produce lower-quality markdown conversion compared to specialized converters like pandoc or defuddle. Best for projects where quantity and integration are more important than perfect formatting.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install markdown-crawler\nmarkdown-crawler -t 5 -d 3 -b ./markdown https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\n uv venv and activation: Same as above\n uv pip install markdown-crawler: Installs the markdown-crawler package\n markdown-crawler: Runs the crawler with these options:\n  + -t 5: Sets 5 threads for parallel crawling\n  + -d 3: Limits crawl depth to 3 levels\n  + -b ./markdown: Sets the base output directory\n  + Final argument is the starting URL\n\nPrevious\n\nConvert PDFs to Markdown\n\nNext\n\nLLM Website Scraping"
  },
  {
    "title": "Convert HTML to Markdown",
    "filename": "Convert_HTML_to_Markdown.md",
    "text": "Converting HTML to Markdown\n----------------------------------------------------------------------------------------\n\nWhen working with web content, converting HTML files to plain text or Markdown is a common requirement for content extraction, analysis, and preservation. For example:\n\n Content analysis: Extract clean text from HTML for natural language processing\n Data mining: Strip formatting to focus on the actual content\n Offline reading: Convert web pages to readable formats for e-readers or offline consumption\n Content migration: Move content between different CMS platforms\n SEO analysis: Extract headings, content structure, and text for optimization\n Archive creation: Store web content in more compact, preservation-friendly formats\n Accessibility: Convert content to formats that work better with screen readers\n\nThis tutorial covers both converting existing HTML files and combining web crawling with HTML-to-text conversion in a single workflow – all using the command line.\n\ndefuddle-cli\n\ndefuddle-cli specializes in HTML - Markdown conversion. It’s a bit slow and not very customizable but produces clean Markdown that preserves structure, links, and basic formatting. Best for content where preserving the document structure is important.\n\nfind . -name '.html' -exec npx --package defuddle-cli -y defuddle parse {} --md -o {}.md \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n npx --package defuddle-cli -y: Installs and runs defuddle-cli without prompting\n defuddle parse {} --md: Parses the HTML file (represented by {}) and converts to markdown\n -o {}.md: Outputs to a file with the original name plus .md extension\n\nPandoc\n\nPandoc is a bit slow and highly customizable, preserving almost all formatting elements, leading to verbose markdown. Best for academic or documentation conversion where precision matters.\n\nPandoc can convert from many other formats (such as Word, PDF, LaTeX, etc.) to Markdown and vice versa, making it one of most popular and versatele document convertors.\n\n[](https://youtu.be/HPSK7q13-40)\n\nfind . -name '.html' -exec pandoc -f html -t markdownstrict -o {}.md {} \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n pandoc: The Swiss Army knife of document conversion\n -f html -t markdownstrict: Convert from HTML format to strict markdown\n -o {}.md {}: Output to a markdown file, with the input file as the last argument\n\nLynx\n\nLynx is fast and generates text (not Markdown) with minimal formatting. Lynx renders the HTML as it would appear in a text browser, preserving basic structure but losing complex formatting. Best for quick content extraction or when processing large numbers of files.\n\nfind . -type f -name '.html' -exec sh -c 'for f; do lynx -dump -nolist \"$f\" > \"${f%.html}.txt\"; done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n lynx -dump -nolist \"$f\": Uses the lynx text browser to render HTML as plain text\n  + -dump: Output the rendered page to stdout\n  + -nolist: Don’t include the list of links at the end\n > \"${f%.html}.txt\": Save output to a .txt file with the same base name\n\nw3m\n\nw3m is very slow processing with minimal formatting. w3m tends to be more thorough in its rendering than lynx but takes considerably longer. It supports basic JavaScript processing, making it better at handling modern websites with dynamic content. Best for cases where you need slightly better rendering than lynx, particularly for complex layouts and tables, and when some JavaScript processing is beneficial.\n\nfind . -type f -name '.html' \\\n  -exec sh -c 'for f; do \\\n      w3m -dump -T text/html -cols 80 -no-graph \"$f\" > \"${f%.html}.md\"; \\\n    done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n w3m -dump -T text/html -cols 80 -no-graph \"$f\": Uses the w3m text browser to render HTML\n  + -dump: Output the rendered page to stdout\n  + -T text/html: Specify input format as HTML\n  + -cols 80: Set output width to 80 columns\n  + -no-graph: Don’t show graphic characters for tables and frames\n > \"${f%.html}.md\": Save output to a .md file with the same base name\n\nComparison\n\n| Approach | Speed | Format Quality | Preservation | Best For |\n| --- | --- | --- | --- | --- |\n| defuddle-cli | Slow | High | Good structure and links | Content migration, publishing |\n| pandoc | Slow | Very High | Almost everything | Academic papers, documentation |\n| lynx | Fast | Low | Basic structure only | Quick extraction, large batches |\n| w3m | Very Slow | Medium-Low | Basic structure with better tables | Improved readability over lynx |\n\nOptimize Batch Processing\n\n1. Process in parallel: Use GNU Parallel for multi-core processing:\n\n   \n   find . -name \".html\" | parallel \"pandoc -f html -t markdownstrict -o {}.md {}\"Copy to clipboardErrorCopied\n   \n2. Filter files before processing:\n\n   \n   find . -name \".html\" -type f -size -1M -exec pandoc -f html -t markdown {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n3. Customize output format with additional parameters:\n\n   \n    For pandoc, preserve line breaks but simplify other formatting\n   find . -name \".html\" -exec pandoc -f html -t markdown --wrap=preserve --atx-headers {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n4. Handle errors gracefully:\n\n   \n   find . -name \".html\" -exec sh -c 'for f; do pandoc -f html -t markdown \"$f\" -o \"${f%.html}.md\" 2>/dev/null || echo \"Failed: $f\" >> conversionerrors.log; done'  {} +Copy to clipboardErrorCopied\n   \n\nChoosing the Right Tool\n\n Need speed with minimal formatting? Use the lynx approach\n Need precise, complete conversion? Use pandoc\n Need a balance of structure and cleanliness? Try defuddle-cli\n Working with complex tables? w3m might render them better\n\nRemember that the best approach depends on your specific use case, volume of files, and how you intend to use the converted text.\n\nCombined Crawling and Conversion\n\nSometimes you need to both crawl a website and convert its content to markdown or text in a single workflow, like Crawl4AI or markdown-crawler.\n\n1. For research/data collection: Use a specialized crawler (like Crawl4AI) with post-processing conversion\n2. For simple website archiving: Markdown-crawler provides a convenient all-in-one solution\n3. For high-quality conversion: Use wget/wget2 for crawling followed by pandoc for conversion\n4. For maximum speed: Combine wget with lynx in a pipeline\n\nCrawl4AI\n\nCrawl4AI is designed for single-page extraction with high-quality content processing. Crawl4AI is optimized for AI training data extraction, focusing on clean, structured content rather than complete site preservation. It excels at removing boilerplate content and preserving the main article text.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install crawl4ai\ncrawl4ai-setupCopy to clipboardErrorCopied\n\n uv venv: Creates a Python virtual environment using uv (a faster alternative to virtualenv)\n source .venv/bin/activate.fish: Activates the virtual environment (fish shell syntax)\n uv pip install crawl4ai: Installs the crawl4ai package\n crawl4ai-setup: Initializes crawl4ai’s required dependencies\n\nmarkdown-crawler\n\nmarkdown-crawler combines web crawling with markdown conversion in one tool. It’s efficient for bulk processing but tends to produce lower-quality markdown conversion compared to specialized converters like pandoc or defuddle. Best for projects where quantity and integration are more important than perfect formatting.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install markdown-crawler\nmarkdown-crawler -t 5 -d 3 -b ./markdown https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\n uv venv and activation: Same as above\n uv pip install markdown-crawler: Installs the markdown-crawler package\n markdown-crawler: Runs the crawler with these options:\n  + -t 5: Sets 5 threads for parallel crawling\n  + -d 3: Limits crawl depth to 3 levels\n  + -b ./markdown: Sets the base output directory\n  + Final argument is the starting URL\n\nPrevious\n\nConvert PDFs to Markdown\n\nNext\n\nLLM Website Scraping"
  },
  {
    "title": "Convert HTML to Markdown",
    "filename": "Convert_HTML_to_Markdown.md",
    "text": "Converting HTML to Markdown\n----------------------------------------------------------------------------------------\n\nWhen working with web content, converting HTML files to plain text or Markdown is a common requirement for content extraction, analysis, and preservation. For example:\n\n Content analysis: Extract clean text from HTML for natural language processing\n Data mining: Strip formatting to focus on the actual content\n Offline reading: Convert web pages to readable formats for e-readers or offline consumption\n Content migration: Move content between different CMS platforms\n SEO analysis: Extract headings, content structure, and text for optimization\n Archive creation: Store web content in more compact, preservation-friendly formats\n Accessibility: Convert content to formats that work better with screen readers\n\nThis tutorial covers both converting existing HTML files and combining web crawling with HTML-to-text conversion in a single workflow – all using the command line.\n\ndefuddle-cli\n\ndefuddle-cli specializes in HTML - Markdown conversion. It’s a bit slow and not very customizable but produces clean Markdown that preserves structure, links, and basic formatting. Best for content where preserving the document structure is important.\n\nfind . -name '.html' -exec npx --package defuddle-cli -y defuddle parse {} --md -o {}.md \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n npx --package defuddle-cli -y: Installs and runs defuddle-cli without prompting\n defuddle parse {} --md: Parses the HTML file (represented by {}) and converts to markdown\n -o {}.md: Outputs to a file with the original name plus .md extension\n\nPandoc\n\nPandoc is a bit slow and highly customizable, preserving almost all formatting elements, leading to verbose markdown. Best for academic or documentation conversion where precision matters.\n\nPandoc can convert from many other formats (such as Word, PDF, LaTeX, etc.) to Markdown and vice versa, making it one of most popular and versatele document convertors.\n\n[](https://youtu.be/HPSK7q13-40)\n\nfind . -name '.html' -exec pandoc -f html -t markdownstrict -o {}.md {} \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n pandoc: The Swiss Army knife of document conversion\n -f html -t markdownstrict: Convert from HTML format to strict markdown\n -o {}.md {}: Output to a markdown file, with the input file as the last argument\n\nLynx\n\nLynx is fast and generates text (not Markdown) with minimal formatting. Lynx renders the HTML as it would appear in a text browser, preserving basic structure but losing complex formatting. Best for quick content extraction or when processing large numbers of files.\n\nfind . -type f -name '.html' -exec sh -c 'for f; do lynx -dump -nolist \"$f\" > \"${f%.html}.txt\"; done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n lynx -dump -nolist \"$f\": Uses the lynx text browser to render HTML as plain text\n  + -dump: Output the rendered page to stdout\n  + -nolist: Don’t include the list of links at the end\n > \"${f%.html}.txt\": Save output to a .txt file with the same base name\n\nw3m\n\nw3m is very slow processing with minimal formatting. w3m tends to be more thorough in its rendering than lynx but takes considerably longer. It supports basic JavaScript processing, making it better at handling modern websites with dynamic content. Best for cases where you need slightly better rendering than lynx, particularly for complex layouts and tables, and when some JavaScript processing is beneficial.\n\nfind . -type f -name '.html' \\\n  -exec sh -c 'for f; do \\\n      w3m -dump -T text/html -cols 80 -no-graph \"$f\" > \"${f%.html}.md\"; \\\n    done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n w3m -dump -T text/html -cols 80 -no-graph \"$f\": Uses the w3m text browser to render HTML\n  + -dump: Output the rendered page to stdout\n  + -T text/html: Specify input format as HTML\n  + -cols 80: Set output width to 80 columns\n  + -no-graph: Don’t show graphic characters for tables and frames\n > \"${f%.html}.md\": Save output to a .md file with the same base name\n\nComparison\n\n| Approach | Speed | Format Quality | Preservation | Best For |\n| --- | --- | --- | --- | --- |\n| defuddle-cli | Slow | High | Good structure and links | Content migration, publishing |\n| pandoc | Slow | Very High | Almost everything | Academic papers, documentation |\n| lynx | Fast | Low | Basic structure only | Quick extraction, large batches |\n| w3m | Very Slow | Medium-Low | Basic structure with better tables | Improved readability over lynx |\n\nOptimize Batch Processing\n\n1. Process in parallel: Use GNU Parallel for multi-core processing:\n\n   \n   find . -name \".html\" | parallel \"pandoc -f html -t markdownstrict -o {}.md {}\"Copy to clipboardErrorCopied\n   \n2. Filter files before processing:\n\n   \n   find . -name \".html\" -type f -size -1M -exec pandoc -f html -t markdown {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n3. Customize output format with additional parameters:\n\n   \n    For pandoc, preserve line breaks but simplify other formatting\n   find . -name \".html\" -exec pandoc -f html -t markdown --wrap=preserve --atx-headers {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n4. Handle errors gracefully:\n\n   \n   find . -name \".html\" -exec sh -c 'for f; do pandoc -f html -t markdown \"$f\" -o \"${f%.html}.md\" 2>/dev/null || echo \"Failed: $f\" >> conversionerrors.log; done'  {} +Copy to clipboardErrorCopied\n   \n\nChoosing the Right Tool\n\n Need speed with minimal formatting? Use the lynx approach\n Need precise, complete conversion? Use pandoc\n Need a balance of structure and cleanliness? Try defuddle-cli\n Working with complex tables? w3m might render them better\n\nRemember that the best approach depends on your specific use case, volume of files, and how you intend to use the converted text.\n\nCombined Crawling and Conversion\n\nSometimes you need to both crawl a website and convert its content to markdown or text in a single workflow, like Crawl4AI or markdown-crawler.\n\n1. For research/data collection: Use a specialized crawler (like Crawl4AI) with post-processing conversion\n2. For simple website archiving: Markdown-crawler provides a convenient all-in-one solution\n3. For high-quality conversion: Use wget/wget2 for crawling followed by pandoc for conversion\n4. For maximum speed: Combine wget with lynx in a pipeline\n\nCrawl4AI\n\nCrawl4AI is designed for single-page extraction with high-quality content processing. Crawl4AI is optimized for AI training data extraction, focusing on clean, structured content rather than complete site preservation. It excels at removing boilerplate content and preserving the main article text.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install crawl4ai\ncrawl4ai-setupCopy to clipboardErrorCopied\n\n uv venv: Creates a Python virtual environment using uv (a faster alternative to virtualenv)\n source .venv/bin/activate.fish: Activates the virtual environment (fish shell syntax)\n uv pip install crawl4ai: Installs the crawl4ai package\n crawl4ai-setup: Initializes crawl4ai’s required dependencies\n\nmarkdown-crawler\n\nmarkdown-crawler combines web crawling with markdown conversion in one tool. It’s efficient for bulk processing but tends to produce lower-quality markdown conversion compared to specialized converters like pandoc or defuddle. Best for projects where quantity and integration are more important than perfect formatting.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install markdown-crawler\nmarkdown-crawler -t 5 -d 3 -b ./markdown https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\n uv venv and activation: Same as above\n uv pip install markdown-crawler: Installs the markdown-crawler package\n markdown-crawler: Runs the crawler with these options:\n  + -t 5: Sets 5 threads for parallel crawling\n  + -d 3: Limits crawl depth to 3 levels\n  + -b ./markdown: Sets the base output directory\n  + Final argument is the starting URL\n\nPrevious\n\nConvert PDFs to Markdown\n\nNext\n\nLLM Website Scraping"
  },
  {
    "title": "Convert HTML to Markdown",
    "filename": "Convert_HTML_to_Markdown.md",
    "text": "Converting HTML to Markdown\n----------------------------------------------------------------------------------------\n\nWhen working with web content, converting HTML files to plain text or Markdown is a common requirement for content extraction, analysis, and preservation. For example:\n\n Content analysis: Extract clean text from HTML for natural language processing\n Data mining: Strip formatting to focus on the actual content\n Offline reading: Convert web pages to readable formats for e-readers or offline consumption\n Content migration: Move content between different CMS platforms\n SEO analysis: Extract headings, content structure, and text for optimization\n Archive creation: Store web content in more compact, preservation-friendly formats\n Accessibility: Convert content to formats that work better with screen readers\n\nThis tutorial covers both converting existing HTML files and combining web crawling with HTML-to-text conversion in a single workflow – all using the command line.\n\ndefuddle-cli\n\ndefuddle-cli specializes in HTML - Markdown conversion. It’s a bit slow and not very customizable but produces clean Markdown that preserves structure, links, and basic formatting. Best for content where preserving the document structure is important.\n\nfind . -name '.html' -exec npx --package defuddle-cli -y defuddle parse {} --md -o {}.md \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n npx --package defuddle-cli -y: Installs and runs defuddle-cli without prompting\n defuddle parse {} --md: Parses the HTML file (represented by {}) and converts to markdown\n -o {}.md: Outputs to a file with the original name plus .md extension\n\nPandoc\n\nPandoc is a bit slow and highly customizable, preserving almost all formatting elements, leading to verbose markdown. Best for academic or documentation conversion where precision matters.\n\nPandoc can convert from many other formats (such as Word, PDF, LaTeX, etc.) to Markdown and vice versa, making it one of most popular and versatele document convertors.\n\n[](https://youtu.be/HPSK7q13-40)\n\nfind . -name '.html' -exec pandoc -f html -t markdownstrict -o {}.md {} \\;Copy to clipboardErrorCopied\n\n find . -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec ... \\;: Executes the following command for each file found\n pandoc: The Swiss Army knife of document conversion\n -f html -t markdownstrict: Convert from HTML format to strict markdown\n -o {}.md {}: Output to a markdown file, with the input file as the last argument\n\nLynx\n\nLynx is fast and generates text (not Markdown) with minimal formatting. Lynx renders the HTML as it would appear in a text browser, preserving basic structure but losing complex formatting. Best for quick content extraction or when processing large numbers of files.\n\nfind . -type f -name '.html' -exec sh -c 'for f; do lynx -dump -nolist \"$f\" > \"${f%.html}.txt\"; done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n lynx -dump -nolist \"$f\": Uses the lynx text browser to render HTML as plain text\n  + -dump: Output the rendered page to stdout\n  + -nolist: Don’t include the list of links at the end\n > \"${f%.html}.txt\": Save output to a .txt file with the same base name\n\nw3m\n\nw3m is very slow processing with minimal formatting. w3m tends to be more thorough in its rendering than lynx but takes considerably longer. It supports basic JavaScript processing, making it better at handling modern websites with dynamic content. Best for cases where you need slightly better rendering than lynx, particularly for complex layouts and tables, and when some JavaScript processing is beneficial.\n\nfind . -type f -name '.html' \\\n  -exec sh -c 'for f; do \\\n      w3m -dump -T text/html -cols 80 -no-graph \"$f\" > \"${f%.html}.md\"; \\\n    done'  {} +Copy to clipboardErrorCopied\n\n find . -type f -name '.html': Finds all HTML files in the current directory and subdirectories\n -exec sh -c '...'  {} +: Executes a shell command with batched files for efficiency\n for f; do ... done: Loops through each file in the batch\n w3m -dump -T text/html -cols 80 -no-graph \"$f\": Uses the w3m text browser to render HTML\n  + -dump: Output the rendered page to stdout\n  + -T text/html: Specify input format as HTML\n  + -cols 80: Set output width to 80 columns\n  + -no-graph: Don’t show graphic characters for tables and frames\n > \"${f%.html}.md\": Save output to a .md file with the same base name\n\nComparison\n\n| Approach | Speed | Format Quality | Preservation | Best For |\n| --- | --- | --- | --- | --- |\n| defuddle-cli | Slow | High | Good structure and links | Content migration, publishing |\n| pandoc | Slow | Very High | Almost everything | Academic papers, documentation |\n| lynx | Fast | Low | Basic structure only | Quick extraction, large batches |\n| w3m | Very Slow | Medium-Low | Basic structure with better tables | Improved readability over lynx |\n\nOptimize Batch Processing\n\n1. Process in parallel: Use GNU Parallel for multi-core processing:\n\n   \n   find . -name \".html\" | parallel \"pandoc -f html -t markdownstrict -o {}.md {}\"Copy to clipboardErrorCopied\n   \n2. Filter files before processing:\n\n   \n   find . -name \".html\" -type f -size -1M -exec pandoc -f html -t markdown {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n3. Customize output format with additional parameters:\n\n   \n    For pandoc, preserve line breaks but simplify other formatting\n   find . -name \".html\" -exec pandoc -f html -t markdown --wrap=preserve --atx-headers {} -o {}.md \\;Copy to clipboardErrorCopied\n   \n4. Handle errors gracefully:\n\n   \n   find . -name \".html\" -exec sh -c 'for f; do pandoc -f html -t markdown \"$f\" -o \"${f%.html}.md\" 2>/dev/null || echo \"Failed: $f\" >> conversionerrors.log; done'  {} +Copy to clipboardErrorCopied\n   \n\nChoosing the Right Tool\n\n Need speed with minimal formatting? Use the lynx approach\n Need precise, complete conversion? Use pandoc\n Need a balance of structure and cleanliness? Try defuddle-cli\n Working with complex tables? w3m might render them better\n\nRemember that the best approach depends on your specific use case, volume of files, and how you intend to use the converted text.\n\nCombined Crawling and Conversion\n\nSometimes you need to both crawl a website and convert its content to markdown or text in a single workflow, like Crawl4AI or markdown-crawler.\n\n1. For research/data collection: Use a specialized crawler (like Crawl4AI) with post-processing conversion\n2. For simple website archiving: Markdown-crawler provides a convenient all-in-one solution\n3. For high-quality conversion: Use wget/wget2 for crawling followed by pandoc for conversion\n4. For maximum speed: Combine wget with lynx in a pipeline\n\nCrawl4AI\n\nCrawl4AI is designed for single-page extraction with high-quality content processing. Crawl4AI is optimized for AI training data extraction, focusing on clean, structured content rather than complete site preservation. It excels at removing boilerplate content and preserving the main article text.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install crawl4ai\ncrawl4ai-setupCopy to clipboardErrorCopied\n\n uv venv: Creates a Python virtual environment using uv (a faster alternative to virtualenv)\n source .venv/bin/activate.fish: Activates the virtual environment (fish shell syntax)\n uv pip install crawl4ai: Installs the crawl4ai package\n crawl4ai-setup: Initializes crawl4ai’s required dependencies\n\nmarkdown-crawler\n\nmarkdown-crawler combines web crawling with markdown conversion in one tool. It’s efficient for bulk processing but tends to produce lower-quality markdown conversion compared to specialized converters like pandoc or defuddle. Best for projects where quantity and integration are more important than perfect formatting.\n\nuv venv\nsource .venv/bin/activate.fish\nuv pip install markdown-crawler\nmarkdown-crawler -t 5 -d 3 -b ./markdown https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\n uv venv and activation: Same as above\n uv pip install markdown-crawler: Installs the markdown-crawler package\n markdown-crawler: Runs the crawler with these options:\n  + -t 5: Sets 5 threads for parallel crawling\n  + -d 3: Limits crawl depth to 3 levels\n  + -b ./markdown: Sets the base output directory\n  + Final argument is the starting URL\n\nPrevious\n\nConvert PDFs to Markdown\n\nNext\n\nLLM Website Scraping"
  },
  {
    "title": "BBC Weather API with Python",
    "filename": "BBC_Weather_API_with_Python.md",
    "text": "BBC Weather location ID with Python\n-----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/IafLrvnamAw)\n\nYou’ll learn how to get the location ID of any city from the BBC Weather API – as a precursor to scraping weather data – covering:\n\n Understanding API Calls: Learn how backend API calls work when searching for a city on the BBC weather website.\n Inspecting Web Interactions: Use the browser’s inspect element feature to track API calls and understand the network activity.\n Extracting Location IDs: Identify and extract the location ID from the API response using Python.\n Using Python Libraries: Import and use requests, json, and urlencode libraries to make API calls and process responses.\n Constructing API URLs: Create structured API URLs dynamically with constant prefixes and query parameters using urlencode.\n Building Functions: Develop a Python function that accepts a city name, constructs the API call, and returns the location ID.\n\nTo open the browser Developer Tools on Chrome, Edge, or Firefox, you can:\n\n Right-click on the page and select “Inspect” to open the developer tools\n OR: Press F12\n OR: Press Ctrl+Shift+I on Windows\n OR: Press Cmd+Opt+I on Mac\n\nHere are links and references:\n\n BBC Location ID scraping - Notebook\n BBC Weather - Palo Alto (location ID: 5380748)\n BBC Locator Service - Los Angeles\n Learn about the requests package. Watch Python Requests Tutorial: Request Web Pages, Download Images, POST Data, Read JSON, and More\n\nBBC Weather data with Python\n---------------------------------------------------------------------------------------------\n\n[](https://youtu.be/Uc4DgQJDRoI)\n\nYou’ll learn how to scrape the live weather data of a city from the BBC Weather API, covering:\n\n Introduction to Web Scraping: Understand the basics of web scraping and its legality.\n Libraries Overview: Learn the importance of requests and BeautifulSoup.\n Fetching HTML: Use requests to fetch HTML content from a web page.\n Parsing HTML: Utilize BeautifulSoup to parse and navigate the HTML content.\n Identifying Data: Inspect HTML elements to locate specific data (e.g., high and low temperatures).\n Extracting Data: Extract relevant data using BeautifulSoup‘s findall() function.\n Data Cleanup: Clean extracted data to remove unwanted elements.\n Post-Processing: Use regular expressions to split large strings into meaningful parts.\n Data Structuring: Combine extracted data into a structured pandas DataFrame.\n Handling Special Characters: Replace unwanted characters for better data manipulation.\n Saving Data: Save the cleaned data into CSV and Excel formats.\n\nHere are links and references:\n\n BBC Weather scraping - Notebook\n BBC Locator Service - Mumbai\n BBC Weather - Mumbai (location ID: 1275339)\n BBC Weather API - Mumbai (location ID: 1275339)\n Learn about the json package. Watch Python Tutorial: Working with JSON Data using the json Module\n Learn about the BeautifulSoup package. Watch Python Tutorial: Web Scraping with BeautifulSoup and Requests\n Learn about the pandas package. Watch\n  + Python Pandas Tutorial (Part 1): Getting Started with Data Analysis - Installation and Loading Data\n  + Python Pandas Tutorial (Part 2): DataFrame and Series Basics - Selecting Rows and Columns\n Learn about the re package. Watch Python Tutorial: re Module - How to Write and Match Regular Expressions (Regex)\n Learn about the datetime package. Watch Python Tutorial: Datetime Module - How to work with Dates, Times, Timedeltas, and Timezones\n\nPrevious\n\nCrawling with the CLI\n\nNext\n\nScraping IMDb with JavaScript"
  },
  {
    "title": "Data Transformation with dbt",
    "filename": "Data_Transformation_with_dbt.md",
    "text": "Data Transformation with dbt\n---------------------------------------------------------------------\n\n[](https://youtu.be/5rNquRnNb4E)\n\nYou’ll learn how to transform data using dbt (data build tool), covering:\n\n dbt Fundamentals: Understand what dbt is and how it brings software engineering practices to data transformation\n Project Setup: Learn how to initialize a dbt project, configure your warehouse connection, and structure your models\n Models and Materialization: Create your first dbt models and understand different materialization strategies (view, table, incremental)\n Testing and Documentation: Implement data quality tests and auto-generate documentation for your data models\n Jinja Templating: Use Jinja for dynamic SQL generation, making your transformations more maintainable and reusable\n References and Dependencies: Learn how to reference other models and manage model dependencies\n Sources and Seeds: Configure source data connections and manage static reference data\n Macros and Packages: Create reusable macros and leverage community packages to extend functionality\n Incremental Models: Optimize performance by only processing new or changed data\n Deployment and Orchestration: Set up dbt Cloud or integrate with Airflow for production deployment\n\nHere’s a minimal dbt model example, models/staging/stgcustomers.sql:\n\nwith source as (\n    select  from {{ source('raw', 'customers') }}\n),\n\nrenamed as (\n    select\n        id as customerid,\n        firstname,\n        lastname,\n        email,\n        createdat\n    from source\n)\n\nselect  from renamedCopy to clipboardErrorCopied\n\nTools and Resources:\n\n dbt Core - The open-source transformation tool\n dbt Cloud - Hosted platform for running dbt\n dbt Packages - Reusable modules from the community\n dbt Documentation - Comprehensive guides and references\n Jaffle Shop - Example dbt project for learning\n dbt Slack Community - Active community for support and discussions\n\nWatch this dbt Fundamentals Course (90 min):\n\n[](https://youtu.be/5rNquRnNb4E)\n\nPrevious\n\nParsing JSON\n\nNext\n\nTransforming Images"
  },
  {
    "title": "Nominatim API with Python",
    "filename": "Nominatim_API_with_Python.md",
    "text": "Nominatim API with Python\n-------------------------------------------------------------------------------------\n\n[](https://youtu.be/f0PZ-pphAXE)\n\nYou’ll learn how to get the latitude and longitude of any city from the Nominatim API.\n\n Introduction to Nominatim: Understand how Nominatim, from OpenStreetMap, works similarly to Google Maps for geocoding.\n Installation and Import: Learn to install and import geopy and nominatim.\n Using the Locator: Create a locator object using Nominatim and set up a user agent.\n Geocoding an Address: Use locator.geocode to input an address (e.g., Eiffel Tower) and fetch geocoded data.\n Extracting Data: Access detailed information like latitude, longitude, bounding box, and accurate address from the JSON response.\n Classifying Locations: Identify the type of place (e.g., tourism, university) using the response data.\n Practical Example: Geocode “IIT Madras” and retrieve its full address, type (university), and other relevant information.\n\nHere are links and references:\n\n Geocoding using Nominatim - Notebook\n Learn about the geocoders module in the geopy package\n Learn about the nominatim package\n If you get a HTTP Error 403 from Nominatim, use your email ID or your name instead of “myGeocoder” in Nominatim(useragent=\"myGeocoder\")\n\nPrevious\n\nScraping IMDb with JavaScript\n\nNext\n\nWikipedia Data with Python"
  },
  {
    "title": "Visualizing Forecasts with Excel",
    "filename": "Visualizing_Forecasts_with_Excel.md",
    "text": "Visualizing Forecasts with Excel\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/judFpVgfsV4)\n\n Excel File\n\nPrevious\n\n7. Data Visualization\n\nNext\n\nVisualizing Animated Data with PowerPoint"
  },
  {
    "title": "Scraping emarketer.com",
    "filename": "Scraping_emarketer.com.md",
    "text": "Scraping emarketer\n----------------------------------------------------------------\n\nIn this live scraping session, we explore a real-life scenario where Straive had to scrape data from emarketer.com for a demo. This is a fairly realistic and representative way of how one might go about scraping a website.\n\n[](https://youtu.be/ZzUsDE1XjhE)\n\nYou’ll learn:\n\n Scraping: How to extract data from web pages, including constructing URLs, fetching page content, and parsing HTML using packages like lxml and httpx.\n Caching: Implementing a caching strategy to avoid redundant data fetching for efficiency and reliability.\n Error Handling and Debugging: Practical tips for troubleshooting, such as using liberal print statements, breakpoints for in-depth debugging, and the concept of “rubber duck debugging” to clarify problems.\n LLMs: Benefits of Gemini / ChatGPT for code suggestions and troubleshooting.\n Real-World Application: How quick proofs of concept to showcase capabilities to clients, emphasizing practice over theory.\n\nPrevious\n\nScheduled Scraping with GitHub Actions\n\nNext\n\nScraping: Live Sessions"
  },
  {
    "title": "Topic modeling",
    "filename": "Topic_modeling.md",
    "text": "Topic Modeling\n----------------------------------------------------\n\n[](https://youtu.be/eQUNhq91DlI)\n\nYou’ll learn to use text embeddings to find text similarity and use that to create topics automatically from text, covering:\n\n Embeddings: How large language models convert text into numerical representations.\n Similarity Measurement: Understanding how similar embeddings indicate similar meanings.\n Embedding Visualization: Using tools like Tensorflow Projector to visualize embedding spaces.\n Embedding Applications: Using embeddings for tasks like classification and clustering.\n OpenAI Embeddings: Using OpenAI’s API to generate embeddings for text.\n Model Comparison: Exploring different embedding models and their strengths and weaknesses.\n Cosine Similarity: Calculating cosine similarity between embeddings for more reliable similarity measures.\n Embedding Cost: Understanding the cost of generating embeddings using OpenAI’s API.\n Embedding Range: Understanding the range of values in embeddings and their significance.\n\nHere are the links used in the video:\n\n Jupyter Notebook\n Tensorflow projector\n Embeddings guide\n Embeddings reference\n Clustering on scikit-learn\n Massive text embedding leaderboard (MTEB)\n gte-large-en-v1.5 embedding model\n Embeddings similarity threshold\n\nPrevious\n\nMultimodal Embeddings\n\nNext\n\nVector databases"
  },
  {
    "title": "Terminal: Bash",
    "filename": "Terminal__Bash.md",
    "text": "Terminal: Bash\n-----------------------------------------\n\nUNIX shells are the de facto standard in the data science world and Bash is the most popular.\nThis is available by default on Mac and Linux.\n\nOn Windows, install Git Bash or WSL to get a UNIX shell.\n\nWatch this video to install WSL (12 min).\n\n[](https://youtu.be/X-DHaQLrBi8)\n\nWatch this video to understand the basics of Bash and UNIX shell commands (75 min).\n\n[](https://youtu.be/oxuRxtrO2Ag)\n\nEssential Commands:\n\nFile Operations\nls -la                List all files with details\ncd path/to/dir        Change directory\npwd                   Print working directory\ncp source dest        Copy files\nmv source dest        Move/rename files\nrm -rf dir            Remove directory recursively\n\nText Processing\ngrep \"pattern\" file   Search for pattern\nsed 's/old/new/' f    Replace text\nawk '{print $1}' f    Process text by columns\ncat file | wc -l      Count lines\n\nProcess Management\nps aux                List processes\nkill -9 PID           Force kill process\ntop                   Monitor processes\nhtop                  Interactive process viewer\n\nNetwork\ncurl url              HTTP requests\nwget url              Download files\nnc -zv host port      Test connectivity\nssh user@host         Remote login\n\nCount unique values in CSV column\ncut -d',' -f1 data.csv | sort | uniq -c\n\nQuick data analysis\nawk -F',' '{sum+=$2} END {print sum/NR}' data.csv   Average\nsort -t',' -k2 -n data.csv | head                   Top 10\n\nMonitor log in real-time\ntail -f log.txt | grep --color 'ERROR'Copy to clipboardErrorCopied\n\nBash Scripting Essentials:\n\n!/bin/bash\n\nVariables\nNAME=\"value\"\necho $NAME\n\nLoops\nfor i in {1..5}; do\n    echo $i\ndone\n\nConditionals\nif [ -f \"file.txt\" ]; then\n    echo \"File exists\"\nfi\n\nFunctions\nprocessdata() {\n    local input=$1\n    echo \"Processing $input\"\n}Copy to clipboardErrorCopied\n\nProductivity Tips:\n\n1. Command History\n\n   \n   history          Show command history\n   Ctrl+R          Search history\n   !!              Repeat last command\n   !$              Last argumentCopy to clipboardErrorCopied\n   \n2. Directory Navigation\n\n   \n   pushd dir       Push directory to stack\n   popd            Pop directory from stack\n   cd -            Go to previous directoryCopy to clipboardErrorCopied\n   \n3. Job Control\n\n   \n   command &       Run in background\n   Ctrl+Z          Suspend process\n   bg              Resume in background\n   fg              Resume in foregroundCopy to clipboardErrorCopied\n   \n4. Useful Aliases - typically added to /.bashrc\n\n   \n   alias ll='ls -la'\n   alias gs='git status'\n   alias jupyter='jupyter notebook'\n   alias activate='source venv/bin/activate'Copy to clipboardErrorCopied\n   \n\nPrevious\n\nJSON\n\nNext\n\nAI Terminal Tools: llm"
  },
  {
    "title": "Wikipedia Data with Python",
    "filename": "Wikipedia_Data_with_Python.md",
    "text": "Wikipedia Data with Python\n----------------------------------------------------------------------------------------\n\n[](https://youtu.be/b6puvm-QEY0)\n\nYou’ll learn how to scrape data from Wikipedia using the wikipedia Python library, covering:\n\n Installing and Importing: Use pip install to get the Wikipedia library and import it with import wikipedia as wk.\n Keyword Search: Use the search function to find Wikipedia pages containing a specific keyword, limiting results with the results argument.\n Fetching Summaries: Use the summary function to get a concise summary of a Wikipedia page, limiting sentences with the sentences argument.\n Retrieving Full Pages: Use the page function to obtain the full content of a Wikipedia page, including sections and references.\n Accessing URLs: Retrieve the URL of a Wikipedia page using the url attribute of the page object.\n Extracting References: Use the references attribute to get all reference links from a Wikipedia page.\n Fetching Images: Access all images on a Wikipedia page via the images attribute, which returns a list of image URLs.\n Extracting Tables: Use the pandas.read\\html function to extract tables from the HTML content of a Wikipedia page, being mindful of table indices.\n\nHere are links and references:\n\n Wikipedia Library - Notebook\n Learn about the wikipedia package\n\nNOTE: Wikipedia is constantly edited. The page may be different now from when the video was recorded. Handle accordingly.\n\nPrevious\n\nNominatim API with Python\n\nNext\n\nScraping PDFs with Tabula"
  },
  {
    "title": "Cleaning Data with OpenRefine",
    "filename": "Cleaning_Data_with_OpenRefine.md",
    "text": "Cleaning Data with OpenRefine\n-------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/zxEtfHseE84)\n\nThis session covers the use of OpenRefine for data cleaning, focusing on resolving entity discrepancies:\n\n Data Upload and Project Creation: Import data into OpenRefine and create a new project for analysis.\n Faceting Data: Use text facets to group similar entries and identify frequency of address crumbs.\n Clustering Methodology: Apply clustering algorithms to merge similar entries with minor differences, such as punctuation.\n Manual and Automated Clustering: Learn to merge clusters manually or in one go, trusting the system’s clustering accuracy.\n Entity Resolution: Clean and save the data by resolving multiple versions of the same entity using Open Refine.\n\nHere are links used in the video:\n\n OpenRefine software\n Dataset for OpenRefine\n\nPrevious\n\nData Preparation in the Editor\n\nNext\n\nProfiling Data with Python"
  },
  {
    "title": "Data Preparation in the Shell",
    "filename": "Data_Preparation_in_the_Shell.md",
    "text": "Data Preparation in the Shell\n-------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/XEdy4WK70vU)\n\nYou’ll learn how to use UNIX tools to process and clean data, covering:\n\n curl (or wget) to fetch data from websites.\n gzip (or xz) to compress and decompress files.\n wc to count lines, words, and characters in text.\n head and tail to get the start and end of files.\n cut to extract specific columns from text.\n uniq to de-duplicate lines.\n sort to sort lines.\n grep to filter lines containing specific text.\n sed to search and replace text.\n awk for more complex text processing.\n\nHere are the links used in the video:\n\n Data preparation in the shell - Notebook\n Data Science at the Command Line\n\nPrevious\n\nData Aggregation in Excel\n\nNext\n\nData Preparation in the Editor"
  },
  {
    "title": "Visualizing Network Data with Kumu",
    "filename": "Visualizing_Network_Data_with_Kumu.md",
    "text": "Visualizing Network Data with Kumu\n----------------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/OndB17bigkc)\n\n Kumu\n IMDB data\n Jupyter Notebook\n\n[](https://youtu.be/oi4fDzqsCes)\n\nPrevious\n\nVisualizing Animated Data with Flourish\n\nNext\n\nVisualizing Charts with Excel"
  },
  {
    "title": "LLM Text Extraction",
    "filename": "LLM_Text_Extraction.md",
    "text": "LLM Text Extraction\n-------------------------------------------------------------------\n\nJSON is one of the most widely used formats in the world for applications to exchange data.\n\n[](https://youtu.be/72514uGffPE)\n\nThis video explains how to use LLMs to extract structure from unstructured data, covering:\n\n LLM for Data Extraction: Use OpenAI’s API to extract structured information from unstructured data like addresses.\n JSON Schema: Define a JSON schema to ensure consistent and structured output from the LLM.\n Prompt Engineering: Craft effective prompts to guide the LLM’s response and improve accuracy.\n Data Cleaning: Use string functions and OpenAI’s API to clean and standardize data.\n Data Analysis: Analyze extracted data using Pandas to gain insights.\n LLM Limitations: Understand the limitations of LLMs, including potential errors and inconsistencies in output.\n Production Use Cases: Explore real-world applications of LLMs for data extraction, such as customer service email analysis.\n\nHere are the links used in the video:\n\n Jupyter Notebook\n JSON Schema\n Function calling\n\nStructured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied\nJSON Schema, so you don’t need to worry about the model omitting a required key,\nor hallucinating an invalid enum value.\n\ncurl https://api.openai.com/v1/chat/completions \\\n-H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"messages\": [\n    { \"role\": \"system\", \"content\": \"You are a helpful math tutor. Guide the user through the solution step by step.\" },\n    { \"role\": \"user\", \"content\": \"how can I solve 8x + 7 = -23\" }\n  ],\n  \"responseformat\": {\n    \"type\": \"jsonschema\",\n    \"jsonschema\": {\n      \"name\": \"mathresponse\",\n      \"strict\": true\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"steps\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": { \"explanation\": { \"type\": \"string\" }, \"output\": { \"type\": \"string\" } },\n              \"required\": [\"explanation\", \"output\"],\n              \"additionalProperties\": false\n            }\n          },\n          \"finalanswer\": { \"type\": \"string\" }\n        },\n        \"required\": [\"steps\", \"finalanswer\"],\n        \"additionalProperties\": false\n      }\n    }\n  }\n}'Copy to clipboardErrorCopied\n\nHere’s what the responseformat tells OpenAI. The items marked ⚠️ are OpenAI specific requirements for the JSON schema.\n\n \"type\": \"jsonschema\": We want you to generate a JSON response that follows this schema.\n \"jsonschema\":: We’re going to give you a schema.\n  + \"name\": \"mathresponse\": The schema is called mathresponse. (We can call it anything.)\n  + \"strict\": true: Follow the schema exactly.\n  + \"schema\":: Now, here’s the actual JSON schema.\n    - \"type\": \"object\": Return an object. ⚠️ The root object must be an object.\n    - \"properties\":: The object has these properties:\n       \"steps\":: There’s a steps property.\n        + \"type\": \"array\": It’s an array.\n        + \"items\":: Each item in the array…\n          - \"type\": \"object\": … is an object.\n          - \"properties\":: The object has these properties:\n             \"explanation\":: There’s an explanation property.\n              + \"type\": \"string\": … which is a string.\n             \"output\":: There’s an output property.\n              + \"type\": \"string\": … which is a string, too.\n          - \"required\": [\"explanation\", \"output\"]: ⚠️ You must add \"required\": [...] and include all fields int he object.\n          - \"additionalProperties\": false: ⚠️ OpenAI requires every object to have \"additionalProperties\": false.\n       \"finalanswer\":: There’s a finalanswer property.\n        + \"type\": \"string\": … which is a string.\n    - \"required\": [\"steps\", \"finalanswer\"]: ⚠️ You must add \"required\": [...] and include all fields in the object.\n    - \"additionalProperties\": false: ⚠️ OpenAI requires every object to have \"additionalProperties\": false.\n\nPrevious\n\nLLM Sentiment Analysis\n\nNext\n\nBase 64 Encoding"
  },
  {
    "title": "Data Analysis with DuckDB",
    "filename": "Data_Analysis_with_DuckDB.md",
    "text": "Data Analysis with DuckDB\n-------------------------------------------------------------------------------------\n\n[](https://youtu.be/4U0GqYrET5s)\n\nYou’ll learn how to perform data analysis using DuckDB and Pandas, covering:\n\n Parquet for Data Storage: Understand why Parquet is a faster, more compact, and better-typed storage format compared to CSV, JSON, and SQLite.\n DuckDB Setup: Learn how to install and set up DuckDB, along with integrating it into a Jupyter notebook environment.\n File Format Comparisons: Compare file formats by speed and size, observing the performance difference between saving and loading data in CSV, JSON, SQLite, and Parquet.\n Faster Queries with DuckDB: Learn how DuckDB uses parallel processing, columnar storage, and on-disk operations to outperform Pandas in speed and memory efficiency.\n SQL Query Execution in DuckDB: Run SQL queries directly on Parquet files and Pandas DataFrames to compute metrics such as the number of unique flight routes delayed by certain time intervals.\n Memory Efficiency: Understand how DuckDB performs analytics without loading entire datasets into memory, making it highly efficient for large-scale data analysis.\n Mixing DuckDB and Pandas: Learn to interleave DuckDB and Pandas operations, leveraging the strengths of both tools to perform complex queries like correlations and aggregations.\n Ranking and Filtering Data: Use SQL and Pandas to rank arrival delays by distance and extract key insights, such as the earliest flight arrival for each route.\n Joining Data: Create a cost analysis by joining datasets and calculating total costs of flight delays, demonstrating DuckDB’s speed in joining and aggregating large datasets.\n\nHere are the links used in the video:\n\n Data analysis with DuckDB - Notebook\n Parquet file format - a fast columnar storage format that’s becoming a de facto standard for big data\n DuckDB - a fast in-memory database that’s very good with large-scale analysis\n Plotly Datasets - a collection of sample datasets for analysis. This includes the Kaggle Flights Dataset that the notebook downloads as 2015\\flights.parquet\n\nPrevious\n\nData Analysis with Datasette\n\nNext\n\nData Analysis with ChatGPT"
  },
  {
    "title": "TDS TA Instructions",
    "filename": "TDS_TA_Instructions.md",
    "text": "TDS TA Instructions\n===================================================================\n\nThe TDS TA is a virtual assistant that helps you with your doubts.\n\nIt has been trained on course content created as follows:\n\nClone the course repository\ngit clone https://github.com/sanand0/tools-in-data-science-public.git\ncd tools-in-data-science-public\n\nCreate a prompt file for the TA\nPYTHONUTF8=1 uvx files-to-prompt --cxml .md -o tds-content.xml\nReplace the source with the URL of the course\nsed -i \"s/<source>/<source>https:\\/\\/tds.s-anand.net\\/\\//g\" tds-content.xmlCopy to clipboardErrorCopied\n\nAdditionally, we visit each of the evaluation links on <https://exam.sanand.workers.dev/>, copy it as Markdown, and add it to the content, called ga1.md, ga2.md, etc.\n\nThese files are uploaded to the IITM TDS Teaching Assistant.\n\nTake a look at the GPT’s instructions. These were generated by the OpenAI Prompt Generation tool.\n\nAs a Teaching Assistant (TA) for the Tools in Data Science course at IIT Madras, guide students through course-related questions.\n\n1. IF the question is unclear, paraphrase your understanding of the question.\n2. Cite all relevant sections from tds-content.xml or ga.md. Begin with: \"According to this reference, ...\". Cite ONLY from the relevant <source>. ALWAYS cite verbatim. Mention ALL material relevant to the question.\n3. Search online for additional answers. Share results WITH CITATION LINKS.\n4. Think step-by-step. Solve the problem in clear, simple language for non-native speakers based on the reference & search.\n5. Follow-up: Ask thoughtful questions to help students explore and learn.Copy to clipboardErrorCopied\n\nPrevious\n\nPrompt engineering\n\nNext\n\nTDS GPT Reviewer"
  },
  {
    "title": "Vision Models",
    "filename": "Vision_Models.md",
    "text": "Vision Models\n-------------------------------------------------\n\n[](https://youtu.be/FgTMkbakQ)\n\nYou’ll learn how to use LLMs to interpret images and extract useful information, covering:\n\n Setting Up Vision Models: Integrate vision capabilities with LLMs using APIs like OpenAI’s Chat Completion.\n Sending Image URLs for Analysis: Pass URLs or base64-encoded images to LLMs for processing.\n Reading Image Responses: Get detailed textual descriptions of images, from scenic landscapes to specific objects like cricketers or bank statements.\n Extracting Data from Images: Convert extracted image data to various formats like Markdown tables or JSON arrays.\n Handling Model Hallucinations: Address inaccuracies in extraction results, understanding how different prompts can affect output quality.\n Cost Management for Vision Models: Adjust detail settings (e.g., “detail: low”) to balance cost and output precision.\n\nHere are the links used in the video:\n\n Jupyter Notebook\n OpenAI Chat API Reference\n OpenAI Vision Guide\n Sample images used\n\nHere is an example of how to analyze an image using the OpenAI API.\n\ncurl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-4o-mini\",\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": [\n          {\"type\": \"text\", \"text\": \"What is in this image?\"},\n          {\n            \"type\": \"imageurl\",\n            \"detail\": \"low\",\n            \"imageurl\": {\"url\": \"https://upload.wikimedia.org/wikipedia/commons/3/34/Correlationcoefficient.png\"}\n          }\n        ]\n      }\n    ]\n  }'Copy to clipboardErrorCopied\n\nLet’s break down the request:\n\n curl https://api.openai.com/v1/chat/completions: The API endpoint for text generation.\n -H \"Content-Type: application/json\": The content type of the request.\n -H \"Authorization: Bearer $OPENAIAPIKEY\": The API key for authentication.\n -d: The request body.\n  + \"model\": \"gpt-4o-mini\": The model to use for text generation.\n  + \"messages\":: The messages to send to the model.\n    - \"role\": \"user\": The role of the message.\n    - \"content\":: The content of the message.\n       {\"type\": \"text\", \"text\": \"What is in this image?\"}: The text message.\n       {\"type\": \"imageurl\"}: The image message.\n        + \"detail\": \"low\": The detail level of the image. low uses fewer tokens at lower detail. high uses more tokens for higher detail.\n        + \"imageurl\": {\"url\": \"https://upload.wikimedia.org/wikipedia/commons/3/34/Correlationcoefficient.png\"}: The URL of the image.\n\nYou can send images in a base64 encoded format, too. For example:\n\nDownload image and convert to base64 in one step\nIMAGEBASE64=$(curl -s \"https://upload.wikimedia.org/wikipedia/commons/3/34/Correlationcoefficient.png\" | base64 -w 0)\n\nSend to OpenAI API\ncurl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d @- << EOF\n{\n  \"model\": \"gpt-4o-mini\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\"type\": \"text\", \"text\": \"What is in this image?\"},\n        {\n          \"type\": \"imageurl\",\n          \"imageurl\": { \"url\": \"data:image/png;base64,$IMAGEBASE64\" }\n        }\n      ]\n    }\n  ]\n}\nEOFCopy to clipboardErrorCopied\n\nPrevious\n\nBase 64 Encoding\n\nNext\n\nEmbeddings"
  },
  {
    "title": "DevContainers: GitHub Codespaces",
    "filename": "DevContainers__GitHub_Codespaces.md",
    "text": "IDE: GitHub Codespaces\n----------------------------------------------------------------------\n\nGitHub Codespaces is a cloud-hosted development environment built right into GitHub that gets you coding faster with pre-configured containers, adjustable compute power, and seamless integration with workflows like Actions and Copilot.\n\nWhy Codespaces helps\n\n Reproducible onboarding: Say goodbye to “works on my machine” woes—everyone uses the same setup for assignments or demos.\n Anywhere access: Jump back into your project from a laptop, tablet, or phone without having to reinstall anything.\n Rapid experimentation & debugging: Spin up short-lived environments on any branch, commit, or PR to isolate bugs or test features, or keep longer-lived codespaces for big projects.\n\n[](https://www.youtube.com/watch?v=-tQ2nxjqP6o)\n\nQuick Setup\n\n1. From the GitHub UI\n\n    Go to your repo and click Code → Codespaces → New codespace.\n    Pick the branch and machine specs (2–32 cores, 8–64 GB RAM), then click Create codespace.\n2. In Visual Studio Code\n\n    Press Ctrl+Shift+P (or Cmd+Shift+P on Mac), choose Codespaces: Create New Codespace, and follow the prompts.\n3. Via GitHub CLI\n\n   \n   gh auth login\n   gh codespace create --repo OWNER/REPO\n   gh codespace list     List all codespaces\n   gh codespace code     opens in your local VS Code\n   gh codespace ssh      SSH into the codepsaceCopy to clipboardErrorCopied\n   \n\nFeatures To Explore\n\n Dev Containers: Set up your environment the same way every time using a devcontainer.json or your own Dockerfile. Introduction to dev containers\n Prebuilds: Build bigger or more complex repos in advance so codespaces start up in a flash. About prebuilds\n Port Forwarding: Let Codespaces spot and forward the ports your web apps use automatically. Forward ports in Codespaces\n Secrets & Variables: Keep your environment variables safe in the Codespaces settings for your repo. Manage Codespaces secrets\n Dotfiles Integration: Bring in your dotfiles repo to customize shell settings, aliases, and tools in every codespace. Personalizing your codespaces\n Machine Types & Cost Control: Pick from VMs with 2 to 32 cores and track your usage in the billing dashboard. Managing Codespaces costs\n VS Code & CLI Integration: Flip between browser VS Code and your desktop editor, and script everything with the CLI. VS Code Remote: Codespaces\n GitHub Actions: Power up prebuilds and your CI/CD right inside codespaces using Actions workflows. Prebuilding your codespaces\n Copilot in Codespaces: Let Copilot help you write code with in-editor AI suggestions. Copilot in Codespaces\n\nPrevious\n\nContainers: Docker, Podman\n\nNext\n\nTunneling: ngrok"
  },
  {
    "title": "DevContainers: GitHub Codespaces",
    "filename": "DevContainers__GitHub_Codespaces.md",
    "text": "IDE: GitHub Codespaces\n----------------------------------------------------------------------\n\nGitHub Codespaces is a cloud-hosted development environment built right into GitHub that gets you coding faster with pre-configured containers, adjustable compute power, and seamless integration with workflows like Actions and Copilot.\n\nWhy Codespaces helps\n\n Reproducible onboarding: Say goodbye to “works on my machine” woes—everyone uses the same setup for assignments or demos.\n Anywhere access: Jump back into your project from a laptop, tablet, or phone without having to reinstall anything.\n Rapid experimentation & debugging: Spin up short-lived environments on any branch, commit, or PR to isolate bugs or test features, or keep longer-lived codespaces for big projects.\n\n[](https://www.youtube.com/watch?v=-tQ2nxjqP6o)\n\nQuick Setup\n\n1. From the GitHub UI\n\n    Go to your repo and click Code → Codespaces → New codespace.\n    Pick the branch and machine specs (2–32 cores, 8–64 GB RAM), then click Create codespace.\n2. In Visual Studio Code\n\n    Press Ctrl+Shift+P (or Cmd+Shift+P on Mac), choose Codespaces: Create New Codespace, and follow the prompts.\n3. Via GitHub CLI\n\n   \n   gh auth login\n   gh codespace create --repo OWNER/REPO\n   gh codespace list     List all codespaces\n   gh codespace code     opens in your local VS Code\n   gh codespace ssh      SSH into the codepsaceCopy to clipboardErrorCopied\n   \n\nFeatures To Explore\n\n Dev Containers: Set up your environment the same way every time using a devcontainer.json or your own Dockerfile. Introduction to dev containers\n Prebuilds: Build bigger or more complex repos in advance so codespaces start up in a flash. About prebuilds\n Port Forwarding: Let Codespaces spot and forward the ports your web apps use automatically. Forward ports in Codespaces\n Secrets & Variables: Keep your environment variables safe in the Codespaces settings for your repo. Manage Codespaces secrets\n Dotfiles Integration: Bring in your dotfiles repo to customize shell settings, aliases, and tools in every codespace. Personalizing your codespaces\n Machine Types & Cost Control: Pick from VMs with 2 to 32 cores and track your usage in the billing dashboard. Managing Codespaces costs\n VS Code & CLI Integration: Flip between browser VS Code and your desktop editor, and script everything with the CLI. VS Code Remote: Codespaces\n GitHub Actions: Power up prebuilds and your CI/CD right inside codespaces using Actions workflows. Prebuilding your codespaces\n Copilot in Codespaces: Let Copilot help you write code with in-editor AI suggestions. Copilot in Codespaces\n\nPrevious\n\nContainers: Docker, Podman\n\nNext\n\nTunneling: ngrok"
  },
  {
    "title": "DevContainers: GitHub Codespaces",
    "filename": "DevContainers__GitHub_Codespaces.md",
    "text": "IDE: GitHub Codespaces\n----------------------------------------------------------------------\n\nGitHub Codespaces is a cloud-hosted development environment built right into GitHub that gets you coding faster with pre-configured containers, adjustable compute power, and seamless integration with workflows like Actions and Copilot.\n\nWhy Codespaces helps\n\n Reproducible onboarding: Say goodbye to “works on my machine” woes—everyone uses the same setup for assignments or demos.\n Anywhere access: Jump back into your project from a laptop, tablet, or phone without having to reinstall anything.\n Rapid experimentation & debugging: Spin up short-lived environments on any branch, commit, or PR to isolate bugs or test features, or keep longer-lived codespaces for big projects.\n\n[](https://www.youtube.com/watch?v=-tQ2nxjqP6o)\n\nQuick Setup\n\n1. From the GitHub UI\n\n    Go to your repo and click Code → Codespaces → New codespace.\n    Pick the branch and machine specs (2–32 cores, 8–64 GB RAM), then click Create codespace.\n2. In Visual Studio Code\n\n    Press Ctrl+Shift+P (or Cmd+Shift+P on Mac), choose Codespaces: Create New Codespace, and follow the prompts.\n3. Via GitHub CLI\n\n   \n   gh auth login\n   gh codespace create --repo OWNER/REPO\n   gh codespace list     List all codespaces\n   gh codespace code     opens in your local VS Code\n   gh codespace ssh      SSH into the codepsaceCopy to clipboardErrorCopied\n   \n\nFeatures To Explore\n\n Dev Containers: Set up your environment the same way every time using a devcontainer.json or your own Dockerfile. Introduction to dev containers\n Prebuilds: Build bigger or more complex repos in advance so codespaces start up in a flash. About prebuilds\n Port Forwarding: Let Codespaces spot and forward the ports your web apps use automatically. Forward ports in Codespaces\n Secrets & Variables: Keep your environment variables safe in the Codespaces settings for your repo. Manage Codespaces secrets\n Dotfiles Integration: Bring in your dotfiles repo to customize shell settings, aliases, and tools in every codespace. Personalizing your codespaces\n Machine Types & Cost Control: Pick from VMs with 2 to 32 cores and track your usage in the billing dashboard. Managing Codespaces costs\n VS Code & CLI Integration: Flip between browser VS Code and your desktop editor, and script everything with the CLI. VS Code Remote: Codespaces\n GitHub Actions: Power up prebuilds and your CI/CD right inside codespaces using Actions workflows. Prebuilding your codespaces\n Copilot in Codespaces: Let Copilot help you write code with in-editor AI suggestions. Copilot in Codespaces\n\nPrevious\n\nContainers: Docker, Podman\n\nNext\n\nTunneling: ngrok"
  },
  {
    "title": "Serverless hosting: Vercel",
    "filename": "Serverless_hosting__Vercel.md",
    "text": "Serverless hosting: Vercel\n-------------------------------------------------------------------\n\nServerless platforms let you rent a single function instead of an entire machine. They’re perfect for small web tools that don’t need to run all the time. Here are some common real-life uses:\n\n A contact form that emails you when someone wants to hire you (runs for 2-3 seconds, a few times per day)\n A tool that converts uploaded photos to black and white (runs for 5-10 seconds when someone uploads a photo)\n A chatbot that answers basic questions about your business hours (runs for 1-2 seconds per question)\n A newsletter sign-up that adds emails to your mailing list (runs for 1 second per sign-up)\n A webhook that posts your Etsy sales to Discord (runs for 1 second whenever you make a sale)\n\nYou only pay when someone uses your tool, and the platform automatically handles busy periods. For example, if 100 people fill out your contact form at once, the platform creates 100 temporary copies of your code to handle them all. When they’re done, these copies disappear. It’s cheaper than running a full-time server because you’re not paying for the time when no one is using your tool - most tools are idle 95% of the time!\n\nRather than writing a full program, serverless platforms let you write functions. These functions are called via HTTP requests. They run in a cloud environment and are scaled up and down automatically. But this means you write programs in a different style. For example:\n\n You can’t pip install packages - you have to use requirements.txt\n You can’t read or write files from the file system - you can only use APIs.\n You can’t run commands (e.g. subprocess.run())\n\nVercel is a cloud platform optimized for frontend frameworks and serverless functions. Vercel is tightly integrated with GitHub. Pushing to your repository automatically triggers new deployments.\n\nHere’s a quickstart. Sign-up with Vercel. Create an empty git repo with this api/index.py file.\n\nTo deploy a FastAPI app, add a requirements.txt file with fastapi as a dependency.\n\nfastapiCopy to clipboardErrorCopied\n\nAdd your FastAPI code to a file, e.g. main.py.\n\nmain.py\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef readroot():\n    return {\"message\": \"Hello, World!\"}Copy to clipboardErrorCopied\n\nAdd a vercel.json file to the root of your repository.\n\n{\n  \"builds\": [{ \"src\": \"main.py\", \"use\": \"@vercel/python\" }],\n  \"routes\": [{ \"src\": \"/(.)\", \"dest\": \"main.py\" }]\n}Copy to clipboardErrorCopied\n\nOn the command line, run:\n\n npx vercel to deploy a test version\n npx vercel --prod to deploy to production\n\nEnvironment Variables. Use npx vercel env add to add environment variables. In your code, use os.environ.get('SECRETKEY') to access them.\n\nVideos\n\n[](https://youtu.be/sPmat30SE4k)\n\n[](https://youtu.be/8R-cetfsZ4)\n\nPrevious\n\nNotebooks: Google Colab\n\nNext\n\nCI/CD: GitHub Actions"
  },
  {
    "title": "Spreadsheet: Excel, Google Sheets",
    "filename": "Spreadsheet__Excel,_Google_Sheets.md",
    "text": "Spreadsheet: Excel, Google Sheets\n--------------------------------------------------------------------------------------\n\nYou’ll use spreadsheets for data cleaning and exploration. The most popular spreadsheet program is Microsoft Excel followed by Google Sheets.\n\nYou may be already familiar with these. If not, make sure to learn the basics of both.\n\nGo through the Microsoft Excel video training and make sure you cover:\n\n Intro to Excel\n Rows & columns\n Cells\n Formatting\n Formulas & Functions\n Tables\n PivotTables\n\nWatch this video for an introduction to Google Sheets (49 min):\n\n[](https://youtu.be/TENAbUa-R-w)\n\nPrevious\n\nAI Terminal Tools: llm\n\nNext\n\nDatabase: SQLite"
  },
  {
    "title": "Scraping PDFs with Tabula",
    "filename": "Scraping_PDFs_with_Tabula.md",
    "text": "Scraping PDFs with Tabula\n-------------------------------------------------------------------------------------\n\n[](https://youtu.be/yDoKlKyxClQ)\n\nYou’ll learn how to scrape tables from PDFs using the tabula Python library, covering:\n\n Import Libraries: Use Beautiful Soup for URL parsing and Tabula for extracting tables from PDFs.\n Specify Save Location: Mount Google Drive to save scraped PDFs.\n Identify PDF URLs: Parse the given URL to identify and select all PDF links.\n Download PDFs: Loop through identified links, saving each PDF to the specified location.\n Extract Tables: Use Tabula to read tabular content from the downloaded PDFs.\n Control Extraction Area: Specify page and area coordinates to accurately extract tables, avoiding extraneous text.\n Save Extracted Data: Convert the extracted table data into structured formats like CSV for further analysis.\n\nHere are links and references:\n\n PDF Scraping - Notebook\n Learn about the tabula package\n Learn about the pandas package. Video\n\nPrevious\n\nWikipedia Data with Python\n\nNext\n\nConvert PDFs to Markdown"
  },
  {
    "title": "Visualizing Animated Data with PowerPoint",
    "filename": "Visualizing_Animated_Data_with_PowerPoint.md",
    "text": "Visualizing Animated Data with PowerPoint\n-------------------------------------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/umHlPDFVWr0)\n\n How to make a bar chart race in PowerPoint\n\nPrevious\n\nVisualizing Forecasts with Excel\n\nNext\n\nVisualizing Animated Data with Flourish"
  },
  {
    "title": "3. Large Language Models",
    "filename": "3._Large_Language_Models.md",
    "text": "Large Language Models\n=========================================================================\n\nThis module covers the practical usage of large language models (LLMs).\n\nLLMs incur a cost. For the May 2025 batch, use aipipe.org as a proxy.\nEmails with @ds.study.iitm.ac.in get a $1 per calendar month allowance. (Don’t exceed that.)\n\nRead the AI Pipe documentation to learn how to use it. But in short:\n\n1. Replace OPENAIBASEURL, i.e. https://api.openai.com/v1 with https://aipipe.org/openrouter/v1... or https://aipipe.org/openai/v1...\n2. Replace OPENAIAPIKEY with the AIPIPETOKEN\n3. Replace model names, e.g. gpt-4.1-nano, with openai/gpt-4.1-nano\n\nFor example, let’s use Gemini 2.0 Flash Lite via OpenRouter for chat completions and Text Embedding 3 Small via OpenAI for embeddings:\n\ncurl https://aipipe.org/openrouter/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $AIPIPETOKEN\" \\\n  -d '{\n    \"model\": \"google/gemini-2.0-flash-lite-001\",\n    \"messages\": [{ \"role\": \"user\", \"content\": \"What is 2 + 2?\"} }]\n  }'\n\ncurl https://aipipe.org/openai/v1/embeddings \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $AIPIPETOKEN\" \\\n  -d '{ \"model\": \"text-embedding-3-small\", \"input\": \"What is 2 + 2?\" }'Copy to clipboardErrorCopied\n\nOr using llm:\n\nllm keys set openai --value $AIPIPETOKEN\n\nexport OPENAIBASEURL=https://aipipe.org/openrouter/v1\nllm 'What is 2 + 2?' -m openrouter/google/gemini-2.0-flash-lite-001\n\nexport OPENAIBASEURL=https://aipipe.org/openai/v1\nllm embed -c 'What is 2 + 2' -m 3-smallCopy to clipboardErrorCopied\n\nFor a 50% discount (but slower speed), use Flex processing by adding servicetier: \"flex\" to your JSON request.\n\nAI Proxy - Jan 2025\n-------------------------------------------------------------------\n\nFor the Jan 2025 batch, we had created API keys for everyone with an iitm.ac.in email to use gpt-4o-mini and text-embedding-3-small. Your usage is limited to $1 per calendar month for this course. Don’t exceed that.\n\nUse AI Proxy instead of OpenAI. Specifically:\n\n1. Replace your API to https://api.openai.com/... with https://aiproxy.sanand.workers.dev/openai/...\n2. Replace the OPENAIAPIKEY with the AIPROXYTOKEN that someone will give you.\n\nPrevious\n\nLocal LLMs: Ollama\n\nNext\n\nPrompt engineering"
  },
  {
    "title": "3. Large Language Models",
    "filename": "3._Large_Language_Models.md",
    "text": "Large Language Models\n=========================================================================\n\nThis module covers the practical usage of large language models (LLMs).\n\nLLMs incur a cost. For the May 2025 batch, use aipipe.org as a proxy.\nEmails with @ds.study.iitm.ac.in get a $1 per calendar month allowance. (Don’t exceed that.)\n\nRead the AI Pipe documentation to learn how to use it. But in short:\n\n1. Replace OPENAIBASEURL, i.e. https://api.openai.com/v1 with https://aipipe.org/openrouter/v1... or https://aipipe.org/openai/v1...\n2. Replace OPENAIAPIKEY with the AIPIPETOKEN\n3. Replace model names, e.g. gpt-4.1-nano, with openai/gpt-4.1-nano\n\nFor example, let’s use Gemini 2.0 Flash Lite via OpenRouter for chat completions and Text Embedding 3 Small via OpenAI for embeddings:\n\ncurl https://aipipe.org/openrouter/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $AIPIPETOKEN\" \\\n  -d '{\n    \"model\": \"google/gemini-2.0-flash-lite-001\",\n    \"messages\": [{ \"role\": \"user\", \"content\": \"What is 2 + 2?\"} }]\n  }'\n\ncurl https://aipipe.org/openai/v1/embeddings \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $AIPIPETOKEN\" \\\n  -d '{ \"model\": \"text-embedding-3-small\", \"input\": \"What is 2 + 2?\" }'Copy to clipboardErrorCopied\n\nOr using llm:\n\nllm keys set openai --value $AIPIPETOKEN\n\nexport OPENAIBASEURL=https://aipipe.org/openrouter/v1\nllm 'What is 2 + 2?' -m openrouter/google/gemini-2.0-flash-lite-001\n\nexport OPENAIBASEURL=https://aipipe.org/openai/v1\nllm embed -c 'What is 2 + 2' -m 3-smallCopy to clipboardErrorCopied\n\nFor a 50% discount (but slower speed), use Flex processing by adding servicetier: \"flex\" to your JSON request.\n\nAI Proxy - Jan 2025\n-------------------------------------------------------------------\n\nFor the Jan 2025 batch, we had created API keys for everyone with an iitm.ac.in email to use gpt-4o-mini and text-embedding-3-small. Your usage is limited to $1 per calendar month for this course. Don’t exceed that.\n\nUse AI Proxy instead of OpenAI. Specifically:\n\n1. Replace your API to https://api.openai.com/... with https://aiproxy.sanand.workers.dev/openai/...\n2. Replace the OPENAIAPIKEY with the AIPROXYTOKEN that someone will give you.\n\nPrevious\n\nLocal LLMs: Ollama\n\nNext\n\nPrompt engineering"
  },
  {
    "title": "Scraping: Live Sessions",
    "filename": "Scraping__Live_Sessions.md",
    "text": "Scraping: Live Sessions\n-----------------------------------------------------------------------------\n\n[](https://youtu.be/cAriusuJsmw)\n\nFundamentals of web scraping with urllib and BeautifulSoup\n\n[](https://youtu.be/I3auyTYORTs)\n\nIntermediate web scraping use of cookies\n\n[](https://youtu.be/DryMIxMf3VU)\n\nXML intro and scraping\n\n[](https://youtu.be/8SjvsjtaYg)\n\nPrevious\n\nScraping emarketer.com\n\nNext\n\n5. Data Preparation"
  },
  {
    "title": "Geospatial Analysis with QGIS",
    "filename": "Geospatial_Analysis_with_QGIS.md",
    "text": "Geospatial Analysis with QGIS\n-------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/tJhehs0o-ik)\n\nYou’ll learn how to use QGIS for geographic data processing, covering:\n\n Shapefiles and KML Files: Create and manage shapefiles and KML files for storing and analyzing geographic information.\n Downloading QGIS: Install QGIS on different operating systems and familiarize yourself with its interface.\n Geospatial Data: Access and utilize shapefiles from sources like Diva-GIS and integrate them into QGIS projects.\n Creating Custom Shapefiles: Learn how to create custom shapefiles when existing ones are unavailable, including creating a shapefile for South Sudan.\n Editing and Visualization: Use QGIS tools to edit shapefiles, add attributes, and visualize geographic data with various styling and labeling options.\n Exporting Data: Export shapefiles or KML files for use in other applications, such as Google Earth.\n\nHere are links used in the video:\n\n QGIS Project\n Shapefile Data\n\nPrevious\n\nGeospatial Analysis with Python\n\nNext\n\nNetwork Analysis in Python"
  },
  {
    "title": "AI Terminal Tools: llm",
    "filename": "AI_Terminal_Tools__llm.md",
    "text": "LLM CLI: llm\n------------------------------------\n\nllm is a command-line utility for interacting with large language models—simplifying prompts, managing models and plugins, logging every conversation, and extracting structured data for pipelines.\n\n[](https://youtu.be/QUXQNi6jQ30?t=100)\n\nBasic Usage\n\nInstall llm. Then set up your OPENAIAPIKEY environment variable. See Getting started.\n\nTDS Students: See Large Language Models for instructions on how to get and use OPENAIAPIKEY.\n\nRun a simple prompt\nllm 'five great names for a pet pelican'\n\nContinue a conversation\nllm -c 'now do walruses'\n\nStart a memory-aware chat session\nllm chat\n\nSpecify a model\nllm -m gpt-4.1-nano 'Summarize tomorrow’s meeting agenda'\n\nExtract JSON output\nllm 'List the top 5 Python viz libraries with descriptions' \\\n  --schema-multi 'name,description'Copy to clipboardErrorCopied\n\nOr use llm without installation using uvx:\n\nRun llm via uvx without any prior installation\nuvx llm 'Translate \"Hello, world\" into Japanese'\n\nSpecify a model\nuvx llm -m gpt-4.1-nano 'Draft a 200-word blog post on data ethics'\n\nUse structured JSON output\nuvx llm 'List the top 5 programming languages in 2025 with their release years' \\\n  --schema-multi 'rank,language,releaseyear'Copy to clipboardErrorCopied\n\nKey Features\n\n Interactive prompts: llm '…' — Fast shell access to any LLM.\n Conversational flow: -c '…' — Continue context across prompts.\n Model switching: -m MODEL — Use OpenAI, Anthropic, local models, and more.\n Structured output: llm json — Produce JSON for automation.\n Logging & history: llm logs path — Persist every prompt/response in SQLite.\n Web UI: datasette \"$(llm logs path)\" — Browse your entire history with Datasette.\n Persistent chat: llm chat — Keep the model in memory across multiple interactions.\n Plugin ecosystem: llm install PLUGIN — Add support for new models, data sources, or workflows. (Language models on the command-line - Simon Willison’s Weblog)\n\nPractical Uses\n\n Automated coding. Generate code scaffolding, review helpers, or utilities on demand. For example, after runningllm install llm-cmd, run llm cmd 'Undo the last git commit'. Inspired by Simon’s post on using LLMs for rapid tool building.\n Transcript processing. Summarize YouTube or podcast transcripts using Gemini. See Putting Gemini 2.5 Pro through its paces.\n Commit messages. Turn diffs into descriptive commit messages, e.g. git diff | llm 'Write a concise git commit message explaining these changes'. \\\n Data extraction. Convert free-text into structured JSON for automation. Structured data extraction from unstructured content using LLM schemas.\n\nPrevious\n\nTerminal: Bash\n\nNext\n\nSpreadsheet: Excel, Google Sheets"
  },
  {
    "title": "AI Terminal Tools: llm",
    "filename": "AI_Terminal_Tools__llm.md",
    "text": "LLM CLI: llm\n------------------------------------\n\nllm is a command-line utility for interacting with large language models—simplifying prompts, managing models and plugins, logging every conversation, and extracting structured data for pipelines.\n\n[](https://youtu.be/QUXQNi6jQ30?t=100)\n\nBasic Usage\n\nInstall llm. Then set up your OPENAIAPIKEY environment variable. See Getting started.\n\nTDS Students: See Large Language Models for instructions on how to get and use OPENAIAPIKEY.\n\nRun a simple prompt\nllm 'five great names for a pet pelican'\n\nContinue a conversation\nllm -c 'now do walruses'\n\nStart a memory-aware chat session\nllm chat\n\nSpecify a model\nllm -m gpt-4.1-nano 'Summarize tomorrow’s meeting agenda'\n\nExtract JSON output\nllm 'List the top 5 Python viz libraries with descriptions' \\\n  --schema-multi 'name,description'Copy to clipboardErrorCopied\n\nOr use llm without installation using uvx:\n\nRun llm via uvx without any prior installation\nuvx llm 'Translate \"Hello, world\" into Japanese'\n\nSpecify a model\nuvx llm -m gpt-4.1-nano 'Draft a 200-word blog post on data ethics'\n\nUse structured JSON output\nuvx llm 'List the top 5 programming languages in 2025 with their release years' \\\n  --schema-multi 'rank,language,releaseyear'Copy to clipboardErrorCopied\n\nKey Features\n\n Interactive prompts: llm '…' — Fast shell access to any LLM.\n Conversational flow: -c '…' — Continue context across prompts.\n Model switching: -m MODEL — Use OpenAI, Anthropic, local models, and more.\n Structured output: llm json — Produce JSON for automation.\n Logging & history: llm logs path — Persist every prompt/response in SQLite.\n Web UI: datasette \"$(llm logs path)\" — Browse your entire history with Datasette.\n Persistent chat: llm chat — Keep the model in memory across multiple interactions.\n Plugin ecosystem: llm install PLUGIN — Add support for new models, data sources, or workflows. (Language models on the command-line - Simon Willison’s Weblog)\n\nPractical Uses\n\n Automated coding. Generate code scaffolding, review helpers, or utilities on demand. For example, after runningllm install llm-cmd, run llm cmd 'Undo the last git commit'. Inspired by Simon’s post on using LLMs for rapid tool building.\n Transcript processing. Summarize YouTube or podcast transcripts using Gemini. See Putting Gemini 2.5 Pro through its paces.\n Commit messages. Turn diffs into descriptive commit messages, e.g. git diff | llm 'Write a concise git commit message explaining these changes'. \\\n Data extraction. Convert free-text into structured JSON for automation. Structured data extraction from unstructured content using LLM schemas.\n\nPrevious\n\nTerminal: Bash\n\nNext\n\nSpreadsheet: Excel, Google Sheets"
  },
  {
    "title": "AI Terminal Tools: llm",
    "filename": "AI_Terminal_Tools__llm.md",
    "text": "LLM CLI: llm\n------------------------------------\n\nllm is a command-line utility for interacting with large language models—simplifying prompts, managing models and plugins, logging every conversation, and extracting structured data for pipelines.\n\n[](https://youtu.be/QUXQNi6jQ30?t=100)\n\nBasic Usage\n\nInstall llm. Then set up your OPENAIAPIKEY environment variable. See Getting started.\n\nTDS Students: See Large Language Models for instructions on how to get and use OPENAIAPIKEY.\n\nRun a simple prompt\nllm 'five great names for a pet pelican'\n\nContinue a conversation\nllm -c 'now do walruses'\n\nStart a memory-aware chat session\nllm chat\n\nSpecify a model\nllm -m gpt-4.1-nano 'Summarize tomorrow’s meeting agenda'\n\nExtract JSON output\nllm 'List the top 5 Python viz libraries with descriptions' \\\n  --schema-multi 'name,description'Copy to clipboardErrorCopied\n\nOr use llm without installation using uvx:\n\nRun llm via uvx without any prior installation\nuvx llm 'Translate \"Hello, world\" into Japanese'\n\nSpecify a model\nuvx llm -m gpt-4.1-nano 'Draft a 200-word blog post on data ethics'\n\nUse structured JSON output\nuvx llm 'List the top 5 programming languages in 2025 with their release years' \\\n  --schema-multi 'rank,language,releaseyear'Copy to clipboardErrorCopied\n\nKey Features\n\n Interactive prompts: llm '…' — Fast shell access to any LLM.\n Conversational flow: -c '…' — Continue context across prompts.\n Model switching: -m MODEL — Use OpenAI, Anthropic, local models, and more.\n Structured output: llm json — Produce JSON for automation.\n Logging & history: llm logs path — Persist every prompt/response in SQLite.\n Web UI: datasette \"$(llm logs path)\" — Browse your entire history with Datasette.\n Persistent chat: llm chat — Keep the model in memory across multiple interactions.\n Plugin ecosystem: llm install PLUGIN — Add support for new models, data sources, or workflows. (Language models on the command-line - Simon Willison’s Weblog)\n\nPractical Uses\n\n Automated coding. Generate code scaffolding, review helpers, or utilities on demand. For example, after runningllm install llm-cmd, run llm cmd 'Undo the last git commit'. Inspired by Simon’s post on using LLMs for rapid tool building.\n Transcript processing. Summarize YouTube or podcast transcripts using Gemini. See Putting Gemini 2.5 Pro through its paces.\n Commit messages. Turn diffs into descriptive commit messages, e.g. git diff | llm 'Write a concise git commit message explaining these changes'. \\\n Data extraction. Convert free-text into structured JSON for automation. Structured data extraction from unstructured content using LLM schemas.\n\nPrevious\n\nTerminal: Bash\n\nNext\n\nSpreadsheet: Excel, Google Sheets"
  },
  {
    "title": "LLM Website Scraping",
    "filename": "LLM_Website_Scraping.md",
    "text": "LLM Website Scraping\n----------------------------------------------------------------------\n\nPrevious\n\nConvert HTML to Markdown\n\nNext\n\nLLM Video Screen-Scraping"
  },
  {
    "title": "Prompt engineering",
    "filename": "Prompt_engineering.md",
    "text": "Prompt Engineering\n----------------------------------------------------------------\n\nPrompt engineering is the process of crafting effective prompts for large language models (LLMs).\n\nOne of the best ways to approach prompt engineering is to think of LLMs as a smart colleague (with amnesia) who needs explicit instructions.\n\nThe most authoritative guides are from the LLM providers themselves:\n\n Anthropic\n Google\n OpenAI\n\nHere are some best practices:\n\nUse prompt optimizers\n\nThey rewrite your prompt to improve it. Explore:\n\n Anthropic Prompt Optimizer\n OpenAI Prompt Generation\n Google AI-powered prompt writing tools\n\nBe clear, direct, and detailed\n\nBe explicit and thorough. Include all necessary context, goals, and details so the model understands the full picture.\n\n BAD: Explain gravitation lensing. (Reason: Vague and lacks context or detail.)\n GOOD: Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy. (Reason: Specifies the audience, scope, and focus.)\n\n> When you ask a question, don’t be vague. Spell it out. Give every detail the listener needs.\n> The clearer you are, the better the answer you’ll get.\n> For example, don’t just say, Explain Gravitation Lensing.\n> Say, Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy.\n\nAnthropic\n| OpenAI\n| Google\n\nGive examples\n\nProvide 2-3 relevant examples to guide the model on the style, structure, or format you expect. This helps the model produce outputs consistent with your desired style.\n\n BAD: Explain how to tie a bow tie. (Reason: No examples or reference points given.)\n GOOD:\n  Explain how to tie a bow tie. For example:\n\n  1. To tie a shoelace, you cross the laces and pull them tight…\n  2. To tie a necktie, you place it around the collar and loop it through…\n\n  Now, apply a similar step-by-step style to describe how to tie a bow tie. (Reason: Provides clear examples and a pattern to follow.)\n\n> Give examples to the model. If you want someone to build a house, show them a sketch. Don’t just say ‘build something.’\n> Giving examples is like showing a pattern. It makes everything easier to follow.\n\nAnthropic\n| OpenAI\n| Google\n\nThink step by step\n\nInstruct the model to reason through the problem step by step. This leads to more logical, well-structured answers.\n\n BAD: Given this transcript, is the customer satisfied? (Reason: No prompt for structured reasoning.)\n GOOD: Given this transcript, is the customer satisfied? Think step by step. (Reason: Directly instructs the model to break down reasoning into steps.)\n\n> Ask the model to think step by step. Don’t ask the model to just give the final answer right away.\n> That’s like asking someone to answer with the first thing that pops into their head.\n> Instead, ask them to break down their thought process into simple moves — like showing each rung of a ladder as they climb.\n> For example, when thinking step by step, the model could, A, list each customer question, B, find out if it was addressed, and C, decide that the agent answered only 2 out of the 3 questions.\n\nAnthropic\n| OpenAI\n| Google\n\nAssign a role\n\nSpecify a role or persona for the model. This provides context and helps tailor the response style.\n\n BAD: Explain how to fix a software bug. (Reason: No role or perspective given.)\n GOOD: You are a seasoned software engineer. Explain how to fix a software bug in legacy code, including the debugging and testing process. (Reason: Assigns a clear, knowledgeable persona, guiding the style and depth.)\n\n> Tell the model who they are. Maybe they’re a seasoned software engineer fixing a legacy bug, or an experienced copy editor revising a publication.\n> By clearly telling the model who they are, you help them speak with just the right expertise and style.\n> Suddenly, your explanation sounds like it’s coming from a true specialist, not a random voice.\n\nAnthropic\n| OpenAI\n| Google\n\nUse XML to structure your prompt\n\nUse XML tags to separate different parts of the prompt clearly. This helps the model understand structure and requirements.\n\n BAD: Here’s what I want: Provide a summary and then an example. (Reason: Unstructured, no clear separation of tasks.)\n GOOD:\n\n  \n  <instructions>\n    Provide a summary of the concept of machine learning.\n  </instructions>\n  <example>\n    Then provide a simple, concrete example of a machine learning application (e.g., an email spam filter).\n  </example>Copy to clipboardErrorCopied\n  \n\n  (Reason: Uses XML tags to clearly distinguish instructions from examples.)\n\n> Think of your request like a box. XML tags are neat little labels on that box.\n> They help keep parts sorted, so nothing gets lost in the shuffle.\n\nAnthropic\n| OpenAI\n| Google\n\nUse Markdown to format your output\n\nEncourage the model to use Markdown for headings, lists, code blocks, and other formatting features to produce structured, easily readable answers.\n\n BAD: Give me the steps in plain text. (Reason: No specific formatting instructions, less readable.)\n GOOD: Provide the steps in a markdown-formatted list with  headings for each section and numbered bullet points. (Reason: Directly instructs to use Markdown formatting, making output more structured and clear.)\n BAD: Correct the spelling and show the corrections. (Reason: No specific formatting instructions)\n GOOD: Correct the spelling, showing <ins>additions</ins> and <del>deletions</del>. (Reason: Directly instructs to use HTML formatting, making output more structured and clear.)\n\n> Markdown is a simple formatting language that all models understand.\n> You can have them add neat headings, sections, bold highlights, and bullet points.\n> These make complex documents more scannable and easy on the eyes.\n\nUse JSON for machine-readable output\n\nWhen you need structured data, ask for a JSON-formatted response. This ensures the output is machine-readable and organized.\n\n BAD: Just list the items. (Reason: Unstructured plain text makes parsing harder.)\n GOOD:\n\n  \n  Organize as an array of objects in a JSON format, like this:\n\n  json\n  [\n    { \"name\": \"Item 1\", \"description\": \"Description of Item 1\" },\n    { \"name\": \"Item 2\", \"description\": \"Description of Item 2\" },\n    { \"name\": \"Item 3\", \"description\": \"Description of Item 3\" }\n  ]\n  Copy to clipboardErrorCopied\n  \n\n  (Reason: Instructing JSON format ensures structured, machine-readable output.)\n\nNote: Always use JSON schema if possible. JSON schema is a way to describe the structure of JSON data. An easy way to get the JSON schema is to give ChatGPT sample output and ask it to generate the schema.\n\n> Imagine you’re organizing data for a big project. Plain text is like dumping everything into one messy pile — it’s hard to find what you need later.\n> JSON, on the other hand, is like packing your data into neat, labeled boxes within boxes.\n> Everything has its place: fields like ‘name,’ ‘description,’ and ‘value’ make the data easy to read, especially for machines.\n> For example, instead of just listing items, you can structure them as a JSON array, with each item as an object.\n> That way, when you hand it to a program, it’s all clear and ready to use.\n\nPrefer Yes/No answers\n\nConvert rating or percentage questions into Yes/No queries. LLMs handle binary choices better than numeric scales.\n\n BAD: On a scale of 1-10, how confident are you that this method works? (Reason: Asks for a numeric rating, which can be imprecise.)\n GOOD: Is this method likely to work as intended? Please give a reasoning and then answer Yes or No. (Reason: A binary question simplifies the response and clarifies what’s being asked.)\n\n> Don’t ask ‘On a scale of one to five…’. Models are not good with numbers.\n> They don’t know how to grade something 7 versus 8 on a 10 point scale. ‘Yes or no?’ is simple. It’s clear. It’s quick.\n> So, break your question into simple parts that they can answer with just a yes or a no.\n\nAsk for reason first, then the answer\n\nInstruct the model to provide its reasoning steps before stating the final answer. This makes it less likely to justify itself and more likely to think deeper, leading to more accurate results.\n\n BAD: What is the best route to take? (Reason: Direct question without prompting reasoning steps first.)\n GOOD: First, explain your reasoning step by step for how you determine the best route. Then, after you’ve reasoned it out, state your final recommendation for the best route. (Reason: Forces the model to show its reasoning process before giving the final answer.)\n\n> BEFORE making its final choice, have the model talk through their thinking. Reasoning first, answer second.\n> That way, the model won’t be tempted to justify an answer that they gave impulsively. It is also more likely to think deeper.\n\nUse proper spelling and grammar\n\nA well-written, grammatically correct prompt clarifies expectations. Poorly structured prompts can confuse the model.\n\n BAD: xplin wht the weirless netork do? make shur to giv me a anser?? (Reason: Poor spelling and unclear instructions.)\n GOOD: Explain what a wireless network does. Please provide a detailed, step-by-step explanation. (Reason: Proper spelling and clarity lead to a more coherent response.)\n\n> If your question sounds like gibberish, expect a messy answer. Speak cleanly.\n> When you do, the response will be much clearer.\n\nVideo Tutorials\n----------------------------------------------------------\n\nWatch Prompt Engineering Tutorial – Master ChatGPT and LLM Responses (41 min). It covers:\n\n1. Basics of AI and large language models.\n2. How to write clear and detailed prompts to improve answers.\n3. Tips for creating interactive and personalized AI responses.\n4. Advanced topics like AI mistakes (hallucinations) and text embeddings (how AI understands words).\n5. Fun examples, like making AI write poems or correct grammar.\n\n[](https://youtu.be/ZvnD73m40o)\n\nPrevious\n\n3. Large Language Models\n\nNext\n\nTDS TA Instructions"
  },
  {
    "title": "Prompt engineering",
    "filename": "Prompt_engineering.md",
    "text": "Prompt Engineering\n----------------------------------------------------------------\n\nPrompt engineering is the process of crafting effective prompts for large language models (LLMs).\n\nOne of the best ways to approach prompt engineering is to think of LLMs as a smart colleague (with amnesia) who needs explicit instructions.\n\nThe most authoritative guides are from the LLM providers themselves:\n\n Anthropic\n Google\n OpenAI\n\nHere are some best practices:\n\nUse prompt optimizers\n\nThey rewrite your prompt to improve it. Explore:\n\n Anthropic Prompt Optimizer\n OpenAI Prompt Generation\n Google AI-powered prompt writing tools\n\nBe clear, direct, and detailed\n\nBe explicit and thorough. Include all necessary context, goals, and details so the model understands the full picture.\n\n BAD: Explain gravitation lensing. (Reason: Vague and lacks context or detail.)\n GOOD: Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy. (Reason: Specifies the audience, scope, and focus.)\n\n> When you ask a question, don’t be vague. Spell it out. Give every detail the listener needs.\n> The clearer you are, the better the answer you’ll get.\n> For example, don’t just say, Explain Gravitation Lensing.\n> Say, Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy.\n\nAnthropic\n| OpenAI\n| Google\n\nGive examples\n\nProvide 2-3 relevant examples to guide the model on the style, structure, or format you expect. This helps the model produce outputs consistent with your desired style.\n\n BAD: Explain how to tie a bow tie. (Reason: No examples or reference points given.)\n GOOD:\n  Explain how to tie a bow tie. For example:\n\n  1. To tie a shoelace, you cross the laces and pull them tight…\n  2. To tie a necktie, you place it around the collar and loop it through…\n\n  Now, apply a similar step-by-step style to describe how to tie a bow tie. (Reason: Provides clear examples and a pattern to follow.)\n\n> Give examples to the model. If you want someone to build a house, show them a sketch. Don’t just say ‘build something.’\n> Giving examples is like showing a pattern. It makes everything easier to follow.\n\nAnthropic\n| OpenAI\n| Google\n\nThink step by step\n\nInstruct the model to reason through the problem step by step. This leads to more logical, well-structured answers.\n\n BAD: Given this transcript, is the customer satisfied? (Reason: No prompt for structured reasoning.)\n GOOD: Given this transcript, is the customer satisfied? Think step by step. (Reason: Directly instructs the model to break down reasoning into steps.)\n\n> Ask the model to think step by step. Don’t ask the model to just give the final answer right away.\n> That’s like asking someone to answer with the first thing that pops into their head.\n> Instead, ask them to break down their thought process into simple moves — like showing each rung of a ladder as they climb.\n> For example, when thinking step by step, the model could, A, list each customer question, B, find out if it was addressed, and C, decide that the agent answered only 2 out of the 3 questions.\n\nAnthropic\n| OpenAI\n| Google\n\nAssign a role\n\nSpecify a role or persona for the model. This provides context and helps tailor the response style.\n\n BAD: Explain how to fix a software bug. (Reason: No role or perspective given.)\n GOOD: You are a seasoned software engineer. Explain how to fix a software bug in legacy code, including the debugging and testing process. (Reason: Assigns a clear, knowledgeable persona, guiding the style and depth.)\n\n> Tell the model who they are. Maybe they’re a seasoned software engineer fixing a legacy bug, or an experienced copy editor revising a publication.\n> By clearly telling the model who they are, you help them speak with just the right expertise and style.\n> Suddenly, your explanation sounds like it’s coming from a true specialist, not a random voice.\n\nAnthropic\n| OpenAI\n| Google\n\nUse XML to structure your prompt\n\nUse XML tags to separate different parts of the prompt clearly. This helps the model understand structure and requirements.\n\n BAD: Here’s what I want: Provide a summary and then an example. (Reason: Unstructured, no clear separation of tasks.)\n GOOD:\n\n  \n  <instructions>\n    Provide a summary of the concept of machine learning.\n  </instructions>\n  <example>\n    Then provide a simple, concrete example of a machine learning application (e.g., an email spam filter).\n  </example>Copy to clipboardErrorCopied\n  \n\n  (Reason: Uses XML tags to clearly distinguish instructions from examples.)\n\n> Think of your request like a box. XML tags are neat little labels on that box.\n> They help keep parts sorted, so nothing gets lost in the shuffle.\n\nAnthropic\n| OpenAI\n| Google\n\nUse Markdown to format your output\n\nEncourage the model to use Markdown for headings, lists, code blocks, and other formatting features to produce structured, easily readable answers.\n\n BAD: Give me the steps in plain text. (Reason: No specific formatting instructions, less readable.)\n GOOD: Provide the steps in a markdown-formatted list with  headings for each section and numbered bullet points. (Reason: Directly instructs to use Markdown formatting, making output more structured and clear.)\n BAD: Correct the spelling and show the corrections. (Reason: No specific formatting instructions)\n GOOD: Correct the spelling, showing <ins>additions</ins> and <del>deletions</del>. (Reason: Directly instructs to use HTML formatting, making output more structured and clear.)\n\n> Markdown is a simple formatting language that all models understand.\n> You can have them add neat headings, sections, bold highlights, and bullet points.\n> These make complex documents more scannable and easy on the eyes.\n\nUse JSON for machine-readable output\n\nWhen you need structured data, ask for a JSON-formatted response. This ensures the output is machine-readable and organized.\n\n BAD: Just list the items. (Reason: Unstructured plain text makes parsing harder.)\n GOOD:\n\n  \n  Organize as an array of objects in a JSON format, like this:\n\n  json\n  [\n    { \"name\": \"Item 1\", \"description\": \"Description of Item 1\" },\n    { \"name\": \"Item 2\", \"description\": \"Description of Item 2\" },\n    { \"name\": \"Item 3\", \"description\": \"Description of Item 3\" }\n  ]\n  Copy to clipboardErrorCopied\n  \n\n  (Reason: Instructing JSON format ensures structured, machine-readable output.)\n\nNote: Always use JSON schema if possible. JSON schema is a way to describe the structure of JSON data. An easy way to get the JSON schema is to give ChatGPT sample output and ask it to generate the schema.\n\n> Imagine you’re organizing data for a big project. Plain text is like dumping everything into one messy pile — it’s hard to find what you need later.\n> JSON, on the other hand, is like packing your data into neat, labeled boxes within boxes.\n> Everything has its place: fields like ‘name,’ ‘description,’ and ‘value’ make the data easy to read, especially for machines.\n> For example, instead of just listing items, you can structure them as a JSON array, with each item as an object.\n> That way, when you hand it to a program, it’s all clear and ready to use.\n\nPrefer Yes/No answers\n\nConvert rating or percentage questions into Yes/No queries. LLMs handle binary choices better than numeric scales.\n\n BAD: On a scale of 1-10, how confident are you that this method works? (Reason: Asks for a numeric rating, which can be imprecise.)\n GOOD: Is this method likely to work as intended? Please give a reasoning and then answer Yes or No. (Reason: A binary question simplifies the response and clarifies what’s being asked.)\n\n> Don’t ask ‘On a scale of one to five…’. Models are not good with numbers.\n> They don’t know how to grade something 7 versus 8 on a 10 point scale. ‘Yes or no?’ is simple. It’s clear. It’s quick.\n> So, break your question into simple parts that they can answer with just a yes or a no.\n\nAsk for reason first, then the answer\n\nInstruct the model to provide its reasoning steps before stating the final answer. This makes it less likely to justify itself and more likely to think deeper, leading to more accurate results.\n\n BAD: What is the best route to take? (Reason: Direct question without prompting reasoning steps first.)\n GOOD: First, explain your reasoning step by step for how you determine the best route. Then, after you’ve reasoned it out, state your final recommendation for the best route. (Reason: Forces the model to show its reasoning process before giving the final answer.)\n\n> BEFORE making its final choice, have the model talk through their thinking. Reasoning first, answer second.\n> That way, the model won’t be tempted to justify an answer that they gave impulsively. It is also more likely to think deeper.\n\nUse proper spelling and grammar\n\nA well-written, grammatically correct prompt clarifies expectations. Poorly structured prompts can confuse the model.\n\n BAD: xplin wht the weirless netork do? make shur to giv me a anser?? (Reason: Poor spelling and unclear instructions.)\n GOOD: Explain what a wireless network does. Please provide a detailed, step-by-step explanation. (Reason: Proper spelling and clarity lead to a more coherent response.)\n\n> If your question sounds like gibberish, expect a messy answer. Speak cleanly.\n> When you do, the response will be much clearer.\n\nVideo Tutorials\n----------------------------------------------------------\n\nWatch Prompt Engineering Tutorial – Master ChatGPT and LLM Responses (41 min). It covers:\n\n1. Basics of AI and large language models.\n2. How to write clear and detailed prompts to improve answers.\n3. Tips for creating interactive and personalized AI responses.\n4. Advanced topics like AI mistakes (hallucinations) and text embeddings (how AI understands words).\n5. Fun examples, like making AI write poems or correct grammar.\n\n[](https://youtu.be/ZvnD73m40o)\n\nPrevious\n\n3. Large Language Models\n\nNext\n\nTDS TA Instructions"
  },
  {
    "title": "Prompt engineering",
    "filename": "Prompt_engineering.md",
    "text": "Prompt Engineering\n----------------------------------------------------------------\n\nPrompt engineering is the process of crafting effective prompts for large language models (LLMs).\n\nOne of the best ways to approach prompt engineering is to think of LLMs as a smart colleague (with amnesia) who needs explicit instructions.\n\nThe most authoritative guides are from the LLM providers themselves:\n\n Anthropic\n Google\n OpenAI\n\nHere are some best practices:\n\nUse prompt optimizers\n\nThey rewrite your prompt to improve it. Explore:\n\n Anthropic Prompt Optimizer\n OpenAI Prompt Generation\n Google AI-powered prompt writing tools\n\nBe clear, direct, and detailed\n\nBe explicit and thorough. Include all necessary context, goals, and details so the model understands the full picture.\n\n BAD: Explain gravitation lensing. (Reason: Vague and lacks context or detail.)\n GOOD: Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy. (Reason: Specifies the audience, scope, and focus.)\n\n> When you ask a question, don’t be vague. Spell it out. Give every detail the listener needs.\n> The clearer you are, the better the answer you’ll get.\n> For example, don’t just say, Explain Gravitation Lensing.\n> Say, Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy.\n\nAnthropic\n| OpenAI\n| Google\n\nGive examples\n\nProvide 2-3 relevant examples to guide the model on the style, structure, or format you expect. This helps the model produce outputs consistent with your desired style.\n\n BAD: Explain how to tie a bow tie. (Reason: No examples or reference points given.)\n GOOD:\n  Explain how to tie a bow tie. For example:\n\n  1. To tie a shoelace, you cross the laces and pull them tight…\n  2. To tie a necktie, you place it around the collar and loop it through…\n\n  Now, apply a similar step-by-step style to describe how to tie a bow tie. (Reason: Provides clear examples and a pattern to follow.)\n\n> Give examples to the model. If you want someone to build a house, show them a sketch. Don’t just say ‘build something.’\n> Giving examples is like showing a pattern. It makes everything easier to follow.\n\nAnthropic\n| OpenAI\n| Google\n\nThink step by step\n\nInstruct the model to reason through the problem step by step. This leads to more logical, well-structured answers.\n\n BAD: Given this transcript, is the customer satisfied? (Reason: No prompt for structured reasoning.)\n GOOD: Given this transcript, is the customer satisfied? Think step by step. (Reason: Directly instructs the model to break down reasoning into steps.)\n\n> Ask the model to think step by step. Don’t ask the model to just give the final answer right away.\n> That’s like asking someone to answer with the first thing that pops into their head.\n> Instead, ask them to break down their thought process into simple moves — like showing each rung of a ladder as they climb.\n> For example, when thinking step by step, the model could, A, list each customer question, B, find out if it was addressed, and C, decide that the agent answered only 2 out of the 3 questions.\n\nAnthropic\n| OpenAI\n| Google\n\nAssign a role\n\nSpecify a role or persona for the model. This provides context and helps tailor the response style.\n\n BAD: Explain how to fix a software bug. (Reason: No role or perspective given.)\n GOOD: You are a seasoned software engineer. Explain how to fix a software bug in legacy code, including the debugging and testing process. (Reason: Assigns a clear, knowledgeable persona, guiding the style and depth.)\n\n> Tell the model who they are. Maybe they’re a seasoned software engineer fixing a legacy bug, or an experienced copy editor revising a publication.\n> By clearly telling the model who they are, you help them speak with just the right expertise and style.\n> Suddenly, your explanation sounds like it’s coming from a true specialist, not a random voice.\n\nAnthropic\n| OpenAI\n| Google\n\nUse XML to structure your prompt\n\nUse XML tags to separate different parts of the prompt clearly. This helps the model understand structure and requirements.\n\n BAD: Here’s what I want: Provide a summary and then an example. (Reason: Unstructured, no clear separation of tasks.)\n GOOD:\n\n  \n  <instructions>\n    Provide a summary of the concept of machine learning.\n  </instructions>\n  <example>\n    Then provide a simple, concrete example of a machine learning application (e.g., an email spam filter).\n  </example>Copy to clipboardErrorCopied\n  \n\n  (Reason: Uses XML tags to clearly distinguish instructions from examples.)\n\n> Think of your request like a box. XML tags are neat little labels on that box.\n> They help keep parts sorted, so nothing gets lost in the shuffle.\n\nAnthropic\n| OpenAI\n| Google\n\nUse Markdown to format your output\n\nEncourage the model to use Markdown for headings, lists, code blocks, and other formatting features to produce structured, easily readable answers.\n\n BAD: Give me the steps in plain text. (Reason: No specific formatting instructions, less readable.)\n GOOD: Provide the steps in a markdown-formatted list with  headings for each section and numbered bullet points. (Reason: Directly instructs to use Markdown formatting, making output more structured and clear.)\n BAD: Correct the spelling and show the corrections. (Reason: No specific formatting instructions)\n GOOD: Correct the spelling, showing <ins>additions</ins> and <del>deletions</del>. (Reason: Directly instructs to use HTML formatting, making output more structured and clear.)\n\n> Markdown is a simple formatting language that all models understand.\n> You can have them add neat headings, sections, bold highlights, and bullet points.\n> These make complex documents more scannable and easy on the eyes.\n\nUse JSON for machine-readable output\n\nWhen you need structured data, ask for a JSON-formatted response. This ensures the output is machine-readable and organized.\n\n BAD: Just list the items. (Reason: Unstructured plain text makes parsing harder.)\n GOOD:\n\n  \n  Organize as an array of objects in a JSON format, like this:\n\n  json\n  [\n    { \"name\": \"Item 1\", \"description\": \"Description of Item 1\" },\n    { \"name\": \"Item 2\", \"description\": \"Description of Item 2\" },\n    { \"name\": \"Item 3\", \"description\": \"Description of Item 3\" }\n  ]\n  Copy to clipboardErrorCopied\n  \n\n  (Reason: Instructing JSON format ensures structured, machine-readable output.)\n\nNote: Always use JSON schema if possible. JSON schema is a way to describe the structure of JSON data. An easy way to get the JSON schema is to give ChatGPT sample output and ask it to generate the schema.\n\n> Imagine you’re organizing data for a big project. Plain text is like dumping everything into one messy pile — it’s hard to find what you need later.\n> JSON, on the other hand, is like packing your data into neat, labeled boxes within boxes.\n> Everything has its place: fields like ‘name,’ ‘description,’ and ‘value’ make the data easy to read, especially for machines.\n> For example, instead of just listing items, you can structure them as a JSON array, with each item as an object.\n> That way, when you hand it to a program, it’s all clear and ready to use.\n\nPrefer Yes/No answers\n\nConvert rating or percentage questions into Yes/No queries. LLMs handle binary choices better than numeric scales.\n\n BAD: On a scale of 1-10, how confident are you that this method works? (Reason: Asks for a numeric rating, which can be imprecise.)\n GOOD: Is this method likely to work as intended? Please give a reasoning and then answer Yes or No. (Reason: A binary question simplifies the response and clarifies what’s being asked.)\n\n> Don’t ask ‘On a scale of one to five…’. Models are not good with numbers.\n> They don’t know how to grade something 7 versus 8 on a 10 point scale. ‘Yes or no?’ is simple. It’s clear. It’s quick.\n> So, break your question into simple parts that they can answer with just a yes or a no.\n\nAsk for reason first, then the answer\n\nInstruct the model to provide its reasoning steps before stating the final answer. This makes it less likely to justify itself and more likely to think deeper, leading to more accurate results.\n\n BAD: What is the best route to take? (Reason: Direct question without prompting reasoning steps first.)\n GOOD: First, explain your reasoning step by step for how you determine the best route. Then, after you’ve reasoned it out, state your final recommendation for the best route. (Reason: Forces the model to show its reasoning process before giving the final answer.)\n\n> BEFORE making its final choice, have the model talk through their thinking. Reasoning first, answer second.\n> That way, the model won’t be tempted to justify an answer that they gave impulsively. It is also more likely to think deeper.\n\nUse proper spelling and grammar\n\nA well-written, grammatically correct prompt clarifies expectations. Poorly structured prompts can confuse the model.\n\n BAD: xplin wht the weirless netork do? make shur to giv me a anser?? (Reason: Poor spelling and unclear instructions.)\n GOOD: Explain what a wireless network does. Please provide a detailed, step-by-step explanation. (Reason: Proper spelling and clarity lead to a more coherent response.)\n\n> If your question sounds like gibberish, expect a messy answer. Speak cleanly.\n> When you do, the response will be much clearer.\n\nVideo Tutorials\n----------------------------------------------------------\n\nWatch Prompt Engineering Tutorial – Master ChatGPT and LLM Responses (41 min). It covers:\n\n1. Basics of AI and large language models.\n2. How to write clear and detailed prompts to improve answers.\n3. Tips for creating interactive and personalized AI responses.\n4. Advanced topics like AI mistakes (hallucinations) and text embeddings (how AI understands words).\n5. Fun examples, like making AI write poems or correct grammar.\n\n[](https://youtu.be/ZvnD73m40o)\n\nPrevious\n\n3. Large Language Models\n\nNext\n\nTDS TA Instructions"
  },
  {
    "title": "Prompt engineering",
    "filename": "Prompt_engineering.md",
    "text": "Prompt Engineering\n----------------------------------------------------------------\n\nPrompt engineering is the process of crafting effective prompts for large language models (LLMs).\n\nOne of the best ways to approach prompt engineering is to think of LLMs as a smart colleague (with amnesia) who needs explicit instructions.\n\nThe most authoritative guides are from the LLM providers themselves:\n\n Anthropic\n Google\n OpenAI\n\nHere are some best practices:\n\nUse prompt optimizers\n\nThey rewrite your prompt to improve it. Explore:\n\n Anthropic Prompt Optimizer\n OpenAI Prompt Generation\n Google AI-powered prompt writing tools\n\nBe clear, direct, and detailed\n\nBe explicit and thorough. Include all necessary context, goals, and details so the model understands the full picture.\n\n BAD: Explain gravitation lensing. (Reason: Vague and lacks context or detail.)\n GOOD: Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy. (Reason: Specifies the audience, scope, and focus.)\n\n> When you ask a question, don’t be vague. Spell it out. Give every detail the listener needs.\n> The clearer you are, the better the answer you’ll get.\n> For example, don’t just say, Explain Gravitation Lensing.\n> Say, Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy.\n\nAnthropic\n| OpenAI\n| Google\n\nGive examples\n\nProvide 2-3 relevant examples to guide the model on the style, structure, or format you expect. This helps the model produce outputs consistent with your desired style.\n\n BAD: Explain how to tie a bow tie. (Reason: No examples or reference points given.)\n GOOD:\n  Explain how to tie a bow tie. For example:\n\n  1. To tie a shoelace, you cross the laces and pull them tight…\n  2. To tie a necktie, you place it around the collar and loop it through…\n\n  Now, apply a similar step-by-step style to describe how to tie a bow tie. (Reason: Provides clear examples and a pattern to follow.)\n\n> Give examples to the model. If you want someone to build a house, show them a sketch. Don’t just say ‘build something.’\n> Giving examples is like showing a pattern. It makes everything easier to follow.\n\nAnthropic\n| OpenAI\n| Google\n\nThink step by step\n\nInstruct the model to reason through the problem step by step. This leads to more logical, well-structured answers.\n\n BAD: Given this transcript, is the customer satisfied? (Reason: No prompt for structured reasoning.)\n GOOD: Given this transcript, is the customer satisfied? Think step by step. (Reason: Directly instructs the model to break down reasoning into steps.)\n\n> Ask the model to think step by step. Don’t ask the model to just give the final answer right away.\n> That’s like asking someone to answer with the first thing that pops into their head.\n> Instead, ask them to break down their thought process into simple moves — like showing each rung of a ladder as they climb.\n> For example, when thinking step by step, the model could, A, list each customer question, B, find out if it was addressed, and C, decide that the agent answered only 2 out of the 3 questions.\n\nAnthropic\n| OpenAI\n| Google\n\nAssign a role\n\nSpecify a role or persona for the model. This provides context and helps tailor the response style.\n\n BAD: Explain how to fix a software bug. (Reason: No role or perspective given.)\n GOOD: You are a seasoned software engineer. Explain how to fix a software bug in legacy code, including the debugging and testing process. (Reason: Assigns a clear, knowledgeable persona, guiding the style and depth.)\n\n> Tell the model who they are. Maybe they’re a seasoned software engineer fixing a legacy bug, or an experienced copy editor revising a publication.\n> By clearly telling the model who they are, you help them speak with just the right expertise and style.\n> Suddenly, your explanation sounds like it’s coming from a true specialist, not a random voice.\n\nAnthropic\n| OpenAI\n| Google\n\nUse XML to structure your prompt\n\nUse XML tags to separate different parts of the prompt clearly. This helps the model understand structure and requirements.\n\n BAD: Here’s what I want: Provide a summary and then an example. (Reason: Unstructured, no clear separation of tasks.)\n GOOD:\n\n  \n  <instructions>\n    Provide a summary of the concept of machine learning.\n  </instructions>\n  <example>\n    Then provide a simple, concrete example of a machine learning application (e.g., an email spam filter).\n  </example>Copy to clipboardErrorCopied\n  \n\n  (Reason: Uses XML tags to clearly distinguish instructions from examples.)\n\n> Think of your request like a box. XML tags are neat little labels on that box.\n> They help keep parts sorted, so nothing gets lost in the shuffle.\n\nAnthropic\n| OpenAI\n| Google\n\nUse Markdown to format your output\n\nEncourage the model to use Markdown for headings, lists, code blocks, and other formatting features to produce structured, easily readable answers.\n\n BAD: Give me the steps in plain text. (Reason: No specific formatting instructions, less readable.)\n GOOD: Provide the steps in a markdown-formatted list with  headings for each section and numbered bullet points. (Reason: Directly instructs to use Markdown formatting, making output more structured and clear.)\n BAD: Correct the spelling and show the corrections. (Reason: No specific formatting instructions)\n GOOD: Correct the spelling, showing <ins>additions</ins> and <del>deletions</del>. (Reason: Directly instructs to use HTML formatting, making output more structured and clear.)\n\n> Markdown is a simple formatting language that all models understand.\n> You can have them add neat headings, sections, bold highlights, and bullet points.\n> These make complex documents more scannable and easy on the eyes.\n\nUse JSON for machine-readable output\n\nWhen you need structured data, ask for a JSON-formatted response. This ensures the output is machine-readable and organized.\n\n BAD: Just list the items. (Reason: Unstructured plain text makes parsing harder.)\n GOOD:\n\n  \n  Organize as an array of objects in a JSON format, like this:\n\n  json\n  [\n    { \"name\": \"Item 1\", \"description\": \"Description of Item 1\" },\n    { \"name\": \"Item 2\", \"description\": \"Description of Item 2\" },\n    { \"name\": \"Item 3\", \"description\": \"Description of Item 3\" }\n  ]\n  Copy to clipboardErrorCopied\n  \n\n  (Reason: Instructing JSON format ensures structured, machine-readable output.)\n\nNote: Always use JSON schema if possible. JSON schema is a way to describe the structure of JSON data. An easy way to get the JSON schema is to give ChatGPT sample output and ask it to generate the schema.\n\n> Imagine you’re organizing data for a big project. Plain text is like dumping everything into one messy pile — it’s hard to find what you need later.\n> JSON, on the other hand, is like packing your data into neat, labeled boxes within boxes.\n> Everything has its place: fields like ‘name,’ ‘description,’ and ‘value’ make the data easy to read, especially for machines.\n> For example, instead of just listing items, you can structure them as a JSON array, with each item as an object.\n> That way, when you hand it to a program, it’s all clear and ready to use.\n\nPrefer Yes/No answers\n\nConvert rating or percentage questions into Yes/No queries. LLMs handle binary choices better than numeric scales.\n\n BAD: On a scale of 1-10, how confident are you that this method works? (Reason: Asks for a numeric rating, which can be imprecise.)\n GOOD: Is this method likely to work as intended? Please give a reasoning and then answer Yes or No. (Reason: A binary question simplifies the response and clarifies what’s being asked.)\n\n> Don’t ask ‘On a scale of one to five…’. Models are not good with numbers.\n> They don’t know how to grade something 7 versus 8 on a 10 point scale. ‘Yes or no?’ is simple. It’s clear. It’s quick.\n> So, break your question into simple parts that they can answer with just a yes or a no.\n\nAsk for reason first, then the answer\n\nInstruct the model to provide its reasoning steps before stating the final answer. This makes it less likely to justify itself and more likely to think deeper, leading to more accurate results.\n\n BAD: What is the best route to take? (Reason: Direct question without prompting reasoning steps first.)\n GOOD: First, explain your reasoning step by step for how you determine the best route. Then, after you’ve reasoned it out, state your final recommendation for the best route. (Reason: Forces the model to show its reasoning process before giving the final answer.)\n\n> BEFORE making its final choice, have the model talk through their thinking. Reasoning first, answer second.\n> That way, the model won’t be tempted to justify an answer that they gave impulsively. It is also more likely to think deeper.\n\nUse proper spelling and grammar\n\nA well-written, grammatically correct prompt clarifies expectations. Poorly structured prompts can confuse the model.\n\n BAD: xplin wht the weirless netork do? make shur to giv me a anser?? (Reason: Poor spelling and unclear instructions.)\n GOOD: Explain what a wireless network does. Please provide a detailed, step-by-step explanation. (Reason: Proper spelling and clarity lead to a more coherent response.)\n\n> If your question sounds like gibberish, expect a messy answer. Speak cleanly.\n> When you do, the response will be much clearer.\n\nVideo Tutorials\n----------------------------------------------------------\n\nWatch Prompt Engineering Tutorial – Master ChatGPT and LLM Responses (41 min). It covers:\n\n1. Basics of AI and large language models.\n2. How to write clear and detailed prompts to improve answers.\n3. Tips for creating interactive and personalized AI responses.\n4. Advanced topics like AI mistakes (hallucinations) and text embeddings (how AI understands words).\n5. Fun examples, like making AI write poems or correct grammar.\n\n[](https://youtu.be/ZvnD73m40o)\n\nPrevious\n\n3. Large Language Models\n\nNext\n\nTDS TA Instructions"
  },
  {
    "title": "Prompt engineering",
    "filename": "Prompt_engineering.md",
    "text": "Prompt Engineering\n----------------------------------------------------------------\n\nPrompt engineering is the process of crafting effective prompts for large language models (LLMs).\n\nOne of the best ways to approach prompt engineering is to think of LLMs as a smart colleague (with amnesia) who needs explicit instructions.\n\nThe most authoritative guides are from the LLM providers themselves:\n\n Anthropic\n Google\n OpenAI\n\nHere are some best practices:\n\nUse prompt optimizers\n\nThey rewrite your prompt to improve it. Explore:\n\n Anthropic Prompt Optimizer\n OpenAI Prompt Generation\n Google AI-powered prompt writing tools\n\nBe clear, direct, and detailed\n\nBe explicit and thorough. Include all necessary context, goals, and details so the model understands the full picture.\n\n BAD: Explain gravitation lensing. (Reason: Vague and lacks context or detail.)\n GOOD: Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy. (Reason: Specifies the audience, scope, and focus.)\n\n> When you ask a question, don’t be vague. Spell it out. Give every detail the listener needs.\n> The clearer you are, the better the answer you’ll get.\n> For example, don’t just say, Explain Gravitation Lensing.\n> Say, Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy.\n\nAnthropic\n| OpenAI\n| Google\n\nGive examples\n\nProvide 2-3 relevant examples to guide the model on the style, structure, or format you expect. This helps the model produce outputs consistent with your desired style.\n\n BAD: Explain how to tie a bow tie. (Reason: No examples or reference points given.)\n GOOD:\n  Explain how to tie a bow tie. For example:\n\n  1. To tie a shoelace, you cross the laces and pull them tight…\n  2. To tie a necktie, you place it around the collar and loop it through…\n\n  Now, apply a similar step-by-step style to describe how to tie a bow tie. (Reason: Provides clear examples and a pattern to follow.)\n\n> Give examples to the model. If you want someone to build a house, show them a sketch. Don’t just say ‘build something.’\n> Giving examples is like showing a pattern. It makes everything easier to follow.\n\nAnthropic\n| OpenAI\n| Google\n\nThink step by step\n\nInstruct the model to reason through the problem step by step. This leads to more logical, well-structured answers.\n\n BAD: Given this transcript, is the customer satisfied? (Reason: No prompt for structured reasoning.)\n GOOD: Given this transcript, is the customer satisfied? Think step by step. (Reason: Directly instructs the model to break down reasoning into steps.)\n\n> Ask the model to think step by step. Don’t ask the model to just give the final answer right away.\n> That’s like asking someone to answer with the first thing that pops into their head.\n> Instead, ask them to break down their thought process into simple moves — like showing each rung of a ladder as they climb.\n> For example, when thinking step by step, the model could, A, list each customer question, B, find out if it was addressed, and C, decide that the agent answered only 2 out of the 3 questions.\n\nAnthropic\n| OpenAI\n| Google\n\nAssign a role\n\nSpecify a role or persona for the model. This provides context and helps tailor the response style.\n\n BAD: Explain how to fix a software bug. (Reason: No role or perspective given.)\n GOOD: You are a seasoned software engineer. Explain how to fix a software bug in legacy code, including the debugging and testing process. (Reason: Assigns a clear, knowledgeable persona, guiding the style and depth.)\n\n> Tell the model who they are. Maybe they’re a seasoned software engineer fixing a legacy bug, or an experienced copy editor revising a publication.\n> By clearly telling the model who they are, you help them speak with just the right expertise and style.\n> Suddenly, your explanation sounds like it’s coming from a true specialist, not a random voice.\n\nAnthropic\n| OpenAI\n| Google\n\nUse XML to structure your prompt\n\nUse XML tags to separate different parts of the prompt clearly. This helps the model understand structure and requirements.\n\n BAD: Here’s what I want: Provide a summary and then an example. (Reason: Unstructured, no clear separation of tasks.)\n GOOD:\n\n  \n  <instructions>\n    Provide a summary of the concept of machine learning.\n  </instructions>\n  <example>\n    Then provide a simple, concrete example of a machine learning application (e.g., an email spam filter).\n  </example>Copy to clipboardErrorCopied\n  \n\n  (Reason: Uses XML tags to clearly distinguish instructions from examples.)\n\n> Think of your request like a box. XML tags are neat little labels on that box.\n> They help keep parts sorted, so nothing gets lost in the shuffle.\n\nAnthropic\n| OpenAI\n| Google\n\nUse Markdown to format your output\n\nEncourage the model to use Markdown for headings, lists, code blocks, and other formatting features to produce structured, easily readable answers.\n\n BAD: Give me the steps in plain text. (Reason: No specific formatting instructions, less readable.)\n GOOD: Provide the steps in a markdown-formatted list with  headings for each section and numbered bullet points. (Reason: Directly instructs to use Markdown formatting, making output more structured and clear.)\n BAD: Correct the spelling and show the corrections. (Reason: No specific formatting instructions)\n GOOD: Correct the spelling, showing <ins>additions</ins> and <del>deletions</del>. (Reason: Directly instructs to use HTML formatting, making output more structured and clear.)\n\n> Markdown is a simple formatting language that all models understand.\n> You can have them add neat headings, sections, bold highlights, and bullet points.\n> These make complex documents more scannable and easy on the eyes.\n\nUse JSON for machine-readable output\n\nWhen you need structured data, ask for a JSON-formatted response. This ensures the output is machine-readable and organized.\n\n BAD: Just list the items. (Reason: Unstructured plain text makes parsing harder.)\n GOOD:\n\n  \n  Organize as an array of objects in a JSON format, like this:\n\n  json\n  [\n    { \"name\": \"Item 1\", \"description\": \"Description of Item 1\" },\n    { \"name\": \"Item 2\", \"description\": \"Description of Item 2\" },\n    { \"name\": \"Item 3\", \"description\": \"Description of Item 3\" }\n  ]\n  Copy to clipboardErrorCopied\n  \n\n  (Reason: Instructing JSON format ensures structured, machine-readable output.)\n\nNote: Always use JSON schema if possible. JSON schema is a way to describe the structure of JSON data. An easy way to get the JSON schema is to give ChatGPT sample output and ask it to generate the schema.\n\n> Imagine you’re organizing data for a big project. Plain text is like dumping everything into one messy pile — it’s hard to find what you need later.\n> JSON, on the other hand, is like packing your data into neat, labeled boxes within boxes.\n> Everything has its place: fields like ‘name,’ ‘description,’ and ‘value’ make the data easy to read, especially for machines.\n> For example, instead of just listing items, you can structure them as a JSON array, with each item as an object.\n> That way, when you hand it to a program, it’s all clear and ready to use.\n\nPrefer Yes/No answers\n\nConvert rating or percentage questions into Yes/No queries. LLMs handle binary choices better than numeric scales.\n\n BAD: On a scale of 1-10, how confident are you that this method works? (Reason: Asks for a numeric rating, which can be imprecise.)\n GOOD: Is this method likely to work as intended? Please give a reasoning and then answer Yes or No. (Reason: A binary question simplifies the response and clarifies what’s being asked.)\n\n> Don’t ask ‘On a scale of one to five…’. Models are not good with numbers.\n> They don’t know how to grade something 7 versus 8 on a 10 point scale. ‘Yes or no?’ is simple. It’s clear. It’s quick.\n> So, break your question into simple parts that they can answer with just a yes or a no.\n\nAsk for reason first, then the answer\n\nInstruct the model to provide its reasoning steps before stating the final answer. This makes it less likely to justify itself and more likely to think deeper, leading to more accurate results.\n\n BAD: What is the best route to take? (Reason: Direct question without prompting reasoning steps first.)\n GOOD: First, explain your reasoning step by step for how you determine the best route. Then, after you’ve reasoned it out, state your final recommendation for the best route. (Reason: Forces the model to show its reasoning process before giving the final answer.)\n\n> BEFORE making its final choice, have the model talk through their thinking. Reasoning first, answer second.\n> That way, the model won’t be tempted to justify an answer that they gave impulsively. It is also more likely to think deeper.\n\nUse proper spelling and grammar\n\nA well-written, grammatically correct prompt clarifies expectations. Poorly structured prompts can confuse the model.\n\n BAD: xplin wht the weirless netork do? make shur to giv me a anser?? (Reason: Poor spelling and unclear instructions.)\n GOOD: Explain what a wireless network does. Please provide a detailed, step-by-step explanation. (Reason: Proper spelling and clarity lead to a more coherent response.)\n\n> If your question sounds like gibberish, expect a messy answer. Speak cleanly.\n> When you do, the response will be much clearer.\n\nVideo Tutorials\n----------------------------------------------------------\n\nWatch Prompt Engineering Tutorial – Master ChatGPT and LLM Responses (41 min). It covers:\n\n1. Basics of AI and large language models.\n2. How to write clear and detailed prompts to improve answers.\n3. Tips for creating interactive and personalized AI responses.\n4. Advanced topics like AI mistakes (hallucinations) and text embeddings (how AI understands words).\n5. Fun examples, like making AI write poems or correct grammar.\n\n[](https://youtu.be/ZvnD73m40o)\n\nPrevious\n\n3. Large Language Models\n\nNext\n\nTDS TA Instructions"
  },
  {
    "title": "Prompt engineering",
    "filename": "Prompt_engineering.md",
    "text": "Prompt Engineering\n----------------------------------------------------------------\n\nPrompt engineering is the process of crafting effective prompts for large language models (LLMs).\n\nOne of the best ways to approach prompt engineering is to think of LLMs as a smart colleague (with amnesia) who needs explicit instructions.\n\nThe most authoritative guides are from the LLM providers themselves:\n\n Anthropic\n Google\n OpenAI\n\nHere are some best practices:\n\nUse prompt optimizers\n\nThey rewrite your prompt to improve it. Explore:\n\n Anthropic Prompt Optimizer\n OpenAI Prompt Generation\n Google AI-powered prompt writing tools\n\nBe clear, direct, and detailed\n\nBe explicit and thorough. Include all necessary context, goals, and details so the model understands the full picture.\n\n BAD: Explain gravitation lensing. (Reason: Vague and lacks context or detail.)\n GOOD: Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy. (Reason: Specifies the audience, scope, and focus.)\n\n> When you ask a question, don’t be vague. Spell it out. Give every detail the listener needs.\n> The clearer you are, the better the answer you’ll get.\n> For example, don’t just say, Explain Gravitation Lensing.\n> Say, Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy.\n\nAnthropic\n| OpenAI\n| Google\n\nGive examples\n\nProvide 2-3 relevant examples to guide the model on the style, structure, or format you expect. This helps the model produce outputs consistent with your desired style.\n\n BAD: Explain how to tie a bow tie. (Reason: No examples or reference points given.)\n GOOD:\n  Explain how to tie a bow tie. For example:\n\n  1. To tie a shoelace, you cross the laces and pull them tight…\n  2. To tie a necktie, you place it around the collar and loop it through…\n\n  Now, apply a similar step-by-step style to describe how to tie a bow tie. (Reason: Provides clear examples and a pattern to follow.)\n\n> Give examples to the model. If you want someone to build a house, show them a sketch. Don’t just say ‘build something.’\n> Giving examples is like showing a pattern. It makes everything easier to follow.\n\nAnthropic\n| OpenAI\n| Google\n\nThink step by step\n\nInstruct the model to reason through the problem step by step. This leads to more logical, well-structured answers.\n\n BAD: Given this transcript, is the customer satisfied? (Reason: No prompt for structured reasoning.)\n GOOD: Given this transcript, is the customer satisfied? Think step by step. (Reason: Directly instructs the model to break down reasoning into steps.)\n\n> Ask the model to think step by step. Don’t ask the model to just give the final answer right away.\n> That’s like asking someone to answer with the first thing that pops into their head.\n> Instead, ask them to break down their thought process into simple moves — like showing each rung of a ladder as they climb.\n> For example, when thinking step by step, the model could, A, list each customer question, B, find out if it was addressed, and C, decide that the agent answered only 2 out of the 3 questions.\n\nAnthropic\n| OpenAI\n| Google\n\nAssign a role\n\nSpecify a role or persona for the model. This provides context and helps tailor the response style.\n\n BAD: Explain how to fix a software bug. (Reason: No role or perspective given.)\n GOOD: You are a seasoned software engineer. Explain how to fix a software bug in legacy code, including the debugging and testing process. (Reason: Assigns a clear, knowledgeable persona, guiding the style and depth.)\n\n> Tell the model who they are. Maybe they’re a seasoned software engineer fixing a legacy bug, or an experienced copy editor revising a publication.\n> By clearly telling the model who they are, you help them speak with just the right expertise and style.\n> Suddenly, your explanation sounds like it’s coming from a true specialist, not a random voice.\n\nAnthropic\n| OpenAI\n| Google\n\nUse XML to structure your prompt\n\nUse XML tags to separate different parts of the prompt clearly. This helps the model understand structure and requirements.\n\n BAD: Here’s what I want: Provide a summary and then an example. (Reason: Unstructured, no clear separation of tasks.)\n GOOD:\n\n  \n  <instructions>\n    Provide a summary of the concept of machine learning.\n  </instructions>\n  <example>\n    Then provide a simple, concrete example of a machine learning application (e.g., an email spam filter).\n  </example>Copy to clipboardErrorCopied\n  \n\n  (Reason: Uses XML tags to clearly distinguish instructions from examples.)\n\n> Think of your request like a box. XML tags are neat little labels on that box.\n> They help keep parts sorted, so nothing gets lost in the shuffle.\n\nAnthropic\n| OpenAI\n| Google\n\nUse Markdown to format your output\n\nEncourage the model to use Markdown for headings, lists, code blocks, and other formatting features to produce structured, easily readable answers.\n\n BAD: Give me the steps in plain text. (Reason: No specific formatting instructions, less readable.)\n GOOD: Provide the steps in a markdown-formatted list with  headings for each section and numbered bullet points. (Reason: Directly instructs to use Markdown formatting, making output more structured and clear.)\n BAD: Correct the spelling and show the corrections. (Reason: No specific formatting instructions)\n GOOD: Correct the spelling, showing <ins>additions</ins> and <del>deletions</del>. (Reason: Directly instructs to use HTML formatting, making output more structured and clear.)\n\n> Markdown is a simple formatting language that all models understand.\n> You can have them add neat headings, sections, bold highlights, and bullet points.\n> These make complex documents more scannable and easy on the eyes.\n\nUse JSON for machine-readable output\n\nWhen you need structured data, ask for a JSON-formatted response. This ensures the output is machine-readable and organized.\n\n BAD: Just list the items. (Reason: Unstructured plain text makes parsing harder.)\n GOOD:\n\n  \n  Organize as an array of objects in a JSON format, like this:\n\n  json\n  [\n    { \"name\": \"Item 1\", \"description\": \"Description of Item 1\" },\n    { \"name\": \"Item 2\", \"description\": \"Description of Item 2\" },\n    { \"name\": \"Item 3\", \"description\": \"Description of Item 3\" }\n  ]\n  Copy to clipboardErrorCopied\n  \n\n  (Reason: Instructing JSON format ensures structured, machine-readable output.)\n\nNote: Always use JSON schema if possible. JSON schema is a way to describe the structure of JSON data. An easy way to get the JSON schema is to give ChatGPT sample output and ask it to generate the schema.\n\n> Imagine you’re organizing data for a big project. Plain text is like dumping everything into one messy pile — it’s hard to find what you need later.\n> JSON, on the other hand, is like packing your data into neat, labeled boxes within boxes.\n> Everything has its place: fields like ‘name,’ ‘description,’ and ‘value’ make the data easy to read, especially for machines.\n> For example, instead of just listing items, you can structure them as a JSON array, with each item as an object.\n> That way, when you hand it to a program, it’s all clear and ready to use.\n\nPrefer Yes/No answers\n\nConvert rating or percentage questions into Yes/No queries. LLMs handle binary choices better than numeric scales.\n\n BAD: On a scale of 1-10, how confident are you that this method works? (Reason: Asks for a numeric rating, which can be imprecise.)\n GOOD: Is this method likely to work as intended? Please give a reasoning and then answer Yes or No. (Reason: A binary question simplifies the response and clarifies what’s being asked.)\n\n> Don’t ask ‘On a scale of one to five…’. Models are not good with numbers.\n> They don’t know how to grade something 7 versus 8 on a 10 point scale. ‘Yes or no?’ is simple. It’s clear. It’s quick.\n> So, break your question into simple parts that they can answer with just a yes or a no.\n\nAsk for reason first, then the answer\n\nInstruct the model to provide its reasoning steps before stating the final answer. This makes it less likely to justify itself and more likely to think deeper, leading to more accurate results.\n\n BAD: What is the best route to take? (Reason: Direct question without prompting reasoning steps first.)\n GOOD: First, explain your reasoning step by step for how you determine the best route. Then, after you’ve reasoned it out, state your final recommendation for the best route. (Reason: Forces the model to show its reasoning process before giving the final answer.)\n\n> BEFORE making its final choice, have the model talk through their thinking. Reasoning first, answer second.\n> That way, the model won’t be tempted to justify an answer that they gave impulsively. It is also more likely to think deeper.\n\nUse proper spelling and grammar\n\nA well-written, grammatically correct prompt clarifies expectations. Poorly structured prompts can confuse the model.\n\n BAD: xplin wht the weirless netork do? make shur to giv me a anser?? (Reason: Poor spelling and unclear instructions.)\n GOOD: Explain what a wireless network does. Please provide a detailed, step-by-step explanation. (Reason: Proper spelling and clarity lead to a more coherent response.)\n\n> If your question sounds like gibberish, expect a messy answer. Speak cleanly.\n> When you do, the response will be much clearer.\n\nVideo Tutorials\n----------------------------------------------------------\n\nWatch Prompt Engineering Tutorial – Master ChatGPT and LLM Responses (41 min). It covers:\n\n1. Basics of AI and large language models.\n2. How to write clear and detailed prompts to improve answers.\n3. Tips for creating interactive and personalized AI responses.\n4. Advanced topics like AI mistakes (hallucinations) and text embeddings (how AI understands words).\n5. Fun examples, like making AI write poems or correct grammar.\n\n[](https://youtu.be/ZvnD73m40o)\n\nPrevious\n\n3. Large Language Models\n\nNext\n\nTDS TA Instructions"
  },
  {
    "title": "Prompt engineering",
    "filename": "Prompt_engineering.md",
    "text": "Prompt Engineering\n----------------------------------------------------------------\n\nPrompt engineering is the process of crafting effective prompts for large language models (LLMs).\n\nOne of the best ways to approach prompt engineering is to think of LLMs as a smart colleague (with amnesia) who needs explicit instructions.\n\nThe most authoritative guides are from the LLM providers themselves:\n\n Anthropic\n Google\n OpenAI\n\nHere are some best practices:\n\nUse prompt optimizers\n\nThey rewrite your prompt to improve it. Explore:\n\n Anthropic Prompt Optimizer\n OpenAI Prompt Generation\n Google AI-powered prompt writing tools\n\nBe clear, direct, and detailed\n\nBe explicit and thorough. Include all necessary context, goals, and details so the model understands the full picture.\n\n BAD: Explain gravitation lensing. (Reason: Vague and lacks context or detail.)\n GOOD: Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy. (Reason: Specifies the audience, scope, and focus.)\n\n> When you ask a question, don’t be vague. Spell it out. Give every detail the listener needs.\n> The clearer you are, the better the answer you’ll get.\n> For example, don’t just say, Explain Gravitation Lensing.\n> Say, Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy.\n\nAnthropic\n| OpenAI\n| Google\n\nGive examples\n\nProvide 2-3 relevant examples to guide the model on the style, structure, or format you expect. This helps the model produce outputs consistent with your desired style.\n\n BAD: Explain how to tie a bow tie. (Reason: No examples or reference points given.)\n GOOD:\n  Explain how to tie a bow tie. For example:\n\n  1. To tie a shoelace, you cross the laces and pull them tight…\n  2. To tie a necktie, you place it around the collar and loop it through…\n\n  Now, apply a similar step-by-step style to describe how to tie a bow tie. (Reason: Provides clear examples and a pattern to follow.)\n\n> Give examples to the model. If you want someone to build a house, show them a sketch. Don’t just say ‘build something.’\n> Giving examples is like showing a pattern. It makes everything easier to follow.\n\nAnthropic\n| OpenAI\n| Google\n\nThink step by step\n\nInstruct the model to reason through the problem step by step. This leads to more logical, well-structured answers.\n\n BAD: Given this transcript, is the customer satisfied? (Reason: No prompt for structured reasoning.)\n GOOD: Given this transcript, is the customer satisfied? Think step by step. (Reason: Directly instructs the model to break down reasoning into steps.)\n\n> Ask the model to think step by step. Don’t ask the model to just give the final answer right away.\n> That’s like asking someone to answer with the first thing that pops into their head.\n> Instead, ask them to break down their thought process into simple moves — like showing each rung of a ladder as they climb.\n> For example, when thinking step by step, the model could, A, list each customer question, B, find out if it was addressed, and C, decide that the agent answered only 2 out of the 3 questions.\n\nAnthropic\n| OpenAI\n| Google\n\nAssign a role\n\nSpecify a role or persona for the model. This provides context and helps tailor the response style.\n\n BAD: Explain how to fix a software bug. (Reason: No role or perspective given.)\n GOOD: You are a seasoned software engineer. Explain how to fix a software bug in legacy code, including the debugging and testing process. (Reason: Assigns a clear, knowledgeable persona, guiding the style and depth.)\n\n> Tell the model who they are. Maybe they’re a seasoned software engineer fixing a legacy bug, or an experienced copy editor revising a publication.\n> By clearly telling the model who they are, you help them speak with just the right expertise and style.\n> Suddenly, your explanation sounds like it’s coming from a true specialist, not a random voice.\n\nAnthropic\n| OpenAI\n| Google\n\nUse XML to structure your prompt\n\nUse XML tags to separate different parts of the prompt clearly. This helps the model understand structure and requirements.\n\n BAD: Here’s what I want: Provide a summary and then an example. (Reason: Unstructured, no clear separation of tasks.)\n GOOD:\n\n  \n  <instructions>\n    Provide a summary of the concept of machine learning.\n  </instructions>\n  <example>\n    Then provide a simple, concrete example of a machine learning application (e.g., an email spam filter).\n  </example>Copy to clipboardErrorCopied\n  \n\n  (Reason: Uses XML tags to clearly distinguish instructions from examples.)\n\n> Think of your request like a box. XML tags are neat little labels on that box.\n> They help keep parts sorted, so nothing gets lost in the shuffle.\n\nAnthropic\n| OpenAI\n| Google\n\nUse Markdown to format your output\n\nEncourage the model to use Markdown for headings, lists, code blocks, and other formatting features to produce structured, easily readable answers.\n\n BAD: Give me the steps in plain text. (Reason: No specific formatting instructions, less readable.)\n GOOD: Provide the steps in a markdown-formatted list with  headings for each section and numbered bullet points. (Reason: Directly instructs to use Markdown formatting, making output more structured and clear.)\n BAD: Correct the spelling and show the corrections. (Reason: No specific formatting instructions)\n GOOD: Correct the spelling, showing <ins>additions</ins> and <del>deletions</del>. (Reason: Directly instructs to use HTML formatting, making output more structured and clear.)\n\n> Markdown is a simple formatting language that all models understand.\n> You can have them add neat headings, sections, bold highlights, and bullet points.\n> These make complex documents more scannable and easy on the eyes.\n\nUse JSON for machine-readable output\n\nWhen you need structured data, ask for a JSON-formatted response. This ensures the output is machine-readable and organized.\n\n BAD: Just list the items. (Reason: Unstructured plain text makes parsing harder.)\n GOOD:\n\n  \n  Organize as an array of objects in a JSON format, like this:\n\n  json\n  [\n    { \"name\": \"Item 1\", \"description\": \"Description of Item 1\" },\n    { \"name\": \"Item 2\", \"description\": \"Description of Item 2\" },\n    { \"name\": \"Item 3\", \"description\": \"Description of Item 3\" }\n  ]\n  Copy to clipboardErrorCopied\n  \n\n  (Reason: Instructing JSON format ensures structured, machine-readable output.)\n\nNote: Always use JSON schema if possible. JSON schema is a way to describe the structure of JSON data. An easy way to get the JSON schema is to give ChatGPT sample output and ask it to generate the schema.\n\n> Imagine you’re organizing data for a big project. Plain text is like dumping everything into one messy pile — it’s hard to find what you need later.\n> JSON, on the other hand, is like packing your data into neat, labeled boxes within boxes.\n> Everything has its place: fields like ‘name,’ ‘description,’ and ‘value’ make the data easy to read, especially for machines.\n> For example, instead of just listing items, you can structure them as a JSON array, with each item as an object.\n> That way, when you hand it to a program, it’s all clear and ready to use.\n\nPrefer Yes/No answers\n\nConvert rating or percentage questions into Yes/No queries. LLMs handle binary choices better than numeric scales.\n\n BAD: On a scale of 1-10, how confident are you that this method works? (Reason: Asks for a numeric rating, which can be imprecise.)\n GOOD: Is this method likely to work as intended? Please give a reasoning and then answer Yes or No. (Reason: A binary question simplifies the response and clarifies what’s being asked.)\n\n> Don’t ask ‘On a scale of one to five…’. Models are not good with numbers.\n> They don’t know how to grade something 7 versus 8 on a 10 point scale. ‘Yes or no?’ is simple. It’s clear. It’s quick.\n> So, break your question into simple parts that they can answer with just a yes or a no.\n\nAsk for reason first, then the answer\n\nInstruct the model to provide its reasoning steps before stating the final answer. This makes it less likely to justify itself and more likely to think deeper, leading to more accurate results.\n\n BAD: What is the best route to take? (Reason: Direct question without prompting reasoning steps first.)\n GOOD: First, explain your reasoning step by step for how you determine the best route. Then, after you’ve reasoned it out, state your final recommendation for the best route. (Reason: Forces the model to show its reasoning process before giving the final answer.)\n\n> BEFORE making its final choice, have the model talk through their thinking. Reasoning first, answer second.\n> That way, the model won’t be tempted to justify an answer that they gave impulsively. It is also more likely to think deeper.\n\nUse proper spelling and grammar\n\nA well-written, grammatically correct prompt clarifies expectations. Poorly structured prompts can confuse the model.\n\n BAD: xplin wht the weirless netork do? make shur to giv me a anser?? (Reason: Poor spelling and unclear instructions.)\n GOOD: Explain what a wireless network does. Please provide a detailed, step-by-step explanation. (Reason: Proper spelling and clarity lead to a more coherent response.)\n\n> If your question sounds like gibberish, expect a messy answer. Speak cleanly.\n> When you do, the response will be much clearer.\n\nVideo Tutorials\n----------------------------------------------------------\n\nWatch Prompt Engineering Tutorial – Master ChatGPT and LLM Responses (41 min). It covers:\n\n1. Basics of AI and large language models.\n2. How to write clear and detailed prompts to improve answers.\n3. Tips for creating interactive and personalized AI responses.\n4. Advanced topics like AI mistakes (hallucinations) and text embeddings (how AI understands words).\n5. Fun examples, like making AI write poems or correct grammar.\n\n[](https://youtu.be/ZvnD73m40o)\n\nPrevious\n\n3. Large Language Models\n\nNext\n\nTDS TA Instructions"
  },
  {
    "title": "Prompt engineering",
    "filename": "Prompt_engineering.md",
    "text": "Prompt Engineering\n----------------------------------------------------------------\n\nPrompt engineering is the process of crafting effective prompts for large language models (LLMs).\n\nOne of the best ways to approach prompt engineering is to think of LLMs as a smart colleague (with amnesia) who needs explicit instructions.\n\nThe most authoritative guides are from the LLM providers themselves:\n\n Anthropic\n Google\n OpenAI\n\nHere are some best practices:\n\nUse prompt optimizers\n\nThey rewrite your prompt to improve it. Explore:\n\n Anthropic Prompt Optimizer\n OpenAI Prompt Generation\n Google AI-powered prompt writing tools\n\nBe clear, direct, and detailed\n\nBe explicit and thorough. Include all necessary context, goals, and details so the model understands the full picture.\n\n BAD: Explain gravitation lensing. (Reason: Vague and lacks context or detail.)\n GOOD: Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy. (Reason: Specifies the audience, scope, and focus.)\n\n> When you ask a question, don’t be vague. Spell it out. Give every detail the listener needs.\n> The clearer you are, the better the answer you’ll get.\n> For example, don’t just say, Explain Gravitation Lensing.\n> Say, Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy.\n\nAnthropic\n| OpenAI\n| Google\n\nGive examples\n\nProvide 2-3 relevant examples to guide the model on the style, structure, or format you expect. This helps the model produce outputs consistent with your desired style.\n\n BAD: Explain how to tie a bow tie. (Reason: No examples or reference points given.)\n GOOD:\n  Explain how to tie a bow tie. For example:\n\n  1. To tie a shoelace, you cross the laces and pull them tight…\n  2. To tie a necktie, you place it around the collar and loop it through…\n\n  Now, apply a similar step-by-step style to describe how to tie a bow tie. (Reason: Provides clear examples and a pattern to follow.)\n\n> Give examples to the model. If you want someone to build a house, show them a sketch. Don’t just say ‘build something.’\n> Giving examples is like showing a pattern. It makes everything easier to follow.\n\nAnthropic\n| OpenAI\n| Google\n\nThink step by step\n\nInstruct the model to reason through the problem step by step. This leads to more logical, well-structured answers.\n\n BAD: Given this transcript, is the customer satisfied? (Reason: No prompt for structured reasoning.)\n GOOD: Given this transcript, is the customer satisfied? Think step by step. (Reason: Directly instructs the model to break down reasoning into steps.)\n\n> Ask the model to think step by step. Don’t ask the model to just give the final answer right away.\n> That’s like asking someone to answer with the first thing that pops into their head.\n> Instead, ask them to break down their thought process into simple moves — like showing each rung of a ladder as they climb.\n> For example, when thinking step by step, the model could, A, list each customer question, B, find out if it was addressed, and C, decide that the agent answered only 2 out of the 3 questions.\n\nAnthropic\n| OpenAI\n| Google\n\nAssign a role\n\nSpecify a role or persona for the model. This provides context and helps tailor the response style.\n\n BAD: Explain how to fix a software bug. (Reason: No role or perspective given.)\n GOOD: You are a seasoned software engineer. Explain how to fix a software bug in legacy code, including the debugging and testing process. (Reason: Assigns a clear, knowledgeable persona, guiding the style and depth.)\n\n> Tell the model who they are. Maybe they’re a seasoned software engineer fixing a legacy bug, or an experienced copy editor revising a publication.\n> By clearly telling the model who they are, you help them speak with just the right expertise and style.\n> Suddenly, your explanation sounds like it’s coming from a true specialist, not a random voice.\n\nAnthropic\n| OpenAI\n| Google\n\nUse XML to structure your prompt\n\nUse XML tags to separate different parts of the prompt clearly. This helps the model understand structure and requirements.\n\n BAD: Here’s what I want: Provide a summary and then an example. (Reason: Unstructured, no clear separation of tasks.)\n GOOD:\n\n  \n  <instructions>\n    Provide a summary of the concept of machine learning.\n  </instructions>\n  <example>\n    Then provide a simple, concrete example of a machine learning application (e.g., an email spam filter).\n  </example>Copy to clipboardErrorCopied\n  \n\n  (Reason: Uses XML tags to clearly distinguish instructions from examples.)\n\n> Think of your request like a box. XML tags are neat little labels on that box.\n> They help keep parts sorted, so nothing gets lost in the shuffle.\n\nAnthropic\n| OpenAI\n| Google\n\nUse Markdown to format your output\n\nEncourage the model to use Markdown for headings, lists, code blocks, and other formatting features to produce structured, easily readable answers.\n\n BAD: Give me the steps in plain text. (Reason: No specific formatting instructions, less readable.)\n GOOD: Provide the steps in a markdown-formatted list with  headings for each section and numbered bullet points. (Reason: Directly instructs to use Markdown formatting, making output more structured and clear.)\n BAD: Correct the spelling and show the corrections. (Reason: No specific formatting instructions)\n GOOD: Correct the spelling, showing <ins>additions</ins> and <del>deletions</del>. (Reason: Directly instructs to use HTML formatting, making output more structured and clear.)\n\n> Markdown is a simple formatting language that all models understand.\n> You can have them add neat headings, sections, bold highlights, and bullet points.\n> These make complex documents more scannable and easy on the eyes.\n\nUse JSON for machine-readable output\n\nWhen you need structured data, ask for a JSON-formatted response. This ensures the output is machine-readable and organized.\n\n BAD: Just list the items. (Reason: Unstructured plain text makes parsing harder.)\n GOOD:\n\n  \n  Organize as an array of objects in a JSON format, like this:\n\n  json\n  [\n    { \"name\": \"Item 1\", \"description\": \"Description of Item 1\" },\n    { \"name\": \"Item 2\", \"description\": \"Description of Item 2\" },\n    { \"name\": \"Item 3\", \"description\": \"Description of Item 3\" }\n  ]\n  Copy to clipboardErrorCopied\n  \n\n  (Reason: Instructing JSON format ensures structured, machine-readable output.)\n\nNote: Always use JSON schema if possible. JSON schema is a way to describe the structure of JSON data. An easy way to get the JSON schema is to give ChatGPT sample output and ask it to generate the schema.\n\n> Imagine you’re organizing data for a big project. Plain text is like dumping everything into one messy pile — it’s hard to find what you need later.\n> JSON, on the other hand, is like packing your data into neat, labeled boxes within boxes.\n> Everything has its place: fields like ‘name,’ ‘description,’ and ‘value’ make the data easy to read, especially for machines.\n> For example, instead of just listing items, you can structure them as a JSON array, with each item as an object.\n> That way, when you hand it to a program, it’s all clear and ready to use.\n\nPrefer Yes/No answers\n\nConvert rating or percentage questions into Yes/No queries. LLMs handle binary choices better than numeric scales.\n\n BAD: On a scale of 1-10, how confident are you that this method works? (Reason: Asks for a numeric rating, which can be imprecise.)\n GOOD: Is this method likely to work as intended? Please give a reasoning and then answer Yes or No. (Reason: A binary question simplifies the response and clarifies what’s being asked.)\n\n> Don’t ask ‘On a scale of one to five…’. Models are not good with numbers.\n> They don’t know how to grade something 7 versus 8 on a 10 point scale. ‘Yes or no?’ is simple. It’s clear. It’s quick.\n> So, break your question into simple parts that they can answer with just a yes or a no.\n\nAsk for reason first, then the answer\n\nInstruct the model to provide its reasoning steps before stating the final answer. This makes it less likely to justify itself and more likely to think deeper, leading to more accurate results.\n\n BAD: What is the best route to take? (Reason: Direct question without prompting reasoning steps first.)\n GOOD: First, explain your reasoning step by step for how you determine the best route. Then, after you’ve reasoned it out, state your final recommendation for the best route. (Reason: Forces the model to show its reasoning process before giving the final answer.)\n\n> BEFORE making its final choice, have the model talk through their thinking. Reasoning first, answer second.\n> That way, the model won’t be tempted to justify an answer that they gave impulsively. It is also more likely to think deeper.\n\nUse proper spelling and grammar\n\nA well-written, grammatically correct prompt clarifies expectations. Poorly structured prompts can confuse the model.\n\n BAD: xplin wht the weirless netork do? make shur to giv me a anser?? (Reason: Poor spelling and unclear instructions.)\n GOOD: Explain what a wireless network does. Please provide a detailed, step-by-step explanation. (Reason: Proper spelling and clarity lead to a more coherent response.)\n\n> If your question sounds like gibberish, expect a messy answer. Speak cleanly.\n> When you do, the response will be much clearer.\n\nVideo Tutorials\n----------------------------------------------------------\n\nWatch Prompt Engineering Tutorial – Master ChatGPT and LLM Responses (41 min). It covers:\n\n1. Basics of AI and large language models.\n2. How to write clear and detailed prompts to improve answers.\n3. Tips for creating interactive and personalized AI responses.\n4. Advanced topics like AI mistakes (hallucinations) and text embeddings (how AI understands words).\n5. Fun examples, like making AI write poems or correct grammar.\n\n[](https://youtu.be/ZvnD73m40o)\n\nPrevious\n\n3. Large Language Models\n\nNext\n\nTDS TA Instructions"
  },
  {
    "title": "Prompt engineering",
    "filename": "Prompt_engineering.md",
    "text": "Prompt Engineering\n----------------------------------------------------------------\n\nPrompt engineering is the process of crafting effective prompts for large language models (LLMs).\n\nOne of the best ways to approach prompt engineering is to think of LLMs as a smart colleague (with amnesia) who needs explicit instructions.\n\nThe most authoritative guides are from the LLM providers themselves:\n\n Anthropic\n Google\n OpenAI\n\nHere are some best practices:\n\nUse prompt optimizers\n\nThey rewrite your prompt to improve it. Explore:\n\n Anthropic Prompt Optimizer\n OpenAI Prompt Generation\n Google AI-powered prompt writing tools\n\nBe clear, direct, and detailed\n\nBe explicit and thorough. Include all necessary context, goals, and details so the model understands the full picture.\n\n BAD: Explain gravitation lensing. (Reason: Vague and lacks context or detail.)\n GOOD: Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy. (Reason: Specifies the audience, scope, and focus.)\n\n> When you ask a question, don’t be vague. Spell it out. Give every detail the listener needs.\n> The clearer you are, the better the answer you’ll get.\n> For example, don’t just say, Explain Gravitation Lensing.\n> Say, Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy.\n\nAnthropic\n| OpenAI\n| Google\n\nGive examples\n\nProvide 2-3 relevant examples to guide the model on the style, structure, or format you expect. This helps the model produce outputs consistent with your desired style.\n\n BAD: Explain how to tie a bow tie. (Reason: No examples or reference points given.)\n GOOD:\n  Explain how to tie a bow tie. For example:\n\n  1. To tie a shoelace, you cross the laces and pull them tight…\n  2. To tie a necktie, you place it around the collar and loop it through…\n\n  Now, apply a similar step-by-step style to describe how to tie a bow tie. (Reason: Provides clear examples and a pattern to follow.)\n\n> Give examples to the model. If you want someone to build a house, show them a sketch. Don’t just say ‘build something.’\n> Giving examples is like showing a pattern. It makes everything easier to follow.\n\nAnthropic\n| OpenAI\n| Google\n\nThink step by step\n\nInstruct the model to reason through the problem step by step. This leads to more logical, well-structured answers.\n\n BAD: Given this transcript, is the customer satisfied? (Reason: No prompt for structured reasoning.)\n GOOD: Given this transcript, is the customer satisfied? Think step by step. (Reason: Directly instructs the model to break down reasoning into steps.)\n\n> Ask the model to think step by step. Don’t ask the model to just give the final answer right away.\n> That’s like asking someone to answer with the first thing that pops into their head.\n> Instead, ask them to break down their thought process into simple moves — like showing each rung of a ladder as they climb.\n> For example, when thinking step by step, the model could, A, list each customer question, B, find out if it was addressed, and C, decide that the agent answered only 2 out of the 3 questions.\n\nAnthropic\n| OpenAI\n| Google\n\nAssign a role\n\nSpecify a role or persona for the model. This provides context and helps tailor the response style.\n\n BAD: Explain how to fix a software bug. (Reason: No role or perspective given.)\n GOOD: You are a seasoned software engineer. Explain how to fix a software bug in legacy code, including the debugging and testing process. (Reason: Assigns a clear, knowledgeable persona, guiding the style and depth.)\n\n> Tell the model who they are. Maybe they’re a seasoned software engineer fixing a legacy bug, or an experienced copy editor revising a publication.\n> By clearly telling the model who they are, you help them speak with just the right expertise and style.\n> Suddenly, your explanation sounds like it’s coming from a true specialist, not a random voice.\n\nAnthropic\n| OpenAI\n| Google\n\nUse XML to structure your prompt\n\nUse XML tags to separate different parts of the prompt clearly. This helps the model understand structure and requirements.\n\n BAD: Here’s what I want: Provide a summary and then an example. (Reason: Unstructured, no clear separation of tasks.)\n GOOD:\n\n  \n  <instructions>\n    Provide a summary of the concept of machine learning.\n  </instructions>\n  <example>\n    Then provide a simple, concrete example of a machine learning application (e.g., an email spam filter).\n  </example>Copy to clipboardErrorCopied\n  \n\n  (Reason: Uses XML tags to clearly distinguish instructions from examples.)\n\n> Think of your request like a box. XML tags are neat little labels on that box.\n> They help keep parts sorted, so nothing gets lost in the shuffle.\n\nAnthropic\n| OpenAI\n| Google\n\nUse Markdown to format your output\n\nEncourage the model to use Markdown for headings, lists, code blocks, and other formatting features to produce structured, easily readable answers.\n\n BAD: Give me the steps in plain text. (Reason: No specific formatting instructions, less readable.)\n GOOD: Provide the steps in a markdown-formatted list with  headings for each section and numbered bullet points. (Reason: Directly instructs to use Markdown formatting, making output more structured and clear.)\n BAD: Correct the spelling and show the corrections. (Reason: No specific formatting instructions)\n GOOD: Correct the spelling, showing <ins>additions</ins> and <del>deletions</del>. (Reason: Directly instructs to use HTML formatting, making output more structured and clear.)\n\n> Markdown is a simple formatting language that all models understand.\n> You can have them add neat headings, sections, bold highlights, and bullet points.\n> These make complex documents more scannable and easy on the eyes.\n\nUse JSON for machine-readable output\n\nWhen you need structured data, ask for a JSON-formatted response. This ensures the output is machine-readable and organized.\n\n BAD: Just list the items. (Reason: Unstructured plain text makes parsing harder.)\n GOOD:\n\n  \n  Organize as an array of objects in a JSON format, like this:\n\n  json\n  [\n    { \"name\": \"Item 1\", \"description\": \"Description of Item 1\" },\n    { \"name\": \"Item 2\", \"description\": \"Description of Item 2\" },\n    { \"name\": \"Item 3\", \"description\": \"Description of Item 3\" }\n  ]\n  Copy to clipboardErrorCopied\n  \n\n  (Reason: Instructing JSON format ensures structured, machine-readable output.)\n\nNote: Always use JSON schema if possible. JSON schema is a way to describe the structure of JSON data. An easy way to get the JSON schema is to give ChatGPT sample output and ask it to generate the schema.\n\n> Imagine you’re organizing data for a big project. Plain text is like dumping everything into one messy pile — it’s hard to find what you need later.\n> JSON, on the other hand, is like packing your data into neat, labeled boxes within boxes.\n> Everything has its place: fields like ‘name,’ ‘description,’ and ‘value’ make the data easy to read, especially for machines.\n> For example, instead of just listing items, you can structure them as a JSON array, with each item as an object.\n> That way, when you hand it to a program, it’s all clear and ready to use.\n\nPrefer Yes/No answers\n\nConvert rating or percentage questions into Yes/No queries. LLMs handle binary choices better than numeric scales.\n\n BAD: On a scale of 1-10, how confident are you that this method works? (Reason: Asks for a numeric rating, which can be imprecise.)\n GOOD: Is this method likely to work as intended? Please give a reasoning and then answer Yes or No. (Reason: A binary question simplifies the response and clarifies what’s being asked.)\n\n> Don’t ask ‘On a scale of one to five…’. Models are not good with numbers.\n> They don’t know how to grade something 7 versus 8 on a 10 point scale. ‘Yes or no?’ is simple. It’s clear. It’s quick.\n> So, break your question into simple parts that they can answer with just a yes or a no.\n\nAsk for reason first, then the answer\n\nInstruct the model to provide its reasoning steps before stating the final answer. This makes it less likely to justify itself and more likely to think deeper, leading to more accurate results.\n\n BAD: What is the best route to take? (Reason: Direct question without prompting reasoning steps first.)\n GOOD: First, explain your reasoning step by step for how you determine the best route. Then, after you’ve reasoned it out, state your final recommendation for the best route. (Reason: Forces the model to show its reasoning process before giving the final answer.)\n\n> BEFORE making its final choice, have the model talk through their thinking. Reasoning first, answer second.\n> That way, the model won’t be tempted to justify an answer that they gave impulsively. It is also more likely to think deeper.\n\nUse proper spelling and grammar\n\nA well-written, grammatically correct prompt clarifies expectations. Poorly structured prompts can confuse the model.\n\n BAD: xplin wht the weirless netork do? make shur to giv me a anser?? (Reason: Poor spelling and unclear instructions.)\n GOOD: Explain what a wireless network does. Please provide a detailed, step-by-step explanation. (Reason: Proper spelling and clarity lead to a more coherent response.)\n\n> If your question sounds like gibberish, expect a messy answer. Speak cleanly.\n> When you do, the response will be much clearer.\n\nVideo Tutorials\n----------------------------------------------------------\n\nWatch Prompt Engineering Tutorial – Master ChatGPT and LLM Responses (41 min). It covers:\n\n1. Basics of AI and large language models.\n2. How to write clear and detailed prompts to improve answers.\n3. Tips for creating interactive and personalized AI responses.\n4. Advanced topics like AI mistakes (hallucinations) and text embeddings (how AI understands words).\n5. Fun examples, like making AI write poems or correct grammar.\n\n[](https://youtu.be/ZvnD73m40o)\n\nPrevious\n\n3. Large Language Models\n\nNext\n\nTDS TA Instructions"
  },
  {
    "title": "Prompt engineering",
    "filename": "Prompt_engineering.md",
    "text": "Prompt Engineering\n----------------------------------------------------------------\n\nPrompt engineering is the process of crafting effective prompts for large language models (LLMs).\n\nOne of the best ways to approach prompt engineering is to think of LLMs as a smart colleague (with amnesia) who needs explicit instructions.\n\nThe most authoritative guides are from the LLM providers themselves:\n\n Anthropic\n Google\n OpenAI\n\nHere are some best practices:\n\nUse prompt optimizers\n\nThey rewrite your prompt to improve it. Explore:\n\n Anthropic Prompt Optimizer\n OpenAI Prompt Generation\n Google AI-powered prompt writing tools\n\nBe clear, direct, and detailed\n\nBe explicit and thorough. Include all necessary context, goals, and details so the model understands the full picture.\n\n BAD: Explain gravitation lensing. (Reason: Vague and lacks context or detail.)\n GOOD: Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy. (Reason: Specifies the audience, scope, and focus.)\n\n> When you ask a question, don’t be vague. Spell it out. Give every detail the listener needs.\n> The clearer you are, the better the answer you’ll get.\n> For example, don’t just say, Explain Gravitation Lensing.\n> Say, Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy.\n\nAnthropic\n| OpenAI\n| Google\n\nGive examples\n\nProvide 2-3 relevant examples to guide the model on the style, structure, or format you expect. This helps the model produce outputs consistent with your desired style.\n\n BAD: Explain how to tie a bow tie. (Reason: No examples or reference points given.)\n GOOD:\n  Explain how to tie a bow tie. For example:\n\n  1. To tie a shoelace, you cross the laces and pull them tight…\n  2. To tie a necktie, you place it around the collar and loop it through…\n\n  Now, apply a similar step-by-step style to describe how to tie a bow tie. (Reason: Provides clear examples and a pattern to follow.)\n\n> Give examples to the model. If you want someone to build a house, show them a sketch. Don’t just say ‘build something.’\n> Giving examples is like showing a pattern. It makes everything easier to follow.\n\nAnthropic\n| OpenAI\n| Google\n\nThink step by step\n\nInstruct the model to reason through the problem step by step. This leads to more logical, well-structured answers.\n\n BAD: Given this transcript, is the customer satisfied? (Reason: No prompt for structured reasoning.)\n GOOD: Given this transcript, is the customer satisfied? Think step by step. (Reason: Directly instructs the model to break down reasoning into steps.)\n\n> Ask the model to think step by step. Don’t ask the model to just give the final answer right away.\n> That’s like asking someone to answer with the first thing that pops into their head.\n> Instead, ask them to break down their thought process into simple moves — like showing each rung of a ladder as they climb.\n> For example, when thinking step by step, the model could, A, list each customer question, B, find out if it was addressed, and C, decide that the agent answered only 2 out of the 3 questions.\n\nAnthropic\n| OpenAI\n| Google\n\nAssign a role\n\nSpecify a role or persona for the model. This provides context and helps tailor the response style.\n\n BAD: Explain how to fix a software bug. (Reason: No role or perspective given.)\n GOOD: You are a seasoned software engineer. Explain how to fix a software bug in legacy code, including the debugging and testing process. (Reason: Assigns a clear, knowledgeable persona, guiding the style and depth.)\n\n> Tell the model who they are. Maybe they’re a seasoned software engineer fixing a legacy bug, or an experienced copy editor revising a publication.\n> By clearly telling the model who they are, you help them speak with just the right expertise and style.\n> Suddenly, your explanation sounds like it’s coming from a true specialist, not a random voice.\n\nAnthropic\n| OpenAI\n| Google\n\nUse XML to structure your prompt\n\nUse XML tags to separate different parts of the prompt clearly. This helps the model understand structure and requirements.\n\n BAD: Here’s what I want: Provide a summary and then an example. (Reason: Unstructured, no clear separation of tasks.)\n GOOD:\n\n  \n  <instructions>\n    Provide a summary of the concept of machine learning.\n  </instructions>\n  <example>\n    Then provide a simple, concrete example of a machine learning application (e.g., an email spam filter).\n  </example>Copy to clipboardErrorCopied\n  \n\n  (Reason: Uses XML tags to clearly distinguish instructions from examples.)\n\n> Think of your request like a box. XML tags are neat little labels on that box.\n> They help keep parts sorted, so nothing gets lost in the shuffle.\n\nAnthropic\n| OpenAI\n| Google\n\nUse Markdown to format your output\n\nEncourage the model to use Markdown for headings, lists, code blocks, and other formatting features to produce structured, easily readable answers.\n\n BAD: Give me the steps in plain text. (Reason: No specific formatting instructions, less readable.)\n GOOD: Provide the steps in a markdown-formatted list with  headings for each section and numbered bullet points. (Reason: Directly instructs to use Markdown formatting, making output more structured and clear.)\n BAD: Correct the spelling and show the corrections. (Reason: No specific formatting instructions)\n GOOD: Correct the spelling, showing <ins>additions</ins> and <del>deletions</del>. (Reason: Directly instructs to use HTML formatting, making output more structured and clear.)\n\n> Markdown is a simple formatting language that all models understand.\n> You can have them add neat headings, sections, bold highlights, and bullet points.\n> These make complex documents more scannable and easy on the eyes.\n\nUse JSON for machine-readable output\n\nWhen you need structured data, ask for a JSON-formatted response. This ensures the output is machine-readable and organized.\n\n BAD: Just list the items. (Reason: Unstructured plain text makes parsing harder.)\n GOOD:\n\n  \n  Organize as an array of objects in a JSON format, like this:\n\n  json\n  [\n    { \"name\": \"Item 1\", \"description\": \"Description of Item 1\" },\n    { \"name\": \"Item 2\", \"description\": \"Description of Item 2\" },\n    { \"name\": \"Item 3\", \"description\": \"Description of Item 3\" }\n  ]\n  Copy to clipboardErrorCopied\n  \n\n  (Reason: Instructing JSON format ensures structured, machine-readable output.)\n\nNote: Always use JSON schema if possible. JSON schema is a way to describe the structure of JSON data. An easy way to get the JSON schema is to give ChatGPT sample output and ask it to generate the schema.\n\n> Imagine you’re organizing data for a big project. Plain text is like dumping everything into one messy pile — it’s hard to find what you need later.\n> JSON, on the other hand, is like packing your data into neat, labeled boxes within boxes.\n> Everything has its place: fields like ‘name,’ ‘description,’ and ‘value’ make the data easy to read, especially for machines.\n> For example, instead of just listing items, you can structure them as a JSON array, with each item as an object.\n> That way, when you hand it to a program, it’s all clear and ready to use.\n\nPrefer Yes/No answers\n\nConvert rating or percentage questions into Yes/No queries. LLMs handle binary choices better than numeric scales.\n\n BAD: On a scale of 1-10, how confident are you that this method works? (Reason: Asks for a numeric rating, which can be imprecise.)\n GOOD: Is this method likely to work as intended? Please give a reasoning and then answer Yes or No. (Reason: A binary question simplifies the response and clarifies what’s being asked.)\n\n> Don’t ask ‘On a scale of one to five…’. Models are not good with numbers.\n> They don’t know how to grade something 7 versus 8 on a 10 point scale. ‘Yes or no?’ is simple. It’s clear. It’s quick.\n> So, break your question into simple parts that they can answer with just a yes or a no.\n\nAsk for reason first, then the answer\n\nInstruct the model to provide its reasoning steps before stating the final answer. This makes it less likely to justify itself and more likely to think deeper, leading to more accurate results.\n\n BAD: What is the best route to take? (Reason: Direct question without prompting reasoning steps first.)\n GOOD: First, explain your reasoning step by step for how you determine the best route. Then, after you’ve reasoned it out, state your final recommendation for the best route. (Reason: Forces the model to show its reasoning process before giving the final answer.)\n\n> BEFORE making its final choice, have the model talk through their thinking. Reasoning first, answer second.\n> That way, the model won’t be tempted to justify an answer that they gave impulsively. It is also more likely to think deeper.\n\nUse proper spelling and grammar\n\nA well-written, grammatically correct prompt clarifies expectations. Poorly structured prompts can confuse the model.\n\n BAD: xplin wht the weirless netork do? make shur to giv me a anser?? (Reason: Poor spelling and unclear instructions.)\n GOOD: Explain what a wireless network does. Please provide a detailed, step-by-step explanation. (Reason: Proper spelling and clarity lead to a more coherent response.)\n\n> If your question sounds like gibberish, expect a messy answer. Speak cleanly.\n> When you do, the response will be much clearer.\n\nVideo Tutorials\n----------------------------------------------------------\n\nWatch Prompt Engineering Tutorial – Master ChatGPT and LLM Responses (41 min). It covers:\n\n1. Basics of AI and large language models.\n2. How to write clear and detailed prompts to improve answers.\n3. Tips for creating interactive and personalized AI responses.\n4. Advanced topics like AI mistakes (hallucinations) and text embeddings (how AI understands words).\n5. Fun examples, like making AI write poems or correct grammar.\n\n[](https://youtu.be/ZvnD73m40o)\n\nPrevious\n\n3. Large Language Models\n\nNext\n\nTDS TA Instructions"
  },
  {
    "title": "Prompt engineering",
    "filename": "Prompt_engineering.md",
    "text": "Prompt Engineering\n----------------------------------------------------------------\n\nPrompt engineering is the process of crafting effective prompts for large language models (LLMs).\n\nOne of the best ways to approach prompt engineering is to think of LLMs as a smart colleague (with amnesia) who needs explicit instructions.\n\nThe most authoritative guides are from the LLM providers themselves:\n\n Anthropic\n Google\n OpenAI\n\nHere are some best practices:\n\nUse prompt optimizers\n\nThey rewrite your prompt to improve it. Explore:\n\n Anthropic Prompt Optimizer\n OpenAI Prompt Generation\n Google AI-powered prompt writing tools\n\nBe clear, direct, and detailed\n\nBe explicit and thorough. Include all necessary context, goals, and details so the model understands the full picture.\n\n BAD: Explain gravitation lensing. (Reason: Vague and lacks context or detail.)\n GOOD: Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy. (Reason: Specifies the audience, scope, and focus.)\n\n> When you ask a question, don’t be vague. Spell it out. Give every detail the listener needs.\n> The clearer you are, the better the answer you’ll get.\n> For example, don’t just say, Explain Gravitation Lensing.\n> Say, Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy.\n\nAnthropic\n| OpenAI\n| Google\n\nGive examples\n\nProvide 2-3 relevant examples to guide the model on the style, structure, or format you expect. This helps the model produce outputs consistent with your desired style.\n\n BAD: Explain how to tie a bow tie. (Reason: No examples or reference points given.)\n GOOD:\n  Explain how to tie a bow tie. For example:\n\n  1. To tie a shoelace, you cross the laces and pull them tight…\n  2. To tie a necktie, you place it around the collar and loop it through…\n\n  Now, apply a similar step-by-step style to describe how to tie a bow tie. (Reason: Provides clear examples and a pattern to follow.)\n\n> Give examples to the model. If you want someone to build a house, show them a sketch. Don’t just say ‘build something.’\n> Giving examples is like showing a pattern. It makes everything easier to follow.\n\nAnthropic\n| OpenAI\n| Google\n\nThink step by step\n\nInstruct the model to reason through the problem step by step. This leads to more logical, well-structured answers.\n\n BAD: Given this transcript, is the customer satisfied? (Reason: No prompt for structured reasoning.)\n GOOD: Given this transcript, is the customer satisfied? Think step by step. (Reason: Directly instructs the model to break down reasoning into steps.)\n\n> Ask the model to think step by step. Don’t ask the model to just give the final answer right away.\n> That’s like asking someone to answer with the first thing that pops into their head.\n> Instead, ask them to break down their thought process into simple moves — like showing each rung of a ladder as they climb.\n> For example, when thinking step by step, the model could, A, list each customer question, B, find out if it was addressed, and C, decide that the agent answered only 2 out of the 3 questions.\n\nAnthropic\n| OpenAI\n| Google\n\nAssign a role\n\nSpecify a role or persona for the model. This provides context and helps tailor the response style.\n\n BAD: Explain how to fix a software bug. (Reason: No role or perspective given.)\n GOOD: You are a seasoned software engineer. Explain how to fix a software bug in legacy code, including the debugging and testing process. (Reason: Assigns a clear, knowledgeable persona, guiding the style and depth.)\n\n> Tell the model who they are. Maybe they’re a seasoned software engineer fixing a legacy bug, or an experienced copy editor revising a publication.\n> By clearly telling the model who they are, you help them speak with just the right expertise and style.\n> Suddenly, your explanation sounds like it’s coming from a true specialist, not a random voice.\n\nAnthropic\n| OpenAI\n| Google\n\nUse XML to structure your prompt\n\nUse XML tags to separate different parts of the prompt clearly. This helps the model understand structure and requirements.\n\n BAD: Here’s what I want: Provide a summary and then an example. (Reason: Unstructured, no clear separation of tasks.)\n GOOD:\n\n  \n  <instructions>\n    Provide a summary of the concept of machine learning.\n  </instructions>\n  <example>\n    Then provide a simple, concrete example of a machine learning application (e.g., an email spam filter).\n  </example>Copy to clipboardErrorCopied\n  \n\n  (Reason: Uses XML tags to clearly distinguish instructions from examples.)\n\n> Think of your request like a box. XML tags are neat little labels on that box.\n> They help keep parts sorted, so nothing gets lost in the shuffle.\n\nAnthropic\n| OpenAI\n| Google\n\nUse Markdown to format your output\n\nEncourage the model to use Markdown for headings, lists, code blocks, and other formatting features to produce structured, easily readable answers.\n\n BAD: Give me the steps in plain text. (Reason: No specific formatting instructions, less readable.)\n GOOD: Provide the steps in a markdown-formatted list with  headings for each section and numbered bullet points. (Reason: Directly instructs to use Markdown formatting, making output more structured and clear.)\n BAD: Correct the spelling and show the corrections. (Reason: No specific formatting instructions)\n GOOD: Correct the spelling, showing <ins>additions</ins> and <del>deletions</del>. (Reason: Directly instructs to use HTML formatting, making output more structured and clear.)\n\n> Markdown is a simple formatting language that all models understand.\n> You can have them add neat headings, sections, bold highlights, and bullet points.\n> These make complex documents more scannable and easy on the eyes.\n\nUse JSON for machine-readable output\n\nWhen you need structured data, ask for a JSON-formatted response. This ensures the output is machine-readable and organized.\n\n BAD: Just list the items. (Reason: Unstructured plain text makes parsing harder.)\n GOOD:\n\n  \n  Organize as an array of objects in a JSON format, like this:\n\n  json\n  [\n    { \"name\": \"Item 1\", \"description\": \"Description of Item 1\" },\n    { \"name\": \"Item 2\", \"description\": \"Description of Item 2\" },\n    { \"name\": \"Item 3\", \"description\": \"Description of Item 3\" }\n  ]\n  Copy to clipboardErrorCopied\n  \n\n  (Reason: Instructing JSON format ensures structured, machine-readable output.)\n\nNote: Always use JSON schema if possible. JSON schema is a way to describe the structure of JSON data. An easy way to get the JSON schema is to give ChatGPT sample output and ask it to generate the schema.\n\n> Imagine you’re organizing data for a big project. Plain text is like dumping everything into one messy pile — it’s hard to find what you need later.\n> JSON, on the other hand, is like packing your data into neat, labeled boxes within boxes.\n> Everything has its place: fields like ‘name,’ ‘description,’ and ‘value’ make the data easy to read, especially for machines.\n> For example, instead of just listing items, you can structure them as a JSON array, with each item as an object.\n> That way, when you hand it to a program, it’s all clear and ready to use.\n\nPrefer Yes/No answers\n\nConvert rating or percentage questions into Yes/No queries. LLMs handle binary choices better than numeric scales.\n\n BAD: On a scale of 1-10, how confident are you that this method works? (Reason: Asks for a numeric rating, which can be imprecise.)\n GOOD: Is this method likely to work as intended? Please give a reasoning and then answer Yes or No. (Reason: A binary question simplifies the response and clarifies what’s being asked.)\n\n> Don’t ask ‘On a scale of one to five…’. Models are not good with numbers.\n> They don’t know how to grade something 7 versus 8 on a 10 point scale. ‘Yes or no?’ is simple. It’s clear. It’s quick.\n> So, break your question into simple parts that they can answer with just a yes or a no.\n\nAsk for reason first, then the answer\n\nInstruct the model to provide its reasoning steps before stating the final answer. This makes it less likely to justify itself and more likely to think deeper, leading to more accurate results.\n\n BAD: What is the best route to take? (Reason: Direct question without prompting reasoning steps first.)\n GOOD: First, explain your reasoning step by step for how you determine the best route. Then, after you’ve reasoned it out, state your final recommendation for the best route. (Reason: Forces the model to show its reasoning process before giving the final answer.)\n\n> BEFORE making its final choice, have the model talk through their thinking. Reasoning first, answer second.\n> That way, the model won’t be tempted to justify an answer that they gave impulsively. It is also more likely to think deeper.\n\nUse proper spelling and grammar\n\nA well-written, grammatically correct prompt clarifies expectations. Poorly structured prompts can confuse the model.\n\n BAD: xplin wht the weirless netork do? make shur to giv me a anser?? (Reason: Poor spelling and unclear instructions.)\n GOOD: Explain what a wireless network does. Please provide a detailed, step-by-step explanation. (Reason: Proper spelling and clarity lead to a more coherent response.)\n\n> If your question sounds like gibberish, expect a messy answer. Speak cleanly.\n> When you do, the response will be much clearer.\n\nVideo Tutorials\n----------------------------------------------------------\n\nWatch Prompt Engineering Tutorial – Master ChatGPT and LLM Responses (41 min). It covers:\n\n1. Basics of AI and large language models.\n2. How to write clear and detailed prompts to improve answers.\n3. Tips for creating interactive and personalized AI responses.\n4. Advanced topics like AI mistakes (hallucinations) and text embeddings (how AI understands words).\n5. Fun examples, like making AI write poems or correct grammar.\n\n[](https://youtu.be/ZvnD73m40o)\n\nPrevious\n\n3. Large Language Models\n\nNext\n\nTDS TA Instructions"
  },
  {
    "title": "Prompt engineering",
    "filename": "Prompt_engineering.md",
    "text": "Prompt Engineering\n----------------------------------------------------------------\n\nPrompt engineering is the process of crafting effective prompts for large language models (LLMs).\n\nOne of the best ways to approach prompt engineering is to think of LLMs as a smart colleague (with amnesia) who needs explicit instructions.\n\nThe most authoritative guides are from the LLM providers themselves:\n\n Anthropic\n Google\n OpenAI\n\nHere are some best practices:\n\nUse prompt optimizers\n\nThey rewrite your prompt to improve it. Explore:\n\n Anthropic Prompt Optimizer\n OpenAI Prompt Generation\n Google AI-powered prompt writing tools\n\nBe clear, direct, and detailed\n\nBe explicit and thorough. Include all necessary context, goals, and details so the model understands the full picture.\n\n BAD: Explain gravitation lensing. (Reason: Vague and lacks context or detail.)\n GOOD: Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy. (Reason: Specifies the audience, scope, and focus.)\n\n> When you ask a question, don’t be vague. Spell it out. Give every detail the listener needs.\n> The clearer you are, the better the answer you’ll get.\n> For example, don’t just say, Explain Gravitation Lensing.\n> Say, Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy.\n\nAnthropic\n| OpenAI\n| Google\n\nGive examples\n\nProvide 2-3 relevant examples to guide the model on the style, structure, or format you expect. This helps the model produce outputs consistent with your desired style.\n\n BAD: Explain how to tie a bow tie. (Reason: No examples or reference points given.)\n GOOD:\n  Explain how to tie a bow tie. For example:\n\n  1. To tie a shoelace, you cross the laces and pull them tight…\n  2. To tie a necktie, you place it around the collar and loop it through…\n\n  Now, apply a similar step-by-step style to describe how to tie a bow tie. (Reason: Provides clear examples and a pattern to follow.)\n\n> Give examples to the model. If you want someone to build a house, show them a sketch. Don’t just say ‘build something.’\n> Giving examples is like showing a pattern. It makes everything easier to follow.\n\nAnthropic\n| OpenAI\n| Google\n\nThink step by step\n\nInstruct the model to reason through the problem step by step. This leads to more logical, well-structured answers.\n\n BAD: Given this transcript, is the customer satisfied? (Reason: No prompt for structured reasoning.)\n GOOD: Given this transcript, is the customer satisfied? Think step by step. (Reason: Directly instructs the model to break down reasoning into steps.)\n\n> Ask the model to think step by step. Don’t ask the model to just give the final answer right away.\n> That’s like asking someone to answer with the first thing that pops into their head.\n> Instead, ask them to break down their thought process into simple moves — like showing each rung of a ladder as they climb.\n> For example, when thinking step by step, the model could, A, list each customer question, B, find out if it was addressed, and C, decide that the agent answered only 2 out of the 3 questions.\n\nAnthropic\n| OpenAI\n| Google\n\nAssign a role\n\nSpecify a role or persona for the model. This provides context and helps tailor the response style.\n\n BAD: Explain how to fix a software bug. (Reason: No role or perspective given.)\n GOOD: You are a seasoned software engineer. Explain how to fix a software bug in legacy code, including the debugging and testing process. (Reason: Assigns a clear, knowledgeable persona, guiding the style and depth.)\n\n> Tell the model who they are. Maybe they’re a seasoned software engineer fixing a legacy bug, or an experienced copy editor revising a publication.\n> By clearly telling the model who they are, you help them speak with just the right expertise and style.\n> Suddenly, your explanation sounds like it’s coming from a true specialist, not a random voice.\n\nAnthropic\n| OpenAI\n| Google\n\nUse XML to structure your prompt\n\nUse XML tags to separate different parts of the prompt clearly. This helps the model understand structure and requirements.\n\n BAD: Here’s what I want: Provide a summary and then an example. (Reason: Unstructured, no clear separation of tasks.)\n GOOD:\n\n  \n  <instructions>\n    Provide a summary of the concept of machine learning.\n  </instructions>\n  <example>\n    Then provide a simple, concrete example of a machine learning application (e.g., an email spam filter).\n  </example>Copy to clipboardErrorCopied\n  \n\n  (Reason: Uses XML tags to clearly distinguish instructions from examples.)\n\n> Think of your request like a box. XML tags are neat little labels on that box.\n> They help keep parts sorted, so nothing gets lost in the shuffle.\n\nAnthropic\n| OpenAI\n| Google\n\nUse Markdown to format your output\n\nEncourage the model to use Markdown for headings, lists, code blocks, and other formatting features to produce structured, easily readable answers.\n\n BAD: Give me the steps in plain text. (Reason: No specific formatting instructions, less readable.)\n GOOD: Provide the steps in a markdown-formatted list with  headings for each section and numbered bullet points. (Reason: Directly instructs to use Markdown formatting, making output more structured and clear.)\n BAD: Correct the spelling and show the corrections. (Reason: No specific formatting instructions)\n GOOD: Correct the spelling, showing <ins>additions</ins> and <del>deletions</del>. (Reason: Directly instructs to use HTML formatting, making output more structured and clear.)\n\n> Markdown is a simple formatting language that all models understand.\n> You can have them add neat headings, sections, bold highlights, and bullet points.\n> These make complex documents more scannable and easy on the eyes.\n\nUse JSON for machine-readable output\n\nWhen you need structured data, ask for a JSON-formatted response. This ensures the output is machine-readable and organized.\n\n BAD: Just list the items. (Reason: Unstructured plain text makes parsing harder.)\n GOOD:\n\n  \n  Organize as an array of objects in a JSON format, like this:\n\n  json\n  [\n    { \"name\": \"Item 1\", \"description\": \"Description of Item 1\" },\n    { \"name\": \"Item 2\", \"description\": \"Description of Item 2\" },\n    { \"name\": \"Item 3\", \"description\": \"Description of Item 3\" }\n  ]\n  Copy to clipboardErrorCopied\n  \n\n  (Reason: Instructing JSON format ensures structured, machine-readable output.)\n\nNote: Always use JSON schema if possible. JSON schema is a way to describe the structure of JSON data. An easy way to get the JSON schema is to give ChatGPT sample output and ask it to generate the schema.\n\n> Imagine you’re organizing data for a big project. Plain text is like dumping everything into one messy pile — it’s hard to find what you need later.\n> JSON, on the other hand, is like packing your data into neat, labeled boxes within boxes.\n> Everything has its place: fields like ‘name,’ ‘description,’ and ‘value’ make the data easy to read, especially for machines.\n> For example, instead of just listing items, you can structure them as a JSON array, with each item as an object.\n> That way, when you hand it to a program, it’s all clear and ready to use.\n\nPrefer Yes/No answers\n\nConvert rating or percentage questions into Yes/No queries. LLMs handle binary choices better than numeric scales.\n\n BAD: On a scale of 1-10, how confident are you that this method works? (Reason: Asks for a numeric rating, which can be imprecise.)\n GOOD: Is this method likely to work as intended? Please give a reasoning and then answer Yes or No. (Reason: A binary question simplifies the response and clarifies what’s being asked.)\n\n> Don’t ask ‘On a scale of one to five…’. Models are not good with numbers.\n> They don’t know how to grade something 7 versus 8 on a 10 point scale. ‘Yes or no?’ is simple. It’s clear. It’s quick.\n> So, break your question into simple parts that they can answer with just a yes or a no.\n\nAsk for reason first, then the answer\n\nInstruct the model to provide its reasoning steps before stating the final answer. This makes it less likely to justify itself and more likely to think deeper, leading to more accurate results.\n\n BAD: What is the best route to take? (Reason: Direct question without prompting reasoning steps first.)\n GOOD: First, explain your reasoning step by step for how you determine the best route. Then, after you’ve reasoned it out, state your final recommendation for the best route. (Reason: Forces the model to show its reasoning process before giving the final answer.)\n\n> BEFORE making its final choice, have the model talk through their thinking. Reasoning first, answer second.\n> That way, the model won’t be tempted to justify an answer that they gave impulsively. It is also more likely to think deeper.\n\nUse proper spelling and grammar\n\nA well-written, grammatically correct prompt clarifies expectations. Poorly structured prompts can confuse the model.\n\n BAD: xplin wht the weirless netork do? make shur to giv me a anser?? (Reason: Poor spelling and unclear instructions.)\n GOOD: Explain what a wireless network does. Please provide a detailed, step-by-step explanation. (Reason: Proper spelling and clarity lead to a more coherent response.)\n\n> If your question sounds like gibberish, expect a messy answer. Speak cleanly.\n> When you do, the response will be much clearer.\n\nVideo Tutorials\n----------------------------------------------------------\n\nWatch Prompt Engineering Tutorial – Master ChatGPT and LLM Responses (41 min). It covers:\n\n1. Basics of AI and large language models.\n2. How to write clear and detailed prompts to improve answers.\n3. Tips for creating interactive and personalized AI responses.\n4. Advanced topics like AI mistakes (hallucinations) and text embeddings (how AI understands words).\n5. Fun examples, like making AI write poems or correct grammar.\n\n[](https://youtu.be/ZvnD73m40o)\n\nPrevious\n\n3. Large Language Models\n\nNext\n\nTDS TA Instructions"
  },
  {
    "title": "Prompt engineering",
    "filename": "Prompt_engineering.md",
    "text": "Prompt Engineering\n----------------------------------------------------------------\n\nPrompt engineering is the process of crafting effective prompts for large language models (LLMs).\n\nOne of the best ways to approach prompt engineering is to think of LLMs as a smart colleague (with amnesia) who needs explicit instructions.\n\nThe most authoritative guides are from the LLM providers themselves:\n\n Anthropic\n Google\n OpenAI\n\nHere are some best practices:\n\nUse prompt optimizers\n\nThey rewrite your prompt to improve it. Explore:\n\n Anthropic Prompt Optimizer\n OpenAI Prompt Generation\n Google AI-powered prompt writing tools\n\nBe clear, direct, and detailed\n\nBe explicit and thorough. Include all necessary context, goals, and details so the model understands the full picture.\n\n BAD: Explain gravitation lensing. (Reason: Vague and lacks context or detail.)\n GOOD: Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy. (Reason: Specifies the audience, scope, and focus.)\n\n> When you ask a question, don’t be vague. Spell it out. Give every detail the listener needs.\n> The clearer you are, the better the answer you’ll get.\n> For example, don’t just say, Explain Gravitation Lensing.\n> Say, Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy.\n\nAnthropic\n| OpenAI\n| Google\n\nGive examples\n\nProvide 2-3 relevant examples to guide the model on the style, structure, or format you expect. This helps the model produce outputs consistent with your desired style.\n\n BAD: Explain how to tie a bow tie. (Reason: No examples or reference points given.)\n GOOD:\n  Explain how to tie a bow tie. For example:\n\n  1. To tie a shoelace, you cross the laces and pull them tight…\n  2. To tie a necktie, you place it around the collar and loop it through…\n\n  Now, apply a similar step-by-step style to describe how to tie a bow tie. (Reason: Provides clear examples and a pattern to follow.)\n\n> Give examples to the model. If you want someone to build a house, show them a sketch. Don’t just say ‘build something.’\n> Giving examples is like showing a pattern. It makes everything easier to follow.\n\nAnthropic\n| OpenAI\n| Google\n\nThink step by step\n\nInstruct the model to reason through the problem step by step. This leads to more logical, well-structured answers.\n\n BAD: Given this transcript, is the customer satisfied? (Reason: No prompt for structured reasoning.)\n GOOD: Given this transcript, is the customer satisfied? Think step by step. (Reason: Directly instructs the model to break down reasoning into steps.)\n\n> Ask the model to think step by step. Don’t ask the model to just give the final answer right away.\n> That’s like asking someone to answer with the first thing that pops into their head.\n> Instead, ask them to break down their thought process into simple moves — like showing each rung of a ladder as they climb.\n> For example, when thinking step by step, the model could, A, list each customer question, B, find out if it was addressed, and C, decide that the agent answered only 2 out of the 3 questions.\n\nAnthropic\n| OpenAI\n| Google\n\nAssign a role\n\nSpecify a role or persona for the model. This provides context and helps tailor the response style.\n\n BAD: Explain how to fix a software bug. (Reason: No role or perspective given.)\n GOOD: You are a seasoned software engineer. Explain how to fix a software bug in legacy code, including the debugging and testing process. (Reason: Assigns a clear, knowledgeable persona, guiding the style and depth.)\n\n> Tell the model who they are. Maybe they’re a seasoned software engineer fixing a legacy bug, or an experienced copy editor revising a publication.\n> By clearly telling the model who they are, you help them speak with just the right expertise and style.\n> Suddenly, your explanation sounds like it’s coming from a true specialist, not a random voice.\n\nAnthropic\n| OpenAI\n| Google\n\nUse XML to structure your prompt\n\nUse XML tags to separate different parts of the prompt clearly. This helps the model understand structure and requirements.\n\n BAD: Here’s what I want: Provide a summary and then an example. (Reason: Unstructured, no clear separation of tasks.)\n GOOD:\n\n  \n  <instructions>\n    Provide a summary of the concept of machine learning.\n  </instructions>\n  <example>\n    Then provide a simple, concrete example of a machine learning application (e.g., an email spam filter).\n  </example>Copy to clipboardErrorCopied\n  \n\n  (Reason: Uses XML tags to clearly distinguish instructions from examples.)\n\n> Think of your request like a box. XML tags are neat little labels on that box.\n> They help keep parts sorted, so nothing gets lost in the shuffle.\n\nAnthropic\n| OpenAI\n| Google\n\nUse Markdown to format your output\n\nEncourage the model to use Markdown for headings, lists, code blocks, and other formatting features to produce structured, easily readable answers.\n\n BAD: Give me the steps in plain text. (Reason: No specific formatting instructions, less readable.)\n GOOD: Provide the steps in a markdown-formatted list with  headings for each section and numbered bullet points. (Reason: Directly instructs to use Markdown formatting, making output more structured and clear.)\n BAD: Correct the spelling and show the corrections. (Reason: No specific formatting instructions)\n GOOD: Correct the spelling, showing <ins>additions</ins> and <del>deletions</del>. (Reason: Directly instructs to use HTML formatting, making output more structured and clear.)\n\n> Markdown is a simple formatting language that all models understand.\n> You can have them add neat headings, sections, bold highlights, and bullet points.\n> These make complex documents more scannable and easy on the eyes.\n\nUse JSON for machine-readable output\n\nWhen you need structured data, ask for a JSON-formatted response. This ensures the output is machine-readable and organized.\n\n BAD: Just list the items. (Reason: Unstructured plain text makes parsing harder.)\n GOOD:\n\n  \n  Organize as an array of objects in a JSON format, like this:\n\n  json\n  [\n    { \"name\": \"Item 1\", \"description\": \"Description of Item 1\" },\n    { \"name\": \"Item 2\", \"description\": \"Description of Item 2\" },\n    { \"name\": \"Item 3\", \"description\": \"Description of Item 3\" }\n  ]\n  Copy to clipboardErrorCopied\n  \n\n  (Reason: Instructing JSON format ensures structured, machine-readable output.)\n\nNote: Always use JSON schema if possible. JSON schema is a way to describe the structure of JSON data. An easy way to get the JSON schema is to give ChatGPT sample output and ask it to generate the schema.\n\n> Imagine you’re organizing data for a big project. Plain text is like dumping everything into one messy pile — it’s hard to find what you need later.\n> JSON, on the other hand, is like packing your data into neat, labeled boxes within boxes.\n> Everything has its place: fields like ‘name,’ ‘description,’ and ‘value’ make the data easy to read, especially for machines.\n> For example, instead of just listing items, you can structure them as a JSON array, with each item as an object.\n> That way, when you hand it to a program, it’s all clear and ready to use.\n\nPrefer Yes/No answers\n\nConvert rating or percentage questions into Yes/No queries. LLMs handle binary choices better than numeric scales.\n\n BAD: On a scale of 1-10, how confident are you that this method works? (Reason: Asks for a numeric rating, which can be imprecise.)\n GOOD: Is this method likely to work as intended? Please give a reasoning and then answer Yes or No. (Reason: A binary question simplifies the response and clarifies what’s being asked.)\n\n> Don’t ask ‘On a scale of one to five…’. Models are not good with numbers.\n> They don’t know how to grade something 7 versus 8 on a 10 point scale. ‘Yes or no?’ is simple. It’s clear. It’s quick.\n> So, break your question into simple parts that they can answer with just a yes or a no.\n\nAsk for reason first, then the answer\n\nInstruct the model to provide its reasoning steps before stating the final answer. This makes it less likely to justify itself and more likely to think deeper, leading to more accurate results.\n\n BAD: What is the best route to take? (Reason: Direct question without prompting reasoning steps first.)\n GOOD: First, explain your reasoning step by step for how you determine the best route. Then, after you’ve reasoned it out, state your final recommendation for the best route. (Reason: Forces the model to show its reasoning process before giving the final answer.)\n\n> BEFORE making its final choice, have the model talk through their thinking. Reasoning first, answer second.\n> That way, the model won’t be tempted to justify an answer that they gave impulsively. It is also more likely to think deeper.\n\nUse proper spelling and grammar\n\nA well-written, grammatically correct prompt clarifies expectations. Poorly structured prompts can confuse the model.\n\n BAD: xplin wht the weirless netork do? make shur to giv me a anser?? (Reason: Poor spelling and unclear instructions.)\n GOOD: Explain what a wireless network does. Please provide a detailed, step-by-step explanation. (Reason: Proper spelling and clarity lead to a more coherent response.)\n\n> If your question sounds like gibberish, expect a messy answer. Speak cleanly.\n> When you do, the response will be much clearer.\n\nVideo Tutorials\n----------------------------------------------------------\n\nWatch Prompt Engineering Tutorial – Master ChatGPT and LLM Responses (41 min). It covers:\n\n1. Basics of AI and large language models.\n2. How to write clear and detailed prompts to improve answers.\n3. Tips for creating interactive and personalized AI responses.\n4. Advanced topics like AI mistakes (hallucinations) and text embeddings (how AI understands words).\n5. Fun examples, like making AI write poems or correct grammar.\n\n[](https://youtu.be/ZvnD73m40o)\n\nPrevious\n\n3. Large Language Models\n\nNext\n\nTDS TA Instructions"
  },
  {
    "title": "Unicode",
    "filename": "Unicode.md",
    "text": "Unicode\n-------------------------------\n\nEver noticed when you copy-paste some text and get garbage symbols? Or see garbage when you load a CSV file? This video explains why. It covers how computers store text (called character encoding) and why it sometimes goes wonky.\n\nLearn about ASCII (the original 7-bit encoding system that could only handle 128 characters), why that wasn’t enough for global languages, and how modern solutions like Unicode save the day by letting us use any character from any language.\n\nSome programs try to guess encodings (sometimes badly!). A signature called BOM (Byte Order Mark)helps computers know exactly how to read text files correctly.\n\nLearn how Unicode, UTF-8 and character encoding works. This is a common gotcha when building apps that handle international text - something bootcamps often skip but developers and data scientists regularly face in the real world.\n\nUnicode is fundamental for data scientists working with international data. Here are key concepts you need to understand:\n\n Character Encodings: Different ways to represent text in computers\n  + ASCII (7-bit): Limited to 128 characters, English-only\n  + UTF-8: Variable-width encoding, backwards compatible with ASCII\n  + UTF-16: Fixed-width encoding, used in Windows and Java\n  + UTF-32: Fixed-width encoding, memory inefficient but simple\n\nCommon encoding issues you’ll encounter:\n\nReading files with explicit encoding\nwith open('file.txt', encoding='utf-8') as f:\n    text = f.read()\n\nHandling encoding errors\nimport pandas as pd\ndf = pd.readcsv('data.csv', encoding='utf-8', errors='replace')\n\nDetecting file encoding\nimport chardet\nwith open('unknown.txt', 'rb') as f:\n    result = chardet.detect(f.read())\nprint(result['encoding'])Copy to clipboardErrorCopied\n\n[](https://youtu.be/jeIBNn5Y5fI)\n\nPrevious\n\nJavaScript tools: npx\n\nNext\n\nBrowser: DevTools"
  },
  {
    "title": "Data Transformation in Excel",
    "filename": "Data_Transformation_in_Excel.md",
    "text": "Data Transformation in Excel\n----------------------------------------------------------------------------------------------\n\n[](https://youtu.be/gR2IY5Naja0)\n\nYou’ll learn data transformation techniques in Excel, covering:\n\n Calculating Ratios: Compute metro area to city area and metro population to city population ratios.\n Using Pivot Tables: Create pivot tables to aggregate data and identify outliers.\n Filtering Data: Apply filters in pivot tables to analyze specific subsets of data.\n Counting Data Occurrences: Use pivot tables to count the frequency of specific entries.\n Creating Charts: Generate charts from pivot table data to visualize distributions and outliers.\n\nHere are links used in the video:\n\n List of Largest Cities Excel file\n\nPrevious\n\nData Cleansing in Excel\n\nNext\n\nSplitting Text in Excel"
  },
  {
    "title": "TDS GPT Reviewer",
    "filename": "TDS_GPT_Reviewer.md",
    "text": "TDS GPT Reviewer\n==========================================================\n\nAfter the later parts of this course’s contents were written, we ran it through a Technical Content Reviewer GPT.\n\nTake a look at the GPT’s instructions. These were generated by the OpenAI Prompt Generation tool.\n\nAs a Content Reviewer for a high school–level course on Tools in Data Science, your job is to evaluate provided content (such as text, code snippets, or references) with a focus on correctness, clarity, and conciseness, and offer actionable feedback for improvement.\n\n1. Check for Correctness and Consistency\n   - Verify technical and factual accuracy.\n   - Ensure internal consistency without contradictions.\n2. Check for Clarity and Approachability\n   - Ensure content is understandable for a high school student with limited prior knowledge.\n   - Identify and simplify jargon or advanced concepts.\n3. Check for Conciseness\n   - Assess if content is direct and free of unnecessary verbosity.\n   - Identify areas for streamlining to enhance readability.\n4. Provide Feedback for Improvement\n   - Offer actionable suggestions for fixing, clarifying, or reorganizing content.\n   - Propose alternative phrasing if text is vague, complex, or verbose.\n\nSteps\n\n1. Carefully read the entire content before forming conclusions.\n2. List factual inconsistencies or missing details causing confusion.\n3. Suggest simpler terms or analogies for complex language.\n4. Point out unnecessary repetition or filler text.\n5. Provide direct examples of how to improve the highlighted issues.\n\nOutput Format\n\nRespond using Markdown with the following structure:\n\n1. Summary of Findings\n   - A concise paragraph outlining overall strengths and weaknesses.\n2. Detailed Review\n   - Correctness and Consistency: Note factual errors or inconsistencies, suggesting corrections.\n   - Clarity and Approachability: Identify overly advanced or unclear sections, offering simpler alternatives.\n   - Conciseness: Highlight long or repetitive sections with suggestions for tightening the text.\n3. Actionable Improvement Suggestions\n   - Provide specific sentences, bullet points, or rewritten examples to illustrate improvements.\n\nNotes\n\n- Maintain a constructive review tone, not content generation.\n- Even if content is perfect, confirm with suggestions for minor improvements (e.g., adding an example or clarifying a subtle point).Copy to clipboardErrorCopied\n\nContent creation prompts\n--------------------------------------------------------------------------\n\nIn addition, here are a few prompts used to create the content:\n\n1. Video summaries. Transcribe the video via YouTube Transcript or Whisper. Then: Summarize this video transcript crisply for a high school student.\n\nPrevious\n\nTDS TA Instructions\n\nNext\n\nLLM Sentiment Analysis"
  },
  {
    "title": "TDS GPT Reviewer",
    "filename": "TDS_GPT_Reviewer.md",
    "text": "TDS GPT Reviewer\n==========================================================\n\nAfter the later parts of this course’s contents were written, we ran it through a Technical Content Reviewer GPT.\n\nTake a look at the GPT’s instructions. These were generated by the OpenAI Prompt Generation tool.\n\nAs a Content Reviewer for a high school–level course on Tools in Data Science, your job is to evaluate provided content (such as text, code snippets, or references) with a focus on correctness, clarity, and conciseness, and offer actionable feedback for improvement.\n\n1. Check for Correctness and Consistency\n   - Verify technical and factual accuracy.\n   - Ensure internal consistency without contradictions.\n2. Check for Clarity and Approachability\n   - Ensure content is understandable for a high school student with limited prior knowledge.\n   - Identify and simplify jargon or advanced concepts.\n3. Check for Conciseness\n   - Assess if content is direct and free of unnecessary verbosity.\n   - Identify areas for streamlining to enhance readability.\n4. Provide Feedback for Improvement\n   - Offer actionable suggestions for fixing, clarifying, or reorganizing content.\n   - Propose alternative phrasing if text is vague, complex, or verbose.\n\nSteps\n\n1. Carefully read the entire content before forming conclusions.\n2. List factual inconsistencies or missing details causing confusion.\n3. Suggest simpler terms or analogies for complex language.\n4. Point out unnecessary repetition or filler text.\n5. Provide direct examples of how to improve the highlighted issues.\n\nOutput Format\n\nRespond using Markdown with the following structure:\n\n1. Summary of Findings\n   - A concise paragraph outlining overall strengths and weaknesses.\n2. Detailed Review\n   - Correctness and Consistency: Note factual errors or inconsistencies, suggesting corrections.\n   - Clarity and Approachability: Identify overly advanced or unclear sections, offering simpler alternatives.\n   - Conciseness: Highlight long or repetitive sections with suggestions for tightening the text.\n3. Actionable Improvement Suggestions\n   - Provide specific sentences, bullet points, or rewritten examples to illustrate improvements.\n\nNotes\n\n- Maintain a constructive review tone, not content generation.\n- Even if content is perfect, confirm with suggestions for minor improvements (e.g., adding an example or clarifying a subtle point).Copy to clipboardErrorCopied\n\nContent creation prompts\n--------------------------------------------------------------------------\n\nIn addition, here are a few prompts used to create the content:\n\n1. Video summaries. Transcribe the video via YouTube Transcript or Whisper. Then: Summarize this video transcript crisply for a high school student.\n\nPrevious\n\nTDS TA Instructions\n\nNext\n\nLLM Sentiment Analysis"
  },
  {
    "title": "Authentication: Google Auth",
    "filename": "Authentication__Google_Auth.md",
    "text": "Google Authentication with FastAPI\n-----------------------------------------------------------------------------------------\n\nSecure your API endpoints using Google ID tokens to restrict access to specific email addresses.\n\n[](https://youtu.be/4ExQYRCwbzw)\n\nGoogle Auth is the most commonly implemented single sign-on mechanism because:\n\n It’s popular and user-friendly. Users can log in with their existing Google accounts.\n It’s secure: Google supports OAuth2 and OpenID Connect to handle authentication.\n\nHere’s how you build a FastAPI app that identifies the user.\n\n1. Go to the Google Cloud Console – Credentials and click Create Credentials > OAuth client ID.\n2. Choose Web application, set your authorized redirect URIs (e.g., http://localhost:8000/).\n3. Copy the Client ID and Client Secret into a .env file:\n\n   \n   GOOGLECLIENTID=your-client-id.apps.googleusercontent.com\n   GOOGLECLIENTSECRET=your-client-secretCopy to clipboardErrorCopied\n   \n4. Create your FastAPI app.py:\n\n/// script\ndependencies = [\"python-dotenv\", \"fastapi\", \"uvicorn\", \"itsdangerous\", \"httpx\", \"authlib\"]\n///\n\nimport os\nfrom dotenv import loaddotenv\nfrom fastapi import FastAPI, Request\nfrom fastapi.responses import RedirectResponse\nfrom starlette.middleware.sessions import SessionMiddleware\nfrom authlib.integrations.starletteclient import OAuth\n\nloaddotenv()\napp = FastAPI()\napp.addmiddleware(SessionMiddleware, secretkey=\"create-a-random-secret-key\")\n\noauth = OAuth()\noauth.register(\n    name=\"google\",\n    clientid=os.getenv(\"GOOGLECLIENTID\"),\n    clientsecret=os.getenv(\"GOOGLECLIENTSECRET\"),\n    servermetadataurl=\"https://accounts.google.com/.well-known/openid-configuration\",\n    clientkwargs={\"scope\": \"openid email profile\"},\n)\n\n@app.get(\"/\")\nasync def application(request: Request):\n    user = request.session.get(\"user\")\n     3. For authenticated users: say hello\n    if user:\n        return f\"Hello {user['email']}\"\n     2. For users who have just logged in, save their details in the session\n    if \"code\" in request.queryparams:\n        token = await oauth.google.authorizeaccesstoken(request)\n        request.session[\"user\"] = token[\"userinfo\"]\n        return RedirectResponse(\"/\")\n     1. For users who are logging in for the first time, redirect to Google login\n    return await oauth.google.authorizeredirect(request, request.url)\n\nif name == \"main\":\n    import uvicorn\n    uvicorn.run(app, port=8000)Copy to clipboardErrorCopied\n\nNow, run uv run app.py.\n\n1. When you visit <http://localhost:8000/> you’ll be redirected to a Google login page.\n2. When you log in, you’ll be redirected back to <http://localhost:8000/>\n3. Now you’ll see the email ID you logged in with.\n\nInstead of displaying the email, you can show different content based on the user. For example:\n\n Allow access to specfic users and not others\n Fetch the user’s personalized information\n Display different content based on the user\n\nPrevious\n\nWeb Framework: FastAPI\n\nNext\n\nLocal LLMs: Ollama"
  },
  {
    "title": "Narratives with LLMs",
    "filename": "Narratives_with_LLMs.md",
    "text": "Narratives with LLMs\n----------------------------------------------------------------------\n\nTODO\n\nPrevious\n\nData Storytelling\n\nNext\n\nInteractive Notebooks: Marimo"
  },
  {
    "title": "Data Aggregation in Excel",
    "filename": "Data_Aggregation_in_Excel.md",
    "text": "Data Aggregation in Excel\n-------------------------------------------------------------------------------------\n\n[](https://youtu.be/NkpT0dDU8Y4)\n\nYou’ll learn data aggregation and visualization techniques in Excel, covering:\n\n Data Cleanup: Remove empty columns and rows with missing values.\n Creating Excel Tables: Convert raw data into tables for easier manipulation and formula application.\n Date Manipulation: Extract week, month, and year from date columns using Excel functions (WEEKNUM, TEXT).\n Color Scales: Apply color scales to visualize clusters and trends in data over time.\n Pivot Tables: Create pivot tables to aggregate data by location and date, summarizing values weekly and monthly.\n Sparklines: Use sparklines to visualize trends within pivot tables, making data patterns more apparent.\n Data Bars: Implement data bars for graphical illustrations of numerical columns, showing trends and waves.\n\nHere are links used in the video:\n\n COVID-19 data Excel file - raw data\n\nPrevious\n\nSplitting Text in Excel\n\nNext\n\nData Preparation in the Shell"
  },
  {
    "title": "LLM Sentiment Analysis",
    "filename": "LLM_Sentiment_Analysis.md",
    "text": "LLM Sentiment Analysis\n----------------------------------------------------------------------------\n\nOpenAI’s API provides access to language models like GPT 4o, GPT 4o mini, etc.\n\nFor more details, read OpenAI’s guide for:\n\n Text Generation\n Vision\n Structured Outputs\n\nStart with this quick tutorial:\n\n[](https://youtu.be/Xz4ORA0cOwQ)\n\nHere’s a minimal example using curl to generate text:\n\ncurl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAIAPIKEY\" \\\n  -d '{\n    \"model\": \"gpt-4o-mini\",\n    \"messages\": [{ \"role\": \"user\", \"content\": \"Write a haiku about programming.\" }]\n  }'Copy to clipboardErrorCopied\n\nLet’s break down the request:\n\n curl https://api.openai.com/v1/chat/completions: The API endpoint for text generation.\n -H \"Content-Type: application/json\": The content type of the request.\n -H \"Authorization: Bearer $OPENAIAPIKEY\": The API key for authentication.\n -d: The request body.\n  + \"model\": \"gpt-4o-mini\": The model to use for text generation.\n  + \"messages\":: The messages to send to the model.\n    - \"role\": \"user\": The role of the message.\n    - \"content\": \"Write a haiku about programming.\": The content of the message.\n\n[](https://youtu.be/D46QrX-2iU)\n\nThis video explains how to use large language models (LLMs) for sentiment analysis and classification, covering:\n\n Sentiment Analysis: Use OpenAI API to identify the sentiment of movie reviews as positive or negative.\n Prompt Engineering: Learn how to craft effective prompts to get desired results from LLMs.\n LLM Training: Understand how to train LLMs by providing examples and feedback.\n OpenAI API Integration: Integrate OpenAI API into Python code to perform sentiment analysis.\n Tokenization: Learn about tokenization and its impact on LLM input and cost.\n Zero-Shot, One-Shot, and Multi-Shot Learning: Understand different approaches to using LLMs for learning.\n\nHere are the links used in the video:\n\n Jupyter Notebook\n Movie reviews dataset\n OpenAI Playground\n OpenAI Pricing\n OpenAI Tokenizer\n OpenAI API Reference\n OpenAI Docs\n\nPrevious\n\nTDS GPT Reviewer\n\nNext\n\nLLM Text Extraction"
  },
  {
    "title": "Crawling with the CLI",
    "filename": "Crawling_with_the_CLI.md",
    "text": "Crawling with the CLI\n----------------------------------------------------------------\n\nSince websites are a common source of data, we often download entire websites (crawling) and then process them offline.\n\nWeb crawling is essential in many data-driven scenarios:\n\n Data mining and analysis: Gathering structured data from multiple pages for market research, competitive analysis, or academic research\n Content archiving: Creating offline copies of websites for preservation or backup purposes\n SEO analysis: Analyzing site structure, metadata, and content to improve search rankings\n Legal compliance: Capturing website content for regulatory or compliance documentation\n Website migration: Creating a complete copy before moving to a new platform or design\n Offline access: Downloading educational resources, documentation, or reference materials for use without internet connection\n\nThe most commonly used tool for fetching websites is wget. It is pre-installed in many UNIX distributions and easy to install.\n\n[](https://youtu.be/pLfH5TZBGXo)\n\nTo crawl the IIT Madras Data Science Program website for example, you could run:\n\nwget \\\n  --recursive \\\n  --level=3 \\\n  --no-parent \\\n  --convert-links \\\n  --adjust-extension \\\n  --compression=auto \\\n  --accept html,htm \\\n  --directory-prefix=./ds \\\n  https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\nHere’s what each option does:\n\n --recursive: Enables recursive downloading (following links)\n --level=3: Limits recursion depth to 3 levels from the initial URL\n --no-parent: Restricts crawling to only URLs below the initial directory\n --convert-links: Converts all links in downloaded documents to work locally\n --adjust-extension: Adds proper extensions to files (.html, .jpg, etc.) based on MIME types\n --compression=auto: Automatically handles compressed content (gzip, deflate)\n --accept html,htm: Only downloads files with these extensions\n --directory-prefix=./ds: Saves all downloaded files to the specified directory\n\nwget2 is a better version of wget and supports HTTP2, parallel connections, and only updates modified sites. The syntax is (mostly) the same.\n\nwget2 \\\n  --recursive \\\n  --level=3 \\\n  --no-parent \\\n  --convert-links \\\n  --adjust-extension \\\n  --compression=auto \\\n  --accept html,htm \\\n  --directory-prefix=./ds \\\n  https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\nThere are popular free and open-source alternatives to Wget:\n\nWpull\n\nWpull is a wget‐compatible Python crawler that supports on-disk resumption, WARC output, and PhantomJS integration.\n\nuvx wpull \\\n  --recursive \\\n  --level=3 \\\n  --no-parent \\\n  --convert-links \\\n  --adjust-extension \\\n  --compression=auto \\\n  --accept html,htm \\\n  --directory-prefix=./ds \\\n  https://study.iitm.ac.in/ds/Copy to clipboardErrorCopied\n\nHTTrack\n\nHTTrack is dedicated website‐mirroring tool with rich filtering and link‐conversion options.\n\nhttrack \"https://study.iitm.ac.in/ds/\" \\\n  -O \"./ds\" \\\n  \"+.study.iitm.ac.in/ds/\" \\\n  -r3Copy to clipboardErrorCopied\n\nRobots.txt\n\nrobots.txt is a standard file found in a website’s root directory that specifies which parts of the site should not be accessed by web crawlers. It’s part of the Robots Exclusion Protocol, an ethical standard for web crawling.\n\nWhy it’s important:\n\n Server load protection: Prevents excessive traffic that could overload servers\n Privacy protection: Keeps sensitive or private content from being indexed\n Legal compliance: Respects website owners’ rights to control access to their content\n Ethical web citizenship: Shows respect for website administrators’ wishes\n\nHow to override robots.txt restrictions:\n\n wget, wget2: Use -e robots=off\n httrack: Use -s0\n wpull: Use --no-robots\n\nWhen to override robots.txt (use with discretion):\n\nOnly bypass robots.txt when:\n\n You have explicit permission from the website owner\n You’re crawling your own website\n The content is publicly accessible and your crawling won’t cause server issues\n You’re conducting authorized security testing\n\nRemember that bypassing robots.txt without legitimate reason may:\n\n Violate terms of service\n Lead to IP banning\n Result in legal consequences in some jurisdictions\n Cause reputation damage to your organization\n\nAlways use the minimum necessary crawling speed and scope, and consider contacting website administrators for permission when in doubt.\n\nPrevious\n\nScraping with Google Sheets\n\nNext\n\nBBC Weather API with Python"
  },
  {
    "title": "6. Data Analysis",
    "filename": "6._Data_Analysis.md",
    "text": "Data analysis\n=================================================\n\nData Analysis: Introduction Podcast by NotebookLM\n\nOnce you’ve prepared the data, your next task is to analyze it to get insights that are not immediately obvious.\n\nIn this module, you’ll learn:\n\n Statistical analysis: Calculate correlations, regressions, forecasts, and outliers using spreadsheets\n Data summarization: Aggregate and pivot data using Python and databases.\n Geo-data Collection & Processing: Gather and process geospatial data using tools like Python (GeoPandas) and QGIS.\n Geo-visualization: Create and visualize geospatial data on maps using Excel, QGIS, and Python libraries such as Folium.\n Network & Proximity Analysis: Analyze geospatial relationships and perform network analysis to understand data distribution and clustering.\n Storytelling & Decision Making: Develop narratives and make informed decisions based on geospatial data insights.\n\n[](https://youtu.be/CRSljunxjnk)\n\nPrevious\n\nExtracting Audio and Transcripts\n\nNext\n\nCorrelation with Excel"
  },
  {
    "title": "Multimodal Embeddings",
    "filename": "Multimodal_Embeddings.md",
    "text": "Multimodal Embeddings\n-------------------------------------------------------------------------\n\nMultimodal embeddings map text and images into the same vector space, enabling direct comparison between, say, a caption — “A cute cat” — and an image of that cat. This unified representation powers real-world applications like:\n\n Cross-modal search (e.g. “find images of a sunset” via text queries)\n Content recommendation (suggesting visually similar products to text descriptions)\n Clustering & retrieval (grouping documents and their associated graphics)\n Anomaly detection (spotting unusual image–text pairings)\n\nBy reducing different data types to a common numeric form, you unlock richer search, enhanced recommendations, and tighter integration of visual and textual data.\n\nGet API keys\n-------------------------------------------------------\n\nBelow are the steps to grab a free API key for each provider.\n\nNomic Atlas\n\n1. Sign up at the Nomic Atlas homepage:\n   👉 <https://atlas.nomic.ai/> (Atlas | Nomic Atlas Documentation)\n2. Once logged in, open the Dashboard and navigate to Settings → API Keys.\n3. Click Create API Key, name it, and copy the generated key.\n\nSet in your shell:\n\nexport NOMICAPIKEY=\"your-nomic-api-key\"Copy to clipboardErrorCopied\n\nJina AI\n\n1. Visit the Jina AI Embeddings page:\n   👉 <https://jina.ai/embeddings/> (Jina AI)\n2. Click Get Started (no credit card needed) and register for a free account. Every new key comes with 1 million free tokens.\n3. In the dashboard, go to API Key & Billing and copy your key.\n\nSet in your shell:\n\nexport JINAAPIKEY=\"your-jina-api-key\"Copy to clipboardErrorCopied\n\nGoogle Vertex AI\n\n1. Sign up for Google Cloud’s free tier (90 days, $300 credit):\n   👉 <https://cloud.google.com/free> (Google Cloud)\n2. In the Cloud Console, open APIs & Services → Credentials:\n   👉 <https://console.cloud.google.com/apis/credentials> (Google Cloud)\n3. Click Create credentials → API key, then copy the key.\n\nSet in your shell:\n\nexport GOOGLEAPIKEY=\"your-google-api-key\"\nexport PROJECTID=\"your-gcp-project-id\"Copy to clipboardErrorCopied\n\nExample Requests\n---------------------------------------------------------------\n\nBelow are fully-workable snippets that:\n\n Embed two texts (“A cute cat”, “A cardboard box”)\n Embed two images (cat.jpg, box.png)\n Send them to the respective API\n\nReplace variables ($NOMICAPIKEY, $JINAAPIKEY, $GOOGLEAPIKEY, $PROJECTID) before running.\n\n1. Nomic Atlas\n\nText Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/text\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"model\": \"nomic-embed-text-v1.5\",\n        \"tasktype\": \"searchdocument\",\n        \"texts\": [\"A cute cat\", \"A cardboard box\"]\n      }'Copy to clipboardErrorCopied\n\nImage Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/image\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -F \"model=nomic-embed-vision-v1.5\" \\\n  -F \"images=@cat.jpg\" \\\n  -F \"images=@box.png\"Copy to clipboardErrorCopied\n\n2. Jina AI\n\nJina’s unified /v1/embeddings endpoint accepts text strings and base64-encoded image bytes in one batch. (Jina AI)\n\ncurl -X POST \"https://api.jina.ai/v1/embeddings\" \\\n  -H \"Authorization: Bearer $JINAAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\n        \\\"model\\\": \\\"jina-clip-v2\\\",\n        \\\"input\\\": [\n          {\\\"text\\\":\\\"A cute cat\\\"},\n          {\\\"text\\\":\\\"A cardboard box\\\"},,\n          {\\\"image\\\":\\\"$(base64 -w 0 cat.jpg)\\\"},\n          {\\\"image\\\":\\\"$(base64 -w 0 box.png)\\\"}\n        ]\n      }\"Copy to clipboardErrorCopied\n\n3. Google Vertex AI Multimodal Embeddings\n\nVertex AI’s multimodal model (multimodalembedding@001) takes JSON instances combining text and base64 image data. (Google Cloud)\n\ncurl -X POST \\\n  -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://us-central1-aiplatform.googleapis.com/v1/projects/$PROJECTID/locations/us-central1/publishers/google/models/multimodalembedding@001:predict?key=$GOOGLEAPIKEY\" \\\n  -d \"{\n        \\\"instances\\\": [\n          {\n            \\\"text\\\": \\\"A cute cat\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 cat.jpg)\\\"}\n          },\n          {\n            \\\"text\\\": \\\"A cardboard box\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 box.png)\\\"}\n          }\n        ]\n      }\"Copy to clipboardErrorCopied\n\nWith these steps, you’re all set to explore and experiment with multimodal embeddings across text + image data—unifying your applications’ visual and linguistic understanding.\n\nPrevious\n\nEmbeddings\n\nNext\n\nTopic modeling"
  },
  {
    "title": "Multimodal Embeddings",
    "filename": "Multimodal_Embeddings.md",
    "text": "Multimodal Embeddings\n-------------------------------------------------------------------------\n\nMultimodal embeddings map text and images into the same vector space, enabling direct comparison between, say, a caption — “A cute cat” — and an image of that cat. This unified representation powers real-world applications like:\n\n Cross-modal search (e.g. “find images of a sunset” via text queries)\n Content recommendation (suggesting visually similar products to text descriptions)\n Clustering & retrieval (grouping documents and their associated graphics)\n Anomaly detection (spotting unusual image–text pairings)\n\nBy reducing different data types to a common numeric form, you unlock richer search, enhanced recommendations, and tighter integration of visual and textual data.\n\nGet API keys\n-------------------------------------------------------\n\nBelow are the steps to grab a free API key for each provider.\n\nNomic Atlas\n\n1. Sign up at the Nomic Atlas homepage:\n   👉 <https://atlas.nomic.ai/> (Atlas | Nomic Atlas Documentation)\n2. Once logged in, open the Dashboard and navigate to Settings → API Keys.\n3. Click Create API Key, name it, and copy the generated key.\n\nSet in your shell:\n\nexport NOMICAPIKEY=\"your-nomic-api-key\"Copy to clipboardErrorCopied\n\nJina AI\n\n1. Visit the Jina AI Embeddings page:\n   👉 <https://jina.ai/embeddings/> (Jina AI)\n2. Click Get Started (no credit card needed) and register for a free account. Every new key comes with 1 million free tokens.\n3. In the dashboard, go to API Key & Billing and copy your key.\n\nSet in your shell:\n\nexport JINAAPIKEY=\"your-jina-api-key\"Copy to clipboardErrorCopied\n\nGoogle Vertex AI\n\n1. Sign up for Google Cloud’s free tier (90 days, $300 credit):\n   👉 <https://cloud.google.com/free> (Google Cloud)\n2. In the Cloud Console, open APIs & Services → Credentials:\n   👉 <https://console.cloud.google.com/apis/credentials> (Google Cloud)\n3. Click Create credentials → API key, then copy the key.\n\nSet in your shell:\n\nexport GOOGLEAPIKEY=\"your-google-api-key\"\nexport PROJECTID=\"your-gcp-project-id\"Copy to clipboardErrorCopied\n\nExample Requests\n---------------------------------------------------------------\n\nBelow are fully-workable snippets that:\n\n Embed two texts (“A cute cat”, “A cardboard box”)\n Embed two images (cat.jpg, box.png)\n Send them to the respective API\n\nReplace variables ($NOMICAPIKEY, $JINAAPIKEY, $GOOGLEAPIKEY, $PROJECTID) before running.\n\n1. Nomic Atlas\n\nText Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/text\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"model\": \"nomic-embed-text-v1.5\",\n        \"tasktype\": \"searchdocument\",\n        \"texts\": [\"A cute cat\", \"A cardboard box\"]\n      }'Copy to clipboardErrorCopied\n\nImage Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/image\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -F \"model=nomic-embed-vision-v1.5\" \\\n  -F \"images=@cat.jpg\" \\\n  -F \"images=@box.png\"Copy to clipboardErrorCopied\n\n2. Jina AI\n\nJina’s unified /v1/embeddings endpoint accepts text strings and base64-encoded image bytes in one batch. (Jina AI)\n\ncurl -X POST \"https://api.jina.ai/v1/embeddings\" \\\n  -H \"Authorization: Bearer $JINAAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\n        \\\"model\\\": \\\"jina-clip-v2\\\",\n        \\\"input\\\": [\n          {\\\"text\\\":\\\"A cute cat\\\"},\n          {\\\"text\\\":\\\"A cardboard box\\\"},,\n          {\\\"image\\\":\\\"$(base64 -w 0 cat.jpg)\\\"},\n          {\\\"image\\\":\\\"$(base64 -w 0 box.png)\\\"}\n        ]\n      }\"Copy to clipboardErrorCopied\n\n3. Google Vertex AI Multimodal Embeddings\n\nVertex AI’s multimodal model (multimodalembedding@001) takes JSON instances combining text and base64 image data. (Google Cloud)\n\ncurl -X POST \\\n  -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://us-central1-aiplatform.googleapis.com/v1/projects/$PROJECTID/locations/us-central1/publishers/google/models/multimodalembedding@001:predict?key=$GOOGLEAPIKEY\" \\\n  -d \"{\n        \\\"instances\\\": [\n          {\n            \\\"text\\\": \\\"A cute cat\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 cat.jpg)\\\"}\n          },\n          {\n            \\\"text\\\": \\\"A cardboard box\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 box.png)\\\"}\n          }\n        ]\n      }\"Copy to clipboardErrorCopied\n\nWith these steps, you’re all set to explore and experiment with multimodal embeddings across text + image data—unifying your applications’ visual and linguistic understanding.\n\nPrevious\n\nEmbeddings\n\nNext\n\nTopic modeling"
  },
  {
    "title": "Multimodal Embeddings",
    "filename": "Multimodal_Embeddings.md",
    "text": "Multimodal Embeddings\n-------------------------------------------------------------------------\n\nMultimodal embeddings map text and images into the same vector space, enabling direct comparison between, say, a caption — “A cute cat” — and an image of that cat. This unified representation powers real-world applications like:\n\n Cross-modal search (e.g. “find images of a sunset” via text queries)\n Content recommendation (suggesting visually similar products to text descriptions)\n Clustering & retrieval (grouping documents and their associated graphics)\n Anomaly detection (spotting unusual image–text pairings)\n\nBy reducing different data types to a common numeric form, you unlock richer search, enhanced recommendations, and tighter integration of visual and textual data.\n\nGet API keys\n-------------------------------------------------------\n\nBelow are the steps to grab a free API key for each provider.\n\nNomic Atlas\n\n1. Sign up at the Nomic Atlas homepage:\n   👉 <https://atlas.nomic.ai/> (Atlas | Nomic Atlas Documentation)\n2. Once logged in, open the Dashboard and navigate to Settings → API Keys.\n3. Click Create API Key, name it, and copy the generated key.\n\nSet in your shell:\n\nexport NOMICAPIKEY=\"your-nomic-api-key\"Copy to clipboardErrorCopied\n\nJina AI\n\n1. Visit the Jina AI Embeddings page:\n   👉 <https://jina.ai/embeddings/> (Jina AI)\n2. Click Get Started (no credit card needed) and register for a free account. Every new key comes with 1 million free tokens.\n3. In the dashboard, go to API Key & Billing and copy your key.\n\nSet in your shell:\n\nexport JINAAPIKEY=\"your-jina-api-key\"Copy to clipboardErrorCopied\n\nGoogle Vertex AI\n\n1. Sign up for Google Cloud’s free tier (90 days, $300 credit):\n   👉 <https://cloud.google.com/free> (Google Cloud)\n2. In the Cloud Console, open APIs & Services → Credentials:\n   👉 <https://console.cloud.google.com/apis/credentials> (Google Cloud)\n3. Click Create credentials → API key, then copy the key.\n\nSet in your shell:\n\nexport GOOGLEAPIKEY=\"your-google-api-key\"\nexport PROJECTID=\"your-gcp-project-id\"Copy to clipboardErrorCopied\n\nExample Requests\n---------------------------------------------------------------\n\nBelow are fully-workable snippets that:\n\n Embed two texts (“A cute cat”, “A cardboard box”)\n Embed two images (cat.jpg, box.png)\n Send them to the respective API\n\nReplace variables ($NOMICAPIKEY, $JINAAPIKEY, $GOOGLEAPIKEY, $PROJECTID) before running.\n\n1. Nomic Atlas\n\nText Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/text\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"model\": \"nomic-embed-text-v1.5\",\n        \"tasktype\": \"searchdocument\",\n        \"texts\": [\"A cute cat\", \"A cardboard box\"]\n      }'Copy to clipboardErrorCopied\n\nImage Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/image\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -F \"model=nomic-embed-vision-v1.5\" \\\n  -F \"images=@cat.jpg\" \\\n  -F \"images=@box.png\"Copy to clipboardErrorCopied\n\n2. Jina AI\n\nJina’s unified /v1/embeddings endpoint accepts text strings and base64-encoded image bytes in one batch. (Jina AI)\n\ncurl -X POST \"https://api.jina.ai/v1/embeddings\" \\\n  -H \"Authorization: Bearer $JINAAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\n        \\\"model\\\": \\\"jina-clip-v2\\\",\n        \\\"input\\\": [\n          {\\\"text\\\":\\\"A cute cat\\\"},\n          {\\\"text\\\":\\\"A cardboard box\\\"},,\n          {\\\"image\\\":\\\"$(base64 -w 0 cat.jpg)\\\"},\n          {\\\"image\\\":\\\"$(base64 -w 0 box.png)\\\"}\n        ]\n      }\"Copy to clipboardErrorCopied\n\n3. Google Vertex AI Multimodal Embeddings\n\nVertex AI’s multimodal model (multimodalembedding@001) takes JSON instances combining text and base64 image data. (Google Cloud)\n\ncurl -X POST \\\n  -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://us-central1-aiplatform.googleapis.com/v1/projects/$PROJECTID/locations/us-central1/publishers/google/models/multimodalembedding@001:predict?key=$GOOGLEAPIKEY\" \\\n  -d \"{\n        \\\"instances\\\": [\n          {\n            \\\"text\\\": \\\"A cute cat\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 cat.jpg)\\\"}\n          },\n          {\n            \\\"text\\\": \\\"A cardboard box\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 box.png)\\\"}\n          }\n        ]\n      }\"Copy to clipboardErrorCopied\n\nWith these steps, you’re all set to explore and experiment with multimodal embeddings across text + image data—unifying your applications’ visual and linguistic understanding.\n\nPrevious\n\nEmbeddings\n\nNext\n\nTopic modeling"
  },
  {
    "title": "Multimodal Embeddings",
    "filename": "Multimodal_Embeddings.md",
    "text": "Multimodal Embeddings\n-------------------------------------------------------------------------\n\nMultimodal embeddings map text and images into the same vector space, enabling direct comparison between, say, a caption — “A cute cat” — and an image of that cat. This unified representation powers real-world applications like:\n\n Cross-modal search (e.g. “find images of a sunset” via text queries)\n Content recommendation (suggesting visually similar products to text descriptions)\n Clustering & retrieval (grouping documents and their associated graphics)\n Anomaly detection (spotting unusual image–text pairings)\n\nBy reducing different data types to a common numeric form, you unlock richer search, enhanced recommendations, and tighter integration of visual and textual data.\n\nGet API keys\n-------------------------------------------------------\n\nBelow are the steps to grab a free API key for each provider.\n\nNomic Atlas\n\n1. Sign up at the Nomic Atlas homepage:\n   👉 <https://atlas.nomic.ai/> (Atlas | Nomic Atlas Documentation)\n2. Once logged in, open the Dashboard and navigate to Settings → API Keys.\n3. Click Create API Key, name it, and copy the generated key.\n\nSet in your shell:\n\nexport NOMICAPIKEY=\"your-nomic-api-key\"Copy to clipboardErrorCopied\n\nJina AI\n\n1. Visit the Jina AI Embeddings page:\n   👉 <https://jina.ai/embeddings/> (Jina AI)\n2. Click Get Started (no credit card needed) and register for a free account. Every new key comes with 1 million free tokens.\n3. In the dashboard, go to API Key & Billing and copy your key.\n\nSet in your shell:\n\nexport JINAAPIKEY=\"your-jina-api-key\"Copy to clipboardErrorCopied\n\nGoogle Vertex AI\n\n1. Sign up for Google Cloud’s free tier (90 days, $300 credit):\n   👉 <https://cloud.google.com/free> (Google Cloud)\n2. In the Cloud Console, open APIs & Services → Credentials:\n   👉 <https://console.cloud.google.com/apis/credentials> (Google Cloud)\n3. Click Create credentials → API key, then copy the key.\n\nSet in your shell:\n\nexport GOOGLEAPIKEY=\"your-google-api-key\"\nexport PROJECTID=\"your-gcp-project-id\"Copy to clipboardErrorCopied\n\nExample Requests\n---------------------------------------------------------------\n\nBelow are fully-workable snippets that:\n\n Embed two texts (“A cute cat”, “A cardboard box”)\n Embed two images (cat.jpg, box.png)\n Send them to the respective API\n\nReplace variables ($NOMICAPIKEY, $JINAAPIKEY, $GOOGLEAPIKEY, $PROJECTID) before running.\n\n1. Nomic Atlas\n\nText Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/text\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"model\": \"nomic-embed-text-v1.5\",\n        \"tasktype\": \"searchdocument\",\n        \"texts\": [\"A cute cat\", \"A cardboard box\"]\n      }'Copy to clipboardErrorCopied\n\nImage Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/image\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -F \"model=nomic-embed-vision-v1.5\" \\\n  -F \"images=@cat.jpg\" \\\n  -F \"images=@box.png\"Copy to clipboardErrorCopied\n\n2. Jina AI\n\nJina’s unified /v1/embeddings endpoint accepts text strings and base64-encoded image bytes in one batch. (Jina AI)\n\ncurl -X POST \"https://api.jina.ai/v1/embeddings\" \\\n  -H \"Authorization: Bearer $JINAAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\n        \\\"model\\\": \\\"jina-clip-v2\\\",\n        \\\"input\\\": [\n          {\\\"text\\\":\\\"A cute cat\\\"},\n          {\\\"text\\\":\\\"A cardboard box\\\"},,\n          {\\\"image\\\":\\\"$(base64 -w 0 cat.jpg)\\\"},\n          {\\\"image\\\":\\\"$(base64 -w 0 box.png)\\\"}\n        ]\n      }\"Copy to clipboardErrorCopied\n\n3. Google Vertex AI Multimodal Embeddings\n\nVertex AI’s multimodal model (multimodalembedding@001) takes JSON instances combining text and base64 image data. (Google Cloud)\n\ncurl -X POST \\\n  -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://us-central1-aiplatform.googleapis.com/v1/projects/$PROJECTID/locations/us-central1/publishers/google/models/multimodalembedding@001:predict?key=$GOOGLEAPIKEY\" \\\n  -d \"{\n        \\\"instances\\\": [\n          {\n            \\\"text\\\": \\\"A cute cat\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 cat.jpg)\\\"}\n          },\n          {\n            \\\"text\\\": \\\"A cardboard box\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 box.png)\\\"}\n          }\n        ]\n      }\"Copy to clipboardErrorCopied\n\nWith these steps, you’re all set to explore and experiment with multimodal embeddings across text + image data—unifying your applications’ visual and linguistic understanding.\n\nPrevious\n\nEmbeddings\n\nNext\n\nTopic modeling"
  },
  {
    "title": "Multimodal Embeddings",
    "filename": "Multimodal_Embeddings.md",
    "text": "Multimodal Embeddings\n-------------------------------------------------------------------------\n\nMultimodal embeddings map text and images into the same vector space, enabling direct comparison between, say, a caption — “A cute cat” — and an image of that cat. This unified representation powers real-world applications like:\n\n Cross-modal search (e.g. “find images of a sunset” via text queries)\n Content recommendation (suggesting visually similar products to text descriptions)\n Clustering & retrieval (grouping documents and their associated graphics)\n Anomaly detection (spotting unusual image–text pairings)\n\nBy reducing different data types to a common numeric form, you unlock richer search, enhanced recommendations, and tighter integration of visual and textual data.\n\nGet API keys\n-------------------------------------------------------\n\nBelow are the steps to grab a free API key for each provider.\n\nNomic Atlas\n\n1. Sign up at the Nomic Atlas homepage:\n   👉 <https://atlas.nomic.ai/> (Atlas | Nomic Atlas Documentation)\n2. Once logged in, open the Dashboard and navigate to Settings → API Keys.\n3. Click Create API Key, name it, and copy the generated key.\n\nSet in your shell:\n\nexport NOMICAPIKEY=\"your-nomic-api-key\"Copy to clipboardErrorCopied\n\nJina AI\n\n1. Visit the Jina AI Embeddings page:\n   👉 <https://jina.ai/embeddings/> (Jina AI)\n2. Click Get Started (no credit card needed) and register for a free account. Every new key comes with 1 million free tokens.\n3. In the dashboard, go to API Key & Billing and copy your key.\n\nSet in your shell:\n\nexport JINAAPIKEY=\"your-jina-api-key\"Copy to clipboardErrorCopied\n\nGoogle Vertex AI\n\n1. Sign up for Google Cloud’s free tier (90 days, $300 credit):\n   👉 <https://cloud.google.com/free> (Google Cloud)\n2. In the Cloud Console, open APIs & Services → Credentials:\n   👉 <https://console.cloud.google.com/apis/credentials> (Google Cloud)\n3. Click Create credentials → API key, then copy the key.\n\nSet in your shell:\n\nexport GOOGLEAPIKEY=\"your-google-api-key\"\nexport PROJECTID=\"your-gcp-project-id\"Copy to clipboardErrorCopied\n\nExample Requests\n---------------------------------------------------------------\n\nBelow are fully-workable snippets that:\n\n Embed two texts (“A cute cat”, “A cardboard box”)\n Embed two images (cat.jpg, box.png)\n Send them to the respective API\n\nReplace variables ($NOMICAPIKEY, $JINAAPIKEY, $GOOGLEAPIKEY, $PROJECTID) before running.\n\n1. Nomic Atlas\n\nText Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/text\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"model\": \"nomic-embed-text-v1.5\",\n        \"tasktype\": \"searchdocument\",\n        \"texts\": [\"A cute cat\", \"A cardboard box\"]\n      }'Copy to clipboardErrorCopied\n\nImage Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/image\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -F \"model=nomic-embed-vision-v1.5\" \\\n  -F \"images=@cat.jpg\" \\\n  -F \"images=@box.png\"Copy to clipboardErrorCopied\n\n2. Jina AI\n\nJina’s unified /v1/embeddings endpoint accepts text strings and base64-encoded image bytes in one batch. (Jina AI)\n\ncurl -X POST \"https://api.jina.ai/v1/embeddings\" \\\n  -H \"Authorization: Bearer $JINAAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\n        \\\"model\\\": \\\"jina-clip-v2\\\",\n        \\\"input\\\": [\n          {\\\"text\\\":\\\"A cute cat\\\"},\n          {\\\"text\\\":\\\"A cardboard box\\\"},,\n          {\\\"image\\\":\\\"$(base64 -w 0 cat.jpg)\\\"},\n          {\\\"image\\\":\\\"$(base64 -w 0 box.png)\\\"}\n        ]\n      }\"Copy to clipboardErrorCopied\n\n3. Google Vertex AI Multimodal Embeddings\n\nVertex AI’s multimodal model (multimodalembedding@001) takes JSON instances combining text and base64 image data. (Google Cloud)\n\ncurl -X POST \\\n  -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://us-central1-aiplatform.googleapis.com/v1/projects/$PROJECTID/locations/us-central1/publishers/google/models/multimodalembedding@001:predict?key=$GOOGLEAPIKEY\" \\\n  -d \"{\n        \\\"instances\\\": [\n          {\n            \\\"text\\\": \\\"A cute cat\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 cat.jpg)\\\"}\n          },\n          {\n            \\\"text\\\": \\\"A cardboard box\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 box.png)\\\"}\n          }\n        ]\n      }\"Copy to clipboardErrorCopied\n\nWith these steps, you’re all set to explore and experiment with multimodal embeddings across text + image data—unifying your applications’ visual and linguistic understanding.\n\nPrevious\n\nEmbeddings\n\nNext\n\nTopic modeling"
  },
  {
    "title": "Multimodal Embeddings",
    "filename": "Multimodal_Embeddings.md",
    "text": "Multimodal Embeddings\n-------------------------------------------------------------------------\n\nMultimodal embeddings map text and images into the same vector space, enabling direct comparison between, say, a caption — “A cute cat” — and an image of that cat. This unified representation powers real-world applications like:\n\n Cross-modal search (e.g. “find images of a sunset” via text queries)\n Content recommendation (suggesting visually similar products to text descriptions)\n Clustering & retrieval (grouping documents and their associated graphics)\n Anomaly detection (spotting unusual image–text pairings)\n\nBy reducing different data types to a common numeric form, you unlock richer search, enhanced recommendations, and tighter integration of visual and textual data.\n\nGet API keys\n-------------------------------------------------------\n\nBelow are the steps to grab a free API key for each provider.\n\nNomic Atlas\n\n1. Sign up at the Nomic Atlas homepage:\n   👉 <https://atlas.nomic.ai/> (Atlas | Nomic Atlas Documentation)\n2. Once logged in, open the Dashboard and navigate to Settings → API Keys.\n3. Click Create API Key, name it, and copy the generated key.\n\nSet in your shell:\n\nexport NOMICAPIKEY=\"your-nomic-api-key\"Copy to clipboardErrorCopied\n\nJina AI\n\n1. Visit the Jina AI Embeddings page:\n   👉 <https://jina.ai/embeddings/> (Jina AI)\n2. Click Get Started (no credit card needed) and register for a free account. Every new key comes with 1 million free tokens.\n3. In the dashboard, go to API Key & Billing and copy your key.\n\nSet in your shell:\n\nexport JINAAPIKEY=\"your-jina-api-key\"Copy to clipboardErrorCopied\n\nGoogle Vertex AI\n\n1. Sign up for Google Cloud’s free tier (90 days, $300 credit):\n   👉 <https://cloud.google.com/free> (Google Cloud)\n2. In the Cloud Console, open APIs & Services → Credentials:\n   👉 <https://console.cloud.google.com/apis/credentials> (Google Cloud)\n3. Click Create credentials → API key, then copy the key.\n\nSet in your shell:\n\nexport GOOGLEAPIKEY=\"your-google-api-key\"\nexport PROJECTID=\"your-gcp-project-id\"Copy to clipboardErrorCopied\n\nExample Requests\n---------------------------------------------------------------\n\nBelow are fully-workable snippets that:\n\n Embed two texts (“A cute cat”, “A cardboard box”)\n Embed two images (cat.jpg, box.png)\n Send them to the respective API\n\nReplace variables ($NOMICAPIKEY, $JINAAPIKEY, $GOOGLEAPIKEY, $PROJECTID) before running.\n\n1. Nomic Atlas\n\nText Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/text\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"model\": \"nomic-embed-text-v1.5\",\n        \"tasktype\": \"searchdocument\",\n        \"texts\": [\"A cute cat\", \"A cardboard box\"]\n      }'Copy to clipboardErrorCopied\n\nImage Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/image\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -F \"model=nomic-embed-vision-v1.5\" \\\n  -F \"images=@cat.jpg\" \\\n  -F \"images=@box.png\"Copy to clipboardErrorCopied\n\n2. Jina AI\n\nJina’s unified /v1/embeddings endpoint accepts text strings and base64-encoded image bytes in one batch. (Jina AI)\n\ncurl -X POST \"https://api.jina.ai/v1/embeddings\" \\\n  -H \"Authorization: Bearer $JINAAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\n        \\\"model\\\": \\\"jina-clip-v2\\\",\n        \\\"input\\\": [\n          {\\\"text\\\":\\\"A cute cat\\\"},\n          {\\\"text\\\":\\\"A cardboard box\\\"},,\n          {\\\"image\\\":\\\"$(base64 -w 0 cat.jpg)\\\"},\n          {\\\"image\\\":\\\"$(base64 -w 0 box.png)\\\"}\n        ]\n      }\"Copy to clipboardErrorCopied\n\n3. Google Vertex AI Multimodal Embeddings\n\nVertex AI’s multimodal model (multimodalembedding@001) takes JSON instances combining text and base64 image data. (Google Cloud)\n\ncurl -X POST \\\n  -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://us-central1-aiplatform.googleapis.com/v1/projects/$PROJECTID/locations/us-central1/publishers/google/models/multimodalembedding@001:predict?key=$GOOGLEAPIKEY\" \\\n  -d \"{\n        \\\"instances\\\": [\n          {\n            \\\"text\\\": \\\"A cute cat\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 cat.jpg)\\\"}\n          },\n          {\n            \\\"text\\\": \\\"A cardboard box\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 box.png)\\\"}\n          }\n        ]\n      }\"Copy to clipboardErrorCopied\n\nWith these steps, you’re all set to explore and experiment with multimodal embeddings across text + image data—unifying your applications’ visual and linguistic understanding.\n\nPrevious\n\nEmbeddings\n\nNext\n\nTopic modeling"
  },
  {
    "title": "Multimodal Embeddings",
    "filename": "Multimodal_Embeddings.md",
    "text": "Multimodal Embeddings\n-------------------------------------------------------------------------\n\nMultimodal embeddings map text and images into the same vector space, enabling direct comparison between, say, a caption — “A cute cat” — and an image of that cat. This unified representation powers real-world applications like:\n\n Cross-modal search (e.g. “find images of a sunset” via text queries)\n Content recommendation (suggesting visually similar products to text descriptions)\n Clustering & retrieval (grouping documents and their associated graphics)\n Anomaly detection (spotting unusual image–text pairings)\n\nBy reducing different data types to a common numeric form, you unlock richer search, enhanced recommendations, and tighter integration of visual and textual data.\n\nGet API keys\n-------------------------------------------------------\n\nBelow are the steps to grab a free API key for each provider.\n\nNomic Atlas\n\n1. Sign up at the Nomic Atlas homepage:\n   👉 <https://atlas.nomic.ai/> (Atlas | Nomic Atlas Documentation)\n2. Once logged in, open the Dashboard and navigate to Settings → API Keys.\n3. Click Create API Key, name it, and copy the generated key.\n\nSet in your shell:\n\nexport NOMICAPIKEY=\"your-nomic-api-key\"Copy to clipboardErrorCopied\n\nJina AI\n\n1. Visit the Jina AI Embeddings page:\n   👉 <https://jina.ai/embeddings/> (Jina AI)\n2. Click Get Started (no credit card needed) and register for a free account. Every new key comes with 1 million free tokens.\n3. In the dashboard, go to API Key & Billing and copy your key.\n\nSet in your shell:\n\nexport JINAAPIKEY=\"your-jina-api-key\"Copy to clipboardErrorCopied\n\nGoogle Vertex AI\n\n1. Sign up for Google Cloud’s free tier (90 days, $300 credit):\n   👉 <https://cloud.google.com/free> (Google Cloud)\n2. In the Cloud Console, open APIs & Services → Credentials:\n   👉 <https://console.cloud.google.com/apis/credentials> (Google Cloud)\n3. Click Create credentials → API key, then copy the key.\n\nSet in your shell:\n\nexport GOOGLEAPIKEY=\"your-google-api-key\"\nexport PROJECTID=\"your-gcp-project-id\"Copy to clipboardErrorCopied\n\nExample Requests\n---------------------------------------------------------------\n\nBelow are fully-workable snippets that:\n\n Embed two texts (“A cute cat”, “A cardboard box”)\n Embed two images (cat.jpg, box.png)\n Send them to the respective API\n\nReplace variables ($NOMICAPIKEY, $JINAAPIKEY, $GOOGLEAPIKEY, $PROJECTID) before running.\n\n1. Nomic Atlas\n\nText Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/text\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"model\": \"nomic-embed-text-v1.5\",\n        \"tasktype\": \"searchdocument\",\n        \"texts\": [\"A cute cat\", \"A cardboard box\"]\n      }'Copy to clipboardErrorCopied\n\nImage Embeddings\n\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/image\" \\\n  -H \"Authorization: Bearer $NOMICAPIKEY\" \\\n  -F \"model=nomic-embed-vision-v1.5\" \\\n  -F \"images=@cat.jpg\" \\\n  -F \"images=@box.png\"Copy to clipboardErrorCopied\n\n2. Jina AI\n\nJina’s unified /v1/embeddings endpoint accepts text strings and base64-encoded image bytes in one batch. (Jina AI)\n\ncurl -X POST \"https://api.jina.ai/v1/embeddings\" \\\n  -H \"Authorization: Bearer $JINAAPIKEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\n        \\\"model\\\": \\\"jina-clip-v2\\\",\n        \\\"input\\\": [\n          {\\\"text\\\":\\\"A cute cat\\\"},\n          {\\\"text\\\":\\\"A cardboard box\\\"},,\n          {\\\"image\\\":\\\"$(base64 -w 0 cat.jpg)\\\"},\n          {\\\"image\\\":\\\"$(base64 -w 0 box.png)\\\"}\n        ]\n      }\"Copy to clipboardErrorCopied\n\n3. Google Vertex AI Multimodal Embeddings\n\nVertex AI’s multimodal model (multimodalembedding@001) takes JSON instances combining text and base64 image data. (Google Cloud)\n\ncurl -X POST \\\n  -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://us-central1-aiplatform.googleapis.com/v1/projects/$PROJECTID/locations/us-central1/publishers/google/models/multimodalembedding@001:predict?key=$GOOGLEAPIKEY\" \\\n  -d \"{\n        \\\"instances\\\": [\n          {\n            \\\"text\\\": \\\"A cute cat\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 cat.jpg)\\\"}\n          },\n          {\n            \\\"text\\\": \\\"A cardboard box\\\",\n            \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 box.png)\\\"}\n          }\n        ]\n      }\"Copy to clipboardErrorCopied\n\nWith these steps, you’re all set to explore and experiment with multimodal embeddings across text + image data—unifying your applications’ visual and linguistic understanding.\n\nPrevious\n\nEmbeddings\n\nNext\n\nTopic modeling"
  },
  {
    "title": "CI/CD: GitHub Actions",
    "filename": "CI_CD__GitHub_Actions.md",
    "text": "CI/CD: GitHub Actions\n----------------------------------------------------------------\n\nGitHub Actions is a powerful automation platform built into GitHub. It helps automate your development workflow - running tests, deploying applications, updating datasets, retraining models, etc.\n\n Understand the basics of YAML configuration files\n Explore the pre-built actions from the marketplace\n How to handle secrets securely\n Triggering a workflow\n Staying within the free tier limits\n Caching dependencies to speed up workflows\n\nHere is a sample .github/workflows/iss-location.yml that runs daily, appends the International Space Station location data into iss-location.json, and commits it to the repository.\n\nname: Log ISS Location Data Daily\n\non:\n  schedule:\n     Runs at 12:00 UTC (noon) every day\n    - cron: \"0 12   \"\n  workflowdispatch:  Allows manual triggering\n\njobs:\n  collect-iss-data:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Install uv\n        uses: astral-sh/setup-uv@v5\n\n      - name: Fetch ISS location data\n        run: |  python\n          uv run --with requests python << 'EOF'\n          import requests\n\n          data = requests.get('http://api.open-notify.org/iss-now.json').text\n          with open('iss-location.jsonl', 'a') as f:\n              f.write(data + '\\n')\n          'EOF'\n\n      - name: Commit and push changes\n        run: |  shell\n          git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add iss-location.jsonl\n          git commit -m \"Update ISS position data [skip ci]\" || exit 0\n          git pushCopy to clipboardErrorCopied\n\nTools:\n\n GitHub CLI: Manage workflows from terminal\n Super-Linter: Validate code style\n Release Drafter: Automate releases\n act: Run actions locally\n\n[](https://youtu.be/mFFXuXjVgkU)\n\n How to handle secrets in GitHub Actions\n\nPrevious\n\nServerless hosting: Vercel\n\nNext\n\nContainers: Docker, Podman"
  },
  {
    "title": "Notebooks: Google Colab",
    "filename": "Notebooks__Google_Colab.md",
    "text": "Notebooks: Google Colab\n------------------------------------------------------------\n\nGoogle Colab is a free, cloud-based Jupyter notebook environment that’s become indispensable for data scientists and ML practitioners. It’s particularly valuable because it provides free access to GPUs and TPUs, and for easy sharing of code and execution results.\n\nWhile Colab is excellent for prototyping and learning, its free tier has limitations - notebooks time out after 12 hours, and GPU access can be inconsistent.\n\nLearn how to mount Google Drive for persistent storage, manage dependencies with !pip install commands, as these are common pain points when getting started.\n\n[](https://youtu.be/inN8seMm7UI)\n\n Google Colab features you may have missed\n How to mount Google Drive to Google Colab\n How to take advantage of GPUs and TPUs for your ML project\n\nPrevious\n\nStatic hosting: GitHub Pages\n\nNext\n\nServerless hosting: Vercel"
  },
  {
    "title": "Static hosting: GitHub Pages",
    "filename": "Static_hosting__GitHub_Pages.md",
    "text": "Static hosting: GitHub Pages\n-----------------------------------------------------------------------------\n\nGitHub Pages is a free hosting service that turns your GitHub repository directly into a static website whenever you push it. This is useful for sharing analysis results, data science portfolios, project documentation, and more.\n\nCommon Operations:\n\nCreate a new GitHub repo\nmkdir my-site\ncd my-site\ngit init\n\nAdd your static content\necho \"<h1>My Site</h1>\" > index.html\n\nPush to GitHub\ngit add .\ngit commit -m \"feat(pages): initial commit\"\ngit push origin main\n\nEnable GitHub Pages from the main branch on the repo settings pageCopy to clipboardErrorCopied\n\nBest Practices:\n\n1. Keep it small\n    Optimize images. Prefer SVG over WEBP over 8-bit PNG.\n    Preload critical assets like stylesheets\n    Avoid committing large files like datasets, videos, etc. directly. Explore Git LFS instead.\n\nTools:\n\n GitHub Desktop: GUI for Git operations\n GitHub CLI: Command line interface\n GitHub Actions: Automation\n\n[](https://youtube.com/shorts/WqOXxoGSpbs)\n\n[](https://youtu.be/sTzXIX3ZA0)\n\nPrevious\n\nImages: Compression\n\nNext\n\nNotebooks: Google Colab"
  },
  {
    "title": "Correlation with Excel",
    "filename": "Correlation_with_Excel.md",
    "text": "Correlation with Excel\n----------------------------------------------------------------------------\n\n[](https://youtu.be/lXHCyhO7DmY)\n\nYou’ll learn to calculate and interpret correlations using Excel, covering:\n\n Enabling the Data Analysis Tool Pack: Steps to enable the Excel data analysis tool pack.\n Correlation Analysis: Understanding statistical association between variables.\n Creating a Correlation Matrix: Steps to generate and interpret a correlation matrix.\n Scatterplots and Trendlines: Plotting data and adding trend lines to visualize correlations.\n Analyzing Results: Comparing correlation coefficients and understanding their implications.\n Insights and Further Analysis: Interpreting scatterplots and planning further analysis for deeper insights.\n\nHere are the links used in the video:\n\n Understand correlation\n COVID-19 vaccinations data explorer - Website\n COVID-19 vaccinations - Correlations Excel file\n\nPrevious\n\n6. Data Analysis\n\nNext\n\nRegression with Excel"
  },
  {
    "title": "Transforming Images",
    "filename": "Transforming_Images.md",
    "text": "Transforming Images\n-------------------------------------------------------------------\n\nImage Processing with PIL (Pillow)\n\n[](https://youtu.be/6Qs3wObeWwc)\n\nPillow is Python’s leading library for image processing, offering powerful tools for editing, analyzing, and generating images. It handles various formats (PNG, JPEG, GIF, etc.) and provides operations from basic resizing to complex filters.\n\nHere’s a minimal example showing common operations:\n\n/// script\nrequires-python = \">=3.11\"\ndependencies = [\"Pillow\"]\n///\n\nfrom PIL import Image, ImageEnhance, ImageFilter\n\nasync def processimage(path: str) -> Image.Image:\n    \"\"\"Process an image with basic enhancements.\"\"\"\n    with Image.open(path) as img:\n         Convert to RGB to ensure compatibility\n        img = img.convert('RGB')\n\n         Resize maintaining aspect ratio\n        img.thumbnail((800, 800))\n\n         Apply enhancements\n        img = (ImageEnhance.Contrast(img)\n               .enhance(1.2))\n\n        return img.filter(ImageFilter.SHARPEN)\n\nif name == \"main\":\n    import asyncio\n    img = asyncio.run(processimage(\"input.jpg\"))\n    img.save(\"output.jpg\", quality=85)Copy to clipboardErrorCopied\n\nKey features and techniques you’ll learn:\n\n Image Loading and Saving: Handle various formats with automatic conversion\n Basic Operations: Resize, rotate, crop, and flip images\n Color Manipulation: Adjust brightness, contrast, and color balance\n Filters and Effects: Apply blur, sharpen, and other visual effects\n Drawing: Add text, shapes, and overlays to images\n Batch Processing: Handle multiple images efficiently\n Memory Management: Process large images without memory issues\n\nBasic Image Operations\n\nCommon operations for resizing, cropping, and rotating images:\n\nfrom PIL import Image\n\nasync def transformimage(\n    path: str,\n    size: tuple[int, int],\n    rotation: float = 0\n) -> Image.Image:\n    \"\"\"Transform image with basic operations.\"\"\"\n    with Image.open(path) as img:\n         Resize with anti-aliasing\n        img = img.resize(size, Image.LANCZOS)\n\n         Rotate around center\n        if rotation:\n            img = img.rotate(rotation, expand=True)\n\n         Auto-crop empty edges\n        img = img.crop(img.getbbox())\n\n        return imgCopy to clipboardErrorCopied\n\nColor and Enhancement\n\nAdjust image appearance with built-in enhancement tools:\n\nfrom PIL import ImageEnhance, ImageOps\n\nasync def enhanceimage(\n    img: Image.Image,\n    brightness: float = 1.0,\n    contrast: float = 1.0,\n    saturation: float = 1.0\n) -> Image.Image:\n    \"\"\"Apply color enhancements to image.\"\"\"\n    enhancers = [\n        (ImageEnhance.Brightness, brightness),\n        (ImageEnhance.Contrast, contrast),\n        (ImageEnhance.Color, saturation)\n    ]\n\n    for Enhancer, factor in enhancers:\n        if factor != 1.0:\n            img = Enhancer(img).enhance(factor)\n\n    return imgCopy to clipboardErrorCopied\n\nFilters and Effects\n\nApply visual effects and filters to images:\n\nfrom PIL import ImageFilter\n\ndef applyeffects(img: Image.Image) -> Image.Image:\n    \"\"\"Apply various filters and effects.\"\"\"\n    effects = {\n        'blur': ImageFilter.GaussianBlur(radius=2),\n        'sharpen': ImageFilter.SHARPEN,\n        'edge': ImageFilter.FINDEDGES,\n        'emboss': ImageFilter.EMBOSS\n    }\n\n    return {name: img.filter(effect)\n            for name, effect in effects.items()}Copy to clipboardErrorCopied\n\nDrawing and Text\n\nAdd text, shapes, and overlays to images:\n\nfrom PIL import Image, ImageDraw, ImageFont\n\nasync def addwatermark(\n    img: Image.Image,\n    text: str,\n    fontsize: int = 30\n) -> Image.Image:\n    \"\"\"Add text watermark to image.\"\"\"\n    draw = ImageDraw.Draw(img)\n    font = ImageFont.truetype(\"arial.ttf\", fontsize)\n\n     Calculate text size and position\n    textbbox = draw.textbbox((0, 0), text, font=font)\n    textwidth = textbbox[2] - textbbox[0]\n    textheight = textbbox[3] - textbbox[1]\n\n     Position text at bottom-right\n    x = img.width - textwidth - 10\n    y = img.height - textheight - 10\n\n     Add text with shadow\n    draw.text((x+2, y+2), text, font=font, fill='black')\n    draw.text((x, y), text, font=font, fill='white')\n\n    return imgCopy to clipboardErrorCopied\n\nMemory-Efficient Processing\n\nHandle large images without loading them entirely into memory:\n\nfrom PIL import Image\nimport os\n\nasync def processlargeimages(\n    inputdir: str,\n    outputdir: str,\n    maxsize: tuple[int, int]\n) -> None:\n    \"\"\"Process multiple large images efficiently.\"\"\"\n    os.makedirs(outputdir, existok=True)\n\n    for filename in os.listdir(inputdir):\n        if not filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n            continue\n\n        inputpath = os.path.join(inputdir, filename)\n        outputpath = os.path.join(outputdir, filename)\n\n        with Image.open(inputpath) as img:\n             Process in chunks using thumbnail\n            img.thumbnail(maxsize)\n            img.save(outputpath, optimize=True)Copy to clipboardErrorCopied\n\nPractice with these resources:\n\n Pillow Documentation: Complete API reference\n Python Image Processing Tutorial: In-depth guide\n Sample Images Dataset: Test images for practice\n\nWatch these tutorials for hands-on demonstrations:\n\n[](https://youtu.be/dkp4wUhCwR4)\n\nImage Processing with ImageMagick\n\nImageMagick is a powerful command-line tool for image manipulation, offering features beyond what’s possible with Python libraries. It’s particularly useful for:\n\n Batch processing large image collections\n Complex image transformations\n High-quality format conversion\n Creating image thumbnails\n Adding text and watermarks\n\nBasic Operations:\n\nFormat conversion\nconvert input.png output.jpg\n\nResize image (maintains aspect ratio)\nconvert input.jpg -resize 800x600 output.jpg\n\nCompress image quality\nconvert input.jpg -quality 85 output.jpg\n\nRotate image\nconvert input.jpg -rotate 90 output.jpgCopy to clipboardErrorCopied\n\nCommon Data Science Tasks:\n\nCreate thumbnails for dataset preview\nconvert input.jpg -thumbnail 200x200^ -gravity center -extent 200x200 thumb.jpg\n\nNormalize image for ML training\nconvert input.jpg -normalize -strip output.jpg\n\nExtract dominant colors\nconvert input.jpg -colors 5 -unique-colors txt:\n\nGenerate image statistics\nidentify -verbose input.jpg | grep -E \"Mean|Standard|Kurtosis\"Copy to clipboardErrorCopied\n\nBatch Processing:\n\nConvert all images in a directory\nmogrify -format jpg .png\n\nResize multiple images\nmogrify -resize 800x600 -path output/ .jpg\n\nAdd watermark to images\nfor f in .jpg; do\n    convert \"$f\" -gravity southeast -draw \"text 10,10 'Copyright'\" \"watermarked/$f\"\ndoneCopy to clipboardErrorCopied\n\nAdvanced Features:\n\nApply image effects\nconvert input.jpg -blur 0x3 blurred.jpg\nconvert input.jpg -sharpen 0x3 sharp.jpg\nconvert input.jpg -edge 1 edges.jpg\n\nCreate image montage\nmontage .jpg -geometry 200x200+2+2 montage.jpg\n\nExtract image channels\nconvert input.jpg -separate channels%d.jpg\n\nComposite images\ncomposite overlay.png -gravity center base.jpg output.jpgCopy to clipboardErrorCopied\n\nWatch this ImageMagick tutorial (16 min):\n\n[](https://youtu.be/wjcBOoReYc0)\n\nTools:\n\n Fred’s ImageMagick Scripts: Useful script collection\n ImageMagick Online Studio: Visual command builder\n\nTips:\n\n1. Use -strip to remove metadata and reduce file size\n2. Monitor memory usage with -limit memory 1GB\n3. Use -define for format-specific options\n4. Process in parallel with -parallel\n5. Use -monitor to track progress\n\nError Handling:\n\nCheck image validity\nidentify -regard-warnings input.jpg\n\nGet detailed error information\nconvert input.jpg output.jpg 2>&1 | grep -i \"error\"\n\nSet resource limits\nconvert -limit memory 1GB -limit map 2GB input.jpg output.jpgCopy to clipboardErrorCopied\n\nFor Python integration:\n\n/// script\nrequires-python = \">=3.9\"\ndependencies = [\"Wand\"]\n///\n\nfrom wand.image import Image\n\nasync def processimage(path: str) -> None:\n    \"\"\"Process image with ImageMagick via Wand.\"\"\"\n    with Image(filename=path) as img:\n         Basic operations\n        img.resize(800, 600)\n        img.normalize()\n\n         Apply effects\n        img.sharpen(radius=0, sigma=3)\n\n         Save with compression\n        img.save(filename='output.jpg')Copy to clipboardErrorCopied\n\nNote: Always install ImageMagick before using the Wand Python binding.\n\nPrevious\n\nData Transformation with dbt\n\nNext\n\nExtracting Audio and Transcripts"
  },
  {
    "title": "Transforming Images",
    "filename": "Transforming_Images.md",
    "text": "Transforming Images\n-------------------------------------------------------------------\n\nImage Processing with PIL (Pillow)\n\n[](https://youtu.be/6Qs3wObeWwc)\n\nPillow is Python’s leading library for image processing, offering powerful tools for editing, analyzing, and generating images. It handles various formats (PNG, JPEG, GIF, etc.) and provides operations from basic resizing to complex filters.\n\nHere’s a minimal example showing common operations:\n\n/// script\nrequires-python = \">=3.11\"\ndependencies = [\"Pillow\"]\n///\n\nfrom PIL import Image, ImageEnhance, ImageFilter\n\nasync def processimage(path: str) -> Image.Image:\n    \"\"\"Process an image with basic enhancements.\"\"\"\n    with Image.open(path) as img:\n         Convert to RGB to ensure compatibility\n        img = img.convert('RGB')\n\n         Resize maintaining aspect ratio\n        img.thumbnail((800, 800))\n\n         Apply enhancements\n        img = (ImageEnhance.Contrast(img)\n               .enhance(1.2))\n\n        return img.filter(ImageFilter.SHARPEN)\n\nif name == \"main\":\n    import asyncio\n    img = asyncio.run(processimage(\"input.jpg\"))\n    img.save(\"output.jpg\", quality=85)Copy to clipboardErrorCopied\n\nKey features and techniques you’ll learn:\n\n Image Loading and Saving: Handle various formats with automatic conversion\n Basic Operations: Resize, rotate, crop, and flip images\n Color Manipulation: Adjust brightness, contrast, and color balance\n Filters and Effects: Apply blur, sharpen, and other visual effects\n Drawing: Add text, shapes, and overlays to images\n Batch Processing: Handle multiple images efficiently\n Memory Management: Process large images without memory issues\n\nBasic Image Operations\n\nCommon operations for resizing, cropping, and rotating images:\n\nfrom PIL import Image\n\nasync def transformimage(\n    path: str,\n    size: tuple[int, int],\n    rotation: float = 0\n) -> Image.Image:\n    \"\"\"Transform image with basic operations.\"\"\"\n    with Image.open(path) as img:\n         Resize with anti-aliasing\n        img = img.resize(size, Image.LANCZOS)\n\n         Rotate around center\n        if rotation:\n            img = img.rotate(rotation, expand=True)\n\n         Auto-crop empty edges\n        img = img.crop(img.getbbox())\n\n        return imgCopy to clipboardErrorCopied\n\nColor and Enhancement\n\nAdjust image appearance with built-in enhancement tools:\n\nfrom PIL import ImageEnhance, ImageOps\n\nasync def enhanceimage(\n    img: Image.Image,\n    brightness: float = 1.0,\n    contrast: float = 1.0,\n    saturation: float = 1.0\n) -> Image.Image:\n    \"\"\"Apply color enhancements to image.\"\"\"\n    enhancers = [\n        (ImageEnhance.Brightness, brightness),\n        (ImageEnhance.Contrast, contrast),\n        (ImageEnhance.Color, saturation)\n    ]\n\n    for Enhancer, factor in enhancers:\n        if factor != 1.0:\n            img = Enhancer(img).enhance(factor)\n\n    return imgCopy to clipboardErrorCopied\n\nFilters and Effects\n\nApply visual effects and filters to images:\n\nfrom PIL import ImageFilter\n\ndef applyeffects(img: Image.Image) -> Image.Image:\n    \"\"\"Apply various filters and effects.\"\"\"\n    effects = {\n        'blur': ImageFilter.GaussianBlur(radius=2),\n        'sharpen': ImageFilter.SHARPEN,\n        'edge': ImageFilter.FINDEDGES,\n        'emboss': ImageFilter.EMBOSS\n    }\n\n    return {name: img.filter(effect)\n            for name, effect in effects.items()}Copy to clipboardErrorCopied\n\nDrawing and Text\n\nAdd text, shapes, and overlays to images:\n\nfrom PIL import Image, ImageDraw, ImageFont\n\nasync def addwatermark(\n    img: Image.Image,\n    text: str,\n    fontsize: int = 30\n) -> Image.Image:\n    \"\"\"Add text watermark to image.\"\"\"\n    draw = ImageDraw.Draw(img)\n    font = ImageFont.truetype(\"arial.ttf\", fontsize)\n\n     Calculate text size and position\n    textbbox = draw.textbbox((0, 0), text, font=font)\n    textwidth = textbbox[2] - textbbox[0]\n    textheight = textbbox[3] - textbbox[1]\n\n     Position text at bottom-right\n    x = img.width - textwidth - 10\n    y = img.height - textheight - 10\n\n     Add text with shadow\n    draw.text((x+2, y+2), text, font=font, fill='black')\n    draw.text((x, y), text, font=font, fill='white')\n\n    return imgCopy to clipboardErrorCopied\n\nMemory-Efficient Processing\n\nHandle large images without loading them entirely into memory:\n\nfrom PIL import Image\nimport os\n\nasync def processlargeimages(\n    inputdir: str,\n    outputdir: str,\n    maxsize: tuple[int, int]\n) -> None:\n    \"\"\"Process multiple large images efficiently.\"\"\"\n    os.makedirs(outputdir, existok=True)\n\n    for filename in os.listdir(inputdir):\n        if not filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n            continue\n\n        inputpath = os.path.join(inputdir, filename)\n        outputpath = os.path.join(outputdir, filename)\n\n        with Image.open(inputpath) as img:\n             Process in chunks using thumbnail\n            img.thumbnail(maxsize)\n            img.save(outputpath, optimize=True)Copy to clipboardErrorCopied\n\nPractice with these resources:\n\n Pillow Documentation: Complete API reference\n Python Image Processing Tutorial: In-depth guide\n Sample Images Dataset: Test images for practice\n\nWatch these tutorials for hands-on demonstrations:\n\n[](https://youtu.be/dkp4wUhCwR4)\n\nImage Processing with ImageMagick\n\nImageMagick is a powerful command-line tool for image manipulation, offering features beyond what’s possible with Python libraries. It’s particularly useful for:\n\n Batch processing large image collections\n Complex image transformations\n High-quality format conversion\n Creating image thumbnails\n Adding text and watermarks\n\nBasic Operations:\n\nFormat conversion\nconvert input.png output.jpg\n\nResize image (maintains aspect ratio)\nconvert input.jpg -resize 800x600 output.jpg\n\nCompress image quality\nconvert input.jpg -quality 85 output.jpg\n\nRotate image\nconvert input.jpg -rotate 90 output.jpgCopy to clipboardErrorCopied\n\nCommon Data Science Tasks:\n\nCreate thumbnails for dataset preview\nconvert input.jpg -thumbnail 200x200^ -gravity center -extent 200x200 thumb.jpg\n\nNormalize image for ML training\nconvert input.jpg -normalize -strip output.jpg\n\nExtract dominant colors\nconvert input.jpg -colors 5 -unique-colors txt:\n\nGenerate image statistics\nidentify -verbose input.jpg | grep -E \"Mean|Standard|Kurtosis\"Copy to clipboardErrorCopied\n\nBatch Processing:\n\nConvert all images in a directory\nmogrify -format jpg .png\n\nResize multiple images\nmogrify -resize 800x600 -path output/ .jpg\n\nAdd watermark to images\nfor f in .jpg; do\n    convert \"$f\" -gravity southeast -draw \"text 10,10 'Copyright'\" \"watermarked/$f\"\ndoneCopy to clipboardErrorCopied\n\nAdvanced Features:\n\nApply image effects\nconvert input.jpg -blur 0x3 blurred.jpg\nconvert input.jpg -sharpen 0x3 sharp.jpg\nconvert input.jpg -edge 1 edges.jpg\n\nCreate image montage\nmontage .jpg -geometry 200x200+2+2 montage.jpg\n\nExtract image channels\nconvert input.jpg -separate channels%d.jpg\n\nComposite images\ncomposite overlay.png -gravity center base.jpg output.jpgCopy to clipboardErrorCopied\n\nWatch this ImageMagick tutorial (16 min):\n\n[](https://youtu.be/wjcBOoReYc0)\n\nTools:\n\n Fred’s ImageMagick Scripts: Useful script collection\n ImageMagick Online Studio: Visual command builder\n\nTips:\n\n1. Use -strip to remove metadata and reduce file size\n2. Monitor memory usage with -limit memory 1GB\n3. Use -define for format-specific options\n4. Process in parallel with -parallel\n5. Use -monitor to track progress\n\nError Handling:\n\nCheck image validity\nidentify -regard-warnings input.jpg\n\nGet detailed error information\nconvert input.jpg output.jpg 2>&1 | grep -i \"error\"\n\nSet resource limits\nconvert -limit memory 1GB -limit map 2GB input.jpg output.jpgCopy to clipboardErrorCopied\n\nFor Python integration:\n\n/// script\nrequires-python = \">=3.9\"\ndependencies = [\"Wand\"]\n///\n\nfrom wand.image import Image\n\nasync def processimage(path: str) -> None:\n    \"\"\"Process image with ImageMagick via Wand.\"\"\"\n    with Image(filename=path) as img:\n         Basic operations\n        img.resize(800, 600)\n        img.normalize()\n\n         Apply effects\n        img.sharpen(radius=0, sigma=3)\n\n         Save with compression\n        img.save(filename='output.jpg')Copy to clipboardErrorCopied\n\nNote: Always install ImageMagick before using the Wand Python binding.\n\nPrevious\n\nData Transformation with dbt\n\nNext\n\nExtracting Audio and Transcripts"
  },
  {
    "title": "Transforming Images",
    "filename": "Transforming_Images.md",
    "text": "Transforming Images\n-------------------------------------------------------------------\n\nImage Processing with PIL (Pillow)\n\n[](https://youtu.be/6Qs3wObeWwc)\n\nPillow is Python’s leading library for image processing, offering powerful tools for editing, analyzing, and generating images. It handles various formats (PNG, JPEG, GIF, etc.) and provides operations from basic resizing to complex filters.\n\nHere’s a minimal example showing common operations:\n\n/// script\nrequires-python = \">=3.11\"\ndependencies = [\"Pillow\"]\n///\n\nfrom PIL import Image, ImageEnhance, ImageFilter\n\nasync def processimage(path: str) -> Image.Image:\n    \"\"\"Process an image with basic enhancements.\"\"\"\n    with Image.open(path) as img:\n         Convert to RGB to ensure compatibility\n        img = img.convert('RGB')\n\n         Resize maintaining aspect ratio\n        img.thumbnail((800, 800))\n\n         Apply enhancements\n        img = (ImageEnhance.Contrast(img)\n               .enhance(1.2))\n\n        return img.filter(ImageFilter.SHARPEN)\n\nif name == \"main\":\n    import asyncio\n    img = asyncio.run(processimage(\"input.jpg\"))\n    img.save(\"output.jpg\", quality=85)Copy to clipboardErrorCopied\n\nKey features and techniques you’ll learn:\n\n Image Loading and Saving: Handle various formats with automatic conversion\n Basic Operations: Resize, rotate, crop, and flip images\n Color Manipulation: Adjust brightness, contrast, and color balance\n Filters and Effects: Apply blur, sharpen, and other visual effects\n Drawing: Add text, shapes, and overlays to images\n Batch Processing: Handle multiple images efficiently\n Memory Management: Process large images without memory issues\n\nBasic Image Operations\n\nCommon operations for resizing, cropping, and rotating images:\n\nfrom PIL import Image\n\nasync def transformimage(\n    path: str,\n    size: tuple[int, int],\n    rotation: float = 0\n) -> Image.Image:\n    \"\"\"Transform image with basic operations.\"\"\"\n    with Image.open(path) as img:\n         Resize with anti-aliasing\n        img = img.resize(size, Image.LANCZOS)\n\n         Rotate around center\n        if rotation:\n            img = img.rotate(rotation, expand=True)\n\n         Auto-crop empty edges\n        img = img.crop(img.getbbox())\n\n        return imgCopy to clipboardErrorCopied\n\nColor and Enhancement\n\nAdjust image appearance with built-in enhancement tools:\n\nfrom PIL import ImageEnhance, ImageOps\n\nasync def enhanceimage(\n    img: Image.Image,\n    brightness: float = 1.0,\n    contrast: float = 1.0,\n    saturation: float = 1.0\n) -> Image.Image:\n    \"\"\"Apply color enhancements to image.\"\"\"\n    enhancers = [\n        (ImageEnhance.Brightness, brightness),\n        (ImageEnhance.Contrast, contrast),\n        (ImageEnhance.Color, saturation)\n    ]\n\n    for Enhancer, factor in enhancers:\n        if factor != 1.0:\n            img = Enhancer(img).enhance(factor)\n\n    return imgCopy to clipboardErrorCopied\n\nFilters and Effects\n\nApply visual effects and filters to images:\n\nfrom PIL import ImageFilter\n\ndef applyeffects(img: Image.Image) -> Image.Image:\n    \"\"\"Apply various filters and effects.\"\"\"\n    effects = {\n        'blur': ImageFilter.GaussianBlur(radius=2),\n        'sharpen': ImageFilter.SHARPEN,\n        'edge': ImageFilter.FINDEDGES,\n        'emboss': ImageFilter.EMBOSS\n    }\n\n    return {name: img.filter(effect)\n            for name, effect in effects.items()}Copy to clipboardErrorCopied\n\nDrawing and Text\n\nAdd text, shapes, and overlays to images:\n\nfrom PIL import Image, ImageDraw, ImageFont\n\nasync def addwatermark(\n    img: Image.Image,\n    text: str,\n    fontsize: int = 30\n) -> Image.Image:\n    \"\"\"Add text watermark to image.\"\"\"\n    draw = ImageDraw.Draw(img)\n    font = ImageFont.truetype(\"arial.ttf\", fontsize)\n\n     Calculate text size and position\n    textbbox = draw.textbbox((0, 0), text, font=font)\n    textwidth = textbbox[2] - textbbox[0]\n    textheight = textbbox[3] - textbbox[1]\n\n     Position text at bottom-right\n    x = img.width - textwidth - 10\n    y = img.height - textheight - 10\n\n     Add text with shadow\n    draw.text((x+2, y+2), text, font=font, fill='black')\n    draw.text((x, y), text, font=font, fill='white')\n\n    return imgCopy to clipboardErrorCopied\n\nMemory-Efficient Processing\n\nHandle large images without loading them entirely into memory:\n\nfrom PIL import Image\nimport os\n\nasync def processlargeimages(\n    inputdir: str,\n    outputdir: str,\n    maxsize: tuple[int, int]\n) -> None:\n    \"\"\"Process multiple large images efficiently.\"\"\"\n    os.makedirs(outputdir, existok=True)\n\n    for filename in os.listdir(inputdir):\n        if not filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n            continue\n\n        inputpath = os.path.join(inputdir, filename)\n        outputpath = os.path.join(outputdir, filename)\n\n        with Image.open(inputpath) as img:\n             Process in chunks using thumbnail\n            img.thumbnail(maxsize)\n            img.save(outputpath, optimize=True)Copy to clipboardErrorCopied\n\nPractice with these resources:\n\n Pillow Documentation: Complete API reference\n Python Image Processing Tutorial: In-depth guide\n Sample Images Dataset: Test images for practice\n\nWatch these tutorials for hands-on demonstrations:\n\n[](https://youtu.be/dkp4wUhCwR4)\n\nImage Processing with ImageMagick\n\nImageMagick is a powerful command-line tool for image manipulation, offering features beyond what’s possible with Python libraries. It’s particularly useful for:\n\n Batch processing large image collections\n Complex image transformations\n High-quality format conversion\n Creating image thumbnails\n Adding text and watermarks\n\nBasic Operations:\n\nFormat conversion\nconvert input.png output.jpg\n\nResize image (maintains aspect ratio)\nconvert input.jpg -resize 800x600 output.jpg\n\nCompress image quality\nconvert input.jpg -quality 85 output.jpg\n\nRotate image\nconvert input.jpg -rotate 90 output.jpgCopy to clipboardErrorCopied\n\nCommon Data Science Tasks:\n\nCreate thumbnails for dataset preview\nconvert input.jpg -thumbnail 200x200^ -gravity center -extent 200x200 thumb.jpg\n\nNormalize image for ML training\nconvert input.jpg -normalize -strip output.jpg\n\nExtract dominant colors\nconvert input.jpg -colors 5 -unique-colors txt:\n\nGenerate image statistics\nidentify -verbose input.jpg | grep -E \"Mean|Standard|Kurtosis\"Copy to clipboardErrorCopied\n\nBatch Processing:\n\nConvert all images in a directory\nmogrify -format jpg .png\n\nResize multiple images\nmogrify -resize 800x600 -path output/ .jpg\n\nAdd watermark to images\nfor f in .jpg; do\n    convert \"$f\" -gravity southeast -draw \"text 10,10 'Copyright'\" \"watermarked/$f\"\ndoneCopy to clipboardErrorCopied\n\nAdvanced Features:\n\nApply image effects\nconvert input.jpg -blur 0x3 blurred.jpg\nconvert input.jpg -sharpen 0x3 sharp.jpg\nconvert input.jpg -edge 1 edges.jpg\n\nCreate image montage\nmontage .jpg -geometry 200x200+2+2 montage.jpg\n\nExtract image channels\nconvert input.jpg -separate channels%d.jpg\n\nComposite images\ncomposite overlay.png -gravity center base.jpg output.jpgCopy to clipboardErrorCopied\n\nWatch this ImageMagick tutorial (16 min):\n\n[](https://youtu.be/wjcBOoReYc0)\n\nTools:\n\n Fred’s ImageMagick Scripts: Useful script collection\n ImageMagick Online Studio: Visual command builder\n\nTips:\n\n1. Use -strip to remove metadata and reduce file size\n2. Monitor memory usage with -limit memory 1GB\n3. Use -define for format-specific options\n4. Process in parallel with -parallel\n5. Use -monitor to track progress\n\nError Handling:\n\nCheck image validity\nidentify -regard-warnings input.jpg\n\nGet detailed error information\nconvert input.jpg output.jpg 2>&1 | grep -i \"error\"\n\nSet resource limits\nconvert -limit memory 1GB -limit map 2GB input.jpg output.jpgCopy to clipboardErrorCopied\n\nFor Python integration:\n\n/// script\nrequires-python = \">=3.9\"\ndependencies = [\"Wand\"]\n///\n\nfrom wand.image import Image\n\nasync def processimage(path: str) -> None:\n    \"\"\"Process image with ImageMagick via Wand.\"\"\"\n    with Image(filename=path) as img:\n         Basic operations\n        img.resize(800, 600)\n        img.normalize()\n\n         Apply effects\n        img.sharpen(radius=0, sigma=3)\n\n         Save with compression\n        img.save(filename='output.jpg')Copy to clipboardErrorCopied\n\nNote: Always install ImageMagick before using the Wand Python binding.\n\nPrevious\n\nData Transformation with dbt\n\nNext\n\nExtracting Audio and Transcripts"
  },
  {
    "title": "Transforming Images",
    "filename": "Transforming_Images.md",
    "text": "Transforming Images\n-------------------------------------------------------------------\n\nImage Processing with PIL (Pillow)\n\n[](https://youtu.be/6Qs3wObeWwc)\n\nPillow is Python’s leading library for image processing, offering powerful tools for editing, analyzing, and generating images. It handles various formats (PNG, JPEG, GIF, etc.) and provides operations from basic resizing to complex filters.\n\nHere’s a minimal example showing common operations:\n\n/// script\nrequires-python = \">=3.11\"\ndependencies = [\"Pillow\"]\n///\n\nfrom PIL import Image, ImageEnhance, ImageFilter\n\nasync def processimage(path: str) -> Image.Image:\n    \"\"\"Process an image with basic enhancements.\"\"\"\n    with Image.open(path) as img:\n         Convert to RGB to ensure compatibility\n        img = img.convert('RGB')\n\n         Resize maintaining aspect ratio\n        img.thumbnail((800, 800))\n\n         Apply enhancements\n        img = (ImageEnhance.Contrast(img)\n               .enhance(1.2))\n\n        return img.filter(ImageFilter.SHARPEN)\n\nif name == \"main\":\n    import asyncio\n    img = asyncio.run(processimage(\"input.jpg\"))\n    img.save(\"output.jpg\", quality=85)Copy to clipboardErrorCopied\n\nKey features and techniques you’ll learn:\n\n Image Loading and Saving: Handle various formats with automatic conversion\n Basic Operations: Resize, rotate, crop, and flip images\n Color Manipulation: Adjust brightness, contrast, and color balance\n Filters and Effects: Apply blur, sharpen, and other visual effects\n Drawing: Add text, shapes, and overlays to images\n Batch Processing: Handle multiple images efficiently\n Memory Management: Process large images without memory issues\n\nBasic Image Operations\n\nCommon operations for resizing, cropping, and rotating images:\n\nfrom PIL import Image\n\nasync def transformimage(\n    path: str,\n    size: tuple[int, int],\n    rotation: float = 0\n) -> Image.Image:\n    \"\"\"Transform image with basic operations.\"\"\"\n    with Image.open(path) as img:\n         Resize with anti-aliasing\n        img = img.resize(size, Image.LANCZOS)\n\n         Rotate around center\n        if rotation:\n            img = img.rotate(rotation, expand=True)\n\n         Auto-crop empty edges\n        img = img.crop(img.getbbox())\n\n        return imgCopy to clipboardErrorCopied\n\nColor and Enhancement\n\nAdjust image appearance with built-in enhancement tools:\n\nfrom PIL import ImageEnhance, ImageOps\n\nasync def enhanceimage(\n    img: Image.Image,\n    brightness: float = 1.0,\n    contrast: float = 1.0,\n    saturation: float = 1.0\n) -> Image.Image:\n    \"\"\"Apply color enhancements to image.\"\"\"\n    enhancers = [\n        (ImageEnhance.Brightness, brightness),\n        (ImageEnhance.Contrast, contrast),\n        (ImageEnhance.Color, saturation)\n    ]\n\n    for Enhancer, factor in enhancers:\n        if factor != 1.0:\n            img = Enhancer(img).enhance(factor)\n\n    return imgCopy to clipboardErrorCopied\n\nFilters and Effects\n\nApply visual effects and filters to images:\n\nfrom PIL import ImageFilter\n\ndef applyeffects(img: Image.Image) -> Image.Image:\n    \"\"\"Apply various filters and effects.\"\"\"\n    effects = {\n        'blur': ImageFilter.GaussianBlur(radius=2),\n        'sharpen': ImageFilter.SHARPEN,\n        'edge': ImageFilter.FINDEDGES,\n        'emboss': ImageFilter.EMBOSS\n    }\n\n    return {name: img.filter(effect)\n            for name, effect in effects.items()}Copy to clipboardErrorCopied\n\nDrawing and Text\n\nAdd text, shapes, and overlays to images:\n\nfrom PIL import Image, ImageDraw, ImageFont\n\nasync def addwatermark(\n    img: Image.Image,\n    text: str,\n    fontsize: int = 30\n) -> Image.Image:\n    \"\"\"Add text watermark to image.\"\"\"\n    draw = ImageDraw.Draw(img)\n    font = ImageFont.truetype(\"arial.ttf\", fontsize)\n\n     Calculate text size and position\n    textbbox = draw.textbbox((0, 0), text, font=font)\n    textwidth = textbbox[2] - textbbox[0]\n    textheight = textbbox[3] - textbbox[1]\n\n     Position text at bottom-right\n    x = img.width - textwidth - 10\n    y = img.height - textheight - 10\n\n     Add text with shadow\n    draw.text((x+2, y+2), text, font=font, fill='black')\n    draw.text((x, y), text, font=font, fill='white')\n\n    return imgCopy to clipboardErrorCopied\n\nMemory-Efficient Processing\n\nHandle large images without loading them entirely into memory:\n\nfrom PIL import Image\nimport os\n\nasync def processlargeimages(\n    inputdir: str,\n    outputdir: str,\n    maxsize: tuple[int, int]\n) -> None:\n    \"\"\"Process multiple large images efficiently.\"\"\"\n    os.makedirs(outputdir, existok=True)\n\n    for filename in os.listdir(inputdir):\n        if not filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n            continue\n\n        inputpath = os.path.join(inputdir, filename)\n        outputpath = os.path.join(outputdir, filename)\n\n        with Image.open(inputpath) as img:\n             Process in chunks using thumbnail\n            img.thumbnail(maxsize)\n            img.save(outputpath, optimize=True)Copy to clipboardErrorCopied\n\nPractice with these resources:\n\n Pillow Documentation: Complete API reference\n Python Image Processing Tutorial: In-depth guide\n Sample Images Dataset: Test images for practice\n\nWatch these tutorials for hands-on demonstrations:\n\n[](https://youtu.be/dkp4wUhCwR4)\n\nImage Processing with ImageMagick\n\nImageMagick is a powerful command-line tool for image manipulation, offering features beyond what’s possible with Python libraries. It’s particularly useful for:\n\n Batch processing large image collections\n Complex image transformations\n High-quality format conversion\n Creating image thumbnails\n Adding text and watermarks\n\nBasic Operations:\n\nFormat conversion\nconvert input.png output.jpg\n\nResize image (maintains aspect ratio)\nconvert input.jpg -resize 800x600 output.jpg\n\nCompress image quality\nconvert input.jpg -quality 85 output.jpg\n\nRotate image\nconvert input.jpg -rotate 90 output.jpgCopy to clipboardErrorCopied\n\nCommon Data Science Tasks:\n\nCreate thumbnails for dataset preview\nconvert input.jpg -thumbnail 200x200^ -gravity center -extent 200x200 thumb.jpg\n\nNormalize image for ML training\nconvert input.jpg -normalize -strip output.jpg\n\nExtract dominant colors\nconvert input.jpg -colors 5 -unique-colors txt:\n\nGenerate image statistics\nidentify -verbose input.jpg | grep -E \"Mean|Standard|Kurtosis\"Copy to clipboardErrorCopied\n\nBatch Processing:\n\nConvert all images in a directory\nmogrify -format jpg .png\n\nResize multiple images\nmogrify -resize 800x600 -path output/ .jpg\n\nAdd watermark to images\nfor f in .jpg; do\n    convert \"$f\" -gravity southeast -draw \"text 10,10 'Copyright'\" \"watermarked/$f\"\ndoneCopy to clipboardErrorCopied\n\nAdvanced Features:\n\nApply image effects\nconvert input.jpg -blur 0x3 blurred.jpg\nconvert input.jpg -sharpen 0x3 sharp.jpg\nconvert input.jpg -edge 1 edges.jpg\n\nCreate image montage\nmontage .jpg -geometry 200x200+2+2 montage.jpg\n\nExtract image channels\nconvert input.jpg -separate channels%d.jpg\n\nComposite images\ncomposite overlay.png -gravity center base.jpg output.jpgCopy to clipboardErrorCopied\n\nWatch this ImageMagick tutorial (16 min):\n\n[](https://youtu.be/wjcBOoReYc0)\n\nTools:\n\n Fred’s ImageMagick Scripts: Useful script collection\n ImageMagick Online Studio: Visual command builder\n\nTips:\n\n1. Use -strip to remove metadata and reduce file size\n2. Monitor memory usage with -limit memory 1GB\n3. Use -define for format-specific options\n4. Process in parallel with -parallel\n5. Use -monitor to track progress\n\nError Handling:\n\nCheck image validity\nidentify -regard-warnings input.jpg\n\nGet detailed error information\nconvert input.jpg output.jpg 2>&1 | grep -i \"error\"\n\nSet resource limits\nconvert -limit memory 1GB -limit map 2GB input.jpg output.jpgCopy to clipboardErrorCopied\n\nFor Python integration:\n\n/// script\nrequires-python = \">=3.9\"\ndependencies = [\"Wand\"]\n///\n\nfrom wand.image import Image\n\nasync def processimage(path: str) -> None:\n    \"\"\"Process image with ImageMagick via Wand.\"\"\"\n    with Image(filename=path) as img:\n         Basic operations\n        img.resize(800, 600)\n        img.normalize()\n\n         Apply effects\n        img.sharpen(radius=0, sigma=3)\n\n         Save with compression\n        img.save(filename='output.jpg')Copy to clipboardErrorCopied\n\nNote: Always install ImageMagick before using the Wand Python binding.\n\nPrevious\n\nData Transformation with dbt\n\nNext\n\nExtracting Audio and Transcripts"
  },
  {
    "title": "Transforming Images",
    "filename": "Transforming_Images.md",
    "text": "Transforming Images\n-------------------------------------------------------------------\n\nImage Processing with PIL (Pillow)\n\n[](https://youtu.be/6Qs3wObeWwc)\n\nPillow is Python’s leading library for image processing, offering powerful tools for editing, analyzing, and generating images. It handles various formats (PNG, JPEG, GIF, etc.) and provides operations from basic resizing to complex filters.\n\nHere’s a minimal example showing common operations:\n\n/// script\nrequires-python = \">=3.11\"\ndependencies = [\"Pillow\"]\n///\n\nfrom PIL import Image, ImageEnhance, ImageFilter\n\nasync def processimage(path: str) -> Image.Image:\n    \"\"\"Process an image with basic enhancements.\"\"\"\n    with Image.open(path) as img:\n         Convert to RGB to ensure compatibility\n        img = img.convert('RGB')\n\n         Resize maintaining aspect ratio\n        img.thumbnail((800, 800))\n\n         Apply enhancements\n        img = (ImageEnhance.Contrast(img)\n               .enhance(1.2))\n\n        return img.filter(ImageFilter.SHARPEN)\n\nif name == \"main\":\n    import asyncio\n    img = asyncio.run(processimage(\"input.jpg\"))\n    img.save(\"output.jpg\", quality=85)Copy to clipboardErrorCopied\n\nKey features and techniques you’ll learn:\n\n Image Loading and Saving: Handle various formats with automatic conversion\n Basic Operations: Resize, rotate, crop, and flip images\n Color Manipulation: Adjust brightness, contrast, and color balance\n Filters and Effects: Apply blur, sharpen, and other visual effects\n Drawing: Add text, shapes, and overlays to images\n Batch Processing: Handle multiple images efficiently\n Memory Management: Process large images without memory issues\n\nBasic Image Operations\n\nCommon operations for resizing, cropping, and rotating images:\n\nfrom PIL import Image\n\nasync def transformimage(\n    path: str,\n    size: tuple[int, int],\n    rotation: float = 0\n) -> Image.Image:\n    \"\"\"Transform image with basic operations.\"\"\"\n    with Image.open(path) as img:\n         Resize with anti-aliasing\n        img = img.resize(size, Image.LANCZOS)\n\n         Rotate around center\n        if rotation:\n            img = img.rotate(rotation, expand=True)\n\n         Auto-crop empty edges\n        img = img.crop(img.getbbox())\n\n        return imgCopy to clipboardErrorCopied\n\nColor and Enhancement\n\nAdjust image appearance with built-in enhancement tools:\n\nfrom PIL import ImageEnhance, ImageOps\n\nasync def enhanceimage(\n    img: Image.Image,\n    brightness: float = 1.0,\n    contrast: float = 1.0,\n    saturation: float = 1.0\n) -> Image.Image:\n    \"\"\"Apply color enhancements to image.\"\"\"\n    enhancers = [\n        (ImageEnhance.Brightness, brightness),\n        (ImageEnhance.Contrast, contrast),\n        (ImageEnhance.Color, saturation)\n    ]\n\n    for Enhancer, factor in enhancers:\n        if factor != 1.0:\n            img = Enhancer(img).enhance(factor)\n\n    return imgCopy to clipboardErrorCopied\n\nFilters and Effects\n\nApply visual effects and filters to images:\n\nfrom PIL import ImageFilter\n\ndef applyeffects(img: Image.Image) -> Image.Image:\n    \"\"\"Apply various filters and effects.\"\"\"\n    effects = {\n        'blur': ImageFilter.GaussianBlur(radius=2),\n        'sharpen': ImageFilter.SHARPEN,\n        'edge': ImageFilter.FINDEDGES,\n        'emboss': ImageFilter.EMBOSS\n    }\n\n    return {name: img.filter(effect)\n            for name, effect in effects.items()}Copy to clipboardErrorCopied\n\nDrawing and Text\n\nAdd text, shapes, and overlays to images:\n\nfrom PIL import Image, ImageDraw, ImageFont\n\nasync def addwatermark(\n    img: Image.Image,\n    text: str,\n    fontsize: int = 30\n) -> Image.Image:\n    \"\"\"Add text watermark to image.\"\"\"\n    draw = ImageDraw.Draw(img)\n    font = ImageFont.truetype(\"arial.ttf\", fontsize)\n\n     Calculate text size and position\n    textbbox = draw.textbbox((0, 0), text, font=font)\n    textwidth = textbbox[2] - textbbox[0]\n    textheight = textbbox[3] - textbbox[1]\n\n     Position text at bottom-right\n    x = img.width - textwidth - 10\n    y = img.height - textheight - 10\n\n     Add text with shadow\n    draw.text((x+2, y+2), text, font=font, fill='black')\n    draw.text((x, y), text, font=font, fill='white')\n\n    return imgCopy to clipboardErrorCopied\n\nMemory-Efficient Processing\n\nHandle large images without loading them entirely into memory:\n\nfrom PIL import Image\nimport os\n\nasync def processlargeimages(\n    inputdir: str,\n    outputdir: str,\n    maxsize: tuple[int, int]\n) -> None:\n    \"\"\"Process multiple large images efficiently.\"\"\"\n    os.makedirs(outputdir, existok=True)\n\n    for filename in os.listdir(inputdir):\n        if not filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n            continue\n\n        inputpath = os.path.join(inputdir, filename)\n        outputpath = os.path.join(outputdir, filename)\n\n        with Image.open(inputpath) as img:\n             Process in chunks using thumbnail\n            img.thumbnail(maxsize)\n            img.save(outputpath, optimize=True)Copy to clipboardErrorCopied\n\nPractice with these resources:\n\n Pillow Documentation: Complete API reference\n Python Image Processing Tutorial: In-depth guide\n Sample Images Dataset: Test images for practice\n\nWatch these tutorials for hands-on demonstrations:\n\n[](https://youtu.be/dkp4wUhCwR4)\n\nImage Processing with ImageMagick\n\nImageMagick is a powerful command-line tool for image manipulation, offering features beyond what’s possible with Python libraries. It’s particularly useful for:\n\n Batch processing large image collections\n Complex image transformations\n High-quality format conversion\n Creating image thumbnails\n Adding text and watermarks\n\nBasic Operations:\n\nFormat conversion\nconvert input.png output.jpg\n\nResize image (maintains aspect ratio)\nconvert input.jpg -resize 800x600 output.jpg\n\nCompress image quality\nconvert input.jpg -quality 85 output.jpg\n\nRotate image\nconvert input.jpg -rotate 90 output.jpgCopy to clipboardErrorCopied\n\nCommon Data Science Tasks:\n\nCreate thumbnails for dataset preview\nconvert input.jpg -thumbnail 200x200^ -gravity center -extent 200x200 thumb.jpg\n\nNormalize image for ML training\nconvert input.jpg -normalize -strip output.jpg\n\nExtract dominant colors\nconvert input.jpg -colors 5 -unique-colors txt:\n\nGenerate image statistics\nidentify -verbose input.jpg | grep -E \"Mean|Standard|Kurtosis\"Copy to clipboardErrorCopied\n\nBatch Processing:\n\nConvert all images in a directory\nmogrify -format jpg .png\n\nResize multiple images\nmogrify -resize 800x600 -path output/ .jpg\n\nAdd watermark to images\nfor f in .jpg; do\n    convert \"$f\" -gravity southeast -draw \"text 10,10 'Copyright'\" \"watermarked/$f\"\ndoneCopy to clipboardErrorCopied\n\nAdvanced Features:\n\nApply image effects\nconvert input.jpg -blur 0x3 blurred.jpg\nconvert input.jpg -sharpen 0x3 sharp.jpg\nconvert input.jpg -edge 1 edges.jpg\n\nCreate image montage\nmontage .jpg -geometry 200x200+2+2 montage.jpg\n\nExtract image channels\nconvert input.jpg -separate channels%d.jpg\n\nComposite images\ncomposite overlay.png -gravity center base.jpg output.jpgCopy to clipboardErrorCopied\n\nWatch this ImageMagick tutorial (16 min):\n\n[](https://youtu.be/wjcBOoReYc0)\n\nTools:\n\n Fred’s ImageMagick Scripts: Useful script collection\n ImageMagick Online Studio: Visual command builder\n\nTips:\n\n1. Use -strip to remove metadata and reduce file size\n2. Monitor memory usage with -limit memory 1GB\n3. Use -define for format-specific options\n4. Process in parallel with -parallel\n5. Use -monitor to track progress\n\nError Handling:\n\nCheck image validity\nidentify -regard-warnings input.jpg\n\nGet detailed error information\nconvert input.jpg output.jpg 2>&1 | grep -i \"error\"\n\nSet resource limits\nconvert -limit memory 1GB -limit map 2GB input.jpg output.jpgCopy to clipboardErrorCopied\n\nFor Python integration:\n\n/// script\nrequires-python = \">=3.9\"\ndependencies = [\"Wand\"]\n///\n\nfrom wand.image import Image\n\nasync def processimage(path: str) -> None:\n    \"\"\"Process image with ImageMagick via Wand.\"\"\"\n    with Image(filename=path) as img:\n         Basic operations\n        img.resize(800, 600)\n        img.normalize()\n\n         Apply effects\n        img.sharpen(radius=0, sigma=3)\n\n         Save with compression\n        img.save(filename='output.jpg')Copy to clipboardErrorCopied\n\nNote: Always install ImageMagick before using the Wand Python binding.\n\nPrevious\n\nData Transformation with dbt\n\nNext\n\nExtracting Audio and Transcripts"
  },
  {
    "title": "Transforming Images",
    "filename": "Transforming_Images.md",
    "text": "Transforming Images\n-------------------------------------------------------------------\n\nImage Processing with PIL (Pillow)\n\n[](https://youtu.be/6Qs3wObeWwc)\n\nPillow is Python’s leading library for image processing, offering powerful tools for editing, analyzing, and generating images. It handles various formats (PNG, JPEG, GIF, etc.) and provides operations from basic resizing to complex filters.\n\nHere’s a minimal example showing common operations:\n\n/// script\nrequires-python = \">=3.11\"\ndependencies = [\"Pillow\"]\n///\n\nfrom PIL import Image, ImageEnhance, ImageFilter\n\nasync def processimage(path: str) -> Image.Image:\n    \"\"\"Process an image with basic enhancements.\"\"\"\n    with Image.open(path) as img:\n         Convert to RGB to ensure compatibility\n        img = img.convert('RGB')\n\n         Resize maintaining aspect ratio\n        img.thumbnail((800, 800))\n\n         Apply enhancements\n        img = (ImageEnhance.Contrast(img)\n               .enhance(1.2))\n\n        return img.filter(ImageFilter.SHARPEN)\n\nif name == \"main\":\n    import asyncio\n    img = asyncio.run(processimage(\"input.jpg\"))\n    img.save(\"output.jpg\", quality=85)Copy to clipboardErrorCopied\n\nKey features and techniques you’ll learn:\n\n Image Loading and Saving: Handle various formats with automatic conversion\n Basic Operations: Resize, rotate, crop, and flip images\n Color Manipulation: Adjust brightness, contrast, and color balance\n Filters and Effects: Apply blur, sharpen, and other visual effects\n Drawing: Add text, shapes, and overlays to images\n Batch Processing: Handle multiple images efficiently\n Memory Management: Process large images without memory issues\n\nBasic Image Operations\n\nCommon operations for resizing, cropping, and rotating images:\n\nfrom PIL import Image\n\nasync def transformimage(\n    path: str,\n    size: tuple[int, int],\n    rotation: float = 0\n) -> Image.Image:\n    \"\"\"Transform image with basic operations.\"\"\"\n    with Image.open(path) as img:\n         Resize with anti-aliasing\n        img = img.resize(size, Image.LANCZOS)\n\n         Rotate around center\n        if rotation:\n            img = img.rotate(rotation, expand=True)\n\n         Auto-crop empty edges\n        img = img.crop(img.getbbox())\n\n        return imgCopy to clipboardErrorCopied\n\nColor and Enhancement\n\nAdjust image appearance with built-in enhancement tools:\n\nfrom PIL import ImageEnhance, ImageOps\n\nasync def enhanceimage(\n    img: Image.Image,\n    brightness: float = 1.0,\n    contrast: float = 1.0,\n    saturation: float = 1.0\n) -> Image.Image:\n    \"\"\"Apply color enhancements to image.\"\"\"\n    enhancers = [\n        (ImageEnhance.Brightness, brightness),\n        (ImageEnhance.Contrast, contrast),\n        (ImageEnhance.Color, saturation)\n    ]\n\n    for Enhancer, factor in enhancers:\n        if factor != 1.0:\n            img = Enhancer(img).enhance(factor)\n\n    return imgCopy to clipboardErrorCopied\n\nFilters and Effects\n\nApply visual effects and filters to images:\n\nfrom PIL import ImageFilter\n\ndef applyeffects(img: Image.Image) -> Image.Image:\n    \"\"\"Apply various filters and effects.\"\"\"\n    effects = {\n        'blur': ImageFilter.GaussianBlur(radius=2),\n        'sharpen': ImageFilter.SHARPEN,\n        'edge': ImageFilter.FINDEDGES,\n        'emboss': ImageFilter.EMBOSS\n    }\n\n    return {name: img.filter(effect)\n            for name, effect in effects.items()}Copy to clipboardErrorCopied\n\nDrawing and Text\n\nAdd text, shapes, and overlays to images:\n\nfrom PIL import Image, ImageDraw, ImageFont\n\nasync def addwatermark(\n    img: Image.Image,\n    text: str,\n    fontsize: int = 30\n) -> Image.Image:\n    \"\"\"Add text watermark to image.\"\"\"\n    draw = ImageDraw.Draw(img)\n    font = ImageFont.truetype(\"arial.ttf\", fontsize)\n\n     Calculate text size and position\n    textbbox = draw.textbbox((0, 0), text, font=font)\n    textwidth = textbbox[2] - textbbox[0]\n    textheight = textbbox[3] - textbbox[1]\n\n     Position text at bottom-right\n    x = img.width - textwidth - 10\n    y = img.height - textheight - 10\n\n     Add text with shadow\n    draw.text((x+2, y+2), text, font=font, fill='black')\n    draw.text((x, y), text, font=font, fill='white')\n\n    return imgCopy to clipboardErrorCopied\n\nMemory-Efficient Processing\n\nHandle large images without loading them entirely into memory:\n\nfrom PIL import Image\nimport os\n\nasync def processlargeimages(\n    inputdir: str,\n    outputdir: str,\n    maxsize: tuple[int, int]\n) -> None:\n    \"\"\"Process multiple large images efficiently.\"\"\"\n    os.makedirs(outputdir, existok=True)\n\n    for filename in os.listdir(inputdir):\n        if not filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n            continue\n\n        inputpath = os.path.join(inputdir, filename)\n        outputpath = os.path.join(outputdir, filename)\n\n        with Image.open(inputpath) as img:\n             Process in chunks using thumbnail\n            img.thumbnail(maxsize)\n            img.save(outputpath, optimize=True)Copy to clipboardErrorCopied\n\nPractice with these resources:\n\n Pillow Documentation: Complete API reference\n Python Image Processing Tutorial: In-depth guide\n Sample Images Dataset: Test images for practice\n\nWatch these tutorials for hands-on demonstrations:\n\n[](https://youtu.be/dkp4wUhCwR4)\n\nImage Processing with ImageMagick\n\nImageMagick is a powerful command-line tool for image manipulation, offering features beyond what’s possible with Python libraries. It’s particularly useful for:\n\n Batch processing large image collections\n Complex image transformations\n High-quality format conversion\n Creating image thumbnails\n Adding text and watermarks\n\nBasic Operations:\n\nFormat conversion\nconvert input.png output.jpg\n\nResize image (maintains aspect ratio)\nconvert input.jpg -resize 800x600 output.jpg\n\nCompress image quality\nconvert input.jpg -quality 85 output.jpg\n\nRotate image\nconvert input.jpg -rotate 90 output.jpgCopy to clipboardErrorCopied\n\nCommon Data Science Tasks:\n\nCreate thumbnails for dataset preview\nconvert input.jpg -thumbnail 200x200^ -gravity center -extent 200x200 thumb.jpg\n\nNormalize image for ML training\nconvert input.jpg -normalize -strip output.jpg\n\nExtract dominant colors\nconvert input.jpg -colors 5 -unique-colors txt:\n\nGenerate image statistics\nidentify -verbose input.jpg | grep -E \"Mean|Standard|Kurtosis\"Copy to clipboardErrorCopied\n\nBatch Processing:\n\nConvert all images in a directory\nmogrify -format jpg .png\n\nResize multiple images\nmogrify -resize 800x600 -path output/ .jpg\n\nAdd watermark to images\nfor f in .jpg; do\n    convert \"$f\" -gravity southeast -draw \"text 10,10 'Copyright'\" \"watermarked/$f\"\ndoneCopy to clipboardErrorCopied\n\nAdvanced Features:\n\nApply image effects\nconvert input.jpg -blur 0x3 blurred.jpg\nconvert input.jpg -sharpen 0x3 sharp.jpg\nconvert input.jpg -edge 1 edges.jpg\n\nCreate image montage\nmontage .jpg -geometry 200x200+2+2 montage.jpg\n\nExtract image channels\nconvert input.jpg -separate channels%d.jpg\n\nComposite images\ncomposite overlay.png -gravity center base.jpg output.jpgCopy to clipboardErrorCopied\n\nWatch this ImageMagick tutorial (16 min):\n\n[](https://youtu.be/wjcBOoReYc0)\n\nTools:\n\n Fred’s ImageMagick Scripts: Useful script collection\n ImageMagick Online Studio: Visual command builder\n\nTips:\n\n1. Use -strip to remove metadata and reduce file size\n2. Monitor memory usage with -limit memory 1GB\n3. Use -define for format-specific options\n4. Process in parallel with -parallel\n5. Use -monitor to track progress\n\nError Handling:\n\nCheck image validity\nidentify -regard-warnings input.jpg\n\nGet detailed error information\nconvert input.jpg output.jpg 2>&1 | grep -i \"error\"\n\nSet resource limits\nconvert -limit memory 1GB -limit map 2GB input.jpg output.jpgCopy to clipboardErrorCopied\n\nFor Python integration:\n\n/// script\nrequires-python = \">=3.9\"\ndependencies = [\"Wand\"]\n///\n\nfrom wand.image import Image\n\nasync def processimage(path: str) -> None:\n    \"\"\"Process image with ImageMagick via Wand.\"\"\"\n    with Image(filename=path) as img:\n         Basic operations\n        img.resize(800, 600)\n        img.normalize()\n\n         Apply effects\n        img.sharpen(radius=0, sigma=3)\n\n         Save with compression\n        img.save(filename='output.jpg')Copy to clipboardErrorCopied\n\nNote: Always install ImageMagick before using the Wand Python binding.\n\nPrevious\n\nData Transformation with dbt\n\nNext\n\nExtracting Audio and Transcripts"
  },
  {
    "title": "Transforming Images",
    "filename": "Transforming_Images.md",
    "text": "Transforming Images\n-------------------------------------------------------------------\n\nImage Processing with PIL (Pillow)\n\n[](https://youtu.be/6Qs3wObeWwc)\n\nPillow is Python’s leading library for image processing, offering powerful tools for editing, analyzing, and generating images. It handles various formats (PNG, JPEG, GIF, etc.) and provides operations from basic resizing to complex filters.\n\nHere’s a minimal example showing common operations:\n\n/// script\nrequires-python = \">=3.11\"\ndependencies = [\"Pillow\"]\n///\n\nfrom PIL import Image, ImageEnhance, ImageFilter\n\nasync def processimage(path: str) -> Image.Image:\n    \"\"\"Process an image with basic enhancements.\"\"\"\n    with Image.open(path) as img:\n         Convert to RGB to ensure compatibility\n        img = img.convert('RGB')\n\n         Resize maintaining aspect ratio\n        img.thumbnail((800, 800))\n\n         Apply enhancements\n        img = (ImageEnhance.Contrast(img)\n               .enhance(1.2))\n\n        return img.filter(ImageFilter.SHARPEN)\n\nif name == \"main\":\n    import asyncio\n    img = asyncio.run(processimage(\"input.jpg\"))\n    img.save(\"output.jpg\", quality=85)Copy to clipboardErrorCopied\n\nKey features and techniques you’ll learn:\n\n Image Loading and Saving: Handle various formats with automatic conversion\n Basic Operations: Resize, rotate, crop, and flip images\n Color Manipulation: Adjust brightness, contrast, and color balance\n Filters and Effects: Apply blur, sharpen, and other visual effects\n Drawing: Add text, shapes, and overlays to images\n Batch Processing: Handle multiple images efficiently\n Memory Management: Process large images without memory issues\n\nBasic Image Operations\n\nCommon operations for resizing, cropping, and rotating images:\n\nfrom PIL import Image\n\nasync def transformimage(\n    path: str,\n    size: tuple[int, int],\n    rotation: float = 0\n) -> Image.Image:\n    \"\"\"Transform image with basic operations.\"\"\"\n    with Image.open(path) as img:\n         Resize with anti-aliasing\n        img = img.resize(size, Image.LANCZOS)\n\n         Rotate around center\n        if rotation:\n            img = img.rotate(rotation, expand=True)\n\n         Auto-crop empty edges\n        img = img.crop(img.getbbox())\n\n        return imgCopy to clipboardErrorCopied\n\nColor and Enhancement\n\nAdjust image appearance with built-in enhancement tools:\n\nfrom PIL import ImageEnhance, ImageOps\n\nasync def enhanceimage(\n    img: Image.Image,\n    brightness: float = 1.0,\n    contrast: float = 1.0,\n    saturation: float = 1.0\n) -> Image.Image:\n    \"\"\"Apply color enhancements to image.\"\"\"\n    enhancers = [\n        (ImageEnhance.Brightness, brightness),\n        (ImageEnhance.Contrast, contrast),\n        (ImageEnhance.Color, saturation)\n    ]\n\n    for Enhancer, factor in enhancers:\n        if factor != 1.0:\n            img = Enhancer(img).enhance(factor)\n\n    return imgCopy to clipboardErrorCopied\n\nFilters and Effects\n\nApply visual effects and filters to images:\n\nfrom PIL import ImageFilter\n\ndef applyeffects(img: Image.Image) -> Image.Image:\n    \"\"\"Apply various filters and effects.\"\"\"\n    effects = {\n        'blur': ImageFilter.GaussianBlur(radius=2),\n        'sharpen': ImageFilter.SHARPEN,\n        'edge': ImageFilter.FINDEDGES,\n        'emboss': ImageFilter.EMBOSS\n    }\n\n    return {name: img.filter(effect)\n            for name, effect in effects.items()}Copy to clipboardErrorCopied\n\nDrawing and Text\n\nAdd text, shapes, and overlays to images:\n\nfrom PIL import Image, ImageDraw, ImageFont\n\nasync def addwatermark(\n    img: Image.Image,\n    text: str,\n    fontsize: int = 30\n) -> Image.Image:\n    \"\"\"Add text watermark to image.\"\"\"\n    draw = ImageDraw.Draw(img)\n    font = ImageFont.truetype(\"arial.ttf\", fontsize)\n\n     Calculate text size and position\n    textbbox = draw.textbbox((0, 0), text, font=font)\n    textwidth = textbbox[2] - textbbox[0]\n    textheight = textbbox[3] - textbbox[1]\n\n     Position text at bottom-right\n    x = img.width - textwidth - 10\n    y = img.height - textheight - 10\n\n     Add text with shadow\n    draw.text((x+2, y+2), text, font=font, fill='black')\n    draw.text((x, y), text, font=font, fill='white')\n\n    return imgCopy to clipboardErrorCopied\n\nMemory-Efficient Processing\n\nHandle large images without loading them entirely into memory:\n\nfrom PIL import Image\nimport os\n\nasync def processlargeimages(\n    inputdir: str,\n    outputdir: str,\n    maxsize: tuple[int, int]\n) -> None:\n    \"\"\"Process multiple large images efficiently.\"\"\"\n    os.makedirs(outputdir, existok=True)\n\n    for filename in os.listdir(inputdir):\n        if not filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n            continue\n\n        inputpath = os.path.join(inputdir, filename)\n        outputpath = os.path.join(outputdir, filename)\n\n        with Image.open(inputpath) as img:\n             Process in chunks using thumbnail\n            img.thumbnail(maxsize)\n            img.save(outputpath, optimize=True)Copy to clipboardErrorCopied\n\nPractice with these resources:\n\n Pillow Documentation: Complete API reference\n Python Image Processing Tutorial: In-depth guide\n Sample Images Dataset: Test images for practice\n\nWatch these tutorials for hands-on demonstrations:\n\n[](https://youtu.be/dkp4wUhCwR4)\n\nImage Processing with ImageMagick\n\nImageMagick is a powerful command-line tool for image manipulation, offering features beyond what’s possible with Python libraries. It’s particularly useful for:\n\n Batch processing large image collections\n Complex image transformations\n High-quality format conversion\n Creating image thumbnails\n Adding text and watermarks\n\nBasic Operations:\n\nFormat conversion\nconvert input.png output.jpg\n\nResize image (maintains aspect ratio)\nconvert input.jpg -resize 800x600 output.jpg\n\nCompress image quality\nconvert input.jpg -quality 85 output.jpg\n\nRotate image\nconvert input.jpg -rotate 90 output.jpgCopy to clipboardErrorCopied\n\nCommon Data Science Tasks:\n\nCreate thumbnails for dataset preview\nconvert input.jpg -thumbnail 200x200^ -gravity center -extent 200x200 thumb.jpg\n\nNormalize image for ML training\nconvert input.jpg -normalize -strip output.jpg\n\nExtract dominant colors\nconvert input.jpg -colors 5 -unique-colors txt:\n\nGenerate image statistics\nidentify -verbose input.jpg | grep -E \"Mean|Standard|Kurtosis\"Copy to clipboardErrorCopied\n\nBatch Processing:\n\nConvert all images in a directory\nmogrify -format jpg .png\n\nResize multiple images\nmogrify -resize 800x600 -path output/ .jpg\n\nAdd watermark to images\nfor f in .jpg; do\n    convert \"$f\" -gravity southeast -draw \"text 10,10 'Copyright'\" \"watermarked/$f\"\ndoneCopy to clipboardErrorCopied\n\nAdvanced Features:\n\nApply image effects\nconvert input.jpg -blur 0x3 blurred.jpg\nconvert input.jpg -sharpen 0x3 sharp.jpg\nconvert input.jpg -edge 1 edges.jpg\n\nCreate image montage\nmontage .jpg -geometry 200x200+2+2 montage.jpg\n\nExtract image channels\nconvert input.jpg -separate channels%d.jpg\n\nComposite images\ncomposite overlay.png -gravity center base.jpg output.jpgCopy to clipboardErrorCopied\n\nWatch this ImageMagick tutorial (16 min):\n\n[](https://youtu.be/wjcBOoReYc0)\n\nTools:\n\n Fred’s ImageMagick Scripts: Useful script collection\n ImageMagick Online Studio: Visual command builder\n\nTips:\n\n1. Use -strip to remove metadata and reduce file size\n2. Monitor memory usage with -limit memory 1GB\n3. Use -define for format-specific options\n4. Process in parallel with -parallel\n5. Use -monitor to track progress\n\nError Handling:\n\nCheck image validity\nidentify -regard-warnings input.jpg\n\nGet detailed error information\nconvert input.jpg output.jpg 2>&1 | grep -i \"error\"\n\nSet resource limits\nconvert -limit memory 1GB -limit map 2GB input.jpg output.jpgCopy to clipboardErrorCopied\n\nFor Python integration:\n\n/// script\nrequires-python = \">=3.9\"\ndependencies = [\"Wand\"]\n///\n\nfrom wand.image import Image\n\nasync def processimage(path: str) -> None:\n    \"\"\"Process image with ImageMagick via Wand.\"\"\"\n    with Image(filename=path) as img:\n         Basic operations\n        img.resize(800, 600)\n        img.normalize()\n\n         Apply effects\n        img.sharpen(radius=0, sigma=3)\n\n         Save with compression\n        img.save(filename='output.jpg')Copy to clipboardErrorCopied\n\nNote: Always install ImageMagick before using the Wand Python binding.\n\nPrevious\n\nData Transformation with dbt\n\nNext\n\nExtracting Audio and Transcripts"
  },
  {
    "title": "Transforming Images",
    "filename": "Transforming_Images.md",
    "text": "Transforming Images\n-------------------------------------------------------------------\n\nImage Processing with PIL (Pillow)\n\n[](https://youtu.be/6Qs3wObeWwc)\n\nPillow is Python’s leading library for image processing, offering powerful tools for editing, analyzing, and generating images. It handles various formats (PNG, JPEG, GIF, etc.) and provides operations from basic resizing to complex filters.\n\nHere’s a minimal example showing common operations:\n\n/// script\nrequires-python = \">=3.11\"\ndependencies = [\"Pillow\"]\n///\n\nfrom PIL import Image, ImageEnhance, ImageFilter\n\nasync def processimage(path: str) -> Image.Image:\n    \"\"\"Process an image with basic enhancements.\"\"\"\n    with Image.open(path) as img:\n         Convert to RGB to ensure compatibility\n        img = img.convert('RGB')\n\n         Resize maintaining aspect ratio\n        img.thumbnail((800, 800))\n\n         Apply enhancements\n        img = (ImageEnhance.Contrast(img)\n               .enhance(1.2))\n\n        return img.filter(ImageFilter.SHARPEN)\n\nif name == \"main\":\n    import asyncio\n    img = asyncio.run(processimage(\"input.jpg\"))\n    img.save(\"output.jpg\", quality=85)Copy to clipboardErrorCopied\n\nKey features and techniques you’ll learn:\n\n Image Loading and Saving: Handle various formats with automatic conversion\n Basic Operations: Resize, rotate, crop, and flip images\n Color Manipulation: Adjust brightness, contrast, and color balance\n Filters and Effects: Apply blur, sharpen, and other visual effects\n Drawing: Add text, shapes, and overlays to images\n Batch Processing: Handle multiple images efficiently\n Memory Management: Process large images without memory issues\n\nBasic Image Operations\n\nCommon operations for resizing, cropping, and rotating images:\n\nfrom PIL import Image\n\nasync def transformimage(\n    path: str,\n    size: tuple[int, int],\n    rotation: float = 0\n) -> Image.Image:\n    \"\"\"Transform image with basic operations.\"\"\"\n    with Image.open(path) as img:\n         Resize with anti-aliasing\n        img = img.resize(size, Image.LANCZOS)\n\n         Rotate around center\n        if rotation:\n            img = img.rotate(rotation, expand=True)\n\n         Auto-crop empty edges\n        img = img.crop(img.getbbox())\n\n        return imgCopy to clipboardErrorCopied\n\nColor and Enhancement\n\nAdjust image appearance with built-in enhancement tools:\n\nfrom PIL import ImageEnhance, ImageOps\n\nasync def enhanceimage(\n    img: Image.Image,\n    brightness: float = 1.0,\n    contrast: float = 1.0,\n    saturation: float = 1.0\n) -> Image.Image:\n    \"\"\"Apply color enhancements to image.\"\"\"\n    enhancers = [\n        (ImageEnhance.Brightness, brightness),\n        (ImageEnhance.Contrast, contrast),\n        (ImageEnhance.Color, saturation)\n    ]\n\n    for Enhancer, factor in enhancers:\n        if factor != 1.0:\n            img = Enhancer(img).enhance(factor)\n\n    return imgCopy to clipboardErrorCopied\n\nFilters and Effects\n\nApply visual effects and filters to images:\n\nfrom PIL import ImageFilter\n\ndef applyeffects(img: Image.Image) -> Image.Image:\n    \"\"\"Apply various filters and effects.\"\"\"\n    effects = {\n        'blur': ImageFilter.GaussianBlur(radius=2),\n        'sharpen': ImageFilter.SHARPEN,\n        'edge': ImageFilter.FINDEDGES,\n        'emboss': ImageFilter.EMBOSS\n    }\n\n    return {name: img.filter(effect)\n            for name, effect in effects.items()}Copy to clipboardErrorCopied\n\nDrawing and Text\n\nAdd text, shapes, and overlays to images:\n\nfrom PIL import Image, ImageDraw, ImageFont\n\nasync def addwatermark(\n    img: Image.Image,\n    text: str,\n    fontsize: int = 30\n) -> Image.Image:\n    \"\"\"Add text watermark to image.\"\"\"\n    draw = ImageDraw.Draw(img)\n    font = ImageFont.truetype(\"arial.ttf\", fontsize)\n\n     Calculate text size and position\n    textbbox = draw.textbbox((0, 0), text, font=font)\n    textwidth = textbbox[2] - textbbox[0]\n    textheight = textbbox[3] - textbbox[1]\n\n     Position text at bottom-right\n    x = img.width - textwidth - 10\n    y = img.height - textheight - 10\n\n     Add text with shadow\n    draw.text((x+2, y+2), text, font=font, fill='black')\n    draw.text((x, y), text, font=font, fill='white')\n\n    return imgCopy to clipboardErrorCopied\n\nMemory-Efficient Processing\n\nHandle large images without loading them entirely into memory:\n\nfrom PIL import Image\nimport os\n\nasync def processlargeimages(\n    inputdir: str,\n    outputdir: str,\n    maxsize: tuple[int, int]\n) -> None:\n    \"\"\"Process multiple large images efficiently.\"\"\"\n    os.makedirs(outputdir, existok=True)\n\n    for filename in os.listdir(inputdir):\n        if not filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n            continue\n\n        inputpath = os.path.join(inputdir, filename)\n        outputpath = os.path.join(outputdir, filename)\n\n        with Image.open(inputpath) as img:\n             Process in chunks using thumbnail\n            img.thumbnail(maxsize)\n            img.save(outputpath, optimize=True)Copy to clipboardErrorCopied\n\nPractice with these resources:\n\n Pillow Documentation: Complete API reference\n Python Image Processing Tutorial: In-depth guide\n Sample Images Dataset: Test images for practice\n\nWatch these tutorials for hands-on demonstrations:\n\n[](https://youtu.be/dkp4wUhCwR4)\n\nImage Processing with ImageMagick\n\nImageMagick is a powerful command-line tool for image manipulation, offering features beyond what’s possible with Python libraries. It’s particularly useful for:\n\n Batch processing large image collections\n Complex image transformations\n High-quality format conversion\n Creating image thumbnails\n Adding text and watermarks\n\nBasic Operations:\n\nFormat conversion\nconvert input.png output.jpg\n\nResize image (maintains aspect ratio)\nconvert input.jpg -resize 800x600 output.jpg\n\nCompress image quality\nconvert input.jpg -quality 85 output.jpg\n\nRotate image\nconvert input.jpg -rotate 90 output.jpgCopy to clipboardErrorCopied\n\nCommon Data Science Tasks:\n\nCreate thumbnails for dataset preview\nconvert input.jpg -thumbnail 200x200^ -gravity center -extent 200x200 thumb.jpg\n\nNormalize image for ML training\nconvert input.jpg -normalize -strip output.jpg\n\nExtract dominant colors\nconvert input.jpg -colors 5 -unique-colors txt:\n\nGenerate image statistics\nidentify -verbose input.jpg | grep -E \"Mean|Standard|Kurtosis\"Copy to clipboardErrorCopied\n\nBatch Processing:\n\nConvert all images in a directory\nmogrify -format jpg .png\n\nResize multiple images\nmogrify -resize 800x600 -path output/ .jpg\n\nAdd watermark to images\nfor f in .jpg; do\n    convert \"$f\" -gravity southeast -draw \"text 10,10 'Copyright'\" \"watermarked/$f\"\ndoneCopy to clipboardErrorCopied\n\nAdvanced Features:\n\nApply image effects\nconvert input.jpg -blur 0x3 blurred.jpg\nconvert input.jpg -sharpen 0x3 sharp.jpg\nconvert input.jpg -edge 1 edges.jpg\n\nCreate image montage\nmontage .jpg -geometry 200x200+2+2 montage.jpg\n\nExtract image channels\nconvert input.jpg -separate channels%d.jpg\n\nComposite images\ncomposite overlay.png -gravity center base.jpg output.jpgCopy to clipboardErrorCopied\n\nWatch this ImageMagick tutorial (16 min):\n\n[](https://youtu.be/wjcBOoReYc0)\n\nTools:\n\n Fred’s ImageMagick Scripts: Useful script collection\n ImageMagick Online Studio: Visual command builder\n\nTips:\n\n1. Use -strip to remove metadata and reduce file size\n2. Monitor memory usage with -limit memory 1GB\n3. Use -define for format-specific options\n4. Process in parallel with -parallel\n5. Use -monitor to track progress\n\nError Handling:\n\nCheck image validity\nidentify -regard-warnings input.jpg\n\nGet detailed error information\nconvert input.jpg output.jpg 2>&1 | grep -i \"error\"\n\nSet resource limits\nconvert -limit memory 1GB -limit map 2GB input.jpg output.jpgCopy to clipboardErrorCopied\n\nFor Python integration:\n\n/// script\nrequires-python = \">=3.9\"\ndependencies = [\"Wand\"]\n///\n\nfrom wand.image import Image\n\nasync def processimage(path: str) -> None:\n    \"\"\"Process image with ImageMagick via Wand.\"\"\"\n    with Image(filename=path) as img:\n         Basic operations\n        img.resize(800, 600)\n        img.normalize()\n\n         Apply effects\n        img.sharpen(radius=0, sigma=3)\n\n         Save with compression\n        img.save(filename='output.jpg')Copy to clipboardErrorCopied\n\nNote: Always install ImageMagick before using the Wand Python binding.\n\nPrevious\n\nData Transformation with dbt\n\nNext\n\nExtracting Audio and Transcripts"
  },
  {
    "title": "Geospatial Analysis with Excel",
    "filename": "Geospatial_Analysis_with_Excel.md",
    "text": "Geospatial Analysis with Excel\n----------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/49LjxNvxyVs)\n\nYou’ll learn how to create a data-driven story about coffee shop coverage in Manhattan, covering:\n\n Data Collection: Collect and scrape data for coffee shop locations and census population from various sources.\n Data Processing: Use Python libraries like geopandas for merging population data with geographic maps.\n Map Creation: Generate coverage maps using tools like QGIS and Excel to visualize coffee shop distribution and population impact.\n Visualization: Create physical, Power BI, and video visualizations to present the data effectively.\n Storytelling: Craft a narrative around coffee shop competition, including strategic insights and potential market changes.\n\nHere are links that explain how the video was made:\n\n The Making of the Manhattan Coffee Kings\n Shaping and merging maps\n Visualizing data on 3D maps\n Physical and digital 3D maps\n\nPrevious\n\nData Analysis with ChatGPT\n\nNext\n\nGeospatial Analysis with Python"
  },
  {
    "title": "AI Code Editors: GitHub Copilot",
    "filename": "AI_Code_Editors__GitHub_Copilot.md",
    "text": "AI Editor: GitHub Copilot\n-------------------------------------------------------------------------\n\nAI Code Editors like GitHub Copilot, Cursor, Windsurf, Roo Code, Cline, Continue.dev, etc. use LLMs to help you write code faster.\n\nMost are built on top of VS Code. These are now a standard tool in every developer’s toolkit.\n\nGitHub Copilot is free (as of May 2025) for 2,000 completions and 50 chats.\n\n[](https://youtu.be/n0NlxUyA7FI)\n\nYou should learn about:\n\n Code Suggestions, which is a basic feature.\n Using Chat, which lets you code in natural language.\n Changing the chat model. The free version includes Claude 3.5 Sonnet, a good coding model.\n Prompts to understand how people use AI code editors.\n\nPrevious\n\nEditor: VS Code\n\nNext\n\nPython tools: uv"
  },
  {
    "title": "Local LLMs: Ollama",
    "filename": "Local_LLMs__Ollama.md",
    "text": "Local LLM Runner: Ollama\n---------------------------------------------------------------\n\nollama is a command-line tool for running open-source large language models entirely on your own machine—no API keys, no vendor lock-in, full control over models and performance.\n\n[](https://youtu.be/Lb5D892-2HY)\n\nBasic Usage\n\nDownload Ollama for macOS, Linux, or Windows and add the binary to your PATH. See the full Docs ↗ for installation details and troubleshooting.\n\nList installed and available models\nollama list\n\nDownload/pin a specific model version\nollama pull gemma3:1b-it-qat\n\nRun a one-off prompt\nollama run gemma3:1b-it-qat 'Write a haiku about data visualization'\n\nLaunch a persistent HTTP API on port 11434\nollama serve\n\nInteract programmatically over HTTP\ncurl -X POST http://localhost:11434/api/chat \\\n     -H 'Content-Type: application/json' \\\n     -d '{\"model\":\"gemma3:1b-it-qat\",\"prompt\":\"Hello, world!\"}'Copy to clipboardErrorCopied\n\nKey Features\n\n Model management: list/pull — Install and switch among Llama 3.3, DeepSeek-R1, Gemma 3, Mistral, Phi-4, and more.\n Local inference: run — Execute prompts entirely on-device for privacy and zero latency beyond hardware limits.\n Persistent server: serve — Expose a local REST API for multi-session chats and integration into scripts or apps.\n Version pinning: pull model:tag — Pin exact model versions for reproducible demos and experiments.\n Resource control: --threads / --context — Tune CPU/GPU usage and maximum context window for performance and memory management.\n\nReal-World Use Cases\n\n Quick prototyping. Brainstorm slide decks or blog outlines offline, without worrying about API quotas: ollama run gemma-3 'Outline a slide deck on Agile best practices'\n Data privacy. Summarize sensitive documents on-device, retaining full control of your data: cat financialreport.pdf | ollama run phi-4 'Summarize the key findings'\n CI/CD integration. Validate PR descriptions or test YAML configurations in your pipeline without incurring API costs: git diff origin/main | ollama run llama2 'Check for style and clarity issues'\n Local app embedding. Power a desktop or web app via the local REST API for instant LLM features: curl -X POST http://localhost:11434/api/chat -d '{\"model\":\"mistral\",\"prompt\":\"Translate to German\"}'\n\nRead the full Ollama docs ↗ for advanced topics like custom model hosting, GPU tuning, and integrating with your development workflows.\n\nPrevious\n\nAuthentication: Google Auth\n\nNext\n\n3. Large Language Models"
  },
  {
    "title": "Local LLMs: Ollama",
    "filename": "Local_LLMs__Ollama.md",
    "text": "Local LLM Runner: Ollama\n---------------------------------------------------------------\n\nollama is a command-line tool for running open-source large language models entirely on your own machine—no API keys, no vendor lock-in, full control over models and performance.\n\n[](https://youtu.be/Lb5D892-2HY)\n\nBasic Usage\n\nDownload Ollama for macOS, Linux, or Windows and add the binary to your PATH. See the full Docs ↗ for installation details and troubleshooting.\n\nList installed and available models\nollama list\n\nDownload/pin a specific model version\nollama pull gemma3:1b-it-qat\n\nRun a one-off prompt\nollama run gemma3:1b-it-qat 'Write a haiku about data visualization'\n\nLaunch a persistent HTTP API on port 11434\nollama serve\n\nInteract programmatically over HTTP\ncurl -X POST http://localhost:11434/api/chat \\\n     -H 'Content-Type: application/json' \\\n     -d '{\"model\":\"gemma3:1b-it-qat\",\"prompt\":\"Hello, world!\"}'Copy to clipboardErrorCopied\n\nKey Features\n\n Model management: list/pull — Install and switch among Llama 3.3, DeepSeek-R1, Gemma 3, Mistral, Phi-4, and more.\n Local inference: run — Execute prompts entirely on-device for privacy and zero latency beyond hardware limits.\n Persistent server: serve — Expose a local REST API for multi-session chats and integration into scripts or apps.\n Version pinning: pull model:tag — Pin exact model versions for reproducible demos and experiments.\n Resource control: --threads / --context — Tune CPU/GPU usage and maximum context window for performance and memory management.\n\nReal-World Use Cases\n\n Quick prototyping. Brainstorm slide decks or blog outlines offline, without worrying about API quotas: ollama run gemma-3 'Outline a slide deck on Agile best practices'\n Data privacy. Summarize sensitive documents on-device, retaining full control of your data: cat financialreport.pdf | ollama run phi-4 'Summarize the key findings'\n CI/CD integration. Validate PR descriptions or test YAML configurations in your pipeline without incurring API costs: git diff origin/main | ollama run llama2 'Check for style and clarity issues'\n Local app embedding. Power a desktop or web app via the local REST API for instant LLM features: curl -X POST http://localhost:11434/api/chat -d '{\"model\":\"mistral\",\"prompt\":\"Translate to German\"}'\n\nRead the full Ollama docs ↗ for advanced topics like custom model hosting, GPU tuning, and integrating with your development workflows.\n\nPrevious\n\nAuthentication: Google Auth\n\nNext\n\n3. Large Language Models"
  },
  {
    "title": "Local LLMs: Ollama",
    "filename": "Local_LLMs__Ollama.md",
    "text": "Local LLM Runner: Ollama\n---------------------------------------------------------------\n\nollama is a command-line tool for running open-source large language models entirely on your own machine—no API keys, no vendor lock-in, full control over models and performance.\n\n[](https://youtu.be/Lb5D892-2HY)\n\nBasic Usage\n\nDownload Ollama for macOS, Linux, or Windows and add the binary to your PATH. See the full Docs ↗ for installation details and troubleshooting.\n\nList installed and available models\nollama list\n\nDownload/pin a specific model version\nollama pull gemma3:1b-it-qat\n\nRun a one-off prompt\nollama run gemma3:1b-it-qat 'Write a haiku about data visualization'\n\nLaunch a persistent HTTP API on port 11434\nollama serve\n\nInteract programmatically over HTTP\ncurl -X POST http://localhost:11434/api/chat \\\n     -H 'Content-Type: application/json' \\\n     -d '{\"model\":\"gemma3:1b-it-qat\",\"prompt\":\"Hello, world!\"}'Copy to clipboardErrorCopied\n\nKey Features\n\n Model management: list/pull — Install and switch among Llama 3.3, DeepSeek-R1, Gemma 3, Mistral, Phi-4, and more.\n Local inference: run — Execute prompts entirely on-device for privacy and zero latency beyond hardware limits.\n Persistent server: serve — Expose a local REST API for multi-session chats and integration into scripts or apps.\n Version pinning: pull model:tag — Pin exact model versions for reproducible demos and experiments.\n Resource control: --threads / --context — Tune CPU/GPU usage and maximum context window for performance and memory management.\n\nReal-World Use Cases\n\n Quick prototyping. Brainstorm slide decks or blog outlines offline, without worrying about API quotas: ollama run gemma-3 'Outline a slide deck on Agile best practices'\n Data privacy. Summarize sensitive documents on-device, retaining full control of your data: cat financialreport.pdf | ollama run phi-4 'Summarize the key findings'\n CI/CD integration. Validate PR descriptions or test YAML configurations in your pipeline without incurring API costs: git diff origin/main | ollama run llama2 'Check for style and clarity issues'\n Local app embedding. Power a desktop or web app via the local REST API for instant LLM features: curl -X POST http://localhost:11434/api/chat -d '{\"model\":\"mistral\",\"prompt\":\"Translate to German\"}'\n\nRead the full Ollama docs ↗ for advanced topics like custom model hosting, GPU tuning, and integrating with your development workflows.\n\nPrevious\n\nAuthentication: Google Auth\n\nNext\n\n3. Large Language Models"
  },
  {
    "title": "Local LLMs: Ollama",
    "filename": "Local_LLMs__Ollama.md",
    "text": "Local LLM Runner: Ollama\n---------------------------------------------------------------\n\nollama is a command-line tool for running open-source large language models entirely on your own machine—no API keys, no vendor lock-in, full control over models and performance.\n\n[](https://youtu.be/Lb5D892-2HY)\n\nBasic Usage\n\nDownload Ollama for macOS, Linux, or Windows and add the binary to your PATH. See the full Docs ↗ for installation details and troubleshooting.\n\nList installed and available models\nollama list\n\nDownload/pin a specific model version\nollama pull gemma3:1b-it-qat\n\nRun a one-off prompt\nollama run gemma3:1b-it-qat 'Write a haiku about data visualization'\n\nLaunch a persistent HTTP API on port 11434\nollama serve\n\nInteract programmatically over HTTP\ncurl -X POST http://localhost:11434/api/chat \\\n     -H 'Content-Type: application/json' \\\n     -d '{\"model\":\"gemma3:1b-it-qat\",\"prompt\":\"Hello, world!\"}'Copy to clipboardErrorCopied\n\nKey Features\n\n Model management: list/pull — Install and switch among Llama 3.3, DeepSeek-R1, Gemma 3, Mistral, Phi-4, and more.\n Local inference: run — Execute prompts entirely on-device for privacy and zero latency beyond hardware limits.\n Persistent server: serve — Expose a local REST API for multi-session chats and integration into scripts or apps.\n Version pinning: pull model:tag — Pin exact model versions for reproducible demos and experiments.\n Resource control: --threads / --context — Tune CPU/GPU usage and maximum context window for performance and memory management.\n\nReal-World Use Cases\n\n Quick prototyping. Brainstorm slide decks or blog outlines offline, without worrying about API quotas: ollama run gemma-3 'Outline a slide deck on Agile best practices'\n Data privacy. Summarize sensitive documents on-device, retaining full control of your data: cat financialreport.pdf | ollama run phi-4 'Summarize the key findings'\n CI/CD integration. Validate PR descriptions or test YAML configurations in your pipeline without incurring API costs: git diff origin/main | ollama run llama2 'Check for style and clarity issues'\n Local app embedding. Power a desktop or web app via the local REST API for instant LLM features: curl -X POST http://localhost:11434/api/chat -d '{\"model\":\"mistral\",\"prompt\":\"Translate to German\"}'\n\nRead the full Ollama docs ↗ for advanced topics like custom model hosting, GPU tuning, and integrating with your development workflows.\n\nPrevious\n\nAuthentication: Google Auth\n\nNext\n\n3. Large Language Models"
  },
  {
    "title": "Version Control: Git, GitHub",
    "filename": "Version_Control__Git,_GitHub.md",
    "text": "Version Control: Git, GitHub\n-------------------------------------------------------------------\n\nGit is the de facto standard for version control of software (and sometimes, data as well). It’s a system that keeps track of changes you make to files and folders. It allows you to revert to a previous state, compare changes, etc. It’s a central tool in any developer’s workflow.\n\nGitHub is the most popular hosting service for Git repositories. It’s a website that shows your code, allows you to collaborate with others, and provides many useful tools for developers.\n\nWatch these introductory videos to learn the basics of Git and GitHub (98 min):\n\n[](https://youtu.be/HVsySz-h9r4)\n\n[](https://youtu.be/RGOj5yH7evk)\n\nEssential Git Commands:\n\nRepository Setup\ngit init                    Create new repo\ngit clone url               Clone existing repo\ngit remote add origin url   Connect to remote\n\nBasic Workflow\ngit status                  Check status\ngit add .                   Stage all changes\ngit commit -m \"message\"     Commit changes\ngit push origin main        Push to remote\n\nBranching\ngit branch                  List branches\ngit checkout -b feature     Create/switch branch\ngit merge feature           Merge branch\ngit rebase main             Rebase on main\n\nHistory\ngit log --oneline           View history\ngit diff commit1 commit2    Compare commits\ngit blame file              Show who changed whatCopy to clipboardErrorCopied\n\nBest Practices:\n\n1. Commit Messages\n\n   \n    Good commit message format\n   type(scope): summary\n\n   Detailed description of changes.\n\n    Examples\n   feat(api): add user authentication\n   fix(db): handle null values in queryCopy to clipboardErrorCopied\n   \n2. Branching Strategy\n\n    main: Production code\n    develop: Integration branch\n    feature/\\: New features\n    hotfix/\\: Emergency fixes\n3. Code Review\n\n    Keep PRs small (<400 lines)\n    Use draft PRs for WIP\n    Review your own code first\n    Respond to all comments\n\nEssential Tools\n\n GitHub Desktop: GUI client\n GitLens: VS Code extension\n gh: GitHub CLI\n pre-commit: Git hooks\n\nPrevious\n\nDatabase: SQLite\n\nNext\n\n2. Deployment Tools"
  },
  {
    "title": "Containers: Docker, Podman",
    "filename": "Containers__Docker,_Podman.md",
    "text": "Containers: Docker, Podman\n------------------------------------------------------------------\n\nDocker and Podman are containerization tools that package your application and its dependencies into a standardized unit for software development and deployment.\n\nDocker is the industry standard. Podman is compatible with Docker and has better security (and a slightly more open license). In this course, we recommend Podman but Docker works in the same way.\n\nInitialize the container engine:\n\npodman machine init\npodman machine startCopy to clipboardErrorCopied\n\nCommon Operations. (You can use docker instead of podman in the same way.)\n\nPull an image\npodman pull python:3.11-slim\n\nRun a container\npodman run -it python:3.11-slim\n\nList containers\npodman ps -a\n\nStop container\npodman stop containerid\n\nScan image for vulnerabilities\npodman scan myapp:latest\n\nRemove container\npodman rm containerid\n\nRemove all stopped containers\npodman container pruneCopy to clipboardErrorCopied\n\nYou can create a Dockerfile to build a container image. Here’s a sample Dockerfile that converts a Python script into a container image.\n\nFROM python:3.11-slim\nSet working directory\nWORKDIR /app\nTypically, you would use COPY . . to copy files from the host machine,\nbut here we're just using a simple script.\nRUN echo 'print(\"Hello, world!\")' > app.py\nRun the script\nCMD [\"python\", \"app.py\"]Copy to clipboardErrorCopied\n\nTo build, run, and deploy the container, run these commands:\n\nCreate an account on https://hub.docker.com/ and then login\npodman login docker.io\n\nBuild and run the container\npodman build -t py-hello .\npodman run -it py-hello\n\nPush the container to Docker Hub. Replace $DOCKERHUBUSERNAME with your Docker Hub username.\npodman push py-hello:latest docker.io/$DOCKERHUBUSERNAME/py-hello\n\nPush adding a specific tag, e.g. dev\nTAG=dev podman push py-hello docker.io/$DOCKERHUBUSERNAME/py-hello:$TAGCopy to clipboardErrorCopied\n\nTools:\n\n Dive: Explore image layers\n Skopeo: Work with container images\n Trivy: Security scanner\n\n[](https://youtu.be/YXfA5O5Mr18)\n\n[](https://youtu.be/gAkwW2tuIqE)\n\n Optional: For Windows, see WSL 2 with Docker getting started\n\nPrevious\n\nCI/CD: GitHub Actions\n\nNext\n\nDevContainers: GitHub Codespaces"
  },
  {
    "title": "Scraping with Excel",
    "filename": "Scraping_with_Excel.md",
    "text": "Scraping with Excel\n-------------------------------------------------------------------\n\n[](https://youtu.be/OCl6UdpmzRQ)\n\nYou’ll learn how to import tables on the web using Excel, covering:\n\n Data Import from Web: Use the query feature in Excel to scrape data from websites.\n Establishing Web Connections: Connect Excel to a web page using a URL.\n Using Query Editor: Navigate the query editor to view and manage web data tables.\n Loading Data: Load data from the web into Excel for further manipulation.\n Data Transformation: Remove unnecessary columns and transform data as needed.\n Applying Transformations: Track applied steps in the sequence for reproducibility.\n Refreshing Data: Refresh the imported data to get the latest updates from the web.\n\nHere are links used in the video:\n\n Chennai Weather Forecast\n Excel Scraping Workbook\n\nIf you use Excel on Mac, the process is a bit different. See Importing External Data Into Excel on Mac.\n\nPrevious\n\n4. Data Sourcing\n\nNext\n\nScraping with Google Sheets"
  },
  {
    "title": "JavaScript tools: npx",
    "filename": "JavaScript_tools__npx.md",
    "text": "JavaScript tools: npx\n------------------------------------------------------\n\nnpx is a command-line tool that comes with npm (Node Package Manager) and allows you to execute npm package binaries and run one-off commands without installing them globally. It’s essential for modern JavaScript development and data science workflows.\n\nFor data scientists, npx is useful when:\n\n Running JavaScript-based data visualization tools\n Converting notebooks and documents\n Testing and formatting code\n Running development servers\n\nHere are common npx commands:\n\nRun a package without installing\nnpx http-server .                 Start a local web server\nnpx prettier --write .            Format code or docs\nnpx eslint .                      Lint JavaScript\nnpx typescript-node script.ts     Run TypeScript directly\nnpx esbuild app.js                Bundle JavaScript\nnpx jsdoc .                       Generate JavaScript docs\n\nRun specific versions\nnpx prettier@3.2 --write .         Use prettier 3.2\n\nExecute remote scripts (use with caution!)\nnpx github:user/repo             Run from GitHubCopy to clipboardErrorCopied\n\nWatch this introduction to npx (6 min):\n\n[](https://youtu.be/55WaAoZVtQ)\n\nPrevious\n\nPython tools: uv\n\nNext\n\nUnicode"
  },
  {
    "title": "Extracting Audio and Transcripts",
    "filename": "Extracting_Audio_and_Transcripts.md",
    "text": "Extracting Audio and Transcripts\n----------------------------------------------------------------------------------------------------------\n\nMedia Processing: FFmpeg\n-----------------------------------------------------------------------------------------\n\nFFmpeg is the standard command-line tool for processing video and audio files. It’s essential for data scientists working with media files for:\n\n Extracting audio/video for machine learning\n Converting formats for web deployment\n Creating visualizations and presentations\n Processing large media datasets\n\nBasic Operations:\n\nBasic conversion\nffmpeg -i input.mp4 output.avi\n\nExtract audio\nffmpeg -i input.mp4 -vn output.mp3\n\nConvert format without re-encoding\nffmpeg -i input.mkv -c copy output.mp4\n\nHigh quality encoding (crf: 0-51, lower is better)\nffmpeg -i input.mp4 -preset slower -crf 18 output.mp4Copy to clipboardErrorCopied\n\nCommon Data Science Tasks:\n\nExtract frames for computer vision\nffmpeg -i input.mp4 -vf \"fps=1\" frames%04d.png     1 frame per second\nffmpeg -i input.mp4 -vf \"select='eq(n,0)'\" -vframes 1 firstframe.jpg\n\nCreate video from image sequence\nffmpeg -r 1/5 -i img%03d.png -c:v libx264 -vf fps=25 output.mp4\n\nExtract audio for speech recognition\nffmpeg -i input.mp4 -ar 16000 -ac 1 audio.wav       16kHz mono\n\nTrim video/audio for training data\nffmpeg -ss 00:01:00 -i input.mp4 -t 00:00:30 -c copy clip.mp4Copy to clipboardErrorCopied\n\nProcessing Multiple Files:\n\nConcatenate videos (first create files.txt with list of files)\necho \"file 'input1.mp4'\nfile 'input2.mp4'\" > files.txt\nffmpeg -f concat -i files.txt -c copy output.mp4\n\nBatch process with shell loop\nfor f in .mp4; do\n    ffmpeg -i \"$f\" -vn \"audio/${f%.mp4}.wav\"\ndoneCopy to clipboardErrorCopied\n\nData Analysis Features:\n\nGet media file information\nffprobe -v quiet -printformat json -showformat -showstreams input.mp4\n\nDisplay frame metadata\nffprobe -v quiet -printformat json -showframes input.mp4\n\nGenerate video thumbnails\nffmpeg -i input.mp4 -vf \"thumbnail\" -frames:v 1 thumb.jpgCopy to clipboardErrorCopied\n\nWatch this introduction to FFmpeg (12 min):\n\n[](https://youtu.be/MPV7JXTWPWI)\n\nTools:\n\n ffmpeg.lav.io: Interactive command builder\n FFmpeg Explorer: Visual FFmpeg command generator\n FFmpeg Buddy: Simple command generator\n\nTips:\n\n1. Use -c copy when possible to avoid re-encoding\n2. Monitor progress with -progress pipe:1\n3. Use -hidebanner to reduce output verbosity\n4. Test commands with small clips first\n5. Use hardware acceleration when available (-hwaccel auto)\n\nError Handling:\n\nValidate file before processing\nffprobe input.mp4 2>&1 | grep \"Invalid\"\n\nContinue on errors in batch processing\nffmpeg -i input.mp4 output.mp4 -xerror\n\nGet detailed error information\nffmpeg -v error -i input.mp4 2>&1 | grep -A2 \"Error\"Copy to clipboardErrorCopied\n\nMedia tools: yt-dlp\n-------------------------------------------------------------------------------\n\nyt-dlp is a feature-rich command-line tool for downloading audio/video from thousands of sites. It’s particularly useful for extracting audio and transcripts from videos.\n\nInstall using your package manager:\n\nmacOS\nbrew install yt-dlp\n\nLinux\ncurl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /.local/bin/yt-dlp\nchmod a+rx /.local/bin/yt-dlp\n\nWindows\nwinget install yt-dlpCopy to clipboardErrorCopied\n\nCommon operations for extracting audio and transcripts:\n\nDownload audio only at lowest quality suitable for speech\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       \"https://www.youtube.com/watch?v=VIDEOID\"\n\nDownload auto-generated subtitles\nyt-dlp --write-auto-sub \\\n       --skip-download \\\n       --sub-format \"srt\" \\\n       \"https://www.youtube.com/watch?v=VIDEOID\"\n\nDownload both audio and subtitles with custom output template\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       --write-auto-sub \\\n       --sub-format \"srt\" \\\n       -o \"%(title)s.%(ext)s\" \\\n       \"https://www.youtube.com/watch?v=VIDEOID\"\n\nDownload entire playlist's audio\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       -o \"%(playlistindex)s-%(title)s.%(ext)s\" \\\n       \"https://www.youtube.com/playlist?list=PLAYLISTID\"Copy to clipboardErrorCopied\n\nFor Python integration:\n\n/// script\nrequires-python = \">=3.9\"\ndependencies = [\"yt-dlp\"]\n///\n\nimport ytdlp\n\ndef downloadaudio(url: str) -> None:\n    \"\"\"Download audio at speech-optimized quality.\"\"\"\n    ydlopts = {\n        'format': 'ba[abr<50]/worstaudio',\n        'postprocessors': [{\n            'key': 'FFmpegExtractAudio',\n            'preferredcodec': 'mp3',\n            'preferredquality': '32'\n        }]\n    }\n\n    with ytdlp.YoutubeDL(ydlopts) as ydl:\n        ydl.download([url])\n\nExample usage\ndownloadaudio('https://www.youtube.com/watch?v=VIDEOID')Copy to clipboardErrorCopied\n\nTools:\n\n ffmpeg: Required for audio extraction and conversion\n whisper: Can be used with yt-dlp for speech-to-text\n gallery-dl: Alternative for image-focused sites\n\nNote: Always respect copyright and terms of service when downloading content.\n\nWhisper transcription\n------------------------------------------------------------------------------------\n\nFaster Whisper is a highly optimized implementation of OpenAI’s Whisper model, offering up to 4x faster transcription while using less memory.\n\nYou can install it via:\n\n pip install faster-whisper\n Download Windows Standalone\n\nHere’s a basic usage example:\n\nfaster-whisper-xxl \"video.mp4\" --model medium --language enCopy to clipboardErrorCopied\n\nHere’s my recommendation for transcribing videos. This saves the output in JSON as well as SRT format in the source directory.\n\nfaster-whisper-xxl --printprogress --outputdir source --batchrecursive \\\n                   --checkfiles --standard --outputformat json srt \\\n                   --model medium --language en $FILECopy to clipboardErrorCopied\n\n --model: The OpenAI Whisper model to use. You can choose from:\n  + tiny: Fastest but least accurate\n  + base: Good for simple audio\n  + small: Balanced speed/accuracy\n  + medium: Recommended default\n  + large-v3: Most accurate but slowest\n --outputformat: The output format to use. You can pick multiple formats from:\n  + json: Has the most detailed information including timing, text, quality, etc.\n  + srt: A popular subtitle format. You can use this in YouTube, for example.\n  + vtt: A modern subtitle format.\n  + txt: Just the text transcript\n --outputdir: The directory to save the output files. source indicates the source directory, i.e. where the input $FILE is\n --language: The language of the input file. If you don’t specify it, it analyzes the first 30 seconds to auto-detect. You can speed it up by specifying it.\n\nRun faster-whisper-xxl --help for more options.\n\nGemini transcription\n----------------------------------------------------------------------------------\n\nThe Gemini models from Google are notable in two ways:\n\n1. They have a huge input context window. Gemini 2.0 Flash can accept 1M tokens, for example.\n2. They can handle audio input.\n\nThis allows us to use Gemini to transcribe audio files.\n\nLLMs are not good at transcribing audio faithfully. They tend to correct errors and meander from what was said. But they are intelligent. That enables a few powerful workflows. Here are some examples:\n\n1. Transcribe into other languages. Gemini will handle the transcription and translation in a single step.\n2. Summarize audio transcripts. For example, convert a podcast into a tutorial, or a meeting recording into actions.\n3. Legal Proceeding Analysis. Extract case citations, dates, and other details from a legal debate.\n4. Medical Consultation Summary. Extract treatments, medications, details of next visit, etc. from a medical consultation.\n\nHere’s how to use Gemini to transcribe audio files.\n\n1. Get a Gemini API key from Google AI Studio.\n2. Set the GEMINIAPIKEY environment variable to the API key.\n3. Set the MP3FILE environment variable to the path of the MP3 file you want to transcribe.\n4. Run this code:\n\n   \n   curl -X POST https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-002:streamGenerateContent?alt=sse \\\n     -H \"X-Goog-API-Key: $GEMINIAPIKEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d \"$(cat << EOF\n   {\n     \"contents\": [\n       {\n         \"role\": \"user\",\n         \"parts\": [\n           {\n             \"inlinedata\": {\n               \"mimetype\": \"audio/mp3\",\n               \"data\": \"$(base64 --wrap=0 $MP3FILE)\"\n             }\n           },\n           {\"text\": \"Transcribe this\"}\n         ]\n       }\n     ]\n   }\n   EOF\n   )\"Copy to clipboardErrorCopied\n   \n\nPrevious\n\nTransforming Images\n\nNext\n\n6. Data Analysis"
  },
  {
    "title": "Extracting Audio and Transcripts",
    "filename": "Extracting_Audio_and_Transcripts.md",
    "text": "Extracting Audio and Transcripts\n----------------------------------------------------------------------------------------------------------\n\nMedia Processing: FFmpeg\n-----------------------------------------------------------------------------------------\n\nFFmpeg is the standard command-line tool for processing video and audio files. It’s essential for data scientists working with media files for:\n\n Extracting audio/video for machine learning\n Converting formats for web deployment\n Creating visualizations and presentations\n Processing large media datasets\n\nBasic Operations:\n\nBasic conversion\nffmpeg -i input.mp4 output.avi\n\nExtract audio\nffmpeg -i input.mp4 -vn output.mp3\n\nConvert format without re-encoding\nffmpeg -i input.mkv -c copy output.mp4\n\nHigh quality encoding (crf: 0-51, lower is better)\nffmpeg -i input.mp4 -preset slower -crf 18 output.mp4Copy to clipboardErrorCopied\n\nCommon Data Science Tasks:\n\nExtract frames for computer vision\nffmpeg -i input.mp4 -vf \"fps=1\" frames%04d.png     1 frame per second\nffmpeg -i input.mp4 -vf \"select='eq(n,0)'\" -vframes 1 firstframe.jpg\n\nCreate video from image sequence\nffmpeg -r 1/5 -i img%03d.png -c:v libx264 -vf fps=25 output.mp4\n\nExtract audio for speech recognition\nffmpeg -i input.mp4 -ar 16000 -ac 1 audio.wav       16kHz mono\n\nTrim video/audio for training data\nffmpeg -ss 00:01:00 -i input.mp4 -t 00:00:30 -c copy clip.mp4Copy to clipboardErrorCopied\n\nProcessing Multiple Files:\n\nConcatenate videos (first create files.txt with list of files)\necho \"file 'input1.mp4'\nfile 'input2.mp4'\" > files.txt\nffmpeg -f concat -i files.txt -c copy output.mp4\n\nBatch process with shell loop\nfor f in .mp4; do\n    ffmpeg -i \"$f\" -vn \"audio/${f%.mp4}.wav\"\ndoneCopy to clipboardErrorCopied\n\nData Analysis Features:\n\nGet media file information\nffprobe -v quiet -printformat json -showformat -showstreams input.mp4\n\nDisplay frame metadata\nffprobe -v quiet -printformat json -showframes input.mp4\n\nGenerate video thumbnails\nffmpeg -i input.mp4 -vf \"thumbnail\" -frames:v 1 thumb.jpgCopy to clipboardErrorCopied\n\nWatch this introduction to FFmpeg (12 min):\n\n[](https://youtu.be/MPV7JXTWPWI)\n\nTools:\n\n ffmpeg.lav.io: Interactive command builder\n FFmpeg Explorer: Visual FFmpeg command generator\n FFmpeg Buddy: Simple command generator\n\nTips:\n\n1. Use -c copy when possible to avoid re-encoding\n2. Monitor progress with -progress pipe:1\n3. Use -hidebanner to reduce output verbosity\n4. Test commands with small clips first\n5. Use hardware acceleration when available (-hwaccel auto)\n\nError Handling:\n\nValidate file before processing\nffprobe input.mp4 2>&1 | grep \"Invalid\"\n\nContinue on errors in batch processing\nffmpeg -i input.mp4 output.mp4 -xerror\n\nGet detailed error information\nffmpeg -v error -i input.mp4 2>&1 | grep -A2 \"Error\"Copy to clipboardErrorCopied\n\nMedia tools: yt-dlp\n-------------------------------------------------------------------------------\n\nyt-dlp is a feature-rich command-line tool for downloading audio/video from thousands of sites. It’s particularly useful for extracting audio and transcripts from videos.\n\nInstall using your package manager:\n\nmacOS\nbrew install yt-dlp\n\nLinux\ncurl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /.local/bin/yt-dlp\nchmod a+rx /.local/bin/yt-dlp\n\nWindows\nwinget install yt-dlpCopy to clipboardErrorCopied\n\nCommon operations for extracting audio and transcripts:\n\nDownload audio only at lowest quality suitable for speech\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       \"https://www.youtube.com/watch?v=VIDEOID\"\n\nDownload auto-generated subtitles\nyt-dlp --write-auto-sub \\\n       --skip-download \\\n       --sub-format \"srt\" \\\n       \"https://www.youtube.com/watch?v=VIDEOID\"\n\nDownload both audio and subtitles with custom output template\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       --write-auto-sub \\\n       --sub-format \"srt\" \\\n       -o \"%(title)s.%(ext)s\" \\\n       \"https://www.youtube.com/watch?v=VIDEOID\"\n\nDownload entire playlist's audio\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       -o \"%(playlistindex)s-%(title)s.%(ext)s\" \\\n       \"https://www.youtube.com/playlist?list=PLAYLISTID\"Copy to clipboardErrorCopied\n\nFor Python integration:\n\n/// script\nrequires-python = \">=3.9\"\ndependencies = [\"yt-dlp\"]\n///\n\nimport ytdlp\n\ndef downloadaudio(url: str) -> None:\n    \"\"\"Download audio at speech-optimized quality.\"\"\"\n    ydlopts = {\n        'format': 'ba[abr<50]/worstaudio',\n        'postprocessors': [{\n            'key': 'FFmpegExtractAudio',\n            'preferredcodec': 'mp3',\n            'preferredquality': '32'\n        }]\n    }\n\n    with ytdlp.YoutubeDL(ydlopts) as ydl:\n        ydl.download([url])\n\nExample usage\ndownloadaudio('https://www.youtube.com/watch?v=VIDEOID')Copy to clipboardErrorCopied\n\nTools:\n\n ffmpeg: Required for audio extraction and conversion\n whisper: Can be used with yt-dlp for speech-to-text\n gallery-dl: Alternative for image-focused sites\n\nNote: Always respect copyright and terms of service when downloading content.\n\nWhisper transcription\n------------------------------------------------------------------------------------\n\nFaster Whisper is a highly optimized implementation of OpenAI’s Whisper model, offering up to 4x faster transcription while using less memory.\n\nYou can install it via:\n\n pip install faster-whisper\n Download Windows Standalone\n\nHere’s a basic usage example:\n\nfaster-whisper-xxl \"video.mp4\" --model medium --language enCopy to clipboardErrorCopied\n\nHere’s my recommendation for transcribing videos. This saves the output in JSON as well as SRT format in the source directory.\n\nfaster-whisper-xxl --printprogress --outputdir source --batchrecursive \\\n                   --checkfiles --standard --outputformat json srt \\\n                   --model medium --language en $FILECopy to clipboardErrorCopied\n\n --model: The OpenAI Whisper model to use. You can choose from:\n  + tiny: Fastest but least accurate\n  + base: Good for simple audio\n  + small: Balanced speed/accuracy\n  + medium: Recommended default\n  + large-v3: Most accurate but slowest\n --outputformat: The output format to use. You can pick multiple formats from:\n  + json: Has the most detailed information including timing, text, quality, etc.\n  + srt: A popular subtitle format. You can use this in YouTube, for example.\n  + vtt: A modern subtitle format.\n  + txt: Just the text transcript\n --outputdir: The directory to save the output files. source indicates the source directory, i.e. where the input $FILE is\n --language: The language of the input file. If you don’t specify it, it analyzes the first 30 seconds to auto-detect. You can speed it up by specifying it.\n\nRun faster-whisper-xxl --help for more options.\n\nGemini transcription\n----------------------------------------------------------------------------------\n\nThe Gemini models from Google are notable in two ways:\n\n1. They have a huge input context window. Gemini 2.0 Flash can accept 1M tokens, for example.\n2. They can handle audio input.\n\nThis allows us to use Gemini to transcribe audio files.\n\nLLMs are not good at transcribing audio faithfully. They tend to correct errors and meander from what was said. But they are intelligent. That enables a few powerful workflows. Here are some examples:\n\n1. Transcribe into other languages. Gemini will handle the transcription and translation in a single step.\n2. Summarize audio transcripts. For example, convert a podcast into a tutorial, or a meeting recording into actions.\n3. Legal Proceeding Analysis. Extract case citations, dates, and other details from a legal debate.\n4. Medical Consultation Summary. Extract treatments, medications, details of next visit, etc. from a medical consultation.\n\nHere’s how to use Gemini to transcribe audio files.\n\n1. Get a Gemini API key from Google AI Studio.\n2. Set the GEMINIAPIKEY environment variable to the API key.\n3. Set the MP3FILE environment variable to the path of the MP3 file you want to transcribe.\n4. Run this code:\n\n   \n   curl -X POST https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-002:streamGenerateContent?alt=sse \\\n     -H \"X-Goog-API-Key: $GEMINIAPIKEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d \"$(cat << EOF\n   {\n     \"contents\": [\n       {\n         \"role\": \"user\",\n         \"parts\": [\n           {\n             \"inlinedata\": {\n               \"mimetype\": \"audio/mp3\",\n               \"data\": \"$(base64 --wrap=0 $MP3FILE)\"\n             }\n           },\n           {\"text\": \"Transcribe this\"}\n         ]\n       }\n     ]\n   }\n   EOF\n   )\"Copy to clipboardErrorCopied\n   \n\nPrevious\n\nTransforming Images\n\nNext\n\n6. Data Analysis"
  },
  {
    "title": "Extracting Audio and Transcripts",
    "filename": "Extracting_Audio_and_Transcripts.md",
    "text": "Extracting Audio and Transcripts\n----------------------------------------------------------------------------------------------------------\n\nMedia Processing: FFmpeg\n-----------------------------------------------------------------------------------------\n\nFFmpeg is the standard command-line tool for processing video and audio files. It’s essential for data scientists working with media files for:\n\n Extracting audio/video for machine learning\n Converting formats for web deployment\n Creating visualizations and presentations\n Processing large media datasets\n\nBasic Operations:\n\nBasic conversion\nffmpeg -i input.mp4 output.avi\n\nExtract audio\nffmpeg -i input.mp4 -vn output.mp3\n\nConvert format without re-encoding\nffmpeg -i input.mkv -c copy output.mp4\n\nHigh quality encoding (crf: 0-51, lower is better)\nffmpeg -i input.mp4 -preset slower -crf 18 output.mp4Copy to clipboardErrorCopied\n\nCommon Data Science Tasks:\n\nExtract frames for computer vision\nffmpeg -i input.mp4 -vf \"fps=1\" frames%04d.png     1 frame per second\nffmpeg -i input.mp4 -vf \"select='eq(n,0)'\" -vframes 1 firstframe.jpg\n\nCreate video from image sequence\nffmpeg -r 1/5 -i img%03d.png -c:v libx264 -vf fps=25 output.mp4\n\nExtract audio for speech recognition\nffmpeg -i input.mp4 -ar 16000 -ac 1 audio.wav       16kHz mono\n\nTrim video/audio for training data\nffmpeg -ss 00:01:00 -i input.mp4 -t 00:00:30 -c copy clip.mp4Copy to clipboardErrorCopied\n\nProcessing Multiple Files:\n\nConcatenate videos (first create files.txt with list of files)\necho \"file 'input1.mp4'\nfile 'input2.mp4'\" > files.txt\nffmpeg -f concat -i files.txt -c copy output.mp4\n\nBatch process with shell loop\nfor f in .mp4; do\n    ffmpeg -i \"$f\" -vn \"audio/${f%.mp4}.wav\"\ndoneCopy to clipboardErrorCopied\n\nData Analysis Features:\n\nGet media file information\nffprobe -v quiet -printformat json -showformat -showstreams input.mp4\n\nDisplay frame metadata\nffprobe -v quiet -printformat json -showframes input.mp4\n\nGenerate video thumbnails\nffmpeg -i input.mp4 -vf \"thumbnail\" -frames:v 1 thumb.jpgCopy to clipboardErrorCopied\n\nWatch this introduction to FFmpeg (12 min):\n\n[](https://youtu.be/MPV7JXTWPWI)\n\nTools:\n\n ffmpeg.lav.io: Interactive command builder\n FFmpeg Explorer: Visual FFmpeg command generator\n FFmpeg Buddy: Simple command generator\n\nTips:\n\n1. Use -c copy when possible to avoid re-encoding\n2. Monitor progress with -progress pipe:1\n3. Use -hidebanner to reduce output verbosity\n4. Test commands with small clips first\n5. Use hardware acceleration when available (-hwaccel auto)\n\nError Handling:\n\nValidate file before processing\nffprobe input.mp4 2>&1 | grep \"Invalid\"\n\nContinue on errors in batch processing\nffmpeg -i input.mp4 output.mp4 -xerror\n\nGet detailed error information\nffmpeg -v error -i input.mp4 2>&1 | grep -A2 \"Error\"Copy to clipboardErrorCopied\n\nMedia tools: yt-dlp\n-------------------------------------------------------------------------------\n\nyt-dlp is a feature-rich command-line tool for downloading audio/video from thousands of sites. It’s particularly useful for extracting audio and transcripts from videos.\n\nInstall using your package manager:\n\nmacOS\nbrew install yt-dlp\n\nLinux\ncurl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /.local/bin/yt-dlp\nchmod a+rx /.local/bin/yt-dlp\n\nWindows\nwinget install yt-dlpCopy to clipboardErrorCopied\n\nCommon operations for extracting audio and transcripts:\n\nDownload audio only at lowest quality suitable for speech\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       \"https://www.youtube.com/watch?v=VIDEOID\"\n\nDownload auto-generated subtitles\nyt-dlp --write-auto-sub \\\n       --skip-download \\\n       --sub-format \"srt\" \\\n       \"https://www.youtube.com/watch?v=VIDEOID\"\n\nDownload both audio and subtitles with custom output template\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       --write-auto-sub \\\n       --sub-format \"srt\" \\\n       -o \"%(title)s.%(ext)s\" \\\n       \"https://www.youtube.com/watch?v=VIDEOID\"\n\nDownload entire playlist's audio\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       -o \"%(playlistindex)s-%(title)s.%(ext)s\" \\\n       \"https://www.youtube.com/playlist?list=PLAYLISTID\"Copy to clipboardErrorCopied\n\nFor Python integration:\n\n/// script\nrequires-python = \">=3.9\"\ndependencies = [\"yt-dlp\"]\n///\n\nimport ytdlp\n\ndef downloadaudio(url: str) -> None:\n    \"\"\"Download audio at speech-optimized quality.\"\"\"\n    ydlopts = {\n        'format': 'ba[abr<50]/worstaudio',\n        'postprocessors': [{\n            'key': 'FFmpegExtractAudio',\n            'preferredcodec': 'mp3',\n            'preferredquality': '32'\n        }]\n    }\n\n    with ytdlp.YoutubeDL(ydlopts) as ydl:\n        ydl.download([url])\n\nExample usage\ndownloadaudio('https://www.youtube.com/watch?v=VIDEOID')Copy to clipboardErrorCopied\n\nTools:\n\n ffmpeg: Required for audio extraction and conversion\n whisper: Can be used with yt-dlp for speech-to-text\n gallery-dl: Alternative for image-focused sites\n\nNote: Always respect copyright and terms of service when downloading content.\n\nWhisper transcription\n------------------------------------------------------------------------------------\n\nFaster Whisper is a highly optimized implementation of OpenAI’s Whisper model, offering up to 4x faster transcription while using less memory.\n\nYou can install it via:\n\n pip install faster-whisper\n Download Windows Standalone\n\nHere’s a basic usage example:\n\nfaster-whisper-xxl \"video.mp4\" --model medium --language enCopy to clipboardErrorCopied\n\nHere’s my recommendation for transcribing videos. This saves the output in JSON as well as SRT format in the source directory.\n\nfaster-whisper-xxl --printprogress --outputdir source --batchrecursive \\\n                   --checkfiles --standard --outputformat json srt \\\n                   --model medium --language en $FILECopy to clipboardErrorCopied\n\n --model: The OpenAI Whisper model to use. You can choose from:\n  + tiny: Fastest but least accurate\n  + base: Good for simple audio\n  + small: Balanced speed/accuracy\n  + medium: Recommended default\n  + large-v3: Most accurate but slowest\n --outputformat: The output format to use. You can pick multiple formats from:\n  + json: Has the most detailed information including timing, text, quality, etc.\n  + srt: A popular subtitle format. You can use this in YouTube, for example.\n  + vtt: A modern subtitle format.\n  + txt: Just the text transcript\n --outputdir: The directory to save the output files. source indicates the source directory, i.e. where the input $FILE is\n --language: The language of the input file. If you don’t specify it, it analyzes the first 30 seconds to auto-detect. You can speed it up by specifying it.\n\nRun faster-whisper-xxl --help for more options.\n\nGemini transcription\n----------------------------------------------------------------------------------\n\nThe Gemini models from Google are notable in two ways:\n\n1. They have a huge input context window. Gemini 2.0 Flash can accept 1M tokens, for example.\n2. They can handle audio input.\n\nThis allows us to use Gemini to transcribe audio files.\n\nLLMs are not good at transcribing audio faithfully. They tend to correct errors and meander from what was said. But they are intelligent. That enables a few powerful workflows. Here are some examples:\n\n1. Transcribe into other languages. Gemini will handle the transcription and translation in a single step.\n2. Summarize audio transcripts. For example, convert a podcast into a tutorial, or a meeting recording into actions.\n3. Legal Proceeding Analysis. Extract case citations, dates, and other details from a legal debate.\n4. Medical Consultation Summary. Extract treatments, medications, details of next visit, etc. from a medical consultation.\n\nHere’s how to use Gemini to transcribe audio files.\n\n1. Get a Gemini API key from Google AI Studio.\n2. Set the GEMINIAPIKEY environment variable to the API key.\n3. Set the MP3FILE environment variable to the path of the MP3 file you want to transcribe.\n4. Run this code:\n\n   \n   curl -X POST https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-002:streamGenerateContent?alt=sse \\\n     -H \"X-Goog-API-Key: $GEMINIAPIKEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d \"$(cat << EOF\n   {\n     \"contents\": [\n       {\n         \"role\": \"user\",\n         \"parts\": [\n           {\n             \"inlinedata\": {\n               \"mimetype\": \"audio/mp3\",\n               \"data\": \"$(base64 --wrap=0 $MP3FILE)\"\n             }\n           },\n           {\"text\": \"Transcribe this\"}\n         ]\n       }\n     ]\n   }\n   EOF\n   )\"Copy to clipboardErrorCopied\n   \n\nPrevious\n\nTransforming Images\n\nNext\n\n6. Data Analysis"
  },
  {
    "title": "Extracting Audio and Transcripts",
    "filename": "Extracting_Audio_and_Transcripts.md",
    "text": "Extracting Audio and Transcripts\n----------------------------------------------------------------------------------------------------------\n\nMedia Processing: FFmpeg\n-----------------------------------------------------------------------------------------\n\nFFmpeg is the standard command-line tool for processing video and audio files. It’s essential for data scientists working with media files for:\n\n Extracting audio/video for machine learning\n Converting formats for web deployment\n Creating visualizations and presentations\n Processing large media datasets\n\nBasic Operations:\n\nBasic conversion\nffmpeg -i input.mp4 output.avi\n\nExtract audio\nffmpeg -i input.mp4 -vn output.mp3\n\nConvert format without re-encoding\nffmpeg -i input.mkv -c copy output.mp4\n\nHigh quality encoding (crf: 0-51, lower is better)\nffmpeg -i input.mp4 -preset slower -crf 18 output.mp4Copy to clipboardErrorCopied\n\nCommon Data Science Tasks:\n\nExtract frames for computer vision\nffmpeg -i input.mp4 -vf \"fps=1\" frames%04d.png     1 frame per second\nffmpeg -i input.mp4 -vf \"select='eq(n,0)'\" -vframes 1 firstframe.jpg\n\nCreate video from image sequence\nffmpeg -r 1/5 -i img%03d.png -c:v libx264 -vf fps=25 output.mp4\n\nExtract audio for speech recognition\nffmpeg -i input.mp4 -ar 16000 -ac 1 audio.wav       16kHz mono\n\nTrim video/audio for training data\nffmpeg -ss 00:01:00 -i input.mp4 -t 00:00:30 -c copy clip.mp4Copy to clipboardErrorCopied\n\nProcessing Multiple Files:\n\nConcatenate videos (first create files.txt with list of files)\necho \"file 'input1.mp4'\nfile 'input2.mp4'\" > files.txt\nffmpeg -f concat -i files.txt -c copy output.mp4\n\nBatch process with shell loop\nfor f in .mp4; do\n    ffmpeg -i \"$f\" -vn \"audio/${f%.mp4}.wav\"\ndoneCopy to clipboardErrorCopied\n\nData Analysis Features:\n\nGet media file information\nffprobe -v quiet -printformat json -showformat -showstreams input.mp4\n\nDisplay frame metadata\nffprobe -v quiet -printformat json -showframes input.mp4\n\nGenerate video thumbnails\nffmpeg -i input.mp4 -vf \"thumbnail\" -frames:v 1 thumb.jpgCopy to clipboardErrorCopied\n\nWatch this introduction to FFmpeg (12 min):\n\n[](https://youtu.be/MPV7JXTWPWI)\n\nTools:\n\n ffmpeg.lav.io: Interactive command builder\n FFmpeg Explorer: Visual FFmpeg command generator\n FFmpeg Buddy: Simple command generator\n\nTips:\n\n1. Use -c copy when possible to avoid re-encoding\n2. Monitor progress with -progress pipe:1\n3. Use -hidebanner to reduce output verbosity\n4. Test commands with small clips first\n5. Use hardware acceleration when available (-hwaccel auto)\n\nError Handling:\n\nValidate file before processing\nffprobe input.mp4 2>&1 | grep \"Invalid\"\n\nContinue on errors in batch processing\nffmpeg -i input.mp4 output.mp4 -xerror\n\nGet detailed error information\nffmpeg -v error -i input.mp4 2>&1 | grep -A2 \"Error\"Copy to clipboardErrorCopied\n\nMedia tools: yt-dlp\n-------------------------------------------------------------------------------\n\nyt-dlp is a feature-rich command-line tool for downloading audio/video from thousands of sites. It’s particularly useful for extracting audio and transcripts from videos.\n\nInstall using your package manager:\n\nmacOS\nbrew install yt-dlp\n\nLinux\ncurl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /.local/bin/yt-dlp\nchmod a+rx /.local/bin/yt-dlp\n\nWindows\nwinget install yt-dlpCopy to clipboardErrorCopied\n\nCommon operations for extracting audio and transcripts:\n\nDownload audio only at lowest quality suitable for speech\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       \"https://www.youtube.com/watch?v=VIDEOID\"\n\nDownload auto-generated subtitles\nyt-dlp --write-auto-sub \\\n       --skip-download \\\n       --sub-format \"srt\" \\\n       \"https://www.youtube.com/watch?v=VIDEOID\"\n\nDownload both audio and subtitles with custom output template\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       --write-auto-sub \\\n       --sub-format \"srt\" \\\n       -o \"%(title)s.%(ext)s\" \\\n       \"https://www.youtube.com/watch?v=VIDEOID\"\n\nDownload entire playlist's audio\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       -o \"%(playlistindex)s-%(title)s.%(ext)s\" \\\n       \"https://www.youtube.com/playlist?list=PLAYLISTID\"Copy to clipboardErrorCopied\n\nFor Python integration:\n\n/// script\nrequires-python = \">=3.9\"\ndependencies = [\"yt-dlp\"]\n///\n\nimport ytdlp\n\ndef downloadaudio(url: str) -> None:\n    \"\"\"Download audio at speech-optimized quality.\"\"\"\n    ydlopts = {\n        'format': 'ba[abr<50]/worstaudio',\n        'postprocessors': [{\n            'key': 'FFmpegExtractAudio',\n            'preferredcodec': 'mp3',\n            'preferredquality': '32'\n        }]\n    }\n\n    with ytdlp.YoutubeDL(ydlopts) as ydl:\n        ydl.download([url])\n\nExample usage\ndownloadaudio('https://www.youtube.com/watch?v=VIDEOID')Copy to clipboardErrorCopied\n\nTools:\n\n ffmpeg: Required for audio extraction and conversion\n whisper: Can be used with yt-dlp for speech-to-text\n gallery-dl: Alternative for image-focused sites\n\nNote: Always respect copyright and terms of service when downloading content.\n\nWhisper transcription\n------------------------------------------------------------------------------------\n\nFaster Whisper is a highly optimized implementation of OpenAI’s Whisper model, offering up to 4x faster transcription while using less memory.\n\nYou can install it via:\n\n pip install faster-whisper\n Download Windows Standalone\n\nHere’s a basic usage example:\n\nfaster-whisper-xxl \"video.mp4\" --model medium --language enCopy to clipboardErrorCopied\n\nHere’s my recommendation for transcribing videos. This saves the output in JSON as well as SRT format in the source directory.\n\nfaster-whisper-xxl --printprogress --outputdir source --batchrecursive \\\n                   --checkfiles --standard --outputformat json srt \\\n                   --model medium --language en $FILECopy to clipboardErrorCopied\n\n --model: The OpenAI Whisper model to use. You can choose from:\n  + tiny: Fastest but least accurate\n  + base: Good for simple audio\n  + small: Balanced speed/accuracy\n  + medium: Recommended default\n  + large-v3: Most accurate but slowest\n --outputformat: The output format to use. You can pick multiple formats from:\n  + json: Has the most detailed information including timing, text, quality, etc.\n  + srt: A popular subtitle format. You can use this in YouTube, for example.\n  + vtt: A modern subtitle format.\n  + txt: Just the text transcript\n --outputdir: The directory to save the output files. source indicates the source directory, i.e. where the input $FILE is\n --language: The language of the input file. If you don’t specify it, it analyzes the first 30 seconds to auto-detect. You can speed it up by specifying it.\n\nRun faster-whisper-xxl --help for more options.\n\nGemini transcription\n----------------------------------------------------------------------------------\n\nThe Gemini models from Google are notable in two ways:\n\n1. They have a huge input context window. Gemini 2.0 Flash can accept 1M tokens, for example.\n2. They can handle audio input.\n\nThis allows us to use Gemini to transcribe audio files.\n\nLLMs are not good at transcribing audio faithfully. They tend to correct errors and meander from what was said. But they are intelligent. That enables a few powerful workflows. Here are some examples:\n\n1. Transcribe into other languages. Gemini will handle the transcription and translation in a single step.\n2. Summarize audio transcripts. For example, convert a podcast into a tutorial, or a meeting recording into actions.\n3. Legal Proceeding Analysis. Extract case citations, dates, and other details from a legal debate.\n4. Medical Consultation Summary. Extract treatments, medications, details of next visit, etc. from a medical consultation.\n\nHere’s how to use Gemini to transcribe audio files.\n\n1. Get a Gemini API key from Google AI Studio.\n2. Set the GEMINIAPIKEY environment variable to the API key.\n3. Set the MP3FILE environment variable to the path of the MP3 file you want to transcribe.\n4. Run this code:\n\n   \n   curl -X POST https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-002:streamGenerateContent?alt=sse \\\n     -H \"X-Goog-API-Key: $GEMINIAPIKEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d \"$(cat << EOF\n   {\n     \"contents\": [\n       {\n         \"role\": \"user\",\n         \"parts\": [\n           {\n             \"inlinedata\": {\n               \"mimetype\": \"audio/mp3\",\n               \"data\": \"$(base64 --wrap=0 $MP3FILE)\"\n             }\n           },\n           {\"text\": \"Transcribe this\"}\n         ]\n       }\n     ]\n   }\n   EOF\n   )\"Copy to clipboardErrorCopied\n   \n\nPrevious\n\nTransforming Images\n\nNext\n\n6. Data Analysis"
  },
  {
    "title": "Extracting Audio and Transcripts",
    "filename": "Extracting_Audio_and_Transcripts.md",
    "text": "Extracting Audio and Transcripts\n----------------------------------------------------------------------------------------------------------\n\nMedia Processing: FFmpeg\n-----------------------------------------------------------------------------------------\n\nFFmpeg is the standard command-line tool for processing video and audio files. It’s essential for data scientists working with media files for:\n\n Extracting audio/video for machine learning\n Converting formats for web deployment\n Creating visualizations and presentations\n Processing large media datasets\n\nBasic Operations:\n\nBasic conversion\nffmpeg -i input.mp4 output.avi\n\nExtract audio\nffmpeg -i input.mp4 -vn output.mp3\n\nConvert format without re-encoding\nffmpeg -i input.mkv -c copy output.mp4\n\nHigh quality encoding (crf: 0-51, lower is better)\nffmpeg -i input.mp4 -preset slower -crf 18 output.mp4Copy to clipboardErrorCopied\n\nCommon Data Science Tasks:\n\nExtract frames for computer vision\nffmpeg -i input.mp4 -vf \"fps=1\" frames%04d.png     1 frame per second\nffmpeg -i input.mp4 -vf \"select='eq(n,0)'\" -vframes 1 firstframe.jpg\n\nCreate video from image sequence\nffmpeg -r 1/5 -i img%03d.png -c:v libx264 -vf fps=25 output.mp4\n\nExtract audio for speech recognition\nffmpeg -i input.mp4 -ar 16000 -ac 1 audio.wav       16kHz mono\n\nTrim video/audio for training data\nffmpeg -ss 00:01:00 -i input.mp4 -t 00:00:30 -c copy clip.mp4Copy to clipboardErrorCopied\n\nProcessing Multiple Files:\n\nConcatenate videos (first create files.txt with list of files)\necho \"file 'input1.mp4'\nfile 'input2.mp4'\" > files.txt\nffmpeg -f concat -i files.txt -c copy output.mp4\n\nBatch process with shell loop\nfor f in .mp4; do\n    ffmpeg -i \"$f\" -vn \"audio/${f%.mp4}.wav\"\ndoneCopy to clipboardErrorCopied\n\nData Analysis Features:\n\nGet media file information\nffprobe -v quiet -printformat json -showformat -showstreams input.mp4\n\nDisplay frame metadata\nffprobe -v quiet -printformat json -showframes input.mp4\n\nGenerate video thumbnails\nffmpeg -i input.mp4 -vf \"thumbnail\" -frames:v 1 thumb.jpgCopy to clipboardErrorCopied\n\nWatch this introduction to FFmpeg (12 min):\n\n[](https://youtu.be/MPV7JXTWPWI)\n\nTools:\n\n ffmpeg.lav.io: Interactive command builder\n FFmpeg Explorer: Visual FFmpeg command generator\n FFmpeg Buddy: Simple command generator\n\nTips:\n\n1. Use -c copy when possible to avoid re-encoding\n2. Monitor progress with -progress pipe:1\n3. Use -hidebanner to reduce output verbosity\n4. Test commands with small clips first\n5. Use hardware acceleration when available (-hwaccel auto)\n\nError Handling:\n\nValidate file before processing\nffprobe input.mp4 2>&1 | grep \"Invalid\"\n\nContinue on errors in batch processing\nffmpeg -i input.mp4 output.mp4 -xerror\n\nGet detailed error information\nffmpeg -v error -i input.mp4 2>&1 | grep -A2 \"Error\"Copy to clipboardErrorCopied\n\nMedia tools: yt-dlp\n-------------------------------------------------------------------------------\n\nyt-dlp is a feature-rich command-line tool for downloading audio/video from thousands of sites. It’s particularly useful for extracting audio and transcripts from videos.\n\nInstall using your package manager:\n\nmacOS\nbrew install yt-dlp\n\nLinux\ncurl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /.local/bin/yt-dlp\nchmod a+rx /.local/bin/yt-dlp\n\nWindows\nwinget install yt-dlpCopy to clipboardErrorCopied\n\nCommon operations for extracting audio and transcripts:\n\nDownload audio only at lowest quality suitable for speech\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       \"https://www.youtube.com/watch?v=VIDEOID\"\n\nDownload auto-generated subtitles\nyt-dlp --write-auto-sub \\\n       --skip-download \\\n       --sub-format \"srt\" \\\n       \"https://www.youtube.com/watch?v=VIDEOID\"\n\nDownload both audio and subtitles with custom output template\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       --write-auto-sub \\\n       --sub-format \"srt\" \\\n       -o \"%(title)s.%(ext)s\" \\\n       \"https://www.youtube.com/watch?v=VIDEOID\"\n\nDownload entire playlist's audio\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       -o \"%(playlistindex)s-%(title)s.%(ext)s\" \\\n       \"https://www.youtube.com/playlist?list=PLAYLISTID\"Copy to clipboardErrorCopied\n\nFor Python integration:\n\n/// script\nrequires-python = \">=3.9\"\ndependencies = [\"yt-dlp\"]\n///\n\nimport ytdlp\n\ndef downloadaudio(url: str) -> None:\n    \"\"\"Download audio at speech-optimized quality.\"\"\"\n    ydlopts = {\n        'format': 'ba[abr<50]/worstaudio',\n        'postprocessors': [{\n            'key': 'FFmpegExtractAudio',\n            'preferredcodec': 'mp3',\n            'preferredquality': '32'\n        }]\n    }\n\n    with ytdlp.YoutubeDL(ydlopts) as ydl:\n        ydl.download([url])\n\nExample usage\ndownloadaudio('https://www.youtube.com/watch?v=VIDEOID')Copy to clipboardErrorCopied\n\nTools:\n\n ffmpeg: Required for audio extraction and conversion\n whisper: Can be used with yt-dlp for speech-to-text\n gallery-dl: Alternative for image-focused sites\n\nNote: Always respect copyright and terms of service when downloading content.\n\nWhisper transcription\n------------------------------------------------------------------------------------\n\nFaster Whisper is a highly optimized implementation of OpenAI’s Whisper model, offering up to 4x faster transcription while using less memory.\n\nYou can install it via:\n\n pip install faster-whisper\n Download Windows Standalone\n\nHere’s a basic usage example:\n\nfaster-whisper-xxl \"video.mp4\" --model medium --language enCopy to clipboardErrorCopied\n\nHere’s my recommendation for transcribing videos. This saves the output in JSON as well as SRT format in the source directory.\n\nfaster-whisper-xxl --printprogress --outputdir source --batchrecursive \\\n                   --checkfiles --standard --outputformat json srt \\\n                   --model medium --language en $FILECopy to clipboardErrorCopied\n\n --model: The OpenAI Whisper model to use. You can choose from:\n  + tiny: Fastest but least accurate\n  + base: Good for simple audio\n  + small: Balanced speed/accuracy\n  + medium: Recommended default\n  + large-v3: Most accurate but slowest\n --outputformat: The output format to use. You can pick multiple formats from:\n  + json: Has the most detailed information including timing, text, quality, etc.\n  + srt: A popular subtitle format. You can use this in YouTube, for example.\n  + vtt: A modern subtitle format.\n  + txt: Just the text transcript\n --outputdir: The directory to save the output files. source indicates the source directory, i.e. where the input $FILE is\n --language: The language of the input file. If you don’t specify it, it analyzes the first 30 seconds to auto-detect. You can speed it up by specifying it.\n\nRun faster-whisper-xxl --help for more options.\n\nGemini transcription\n----------------------------------------------------------------------------------\n\nThe Gemini models from Google are notable in two ways:\n\n1. They have a huge input context window. Gemini 2.0 Flash can accept 1M tokens, for example.\n2. They can handle audio input.\n\nThis allows us to use Gemini to transcribe audio files.\n\nLLMs are not good at transcribing audio faithfully. They tend to correct errors and meander from what was said. But they are intelligent. That enables a few powerful workflows. Here are some examples:\n\n1. Transcribe into other languages. Gemini will handle the transcription and translation in a single step.\n2. Summarize audio transcripts. For example, convert a podcast into a tutorial, or a meeting recording into actions.\n3. Legal Proceeding Analysis. Extract case citations, dates, and other details from a legal debate.\n4. Medical Consultation Summary. Extract treatments, medications, details of next visit, etc. from a medical consultation.\n\nHere’s how to use Gemini to transcribe audio files.\n\n1. Get a Gemini API key from Google AI Studio.\n2. Set the GEMINIAPIKEY environment variable to the API key.\n3. Set the MP3FILE environment variable to the path of the MP3 file you want to transcribe.\n4. Run this code:\n\n   \n   curl -X POST https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-002:streamGenerateContent?alt=sse \\\n     -H \"X-Goog-API-Key: $GEMINIAPIKEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d \"$(cat << EOF\n   {\n     \"contents\": [\n       {\n         \"role\": \"user\",\n         \"parts\": [\n           {\n             \"inlinedata\": {\n               \"mimetype\": \"audio/mp3\",\n               \"data\": \"$(base64 --wrap=0 $MP3FILE)\"\n             }\n           },\n           {\"text\": \"Transcribe this\"}\n         ]\n       }\n     ]\n   }\n   EOF\n   )\"Copy to clipboardErrorCopied\n   \n\nPrevious\n\nTransforming Images\n\nNext\n\n6. Data Analysis"
  },
  {
    "title": "Embeddings",
    "filename": "Embeddings.md",
    "text": "Embeddings: OpenAI and Local Models\n-----------------------------------------------------------------------------------------\n\nEmbedding models convert text into a list of numbers. These are like a map of text in numerical form. Each number represents a feature, and similar texts will have numbers close to each other. So, if the numbers are similar, the text they represent mean something similar.\n\nThis is useful because text similarity is important in many common problems:\n\n1. Search. Find similar documents to a query.\n2. Classification. Classify text into categories.\n3. Clustering. Group similar items into clusters.\n4. Anomaly Detection. Find an unusual piece of text.\n\nYou can run embedding models locally or using an API. Local models are better for privacy and cost. APIs are better for scale and quality.\n\n| Feature | Local Models | API |\n| --- | --- | --- |\n| Privacy | High | Dependent on provider |\n| Cost | High setup, low after that | Pay-as-you-go |\n| Scale | Limited by local resources | Easily scales with demand |\n| Quality | Varies by model | Typically high |\n\nThe Massive Text Embedding Benchmark (MTEB) provides comprehensive comparisons of embedding models. These models are compared on several parameters, but here are some key ones to look at:\n\n1. Rank. Higher ranked models have higher quality.\n2. Memory Usage. Lower is better (for similar ranks). It costs less and is faster to run.\n3. Embedding Dimensions. Lower is better. This is the number of numbers in the array. Smaller dimensions are cheaper to store.\n4. Max Tokens. Higher is better. This is the number of input tokens (words) the model can take in a single input.\n5. Look for higher scores in the columns for Classification, Clustering, Summarization, etc. based on your needs.\n\nLocal Embeddings\n\n[](https://youtu.be/OATCgQtNX2o)\n\nHere’s a minimal example using a local embedding model:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"sentence-transformers\",\n\"httpx\",\n\"numpy\",\n]\n///\n\nfrom sentencetransformers import SentenceTransformer\nimport numpy as np\n\nmodel = SentenceTransformer('BAAI/bge-base-en-v1.5')   A small, high quality model\n\nasync def embed(text: str) -> list[float]:\n    \"\"\"Get embedding vector for text using local model.\"\"\"\n    return model.encode(text).tolist()\n\nasync def getsimilarity(text1: str, text2: str) -> float:\n    \"\"\"Calculate cosine similarity between two texts.\"\"\"\n    emb1 = np.array(await embed(text1))\n    emb2 = np.array(await embed(text2))\n    return float(np.dot(emb1, emb2) / (np.linalg.norm(emb1)  np.linalg.norm(emb2)))\n\nasync def main():\n    print(await getsimilarity(\"Apple\", \"Orange\"))\n    print(await getsimilarity(\"Apple\", \"Lightning\"))\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nNote the getsimilarity function. It uses a Cosine Similarity to calculate the similarity between two embeddings.\n\nOpenAI Embeddings\n\nFor comparison, here’s how to use OpenAI’s API with direct HTTP calls. Replace the embed function in the earlier script:\n\nimport os\nimport httpx\n\nasync def embed(text: str) -> list[float]:\n    \"\"\"Get embedding vector for text using OpenAI's API.\"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            \"https://api.openai.com/v1/embeddings\",\n            headers={\"Authorization\": f\"Bearer {os.environ['OPENAIAPIKEY']}\"},\n            json={\"model\": \"text-embedding-3-small\", \"input\": text}\n        )\n        return response.json()[\"data\"][0][\"embedding\"]Copy to clipboardErrorCopied\n\nNOTE: You need to set the OPENAIAPIKEY environment variable for this to work.\n\nPrevious\n\nVision Models\n\nNext\n\nMultimodal Embeddings"
  },
  {
    "title": "Embeddings",
    "filename": "Embeddings.md",
    "text": "Embeddings: OpenAI and Local Models\n-----------------------------------------------------------------------------------------\n\nEmbedding models convert text into a list of numbers. These are like a map of text in numerical form. Each number represents a feature, and similar texts will have numbers close to each other. So, if the numbers are similar, the text they represent mean something similar.\n\nThis is useful because text similarity is important in many common problems:\n\n1. Search. Find similar documents to a query.\n2. Classification. Classify text into categories.\n3. Clustering. Group similar items into clusters.\n4. Anomaly Detection. Find an unusual piece of text.\n\nYou can run embedding models locally or using an API. Local models are better for privacy and cost. APIs are better for scale and quality.\n\n| Feature | Local Models | API |\n| --- | --- | --- |\n| Privacy | High | Dependent on provider |\n| Cost | High setup, low after that | Pay-as-you-go |\n| Scale | Limited by local resources | Easily scales with demand |\n| Quality | Varies by model | Typically high |\n\nThe Massive Text Embedding Benchmark (MTEB) provides comprehensive comparisons of embedding models. These models are compared on several parameters, but here are some key ones to look at:\n\n1. Rank. Higher ranked models have higher quality.\n2. Memory Usage. Lower is better (for similar ranks). It costs less and is faster to run.\n3. Embedding Dimensions. Lower is better. This is the number of numbers in the array. Smaller dimensions are cheaper to store.\n4. Max Tokens. Higher is better. This is the number of input tokens (words) the model can take in a single input.\n5. Look for higher scores in the columns for Classification, Clustering, Summarization, etc. based on your needs.\n\nLocal Embeddings\n\n[](https://youtu.be/OATCgQtNX2o)\n\nHere’s a minimal example using a local embedding model:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"sentence-transformers\",\n\"httpx\",\n\"numpy\",\n]\n///\n\nfrom sentencetransformers import SentenceTransformer\nimport numpy as np\n\nmodel = SentenceTransformer('BAAI/bge-base-en-v1.5')   A small, high quality model\n\nasync def embed(text: str) -> list[float]:\n    \"\"\"Get embedding vector for text using local model.\"\"\"\n    return model.encode(text).tolist()\n\nasync def getsimilarity(text1: str, text2: str) -> float:\n    \"\"\"Calculate cosine similarity between two texts.\"\"\"\n    emb1 = np.array(await embed(text1))\n    emb2 = np.array(await embed(text2))\n    return float(np.dot(emb1, emb2) / (np.linalg.norm(emb1)  np.linalg.norm(emb2)))\n\nasync def main():\n    print(await getsimilarity(\"Apple\", \"Orange\"))\n    print(await getsimilarity(\"Apple\", \"Lightning\"))\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nNote the getsimilarity function. It uses a Cosine Similarity to calculate the similarity between two embeddings.\n\nOpenAI Embeddings\n\nFor comparison, here’s how to use OpenAI’s API with direct HTTP calls. Replace the embed function in the earlier script:\n\nimport os\nimport httpx\n\nasync def embed(text: str) -> list[float]:\n    \"\"\"Get embedding vector for text using OpenAI's API.\"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            \"https://api.openai.com/v1/embeddings\",\n            headers={\"Authorization\": f\"Bearer {os.environ['OPENAIAPIKEY']}\"},\n            json={\"model\": \"text-embedding-3-small\", \"input\": text}\n        )\n        return response.json()[\"data\"][0][\"embedding\"]Copy to clipboardErrorCopied\n\nNOTE: You need to set the OPENAIAPIKEY environment variable for this to work.\n\nPrevious\n\nVision Models\n\nNext\n\nMultimodal Embeddings"
  },
  {
    "title": "Embeddings",
    "filename": "Embeddings.md",
    "text": "Embeddings: OpenAI and Local Models\n-----------------------------------------------------------------------------------------\n\nEmbedding models convert text into a list of numbers. These are like a map of text in numerical form. Each number represents a feature, and similar texts will have numbers close to each other. So, if the numbers are similar, the text they represent mean something similar.\n\nThis is useful because text similarity is important in many common problems:\n\n1. Search. Find similar documents to a query.\n2. Classification. Classify text into categories.\n3. Clustering. Group similar items into clusters.\n4. Anomaly Detection. Find an unusual piece of text.\n\nYou can run embedding models locally or using an API. Local models are better for privacy and cost. APIs are better for scale and quality.\n\n| Feature | Local Models | API |\n| --- | --- | --- |\n| Privacy | High | Dependent on provider |\n| Cost | High setup, low after that | Pay-as-you-go |\n| Scale | Limited by local resources | Easily scales with demand |\n| Quality | Varies by model | Typically high |\n\nThe Massive Text Embedding Benchmark (MTEB) provides comprehensive comparisons of embedding models. These models are compared on several parameters, but here are some key ones to look at:\n\n1. Rank. Higher ranked models have higher quality.\n2. Memory Usage. Lower is better (for similar ranks). It costs less and is faster to run.\n3. Embedding Dimensions. Lower is better. This is the number of numbers in the array. Smaller dimensions are cheaper to store.\n4. Max Tokens. Higher is better. This is the number of input tokens (words) the model can take in a single input.\n5. Look for higher scores in the columns for Classification, Clustering, Summarization, etc. based on your needs.\n\nLocal Embeddings\n\n[](https://youtu.be/OATCgQtNX2o)\n\nHere’s a minimal example using a local embedding model:\n\n/// script\nrequires-python = \"==3.12\"\ndependencies = [\n\"sentence-transformers\",\n\"httpx\",\n\"numpy\",\n]\n///\n\nfrom sentencetransformers import SentenceTransformer\nimport numpy as np\n\nmodel = SentenceTransformer('BAAI/bge-base-en-v1.5')   A small, high quality model\n\nasync def embed(text: str) -> list[float]:\n    \"\"\"Get embedding vector for text using local model.\"\"\"\n    return model.encode(text).tolist()\n\nasync def getsimilarity(text1: str, text2: str) -> float:\n    \"\"\"Calculate cosine similarity between two texts.\"\"\"\n    emb1 = np.array(await embed(text1))\n    emb2 = np.array(await embed(text2))\n    return float(np.dot(emb1, emb2) / (np.linalg.norm(emb1)  np.linalg.norm(emb2)))\n\nasync def main():\n    print(await getsimilarity(\"Apple\", \"Orange\"))\n    print(await getsimilarity(\"Apple\", \"Lightning\"))\n\nif name == \"main\":\n    import asyncio\n    asyncio.run(main())Copy to clipboardErrorCopied\n\nNote the getsimilarity function. It uses a Cosine Similarity to calculate the similarity between two embeddings.\n\nOpenAI Embeddings\n\nFor comparison, here’s how to use OpenAI’s API with direct HTTP calls. Replace the embed function in the earlier script:\n\nimport os\nimport httpx\n\nasync def embed(text: str) -> list[float]:\n    \"\"\"Get embedding vector for text using OpenAI's API.\"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            \"https://api.openai.com/v1/embeddings\",\n            headers={\"Authorization\": f\"Bearer {os.environ['OPENAIAPIKEY']}\"},\n            json={\"model\": \"text-embedding-3-small\", \"input\": text}\n        )\n        return response.json()[\"data\"][0][\"embedding\"]Copy to clipboardErrorCopied\n\nNOTE: You need to set the OPENAIAPIKEY environment variable for this to work.\n\nPrevious\n\nVision Models\n\nNext\n\nMultimodal Embeddings"
  },
  {
    "title": "Visualizing Animated Data with Flourish",
    "filename": "Visualizing_Animated_Data_with_Flourish.md",
    "text": "Visualizing Animated Data with Flourish\n-------------------------------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/JrnIu5Bm8i4)\n\nPrevious\n\nVisualizing Animated Data with PowerPoint\n\nNext\n\nVisualizing Network Data with Kumu"
  },
  {
    "title": "Editor: VS Code",
    "filename": "Editor__VS_Code.md",
    "text": "Editor: VS Code\n---------------------------------------------\n\nYour editor is the most important tool in your arsenal. That’s where you’ll spend most of your time. Make sure you’re comfortable with it.\n\nVisual Studio Code is, by far, the most popular code editor today. According to the 2024 StackOverflow Survey almost 75% of developers use it. We recommend you learn it well. Even if you use another editor, you’ll be working with others who use it, and it’s a good idea to have some exposure.\n\nWatch these introductory videos (35 min) from the Visual Studio Docs to get started:\n\n Getting Started: Set up and learn the basics of Visual Studio Code. (7 min)\n Code Editing: Learn how to edit and run code in VS Code. (3 min)\n Productivity Tips: Become a VS Code power user with these productivity tips. (4 min)\n Personalize: Personalize VS Code to make it yours with themes. (2 min)\n Extensions: Add features, themes, and more to VS Code with extensions! (4 min)\n Debugging: Get started with debugging in VS Code. (6 min)\n Version Control: Learn how to use Git version control in VS Code. (3 min)\n Customize: Learn how to customize your settings and keyboard shortcuts in VS Code. (6 min)\n\nPrevious\n\n1. Development Tools\n\nNext\n\nAI Code Editors: GitHub Copilot"
  },
  {
    "title": "Scraping IMDb with JavaScript",
    "filename": "Scraping_IMDb_with_JavaScript.md",
    "text": "Scraping IMDb with JavaScript\n-------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/YVIKZqZIcCo)\n\nYou’ll learn how to scrape the IMDb Top 250 movies directly in the browser using JavaScript on the Chrome DevTools, covering:\n\n Access Developer Tools: Use F12 or right-click > Inspect to open developer tools in Chrome or Edge.\n Inspect Elements: Identify and inspect HTML elements using the Elements tab.\n Query Selectors: Use document.querySelectorAll and document.querySelector to find elements by CSS class.\n Extract Text Content: Retrieve text content from elements using JavaScript.\n Functional Programming: Apply map\n  and arrow functions\n  for concise data processing.\n Data Structuring: Collect and format data into an array of arrays.\n Copying Data: Use the copy function to transfer data to the clipboard.\n Convert to Spreadsheet: Use online tools to convert JSON data to CSV or Excel format.\n Text Manipulation: Perform text splitting and cleaning in Excel for final data formatting.\n\nHere are links and references:\n\n IMDB Top 250 movies\n Learn about Chrome Devtools\n\nPrevious\n\nBBC Weather API with Python\n\nNext\n\nNominatim API with Python"
  },
  {
    "title": "Data Analysis with SQL",
    "filename": "Data_Analysis_with_SQL.md",
    "text": "Data Analysis with SQL\n----------------------------------------------------------------------------\n\n[](https://youtu.be/Xn3QkYrThbI)\n\nYou’ll learn how to perform data analysis using SQL (via Python), covering:\n\n Database Connection: How to connect to a MySQL database using SQLAlchemy and Pandas.\n SQL Queries: Execute SQL queries directly from a Python environment to retrieve and analyze data.\n Counting Rows: Use SQL to count the number of rows in a table.\n User Activity Analysis: Query and identify top users by post count.\n Post Concentration: Determine if a small percentage of users contribute the majority of posts using SQL aggregation.\n Correlation Calculation: Calculate the Pearson correlation coefficient between user attributes such as age and reputation.\n Regression Analysis: Compute the regression slope to understand the relationship between views and reputation.\n Handling Large Data: Perform calculations on large datasets by fetching aggregated values from the database rather than entire datasets.\n Statistical Analysis in SQL: Use SQL as a tool for statistical analysis, demonstrating its power beyond simple data retrieval.\n Leveraging AI: Use ChatGPT to generate SQL queries and Python code, enhancing productivity and accuracy.\n\nHere are the links used in the video:\n\n Data analysis with databases - Notebook\n SQLZoo has simple interactive tutorials to learn SQL\n Stats database that has an anonymized dump of stats.stackexchange.com\n Pandas readsql\n SQLAlchemy docs\n\nPrevious\n\nData Analysis with Python\n\nNext\n\nData Analysis with Datasette"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  },
  {
    "title": "Tools in Data Science",
    "filename": "Tools_in_Data_Science.md",
    "text": "Geospatial Analysis with Python\n----------------------------------------------------------------------------------------------------------\n\n[](https://youtu.be/mqayAJt-yE)\n\nYou’ll learn how to perform geospatial analysis for location-based decision making, covering:\n\n Distance Calculation: Compute distances between various store locations and a reference point, such as the Empire State Building.\n Data Visualization: Visualize store locations on a map using Python libraries like Folium.\n Store Density Analysis: Determine the number of stores within a specified radius.\n Proximity Analysis: Identify the closest and farthest stores from a specific location.\n Decision Making: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n Jupyter Notebook\n Learn about the pandas package and video\n Learn about the numpy package and video\n Learn about the folium package and video\n Learn about the geopy package and video"
  }
]